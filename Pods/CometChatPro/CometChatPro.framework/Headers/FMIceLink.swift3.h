//
// Title: IceLink for Cocoa
// Version: 0.0.0.0
// Copyright Frozen Mountain Software 2011+
//

#import <Foundation/Foundation.h>


@class FMIceLinkAesCounterContext;
@class FMIceLinkDtlsClient;
@class FMIceLinkDtlsPeer;
@class FMIceLinkDtlsServer;
@class FMIceLinkNative;
@class FMIceLinkPcmaCodec;
@class FMIceLinkPcmuCodec;
@class FMIceLinkAction0;
@class FMIceLinkAction1;
@class FMIceLinkAction2;
@class FMIceLinkAction3;
@class FMIceLinkAction4;
@class FMIceLinkAction5;
@class FMIceLinkAction6;
@class FMIceLinkAsyncSocket;
@class FMIceLinkAtomicInteger;
@class FMIceLinkAtomicLong;
@class FMIceLinkBase64;
@class FMIceLinkBitAssistant;
@class FMIceLinkByteCollection;
@class FMIceLinkConvert;
@class FMIceLinkCultureInfo;
@class FMIceLinkDateTimeFormatInfo;
@class FMIceLinkDispatchQueue;
@class FMIceLinkDnsRequest;
@class FMIceLinkEcdsaCrypto;
@class FMIceLinkEncoding;
@class FMIceLinkEnvironment;
@class FMIceLinkFileStream;
@class FMIceLinkFunction0;
@class FMIceLinkFunction1;
@class FMIceLinkFunction2;
@class FMIceLinkFunction3;
@class FMIceLinkFunction4;
@class FMIceLinkFunction5;
@class FMIceLinkFunction6;
@class FMIceLinkGlobal;
@class FMIceLinkGuid;
@class FMIceLinkHashContext;
@class FMIceLinkHttpRequest;
@class FMIceLinkHttpWebRequest;
@class FMIceLinkHttpWebRequestTransfer;
@class FMIceLinkIFormatProvider;
@class FMIceLinkJsonChecker;
@class FMIceLinkLocalNetwork;
@class FMIceLinkMacContext;
@class FMIceLinkManagedCondition;
@class FMIceLinkManagedLock;
@class FMIceLinkManagedStopwatch;
@class FMIceLinkManagedThread;
@class FMIceLinkMathAssistant;
@class FMIceLinkNameValueCollection;
@class FMIceLinkNSLogProvider;
@class FMIceLinkNullableBool;
@class FMIceLinkNullableChar;
@class FMIceLinkNullableDate;
@class FMIceLinkNullableDecimal;
@class FMIceLinkNullableDouble;
@class FMIceLinkNullableFloat;
@class FMIceLinkNullableGuid;
@class FMIceLinkNullableInt;
@class FMIceLinkNullableLong;
@class FMIceLinkNullableShort;
@class FMIceLinkNullableUnichar;
@class FMIceLinkNumberFormatInfo;
@class FMIceLinkParseAssistant;
@class FMIceLinkPathUtility;
@class FMIceLinkPlatform;
@class FMIceLinkRandom;
@class FMIceLinkRandomizer;
@class FMIceLinkRecursiveCondition;
@class FMIceLinkRsaCrypto;
@class FMIceLinkTcpSocket;
@class FMIceLinkTimeoutTimer;
@class FMIceLinkTimeSpan;
@class FMIceLinkUdpSocket;
@class FMIceLinkWebSocketMockRequest;
@class FMIceLinkWebSocketMockResponse;
@class FMIceLinkZeroingWeakProxy;
@class FMIceLinkZeroingWeakRef;
@class FMIceLinkAddressTypeWrapper;
@class FMIceLinkAscii;
@class FMIceLinkAsymmetricKey;
@class FMIceLinkAsymmetricKeyTypeWrapper;
@protocol FMIceLinkILog;
@class FMIceLinkAtomicMutex;
@class FMIceLinkBinary;
@class FMIceLinkBooleanHolder;
@class FMIceLinkBuild;
@class FMIceLinkByteHolder;
@class FMIceLinkByteInputStream;
@class FMIceLinkByteOutputStream;
@class FMIceLinkBZip2Decompressor;
@class FMIceLinkCertificate;
@class FMIceLinkCharacterHolder;
@class FMIceLinkCircularBuffer;
@class FMIceLinkCollection;
@class FMIceLinkLogProvider;
@class FMIceLinkDataBufferFramer;
@class FMIceLinkDiagnosticSampler;
@class FMIceLinkDtlsCertificate;
@class FMIceLinkFingerprint;
@class FMIceLinkDtlsFingerprint;
@class FMIceLinkEcdsaNamedCurveWrapper;
@protocol FMIceLinkIFileStream;
@class FMIceLinkIso8601Timestamp;
@class FMIceLinkLogStashLogProvider;
@class FMIceLinkManagedCountdownLatch;
@class FMIceLinkOperatingSystemWrapper;
@class FMIceLinkArchitectureWrapper;
@protocol FMIceLinkIPlatform;
@class FMIceLinkPool;
@class FMIceLinkEcdsaKey;
@class FMIceLinkSourceLanguageWrapper;
@class FMIceLinkJsonSerializer;
@class FMIceLinkSerializer;
@class FMIceLinkStateMachine;
@class FMIceLinkLinkedListNode;
@class FMIceLinkLinkedListEnumerator;
@class FMIceLinkManagedConcurrentDictionary;
@class FMIceLinkManagedConcurrentQueue;
@class FMIceLinkManagedConcurrentStack;
@class FMIceLinkLinkedList;
@class FMIceLinkMutablePair;
@class FMIceLinkMutableUnit;
@class FMIceLinkPair;
@class FMIceLinkPriorityQueue;
@protocol FMIceLinkITimeoutTimer;
@class FMIceLinkTlsCertificate;
@class FMIceLinkTlsFingerprint;
@class FMIceLinkTriple;
@class FMIceLinkUnit;
@class FMIceLinkCompareResultWrapper;
@class FMIceLinkConstants;
@class FMIceLinkCrc32;
@class FMIceLinkDataBufferStream;
@class FMIceLinkDataBuffer;
@class FMIceLinkCircularDataBuffer;
@class FMIceLinkDataBufferSubset;
@class FMIceLinkManagedSocket;
@class FMIceLinkDatagramSocket;
@class FMIceLinkDatagramSocketCreateArgs;
@class FMIceLinkHashContextBase;
@class FMIceLinkMacContextBase;
@class FMIceLinkLogEvent;
@class FMIceLinkHashTypeWrapper;
@class FMIceLinkMacTypeWrapper;
@class FMIceLinkManagedAutoResetEvent;
@class FMIceLinkManagedTimer;
@class FMIceLinkMd5Sha1HashContext;
@class FMIceLinkUnixTimestamp;
@class FMIceLinkDns;
@class FMIceLinkDoubleHolder;
@class FMIceLinkSerializable;
@class FMIceLinkDynamic;
@class FMIceLinkError;
@class FMIceLinkErrorCodeWrapper;
@class FMIceLinkFileAssistant;
@class FMIceLinkFileStreamAccessWrapper;
@class FMIceLinkFloatHolder;
@class FMIceLinkFutureBase;
@class FMIceLinkFuture;
@class FMIceLinkHttpFileTransfer;
@class FMIceLinkHttpMethodWrapper;
@class FMIceLinkHttpRequestArgs;
@class FMIceLinkHttpRequestCreatedArgs;
@class FMIceLinkHttpResponseArgs;
@class FMIceLinkHttpResponseReceivedArgs;
@class FMIceLinkHttpSendFinishArgs;
@class FMIceLinkHttpSendStartArgs;
@class FMIceLinkHttpTransfer;
@class FMIceLinkHttpTransferFactory;
@class FMIceLinkHttpWebRequestSender;
@class FMIceLinkIntegerHolder;
@protocol FMIceLinkIPromise;
@class FMIceLinkJson;
@class FMIceLinkJsonProvider;
@class FMIceLinkLicense;
@class FMIceLinkLockedRandomizer;
@class FMIceLinkLog;
@class FMIceLinkLogLevelWrapper;
@class FMIceLinkLongHolder;
@class FMIceLinkNetworkTimeProtocol;
@class FMIceLinkNullJsonProvider;
@class FMIceLinkNullLogProvider;
@class FMIceLinkDataBufferPool;
@class FMIceLinkPoolStatistics;
@class FMIceLinkPromiseBase;
@class FMIceLinkPromise;
@class FMIceLinkFutureStateWrapper;
@class FMIceLinkRsaKey;
@class FMIceLinkShortHolder;
@class FMIceLinkSort;
@class FMIceLinkSplitter;
@class FMIceLinkStreamSocket;
@class FMIceLinkStreamSocketCreateArgs;
@class FMIceLinkStringAssistant;
@class FMIceLinkTextLogProvider;
@class FMIceLinkTransportAddress;
@class FMIceLinkUnhandled;
@class FMIceLinkUnhandledExceptionArgs;
@class FMIceLinkUtf8;
@class FMIceLinkWebSocketBase;
@protocol FMIceLinkIWebSocket;
@class FMIceLinkWebSocket;
@class FMIceLinkWebSocketCloseArgs;
@class FMIceLinkWebSocketCloseCompleteArgs;
@class FMIceLinkWebSocketOpenArgs;
@class FMIceLinkWebSocketOpenFailureArgs;
@class FMIceLinkWebSocketOpenSuccessArgs;
@class FMIceLinkWebSocketReceiveArgs;
@class FMIceLinkWebSocketSendArgs;
@class FMIceLinkWebSocketStatusCodeWrapper;
@class FMIceLinkWebSocketStreamFailureArgs;
@class FMIceLinkWebSocketTransfer;
@class FMIceLinkWebSocketTransferFactory;
@class FMIceLinkWebSocketWebRequestTransfer;
@class FMIceLinkStunAddressFamily;
@class FMIceLinkStunAttribute;
@class FMIceLinkStunAlternateServerAttribute;
@class FMIceLinkStunError;
@class FMIceLinkStunBadRequestError;
@class FMIceLinkStunMessage;
@class FMIceLinkStunBindingMessage;
@class FMIceLinkStunBindingIndication;
@class FMIceLinkStunBindingRequest;
@class FMIceLinkStunBindingResponse;
@class FMIceLinkStunErrorCodeAttribute;
@class FMIceLinkStunFingerprintAttribute;
@class FMIceLinkStunIceControlledAttribute;
@class FMIceLinkStunIceControllingAttribute;
@class FMIceLinkStunIcePriorityAttribute;
@class FMIceLinkStunIceRoleConflictError;
@class FMIceLinkStunIceUseCandidateAttribute;
@class FMIceLinkStunIntegrityCheckFailureError;
@class FMIceLinkStunMappedAddressAttribute;
@class FMIceLinkStunMessageIntegrityAttribute;
@class FMIceLinkStunMessageTypeWrapper;
@class FMIceLinkStunMissingUsernameError;
@class FMIceLinkStunNonceAttribute;
@class FMIceLinkStunRealmAttribute;
@class FMIceLinkStunServerError;
@class FMIceLinkStunSoftwareAttribute;
@class FMIceLinkStunStaleCredentialsError;
@class FMIceLinkStunStaleNonceError;
@class FMIceLinkStunTransactionTransmitCounterAttribute;
@class FMIceLinkStunTryAlternateStunError;
@class FMIceLinkStunTurnAddressFamilyNotSupportedError;
@class FMIceLinkStunTurnAllocateMessage;
@class FMIceLinkStunTurnAllocateRequest;
@class FMIceLinkStunTurnAllocateResponse;
@class FMIceLinkStunTurnAllocationMismatchError;
@class FMIceLinkStunTurnAllocationQuotaReachedError;
@class FMIceLinkStunTurnChannelBindMessage;
@class FMIceLinkStunTurnChannelBindRequest;
@class FMIceLinkStunTurnChannelBindResponse;
@class FMIceLinkStunTurnChannelNumberAttribute;
@class FMIceLinkStunTurnConnectionAlreadyExistsError;
@class FMIceLinkStunTurnDataMessage;
@class FMIceLinkStunTurnConnectionAttemptIndication;
@class FMIceLinkStunTurnConnectionAttemptMessage;
@class FMIceLinkStunTurnConnectionBindMessage;
@class FMIceLinkStunTurnConnectionBindRequest;
@class FMIceLinkStunTurnConnectionBindResponse;
@class FMIceLinkStunTurnConnectionIdAttribute;
@class FMIceLinkStunTurnConnectionTimeoutOrFailureError;
@class FMIceLinkStunTurnConnectMessage;
@class FMIceLinkStunTurnConnectRequest;
@class FMIceLinkStunTurnConnectResponse;
@class FMIceLinkStunTurnCreatePermissionMessage;
@class FMIceLinkStunTurnCreatePermissionRequest;
@class FMIceLinkStunTurnCreatePermissionResponse;
@class FMIceLinkStunTurnDataAttribute;
@class FMIceLinkStunTurnDataIndication;
@class FMIceLinkStunTurnDontFragmentAttribute;
@class FMIceLinkStunTurnEvenPortAttribute;
@class FMIceLinkStunTurnForbiddenError;
@class FMIceLinkStunTurnInsufficientCapacityError;
@class FMIceLinkStunTurnLifetimeAttribute;
@class FMIceLinkStunTurnMobilityForbiddenError;
@class FMIceLinkStunTurnPeerAddressFamilyMismatchError;
@class FMIceLinkStunTurnRefreshMessage;
@class FMIceLinkStunTurnRefreshRequest;
@class FMIceLinkStunTurnRefreshResponse;
@class FMIceLinkStunTurnRequestedAddressFamilyAttribute;
@class FMIceLinkStunTurnRequestedTransportAttribute;
@class FMIceLinkStunTurnReservationTokenAttribute;
@class FMIceLinkStunTurnSendMessage;
@class FMIceLinkStunTurnSendIndication;
@class FMIceLinkStunTurnUnsupportedTransportProtocolError;
@class FMIceLinkStunTurnWrongCredentialsError;
@class FMIceLinkStunTurnXorPeerAddressAttribute;
@class FMIceLinkStunTurnXorRelayedAddressAttribute;
@class FMIceLinkStunUnauthorizedStunError;
@class FMIceLinkStunUnknownAttributeError;
@class FMIceLinkStunUnknownAttributesAttribute;
@class FMIceLinkStunUsernameAttribute;
@class FMIceLinkStunUtility;
@class FMIceLinkStunXorMappedAddressAttribute;
@class FMIceLinkAecContext;
@protocol FMIceLinkIElement;
@protocol FMIceLinkIOutput;
@protocol FMIceLinkIMediaElement;
@protocol FMIceLinkIMediaOutput;
@protocol FMIceLinkIInput;
@protocol FMIceLinkIMediaInput;
@class FMIceLinkMediaPipe;
@protocol FMIceLinkIAudioElement;
@protocol FMIceLinkIAudioInput;
@protocol FMIceLinkIAudioOutput;
@class FMIceLinkAudioPipe;
@class FMIceLinkAecPipe;
@class FMIceLinkMediaControlFrame;
@class FMIceLinkFeedbackControlFrame;
@class FMIceLinkPayloadSpecificControlFrame;
@class FMIceLinkAfbControlFrame;
@class FMIceLinkAppControlFrame;
@class FMIceLinkMediaBranch;
@class FMIceLinkAudioBranch;
@class FMIceLinkMediaBuffer;
@class FMIceLinkAudioBuffer;
@class FMIceLinkMediaBufferCollection;
@class FMIceLinkAudioBufferCollection;
@class FMIceLinkAudioClock;
@class FMIceLinkMediaConfig;
@class FMIceLinkAudioConfig;
@class FMIceLinkAudioDecoder;
@class FMIceLinkAudioDepacketizer;
@class FMIceLinkAudioEncoder;
@class FMIceLinkMediaFormat;
@class FMIceLinkAudioFormat;
@class FMIceLinkMediaFormatCollection;
@class FMIceLinkAudioFormatCollection;
@class FMIceLinkMediaFrame;
@class FMIceLinkAudioFrame;
@class FMIceLinkAudioMixer;
@class FMIceLinkAudioPacketizer;
@class FMIceLinkMediaRecorder;
@class FMIceLinkAudioRecorder;
@class FMIceLinkMediaSinkBase;
@class FMIceLinkMediaSink;
@class FMIceLinkAudioSink;
@class FMIceLinkMediaSourceBase;
@class FMIceLinkMediaSource;
@class FMIceLinkAudioSource;
@protocol FMIceLinkIStream;
@class FMIceLinkStreamBase;
@class FMIceLinkStream;
@protocol FMIceLinkIMediaStream;
@class FMIceLinkMediaStreamBase;
@protocol FMIceLinkISynchronizableStream;
@class FMIceLinkMediaStream;
@protocol FMIceLinkIAudioStream;
@class FMIceLinkAudioStream;
@protocol FMIceLinkISynchronizer;
@class FMIceLinkCcmFirPolicyWrapper;
@class FMIceLinkNackPliPolicyWrapper;
@class FMIceLinkSdpAttribute;
@class FMIceLinkSdpGroupAttribute;
@class FMIceLinkSdpGroupSemanticsTypeWrapper;
@protocol FMIceLinkIMediaTrack;
@class FMIceLinkMediaTrackBase;
@class FMIceLinkMediaTrack;
@protocol FMIceLinkIAudioTrack;
@class FMIceLinkAudioTrack;
@class FMIceLinkRtcAudioTrackConfig;
@class FMIceLinkBasicAudioDepacketizer;
@class FMIceLinkBasicAudioPacketizer;
@protocol FMIceLinkIVideoElement;
@protocol FMIceLinkIVideoInput;
@protocol FMIceLinkIVideoOutput;
@class FMIceLinkVideoPipe;
@class FMIceLinkVideoDepacketizer;
@class FMIceLinkBasicVideoDepacketizer;
@class FMIceLinkVideoPacketizer;
@class FMIceLinkBasicVideoPacketizer;
@class FMIceLinkBundlePolicyWrapper;
@class FMIceLinkByeControlFrame;
@class FMIceLinkCandidate;
@class FMIceLinkCandidatePairStateWrapper;
@class FMIceLinkCandidateTypeWrapper;
@class FMIceLinkCodecTypeWrapper;
@class FMIceLinkColor;
@protocol FMIceLinkIConnection;
@class FMIceLinkConnectionBase;
@class FMIceLinkConnection;
@class FMIceLinkConnectionCollection;
@class FMIceLinkDataChannelStateMachine;
@class FMIceLinkIdentityAudioPipe;
@class FMIceLinkIdentityVideoPipe;
@class FMIceLinkVideoSink;
@protocol FMIceLinkIViewSink;
@class FMIceLinkViewSink;
@class FMIceLinkNullViewSink;
@class FMIceLinkStreamStateMachine;
@class FMIceLinkConnectionStateMachine;
@class FMIceLinkConnectionStateWrapper;
@protocol FMIceLinkIDataChannel;
@class FMIceLinkDataChannelBase;
@class FMIceLinkDataChannel;
@class FMIceLinkDataChannelCollection;
@class FMIceLinkDataChannelReceiveArgs;
@class FMIceLinkDataChannelStateWrapper;
@protocol FMIceLinkIDataStream;
@class FMIceLinkDataStreamBase;
@class FMIceLinkDataStream;
@class FMIceLinkDiagnosticsTimer;
@class FMIceLinkDiagnosticsDurationTimer;
@class FMIceLinkDiagnosticsRateTimer;
@class FMIceLinkDiagnosticsTimers;
@class FMIceLinkDtlsCipherSuiteWrapper;
@class FMIceLinkDtlsParameters;
@class FMIceLinkDtlsProtocolVersionWrapper;
@class FMIceLinkDtlsRoleWrapper;
@class FMIceLinkTransport;
@class FMIceLinkDtmfSender;
@class FMIceLinkDtmfReceiver;
@class FMIceLinkDtmfFormat;
@class FMIceLinkDtmfPacket;
@class FMIceLinkDtmfTone;
@class FMIceLinkEncryptionModeWrapper;
@class FMIceLinkEncryptionPolicyWrapper;
@class FMIceLinkFakeAudioSource;
@class FMIceLinkVideoSource;
@class FMIceLinkFakeVideoSource;
@class FMIceLinkFeedback;
@class FMIceLinkFirEntry;
@class FMIceLinkFirControlFrame;
@class FMIceLinkG711Format;
@class FMIceLinkGenericNack;
@class FMIceLinkRtpControlFrame;
@class FMIceLinkGenericNackControlFrame;
@class FMIceLinkH264Depacketizer;
@class FMIceLinkVideoFormat;
@class FMIceLinkH264Format;
@class FMIceLinkVideoFragment;
@class FMIceLinkH264Fragment;
@class FMIceLinkH264Nalu;
@class FMIceLinkH264Packet;
@class FMIceLinkH264PacketizationMode;
@class FMIceLinkH264Packetizer;
@class FMIceLinkH264ProfileIdc;
@class FMIceLinkH264ProfileIop;
@class FMIceLinkH264ProfileLevelId;
@class FMIceLinkH264Utility;
@class FMIceLinkIMediaInputCollection;
@class FMIceLinkIAudioInputCollection;
@class FMIceLinkIMediaOutputCollection;
@class FMIceLinkIAudioOutputCollection;
@class FMIceLinkIceConnectionStateWrapper;
@class FMIceLinkIceGatheringStateWrapper;
@class FMIceLinkIceGatherPolicyWrapper;
@class FMIceLinkIceParameters;
@class FMIceLinkIcePolicyWrapper;
@class FMIceLinkIcePortRange;
@class FMIceLinkIceRoleWrapper;
@class FMIceLinkIceServer;
@class FMIceLinkIceServerCollection;
@class FMIceLinkIceServerTest;
@class FMIceLinkIceServerTestResult;
@protocol FMIceLinkIMedia;
@protocol FMIceLinkILocalMedia;
@protocol FMIceLinkIViewableMedia;
@protocol FMIceLinkIViewSinkableMedia;
@protocol FMIceLinkIRemoteMedia;
@class FMIceLinkVideoRecorder;
@class FMIceLinkIvfVideoRecorder;
@class FMIceLinkIvfVideoSink;
@class FMIceLinkIVideoInputCollection;
@class FMIceLinkIVideoOutputCollection;
@protocol FMIceLinkIVideoStream;
@protocol FMIceLinkIVideoTrack;
@class FMIceLinkJitterConfig;
@class FMIceLinkJitterAudioPipe;
@class FMIceLinkJitterVideoPipe;
@class FMIceLinkLayout;
@class FMIceLinkLayoutAlignmentWrapper;
@class FMIceLinkLayoutDirectionWrapper;
@class FMIceLinkLayoutFrame;
@class FMIceLinkLayoutPreset;
@class FMIceLinkLayoutManager;
@class FMIceLinkLayoutModeWrapper;
@class FMIceLinkLayoutOriginWrapper;
@class FMIceLinkLayoutScaleWrapper;
@class FMIceLinkLayoutTable;
@class FMIceLinkMediaBase;
@class FMIceLinkMedia;
@class FMIceLinkLocalMediaBase;
@class FMIceLinkLocalMedia;
@class FMIceLinkLocalMediaStateWrapper;
@class FMIceLinkMatroskaElement;
@class FMIceLinkMatroskaAudio;
@class FMIceLinkMatroskaAudioRecorder;
@class FMIceLinkMatroskaAudioSink;
@class FMIceLinkMatroskaBlock;
@class FMIceLinkMatroskaBlockFlags;
@class FMIceLinkMatroskaBlockGroup;
@class FMIceLinkMatroskaCluster;
@class FMIceLinkMatroskaContentCompAlgo;
@class FMIceLinkMatroskaContentCompression;
@class FMIceLinkMatroskaContentEncoding;
@class FMIceLinkMatroskaContentEncodings;
@class FMIceLinkMatroskaContentEncodingScope;
@class FMIceLinkMatroskaEbml;
@class FMIceLinkMatroskaFile;
@class FMIceLinkMatroskaAudioSource;
@class FMIceLinkMatroskaVideoSource;
@class FMIceLinkMatroskaSeek;
@class FMIceLinkMatroskaSeekHead;
@class FMIceLinkMatroskaSegment;
@class FMIceLinkMatroskaSegmentInfo;
@class FMIceLinkMatroskaSimpleBlock;
@class FMIceLinkMatroskaSimpleBlockFlags;
@class FMIceLinkMatroskaTrack;
@class FMIceLinkMatroskaTrackEntry;
@class FMIceLinkMatroskaTrackType;
@class FMIceLinkMatroskaVideo;
@class FMIceLinkMatroskaVideoDisplayUnit;
@class FMIceLinkMatroskaVideoRecorder;
@class FMIceLinkMatroskaVideoSink;
@class FMIceLinkNullAudioSource;
@class FMIceLinkNullVideoSource;
@class FMIceLinkNullVideoSink;
@class FMIceLinkNullAudioSink;
@class FMIceLinkPacketizedAudioBuffer;
@class FMIceLinkVideoBuffer;
@class FMIceLinkPacketizedVideoBuffer;
@class FMIceLinkProcessFramePolicyWrapper;
@class FMIceLinkRemoteMediaCollection;
@class FMIceLinkMediaCollection;
@class FMIceLinkMediaPipeStateWrapper;
@class FMIceLinkMediaSinkStateWrapper;
@class FMIceLinkMediaSourceStateWrapper;
@class FMIceLinkMultiplexPolicyWrapper;
@class FMIceLinkNackConfig;
@class FMIceLinkNackPolicyWrapper;
@class FMIceLinkOggAudioRecorder;
@class FMIceLinkOggAudioSink;
@class FMIceLinkOggPage;
@class FMIceLinkOggPageHeaderType;
@class FMIceLinkOpusDepacketizer;
@class FMIceLinkOpusFormat;
@class FMIceLinkOpusPacketizer;
@class FMIceLinkPcmaDecoder;
@class FMIceLinkPcmaDepacketizer;
@class FMIceLinkPcmaEncoder;
@class FMIceLinkPcmaFormat;
@class FMIceLinkPcmaPacketizer;
@class FMIceLinkPcmuDecoder;
@class FMIceLinkPcmuDepacketizer;
@class FMIceLinkPcmuEncoder;
@class FMIceLinkPcmuFormat;
@class FMIceLinkPcmuPacketizer;
@class FMIceLinkPcmDepacketizer;
@class FMIceLinkPcmFormat;
@class FMIceLinkPcmPacketizer;
@class FMIceLinkPliControlFrame;
@class FMIceLinkProtocolTypeWrapper;
@class FMIceLinkRedFecConfig;
@class FMIceLinkRedFecPolicyWrapper;
@class FMIceLinkRembControlFrame;
@class FMIceLinkRembPolicyWrapper;
@class FMIceLinkRemoteMedia;
@class FMIceLinkReportBlock;
@class FMIceLinkReportControlFrame;
@class FMIceLinkResampler;
@class FMIceLinkRpsi;
@class FMIceLinkRpsiControlFrame;
@class FMIceLinkRRControlFrame;
@class FMIceLinkRtcLocalMedia;
@class FMIceLinkRtcRemoteMedia;
@class FMIceLinkRtpPacket;
@class FMIceLinkRtpPacketHeader;
@protocol FMIceLinkIRtpHeaderExtension;
@class FMIceLinkSdesChunk;
@class FMIceLinkSdesControlFrame;
@class FMIceLinkSdesItem;
@class FMIceLinkSdesItemType;
@class FMIceLinkSdesPolicyWrapper;
@class FMIceLinkSdpAddressType;
@class FMIceLinkSdpAttributeTypeWrapper;
@class FMIceLinkSdpBandwidth;
@class FMIceLinkSdpBandwidthType;
@class FMIceLinkSdpEncryptionKey;
@class FMIceLinkSdpBase64EncryptionKey;
@class FMIceLinkSdpCategoryAttribute;
@class FMIceLinkSdpCharacterSetAttribute;
@class FMIceLinkSdpClearEncryptionKey;
@class FMIceLinkSdpConferenceType;
@class FMIceLinkSdpConferenceTypeAttribute;
@class FMIceLinkSdpConnectionData;
@class FMIceLinkSdpCryptoAttribute;
@class FMIceLinkSdpCryptoKeyMethod;
@class FMIceLinkSdpCryptoSessionParam;
@class FMIceLinkSdpCryptoSuite;
@class FMIceLinkSdpDirectionAttribute;
@class FMIceLinkSdpFormatParametersAttribute;
@class FMIceLinkSdpFrameRateAttribute;
@class FMIceLinkSdpIceCandidateAttribute;
@class FMIceLinkSdpIceCandidateType;
@class FMIceLinkSdpIceFingerprintAttribute;
@class FMIceLinkSdpIceLiteAttribute;
@class FMIceLinkSdpIceMismatchAttribute;
@class FMIceLinkSdpIceOptionTagTypeWrapper;
@class FMIceLinkSdpIceOptionTag;
@class FMIceLinkSdpIceUnknownIceOptionTag;
@class FMIceLinkSdpIceTrickleIceOptionTag;
@class FMIceLinkSdpIceOptionsAttribute;
@class FMIceLinkSdpIcePasswordAttribute;
@class FMIceLinkSdpIceRemoteCandidate;
@class FMIceLinkSdpIceRemoteCandidatesAttribute;
@class FMIceLinkSdpIceTransportProtocol;
@class FMIceLinkSdpIceUfragAttribute;
@class FMIceLinkSdpInactiveAttribute;
@class FMIceLinkSdpKeywordsAttribute;
@class FMIceLinkSdpLanguageAttribute;
@class FMIceLinkSdpMaxPacketTimeAttribute;
@class FMIceLinkSdpMedia;
@class FMIceLinkSdpMediaDescription;
@class FMIceLinkSdpMediaStreamIdAttribute;
@class FMIceLinkSdpMediaStreamIdSemanticTokenWrapper;
@class FMIceLinkSdpMediaStreamIdSemanticAttribute;
@class FMIceLinkSdpMediaType;
@class FMIceLinkSdpMessage;
@class FMIceLinkSdpNetworkType;
@class FMIceLinkSdpOrientation;
@class FMIceLinkSdpOrientationAttribute;
@class FMIceLinkSdpOrigin;
@class FMIceLinkSdpPacketTimeAttribute;
@class FMIceLinkSdpPromptEncryptionKey;
@class FMIceLinkSdpQualityAttribute;
@class FMIceLinkSdpReceiveOnlyAttribute;
@class FMIceLinkSdpRepeatTime;
@class FMIceLinkSdpRtcpAttribute;
@class FMIceLinkSdpRtcpFeedbackAttribute;
@class FMIceLinkSdpRtcpFeedbackAttributeSubType;
@class FMIceLinkSdpRtcpFeedbackAttributeType;
@class FMIceLinkSdpRtcpMuxAttribute;
@class FMIceLinkSdpRtpExtMapAttribute;
@class FMIceLinkSdpRtpMapAttribute;
@class FMIceLinkSdpRtpMedia;
@class FMIceLinkSdpRtpSsrcAttribute;
@class FMIceLinkSdpRtpSsrcAttributeName;
@class FMIceLinkSdpSctpMapAttribute;
@class FMIceLinkSdpSctpMaxMessageSizeAttribute;
@class FMIceLinkSdpSctpMedia;
@class FMIceLinkSdpSctpPortAttribute;
@class FMIceLinkSdpSdpLanguageAttribute;
@class FMIceLinkSdpSendOnlyAttribute;
@class FMIceLinkSdpSendReceiveAttribute;
@class FMIceLinkSdpSetup;
@class FMIceLinkSdpSetupAttribute;
@class FMIceLinkSdpTimeDescription;
@class FMIceLinkSdpTimeZone;
@class FMIceLinkSdpTimeZones;
@class FMIceLinkSdpTiming;
@class FMIceLinkSdpToolAttribute;
@class FMIceLinkSdpUdpMedia;
@class FMIceLinkSdpUnknownAttribute;
@class FMIceLinkSdpUriEncryptionKey;
@class FMIceLinkServerAddress;
@class FMIceLinkSessionDescription;
@class FMIceLinkSessionDescriptionTypeWrapper;
@class FMIceLinkSize;
@class FMIceLinkSignallingStateWrapper;
@class FMIceLinkSinkOutput;
@class FMIceLinkSli;
@class FMIceLinkSliControlFrame;
@class FMIceLinkSoundConverter;
@class FMIceLinkSoundReframer;
@class FMIceLinkSoundReframerContext;
@class FMIceLinkSoundUtility;
@class FMIceLinkSourceInput;
@class FMIceLinkSRControlFrame;
@class FMIceLinkBaseStats;
@class FMIceLinkCodecStats;
@class FMIceLinkStreamStats;
@class FMIceLinkDataStreamStats;
@class FMIceLinkMediaComponentStats;
@class FMIceLinkMediaStats;
@class FMIceLinkMediaSenderStats;
@class FMIceLinkMediaReceiverStats;
@class FMIceLinkMediaTrackStats;
@class FMIceLinkCandidateStats;
@class FMIceLinkCandidatePairStats;
@class FMIceLinkCertificateStats;
@class FMIceLinkDataChannelStats;
@class FMIceLinkConnectionStats;
@class FMIceLinkMediaStreamStats;
@class FMIceLinkStreamDirectionHelper;
@class FMIceLinkSynchronizeContext;
@class FMIceLinkTransportStats;
@class FMIceLinkStreamCollection;
@class FMIceLinkStreamDirectionWrapper;
@class FMIceLinkStreamStateWrapper;
@class FMIceLinkStreamTypeWrapper;
@class FMIceLinkStunServer;
@class FMIceLinkTrickleIcePolicyWrapper;
@class FMIceLinkTurnAuthArgs;
@class FMIceLinkTurnAuthOperationWrapper;
@class FMIceLinkTurnAuthResult;
@class FMIceLinkTurnServer;
@class FMIceLinkUtility;
@class FMIceLinkVideoBranch;
@class FMIceLinkVideoBufferCollection;
@class FMIceLinkVideoConfig;
@class FMIceLinkVideoDecoder;
@class FMIceLinkAudioSynchronizer;
@class FMIceLinkVideoSynchronizer;
@class FMIceLinkVideoEncoder;
@class FMIceLinkVideoFormatCollection;
@class FMIceLinkVideoFrame;
@class FMIceLinkVideoStream;
@class FMIceLinkVideoTrack;
@class FMIceLinkRtcVideoTrackConfig;
@class FMIceLinkVp8Depacketizer;
@class FMIceLinkVp8Format;
@class FMIceLinkVp8Fragment;
@class FMIceLinkVp8Packetizer;
@class FMIceLinkVp8Utility;
@class FMIceLinkVp9Depacketizer;
@class FMIceLinkVp9Format;
@class FMIceLinkVp9Fragment;
@class FMIceLinkVp9Packetizer;
@class FMIceLinkVp9Utility;
@class FMIceLinkWaveAudioRecorder;
@class FMIceLinkWaveAudioSink;
@class FMIceLinkBandwidthAdaptationPolicyWrapper;


@interface NSNotificationCenter (FMIceLinkZeroingWeakRefAdditions)

/**
 * Returns an opaque observation handle that can be removed with NSNotificationCenter's 'removeObserver:'.
 */
- (id)addWeakObserver: (id)observer selector: (SEL)selector name: (NSString *)name object: (id)object;

@end



@class FMIceLinkZeroingWeakRef;

@interface FMIceLinkZeroingWeakProxy : NSProxy

+ (id)proxyWithTarget: (id)target;

- (instancetype)initWithTarget: (id)target;

- (id)zeroingProxyTarget;

#if NS_BLOCKS_AVAILABLE
// same caveats/restrictions as FMIceLinkZeroingWeakRef cleanup block
- (void)setCleanupBlock: (void (^)(id target))block;
#endif

@end



@interface FMIceLinkZeroingWeakRef : NSObject

+ (BOOL)canRefCoreFoundationObjects;

+ (id)refWithTarget: (id)target;

- (instancetype)initWithTarget: (id)target;

#if NS_BLOCKS_AVAILABLE
// ON 10.7:
// cleanup block runs while the target's memory is still
// allocated but after all dealloc methods have run
// (it runs at associated object cleanup time)
// you can use the target's pointer value but don't
// manipulate its contents!

// ON 10.6 AND BELOW:
// cleanup block runs while the global ZWR lock is held
// so make it short and sweet!
// use GCD or something to schedule execution later
// if you need to do something that may take a while
//
// it is unsafe to call -target on the weak ref from
// inside the cleanup block, which is why the target
// is passed in as a parameter
// note that you must not resurrect the target at this point!
- (void)setCleanupBlock: (void (^)(id target))block;
#endif

- (id)target;

@end

#ifndef __has_feature
#define __has_feature(feature) 0
#endif

#define FMIceLinkWeakVar(var)            __weak_ ## var

#if __has_feature(objc_arc_weak)

#define FMIceLinkWeakDeclare(var)        __weak __typeof__((var)) FMIceLinkWeakVar(var) = var
#define FMIceLinkWeakImport(var)         __typeof__((FMIceLinkWeakVar(var))) var = FMIceLinkWeakVar(var)
#define FMIceLinkWeakImportReturn(var)   FMIceLinkWeakImport(var); do { if(var == nil) return; } while(NO)

#else

#define FMIceLinkWeakDeclare(var)        __typeof__((var)) FMIceLinkWeakVar(var) = (id)[FMIceLinkZeroingWeakRef refWithTarget:var]
#define FMIceLinkWeakImport(var)         __typeof__((FMIceLinkWeakVar(var))) var = [(FMIceLinkZeroingWeakRef *)FMIceLinkWeakVar(var) target]
#define FMIceLinkWeakImportReturn(var)   FMIceLinkWeakImport(var); do { if(var == nil) return; } while(NO)

#endif

#define FMIceLinkWeakSelfDeclare()       FMIceLinkWeakDeclare(self)
#define FMIceLinkWeakSelfImport()        FMIceLinkWeakImport(self)
#define FMIceLinkWeakSelfImportReturn()  FMIceLinkWeakImportReturn(self)



typedef NS_ENUM(NSInteger, FMIceLinkStringComparison) {
    FMIceLinkStringComparisonCurrentCulture,
    FMIceLinkStringComparisonCurrentCultureIgnoreCase,
    FMIceLinkStringComparisonInvariantCulture,
    FMIceLinkStringComparisonInvariantCultureIgnoreCase,
    FMIceLinkStringComparisonOrdinal,
    FMIceLinkStringComparisonOrdinalIgnoreCase
};



typedef NS_ENUM(NSInteger, FMIceLinkUriKind) {
    FMIceLinkUriKindRelativeOrAbsolute = 0,
    FMIceLinkUriKindAbsolute = 1,
    FMIceLinkUriKindRelative = 2
};



@interface FMIceLinkIFormatProvider : NSObject 

@end



@interface FMIceLinkCultureInfo : FMIceLinkIFormatProvider 

+ (FMIceLinkCultureInfo*) invariantCulture;
+ (FMIceLinkCultureInfo*) currentCulture;

@end



@interface NSDate (FMIceLinkExtensions)

+ (NSDate*) fmNow;
+ (NSDate*) fmUtcNow;
- (instancetype)initWithFmTicks:(long long)ticks;
- (instancetype)initWithFmYear:(int)year month:(int)month day:(int)day hour:(int)hour minute:(int)minute second:(int)second;
- (instancetype)initWithFmYear:(int)year month:(int)month day:(int)day hour:(int)hour minute:(int)minute second:(int)second millisecond:(int)millisecond;
- (long long) fmTicks;
- (NSDate*) fmToUniversalTime;
- (NSString*) fmDescriptionWithFormat: (NSString*) format provider: (FMIceLinkIFormatProvider*) provider;
- (NSDate*) fmAddHours: (double) value;
- (NSDate*) fmAddMinutes: (double) value;
- (NSDate*) fmAddSeconds: (double) value;
- (NSDate*) fmAddMilliseconds: (double) value;
- (int) fmYear;
- (int) fmMonth;
- (int) fmDay;
- (int) fmHour;
- (int) fmMinute;
- (int) fmSecond;
- (int) fmMillisecond;

@end


@interface NSException (FMIceLinkExtensions)

+ (NSException *)fmException;
+ (NSException *)fmExceptionWithMessage: (NSString*) message;
+ (NSException *)fmExceptionWithMessage: (NSString*) message innerException: (NSException*) innerException;

- (instancetype)initFm;
- (instancetype)initWithFmMessage: (NSString*) message;
- (instancetype)initWithFmMessage: (NSString*) message innerException: (NSException*) innerException;
- (NSString*) fmMessage;

@end


@interface NSMutableArray (FMIceLinkExtensions)

- (id)fmPopoff;
- (NSMutableArray*) fmItem;
- (NSMutableArray*) fmToArray;
- (NSMutableArray*) fmGetRangeWithIndex: (int) index count: (int) count;
- (bool) fmRemoveWithItem: (id) item;
- (int) fmLength;
- (void) fmCopyToWithArray: (NSMutableArray*) array arrayIndex: (int) arrayIndex;
- (void) fmInsertWithIndex: (int) index item: (id) item;
- (void) fmRemoveRangeWithIndex: (int) index count: (int) count;
- (id)fmSetObj: (id) obj atIndex: (int) index;
- (id)fmGetObjAtIndex: (int) index;
- (id)fmGetWithIndex: (int) index;
- (void)fmPushWithItem:(id)item;

@end


@interface NSMutableData (FMIceLinkExtensions)

- (instancetype)initWithFmCollection:(NSData*)collection;
- (NSMutableData*)fmItem;
- (NSMutableData*)fmToArray;
- (void)fmAddRangeWithCollection:(NSData*)collection;
- (NSMutableData*)fmGetRangeWithIndex:(int)index count:(int)count;
- (void)fmRemoveRangeWithIndex:(int)index count:(int)count;
- (void)fmInsertRangeWithIndex:(int)index collection:(NSData*)collection;
- (NSNumber*)fmGetObjAtIndex:(int)index;
- (void)fmSetObj:(NSNumber*)object atIndex:(int)index;
- (int)fmCount;
- (void)fmAddWithItem:(unsigned char)item;

@end


@interface NSMutableDictionary (FMIceLinkExtensions)

- (NSMutableDictionary*) fmItem;
- (bool) fmRemoveWithKey: (NSObject*) key;
- (bool) fmContainsKey: (NSObject*) key;
- (bool) fmContainsValue: (id) value;
- (NSMutableArray*) fmKeys;
- (NSMutableArray*) fmValues;
- (bool) fmTryGetValueWithKey: (NSObject*) key value: (NSObject**) value;
- (id)fmAddWithKey: (NSObject*) key value: (id) value;
- (id)fmSetObject: (id) obj atKey: (NSObject*) key;
- (id)fmGetObjectAtKey: (NSObject*) key;

@end



@interface NSMutableString (FMIceLinkExtensions)

- (NSMutableString *)fmRemoveWithStartIndex:(int) startIndex length:(int) length;
- (NSMutableString *)fmAppend:(NSString *)value;
- (NSMutableString *)fmAppend:(NSString *)value startIndex:(int)startIndex count:(int)count;
- (NSString *)fmDescription;

@end



@interface NSString (FMIceLinkExtensions)

- (bool) fmIsEqual: (NSString*) str comparisonType : (FMIceLinkStringComparison)comparisonType;
- (bool) fmContains: (NSString*) str;
- (bool) fmStartsWith: (NSString*) str;
- (bool) fmStartsWith: (NSString*) str comparisonType: (FMIceLinkStringComparison) comparisonType;
- (bool) fmEndsWith: (NSString*) str;
- (bool) fmEndsWith: (NSString*) str comparisonType: (FMIceLinkStringComparison) comparisonType;
- (int) fmIndexOf: (NSString*) value;
- (int) fmIndexOf: (NSString*) value comparisonType: (FMIceLinkStringComparison) comparisonType;
- (int) fmLastIndexOf: (NSString*) value;
- (int) fmLastIndexOf: (NSString*) value comparisonType: (FMIceLinkStringComparison) comparisonType;
- (NSString*) fmSubstringWithStartIndex: (int) startIndex;
- (NSString*) fmSubstringWithStartIndex: (int) startIndex length: (int) length;
- (NSString*) fmTrim;
- (NSString*) fmTrimEndWithTrimChars:(NSArray*)trimChars;
- (NSMutableArray*) fmSplitWithSeparator: (NSMutableArray*) separator;
- (NSString*) fmToLower;
- (NSString*) fmToUpper;
- (NSString*) fmToLowerWithCulture: (FMIceLinkCultureInfo*) culture;
- (NSString*) fmReplaceWithOldValue: (NSString*) oldValue newValue: (NSString*) newValue;
- (int) fmCompareToWithStrB: (NSString *) strB;
+ (NSString*) fmFormat: (NSString*) format args: (NSMutableArray*) args;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3 arg4: (NSObject*) arg4;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3 arg4: (NSObject*) arg4 arg5: (NSObject*) arg5;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3 arg4: (NSObject*) arg4 arg5: (NSObject*) arg5 arg6: (NSObject*) arg6;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3 arg4: (NSObject*) arg4 arg5: (NSObject*) arg5 arg6: (NSObject*) arg6 arg7: (NSObject*) arg7;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3 arg4: (NSObject*) arg4 arg5: (NSObject*) arg5 arg6: (NSObject*) arg6 arg7: (NSObject*) arg7 arg8: (NSObject*) arg8;
+ (NSString*) fmFormat: (NSString*) format arg0: (NSObject*) arg0 arg1: (NSObject*) arg1 arg2: (NSObject*) arg2 arg3: (NSObject*) arg3 arg4: (NSObject*) arg4 arg5: (NSObject*) arg5 arg6: (NSObject*) arg6 arg7: (NSObject*) arg7 arg8: (NSObject*) arg8 arg9: (NSObject*) arg9;
+ (bool) fmIsNullOrEmpty: (NSString*) value;
+ (NSString*) fmEmpty;
+ (NSString*) fmJoinWithSeparator: (NSString*) separator value: (NSMutableArray*) value;
+ (NSString*) fmConcat: (NSMutableArray*) values;
+ (NSString*) fmConcatWithArgs: (NSMutableArray*) args;
+ (NSString*) fmConcatWithArg0: (NSString*) arg0;
+ (NSString*) fmConcatWithArg0: (NSString*) arg0 arg1: (NSString*) arg1;
+ (NSString*) fmConcatWithArg0: (NSString*) arg0 arg1: (NSString*) arg1 arg2: (NSString*) arg2;
+ (NSString*) fmConcatWithArg0: (NSString*) arg0 arg1: (NSString*) arg1 arg2: (NSString*) arg2 arg3: (NSString*) arg3;
+ (NSString*) fmConcatWithStr0: (NSString*) str0;
+ (NSString*) fmConcatWithStr0: (NSString*) str0 str1: (NSString*) str1;
+ (NSString*) fmConcatWithStr0: (NSString*) str0 str1: (NSString*) str1 str2: (NSString*) str2;
+ (NSString*) fmConcatWithStr0: (NSString*) str0 str1: (NSString*) str1 str2: (NSString*) str2 str3: (NSString*) str3;
+ (NSString*) fmReformatNetFormat: (NSString*) format count: (int) count;

@end


@interface NSThread (FMIceLinkExtensions)

+ (void)fmPerformBlockOnMainThread:(void (^)(void))block;
+ (void)fmPerformBlockInBackground:(void (^)(void))block;
+ (void)fmRunBlock:(void (^)(void))block;
- (void)fmPerformBlock:(void (^)(void))block;
- (void)fmPerformBlock:(void (^)(void))block waitUntilDone:(BOOL)wait;
- (void)fmPerformBlock:(void (^)(void))block afterDelay:(NSTimeInterval)delay;

@end



@interface NSURL (FMIceLinkExtensions)

- (instancetype)initWithFmUriString: (NSString*) uriString;
- (NSString*) fmDescription;
- (NSString*) fmDnsSafeHost;
- (NSString*) fmAbsolutePath;
- (int) fmPortNet;
- (NSString*) fmQueryNet;
+ (bool) fmTryCreateWithUriString: (NSString*) uriString uriKind: (FMIceLinkUriKind) uriKind result: (NSURL**) result;
+ (bool) fmTryCreateWithBaseUri: (NSURL*) baseUri relativeUri: (NSString*) relativeUri result: (NSURL**) result;
+ (NSString*) fmEscapeDataStringWithStringToEscape: (NSString*) stringToEscape;

@end


@interface NSURLResponse (FMIceLinkExtensions)

- (NSStream*) fmGetResponseStream;

@end


@interface FMIceLinkAction0 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(void))block;
- (instancetype)initWithBlock:(void (^)(void))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invoke;

@end


@interface FMIceLinkAction1 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(id))block;
- (instancetype)initWithBlock:(void (^)(id))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invokeWithP:(id)p;

@end


@interface FMIceLinkAction2 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(id, id))block;
- (instancetype)initWithBlock:(void (^)(id, id))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invokeWithP1:(id)p1 p2:(id)p2;

@end


@interface FMIceLinkAction3 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(id, id, id))block;
- (instancetype)initWithBlock:(void (^)(id, id, id))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invokeWithP1:(id)p1 p2:(id)p2 p3:(id)p3;

@end


@interface FMIceLinkAction4 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(id, id, id, id))block;
- (instancetype)initWithBlock:(void (^)(id, id, id, id))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invokeWithP1:(id)p1 p2:(id)p2 p3:(id)p3 p4:(id)p4;

@end


@interface FMIceLinkAction5 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(id, id, id, id, id))block;
- (instancetype)initWithBlock:(void (^)(id, id, id, id, id))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invokeWithP1:(id)p1 p2:(id)p2 p3:(id)p3 p4:(id)p4 p5:(id)p5;

@end


@interface FMIceLinkAction6 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)actionWithBlock:(void (^)(id, id, id, id, id, id))block;
- (instancetype)initWithBlock:(void (^)(id, id, id, id, id, id))block;
/* static init */ + (instancetype)actionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (void)invokeWithP1:(id)p1 p2:(id)p2 p3:(id)p3 p4:(id)p4 p5:(id)p5 p6:(id)p6;

@end


@interface FMIceLinkFunction0 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(id (^)(void))block;
- (instancetype)initWithBlock:(id (^)(void))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (id)invoke;

@end


@interface FMIceLinkFunction1 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(id (^)(id))block;
- (instancetype)initWithBlock:(id (^)(id))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (id)invokeWithP:(id)p;

@end


@interface FMIceLinkFunction2 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(id (^)(id, id))block;
- (instancetype)initWithBlock:(id (^)(id, id))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (id)invokeWithP1:(id)p1 p2:(id)p2;

@end


@interface FMIceLinkFunction3 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(id (^)(id, id, id))block;
- (instancetype)initWithBlock:(id (^)(id, id, id))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (id)invokeWithP1:(id)p1 p2:(id)p2 p3:(id)p3;

@end


@interface FMIceLinkFunction4 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(id (^)(id, id, id, id))block;
- (instancetype)initWithBlock:(id (^)(id, id, id, id))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (id)invokeWithP1:(id)p1 p2:(id)p2 p3:(id)p3 p4:(id)p4;

@end


@interface FMIceLinkFunction5 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(id (^)(id, id, id, id, id))block;
- (instancetype)initWithBlock:(id (^)(id, id, id, id, id))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (id)invokeWithP1:(id)p1 p2:(id)p2 p3:(id)p3 p4:(id)p4 p5:(id)p5;

@end


@interface FMIceLinkFunction6 : NSObject 

- (SEL)selector;
- (id)target;

/* static init */ + (instancetype)functionWithBlock:(id (^)(id, id, id, id, id, id))block;
- (instancetype)initWithBlock:(id (^)(id, id, id, id, id, id))block;
/* static init */ + (instancetype)functionWithSelector:(SEL)selector target:(id)target;
- (instancetype)initWithSelector:(SEL)selector target:(id)target;

- (id)invokeWithP1:(id)p1 p2:(id)p2 p3:(id)p3 p4:(id)p4 p5:(id)p5 p6:(id)p6;

@end



@interface FMIceLinkBase64 : NSObject 

+ (NSString*)encodeWithB:(NSData*)b;
+ (NSString*)encodeBuffer:(FMIceLinkDataBuffer*)buffer;
+ (NSMutableData*)decodeWithS:(NSString*)s;
+ (bool)tryEncodeWithB:(NSData*)b encoded:(NSString**)encoded;
+ (bool)tryEncodeBuffer:(FMIceLinkDataBuffer*)buffer encoded:(NSString**)encoded;
+ (bool)tryDecodeWithS:(NSString*)s decoded:(NSData**)decoded;

@end



@interface FMIceLinkBitAssistant : NSObject 
+ (bool)isLittleEndian;
+ (unsigned char)castByte:(int)value;
+ (int)castInteger:(unsigned char)value;
+ (long long)castLong:(unsigned char)value;
+ (unsigned char)leftShift:(unsigned char)value count:(int)count;
+ (short)leftShiftShort:(short)value count:(int)count;
+ (int)leftShiftInteger:(int)value count:(int)count;
+ (long long)leftShiftLong:(long long)value count:(int)count;
+ (unsigned char)rightShift:(unsigned char)value count:(int)count;
+ (short)rightShiftShort:(short)value count:(int)count;
+ (int)rightShiftInteger:(int)value count:(int)count;
+ (long long)rightShiftLong:(long long)value count:(int)count;
+ (bool)sequencesAreEqualWithArray1:(NSData*)array1 array2:(NSData*)array2;
+ (bool)sequencesAreEqualWithArray1:(NSData*)array1 offset1:(int)offset1 array2:(NSData*)array2 offset2:(int)offset2 length:(int)length;
+ (bool)sequencesAreEqualConstantTimeWithArray1:(NSData*)array1 array2:(NSData*)array2;
+ (bool)sequencesAreEqualConstantTimeWithArray1:(NSData*)array1 offset1:(int)offset1 array2:(NSData*)array2 offset2:(int)offset2 length:(int)length;
+ (NSMutableData*)subArray:(NSData*)array offset:(int)offset;
+ (NSMutableData*)subArray:(NSData*)array offset:(int)offset count:(int)count;
+ (NSString*)getHexStringWithArray:(NSData*)array offset:(int)offset length:(int)length;
+ (NSString*)getHexStringWithArray:(NSData*)array;
+ (NSMutableData*)getHexBytesWithS:(NSString*)s;
+ (NSString*)getBinaryStringWithArray:(NSData*)array offset:(int)offset length:(int)length;
+ (NSString*)getBinaryStringWithArray:(NSData*)array;
+ (NSMutableData*)getBinaryBytesWithS:(NSString*)s;
+ (double)convertBytesToDoubleWithBytes:(NSMutableData*)bytes index:(int)index;
+ (float) convertBytesToSingleWithBytes:(NSMutableData*)bytes index:(int)index;
+ (NSMutableData*) convertDoubleToBytesWithDbl:(double)dbl;
+ (NSMutableData*) convertSingleToBytesWithSingle:(float)single;

+ (void) reverseWithArray:(NSMutableData*)array;
+ (void) copyWithSource:(NSData*)source sourceIndex:(int)sourceIndex destination:(NSMutableData*)destination destinationIndex:(int)destinationIndex length:(int)length;
+ (void) copyFloatsWithSource:(NSArray*)source sourceIndex:(int)sourceIndex destination:(NSMutableArray*)destination destinationIndex:(int)destinationIndex length:(int)length;
+ (void) setWithArray:(NSMutableData*)array index:(int)index length:(int)length value:(char)value;

@end


@interface FMIceLinkByteCollection : NSObject 

- (int)count;
/* static init */ + (instancetype)byteCollection;
- (instancetype)init;
/* static init */ + (instancetype)byteCollectionWithBuffer:(NSData *)buffer;
- (instancetype)initWithBuffer:(NSData *)buffer;
- (void)addWithB:(char)b;
- (void)addRangeWithBuffer:(NSData *)buffer;
- (void)addRangeWithCollection:(FMIceLinkByteCollection *)collection;
- (void)removeRangeWithIndex:(int)index count:(int)count;
- (void)insertRangeWithIndex:(int)index buffer:(NSData *)buffer;
- (void)insertRangeWithIndex:(int)index collection:(FMIceLinkByteCollection *)collection;
- (NSMutableData *)getRangeWithIndex:(int)index count:(int)count;
- (char)getWithIndex:(int)index;
- (NSMutableData *)toArray;

@end


@interface FMIceLinkConvert : NSObject 

+ (int) toInt32: (NSString*) value fromBase: (int) fromBase;

@end



@interface FMIceLinkRsaCrypto : NSObject 

+ (int)defaultKeySize;
+ (void)setDefaultKeySize:(int)defaultKeySize;
+ (FMIceLinkRsaKey *)createKey;
+ (FMIceLinkRsaKey *)createKeyWithKeySize:(int)keySize;
+ (NSMutableData *)signMd5Sha1:(NSMutableData *)md5Sha1 privateKey:(FMIceLinkRsaKey *)privateKey;
+ (bool)verifyMd5Sha1:(NSMutableData *)md5Sha1 signature:(NSData *)signature publicKey:(FMIceLinkRsaKey *)publicKey;
+ (NSMutableData *)signSha1:(NSMutableData *)sha1 privateKey:(FMIceLinkRsaKey *)privateKey;
+ (bool)verifySha1:(NSMutableData *)sha1 signature:(NSData *)signature publicKey:(FMIceLinkRsaKey *)publicKey;
+ (NSMutableData *)signSha256:(NSMutableData *)sha256 privateKey:(FMIceLinkRsaKey *)privateKey;
+ (bool)verifySha256:(NSMutableData *)sha256 signature:(NSData *)signature publicKey:(FMIceLinkRsaKey *)publicKey;
+ (NSMutableData *)encryptWithData:(NSData *)data publicKey:(FMIceLinkRsaKey *)publicKey;
+ (NSMutableData *)decryptWithData:(NSData *)data privateKey:(FMIceLinkRsaKey *)privateKey;

@end



@interface FMIceLinkDateTimeFormatInfo : FMIceLinkIFormatProvider 

+ (FMIceLinkDateTimeFormatInfo*) invariantInfo;

@end


typedef NS_ENUM(NSInteger, DateTimeStyles) {
    FMIceLinkDateTimeStylesNone = 0,
    FMIceLinkDateTimeStylesAllowLeadingWhite = 1,
    FMIceLinkDateTimeStylesAllowTrailingWhite = 2,
    FMIceLinkDateTimeStylesAllowInnerWhite = 4,
    FMIceLinkDateTimeStylesAllowWhiteSpaces = 7,
    FMIceLinkDateTimeStylesNoCurrentDateDefault = 8,
    FMIceLinkDateTimeStylesAdjustToUniversal = 16,
    FMIceLinkDateTimeStylesAssumeLocal = 32,
    FMIceLinkDateTimeStylesAssumeUniversal = 64,
    FMIceLinkDateTimeStylesRoundtripKind = 128
};



@interface FMIceLinkEncoding : NSObject 

+ (FMIceLinkEncoding*)ascii;
+ (FMIceLinkEncoding*)utf8;
- (NSString*)getStringWithBytes:(NSMutableData*)bytes index:(int)index count:(int)count;
- (NSString*)getStringWithBytes:(NSMutableData*)bytes;
- (NSMutableData*)getBytesWithS:(NSString*)s;
- (int)getByteCountWithS:(NSString*)s;

@end


@interface FMIceLinkEnvironment : NSObject 

+ (int) tickCount;

@end




@interface FMIceLinkGlobal : NSObject 

+ (id) tryCast: (id) obj toClass: (id) cls;
+ (id) tryCast: (id) obj toInterface: (Protocol *) interface;
+ (id) createEmptyArray: (NSArray*) dimensions;
+ (id) createEmptyData: (NSArray*) dimensions;

+ (FMIceLinkAction0 *)findAction0WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;
+ (FMIceLinkAction1 *)findAction1WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;
+ (FMIceLinkAction2 *)findAction2WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;
+ (FMIceLinkAction3 *)findAction3WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;
+ (FMIceLinkAction4 *)findAction4WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;
+ (FMIceLinkAction5 *)findAction5WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;
+ (FMIceLinkAction6 *)findAction6WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;

+ (FMIceLinkFunction0 *)findFunction0WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;
+ (FMIceLinkFunction1 *)findFunction1WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;
+ (FMIceLinkFunction2 *)findFunction2WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;
+ (FMIceLinkFunction3 *)findFunction3WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;
+ (FMIceLinkFunction4 *)findFunction4WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;
+ (FMIceLinkFunction5 *)findFunction5WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;
+ (FMIceLinkFunction6 *)findFunction6WithSelector:(SEL)selector target:(id)target callbacks:(NSArray *)callbacks;

+ (uint8_t)decrementByteWithTarget:(id)target value:(uint8_t)value setter:(FMIceLinkAction2 *)setter prefix:(bool)prefix;
+ (uint8_t)incrementByteWithTarget:(id)target value:(uint8_t)value setter:(FMIceLinkAction2 *)setter prefix:(bool)prefix;
+ (short)decrementInt16WithTarget:(id)target value:(short)value setter:(FMIceLinkAction2 *)setter prefix:(bool)prefix;
+ (short)incrementInt16WithTarget:(id)target value:(short)value setter:(FMIceLinkAction2 *)setter prefix:(bool)prefix;
+ (int)decrementInt32WithTarget:(id)target value:(int)value setter:(FMIceLinkAction2 *)setter prefix:(bool)prefix;
+ (int)incrementInt32WithTarget:(id)target value:(int)value setter:(FMIceLinkAction2 *)setter prefix:(bool)prefix;
+ (long long)decrementInt64WithTarget:(id)target value:(long long)value setter:(FMIceLinkAction2 *)setter prefix:(bool)prefix;
+ (long long)incrementInt64WithTarget:(id)target value:(long long)value setter:(FMIceLinkAction2 *)setter prefix:(bool)prefix;

@end


@interface FMIceLinkGuid : NSObject 

+ (instancetype) empty;
+ (instancetype) generate;
+ (NSString*) descriptionWithG: (FMIceLinkGuid*) g;
/* static init */ + (instancetype)guidWithB: (NSData *) b;
- (instancetype)initWithB: (NSData *) b;
/* static init */ + (instancetype)guidWithG: (NSString*) g;
- (instancetype)initWithG: (NSString*) g;
- (NSString*) description;
- (NSMutableData*) toByteArray;
- (int)compareTo:(FMIceLinkGuid*)value;

@end



@interface FMIceLinkJsonChecker : NSObject 

- (bool) checkStringWithStr: (NSString*) str;

@end

/*!
 * @header FMIceLinkRecursiveCondition Class
 * Created by Bradley Snyder on 2/12/14.
 * @copyright
 *   Copyright 2014 Bradley J. Snyder 
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */


/*!
 * @class NSRecursiveCondition
 * Class with identical functionality to NSCondition, but with a recursive mutex for locking,
 * effectively combining the functionality of NSCondition with NSRecursiveLock.
 */
@interface FMIceLinkRecursiveCondition : NSObject

- (void)lock;
- (void)unlock;
- (void)signal;
- (void)broadcast;
- (void)wait;
- (BOOL)waitUntilDate:(NSDate*)limit;

@end


@interface FMIceLinkManagedLock : NSObject

- (void)lock;
- (void)unlock;

@end



@interface FMIceLinkManagedCondition : NSObject

- (FMIceLinkRecursiveCondition *)condition;
- (void)halt;
- (bool)haltWithMillisecondsTimeout:(int)millisecondsTimeout;
- (void)pulse;
- (void)pulseAll;

@end


@interface FMIceLinkManagedStopwatch : NSObject

+ (long long)timestampFromAbsoluteTime:(long long)absoluteTime; // mach_absolute_time

+ (long long)getTimestamp;
- (long long)elapsedTicks;
- (long long)elapsedMilliseconds;
- (void)start;
- (void)stop;
- (void)restart;

@end




@interface FMIceLinkManagedThread : NSObject 

/* static init */ + (instancetype)managedThreadWithLoop:(FMIceLinkAction1 *)callback;
- (instancetype)initWithLoop:(FMIceLinkAction1 *)callback;
- (void)start;
- (void)loopBegin;
- (void)loopEnd;
+ (void)sleepWithMillisecondsTimeout:(int)millisecondsTimeout;
+ (void)dispatchWithAction:(FMIceLinkAction0 *)action;
+ (long long)currentThreadId;

@end


@interface FMIceLinkMathAssistant : NSObject 

+ (double)pi;
+ (double)e;
+ (int)absWithIntValue:(int)intValue;
+ (long long)absWithLongValue:(long long)longValue;
+ (float)absWithFloatValue:(float)floatValue;
+ (double)absWithDoubleValue:(double)doubleValue;
+ (double)acos:(double)value;
+ (double)asin:(double)value;
+ (double)atan:(double)value;
+ (double)atan2WithY:(double)y x:(double)x;
+ (double)ceil:(double)value;
+ (double)cos:(double)value;
+ (double)cosh:(double)value;
+ (double)exp:(double)value;
+ (double)floor:(double)value;
+ (double)log:(double)value;
+ (double)log10:(double)value;
+ (int)maxWithIntValue1:(int)intValue1 intValue2:(int)intValue2;
+ (long long)maxWithLongValue1:(long long)longValue1 longValue2:(long long)longValue2;
+ (float)maxWithFloatValue1:(float)floatValue1 floatValue2:(float)floatValue2;
+ (double)maxWithDoubleValue1:(double)doubleValue1 doubleValue2:(double)doubleValue2;
+ (int)minWithIntValue1:(int)intValue1 intValue2:(int)intValue2;
+ (long long)minWithLongValue1:(long long)longValue1 longValue2:(long long)longValue2;
+ (float)minWithFloatValue1:(float)floatValue1 floatValue2:(float)floatValue2;
+ (double)minWithDoubleValue1:(double)doubleValue1 doubleValue2:(double)doubleValue2;
+ (double)powWithX:(double)x y:(double)y;
+ (double)round:(double)value;
+ (double)sin:(double)value;
+ (double)sinh:(double)value;
+ (double)sqrt:(double)value;
+ (double)tan:(double)value;
+ (double)tanh:(double)value;

@end


@interface FMIceLinkNameValueCollection : NSObject 

/* static init */ + (instancetype)nameValueCollection;
- (instancetype)init;
/* static init */ + (instancetype)nameValueCollectionWithCapacity:(int)capacity;
- (instancetype)initWithCapacity:(int)capacity;
/* static init */ + (instancetype)nameValueCollectionWithCollection:(FMIceLinkNameValueCollection*)collection;
- (instancetype)initWithCollection:(FMIceLinkNameValueCollection*)collection;
- (NSMutableDictionary*)item;
- (NSArray*)allKeys;
- (NSString*)objectForKey:(NSString*)key;
- (void)setObject:(NSString*)object forKey:(NSString*)key;

@end


@interface FMIceLinkNullableBool : NSObject 

+ (FMIceLinkNullableBool*) fromValue: (bool) value;
+ (FMIceLinkNullableBool*) null;
/* static init */ + (instancetype)nullableBoolWithValue: (bool) value;
- (instancetype)initWithValue: (bool) value;
- (bool) hasValue;
- (bool) value;
- (void) setValue: (bool) value;
- (bool) getValueOrDefault;
- (NSString*) description;

@end


@interface FMIceLinkNullableChar : NSObject 

+ (FMIceLinkNullableChar*) fromValue: (char) value;
+ (FMIceLinkNullableChar*) null;
/* static init */ + (instancetype)nullableCharWithValue: (char) value;
- (instancetype)initWithValue: (char) value;
- (bool) hasValue;
- (char) value;
- (void) setValue: (char) value;
- (char) getValueOrDefault;
- (NSString*) description;

@end


@interface FMIceLinkNullableDate : NSObject 

+ (FMIceLinkNullableDate*) fromValue: (NSDate*) value;
+ (FMIceLinkNullableDate*) null;
/* static init */ + (instancetype)nullableDateWithValue: (NSDate*) value;
- (instancetype)initWithValue: (NSDate*) value;
- (bool) hasValue;
- (NSDate*) value;
- (void) setValue: (NSDate*) value;
- (NSDate*) getValueOrDefault;

@end



@interface FMIceLinkNullableDecimal : NSObject 

+ (FMIceLinkNullableDecimal*) fromValue: (NSDecimal) value;
+ (FMIceLinkNullableDecimal*) null;
/* static init */ + (instancetype)nullableDecimalWithValue: (NSDecimal) value;
- (instancetype)initWithValue: (NSDecimal) value;
- (bool) hasValue;
- (NSDecimal) value;
- (void) setValue: (NSDecimal) value;
- (NSDecimal) getValueOrDefault;
- (NSString*) description;
- (NSString*) descriptionWithProvider: (FMIceLinkIFormatProvider*) provider;

@end



@interface FMIceLinkNullableDouble : NSObject 

+ (FMIceLinkNullableDouble*) fromValue: (double) value;
+ (FMIceLinkNullableDouble*) null;
/* static init */ + (instancetype)nullableDoubleWithValue: (double) value;
- (instancetype)initWithValue: (double) value;
- (bool) hasValue;
- (double) value;
- (void) setValue: (double) value;
- (double) getValueOrDefault;
- (NSString*) description;
- (NSString*) descriptionWithProvider: (FMIceLinkIFormatProvider*) provider;

@end



@interface FMIceLinkNullableFloat : NSObject 

+ (FMIceLinkNullableFloat*) fromValue: (float) value;
+ (FMIceLinkNullableFloat*) null;
/* static init */ + (instancetype)nullableFloatWithValue: (float) value;
- (instancetype)initWithValue: (float) value;
- (bool) hasValue;
- (float) value;
- (void) setValue: (float) value;
- (float) getValueOrDefault;
- (NSString*) description;
- (NSString*) descriptionWithProvider: (FMIceLinkIFormatProvider*) provider;

@end



@interface FMIceLinkNullableGuid : NSObject 

+ (FMIceLinkNullableGuid*) fromValue: (FMIceLinkGuid*) value;
+ (FMIceLinkNullableGuid*) null;
/* static init */ + (instancetype)nullableGuidWithValue: (FMIceLinkGuid*) value;
- (instancetype)initWithValue: (FMIceLinkGuid*) value;
- (bool) hasValue;
- (FMIceLinkGuid*) value;
- (void) setValue: (FMIceLinkGuid*) value;
- (FMIceLinkGuid*) getValueOrDefault;
- (NSString*) description;

@end



@interface FMIceLinkNullableInt : NSObject 

+ (FMIceLinkNullableInt*) fromValue: (int) value;
+ (FMIceLinkNullableInt*) null;
/* static init */ + (instancetype)nullableIntWithValue: (int) value;
- (instancetype)initWithValue: (int) value;
- (bool) hasValue;
- (int) value;
- (void) setValue: (int) value;
- (int) getValueOrDefault;
- (NSString*) description;
- (NSString*) descriptionWithProvider: (FMIceLinkIFormatProvider*) provider;

@end



@interface FMIceLinkNullableLong : NSObject 

+ (FMIceLinkNullableLong*) fromValue: (long long) value;
+ (FMIceLinkNullableLong*) null;
/* static init */ + (instancetype)nullableLongWithValue: (long long) value;
- (instancetype)initWithValue: (long long) value;
- (bool) hasValue;
- (long long) value;
- (void) setValue: (long long) value;
- (long long) getValueOrDefault;
- (NSString*) description;
- (NSString*) descriptionWithProvider: (FMIceLinkIFormatProvider*) provider;
- (NSString*) descriptionWithFormat: (NSString*) format;

@end



@interface FMIceLinkNullableShort : NSObject 

+ (FMIceLinkNullableShort*) fromValue: (short) value;
+ (FMIceLinkNullableShort*) null;
/* static init */ + (instancetype)nullableShortWithValue: (short) value;
- (instancetype)initWithValue: (short) value;
- (bool) hasValue;
- (short) value;
- (void) setValue: (short) value;
- (short) getValueOrDefault;
- (NSString*) description;
- (NSString*) descriptionWithProvider: (FMIceLinkIFormatProvider*) provider;

@end


@interface FMIceLinkNullableUnichar : NSObject 

+ (FMIceLinkNullableUnichar*) fromValue: (unichar) value;
+ (FMIceLinkNullableUnichar*) null;
/* static init */ + (instancetype)nullableUnicharWithValue: (unichar) value;
- (instancetype)initWithValue: (unichar) value;
- (bool) hasValue;
- (unichar) value;
- (void) setValue: (unichar) value;
- (unichar) getValueOrDefault;
- (NSString*) description;

@end



@interface FMIceLinkNumberFormatInfo : FMIceLinkIFormatProvider 

+ (FMIceLinkNumberFormatInfo*) currentInfo;
+ (FMIceLinkNumberFormatInfo*) invariantInfo;

@end



@interface FMIceLinkParseAssistant : NSObject 

+ (char) parseByteValueWithS: (NSString*) s;
+ (short) parseShortValueWithS: (NSString*) s;
+ (int) parseIntegerValueWithS: (NSString*) s;
+ (long long) parseLongValueWithS: (NSString*) s;
+ (float) parseFloatValueWithS: (NSString*) s;
+ (double) parseDoubleValueWithS: (NSString*) s;
+ (NSDecimal) parseDecimalValueWithS: (NSString*) s;
+ (bool) parseBooleanValueWithS: (NSString*) s;
+ (FMIceLinkGuid*) parseGuidValueWithS: (NSString*) s;

+ (bool) tryParseByteValueWithS: (NSString*) s byteResult: (char*) byteResult;
+ (bool) tryParseShortValueWithS: (NSString*) s shortResult: (short*) shortResult;
+ (bool) tryParseIntegerValueWithS: (NSString*) s intResult: (int*) intResult;
+ (bool) tryParseLongValueWithS: (NSString*) s longResult: (long long*) longResult;
+ (bool) tryParseFloatValueWithS: (NSString*) s floatResult: (float*) floatResult;
+ (bool) tryParseDoubleValueWithS: (NSString*) s doubleResult: (double*) doubleResult;
+ (bool) tryParseDecimalValueWithS: (NSString*) s decimalResult: (NSDecimal*) decimalResult;
+ (bool) tryParseBooleanValueWithS: (NSString*) s boolResult: (bool*) boolResult;
+ (bool) tryParseGuidValueWithS: (NSString*) s guidResult: (FMIceLinkGuid**) guidResult;

@end



@interface FMIceLinkRandom : NSObject 

- (void)nextBytesWithBuffer:(NSMutableData*)buffer;

@end





@interface FMIceLinkTimeoutTimer : NSObject 

/* static init */ + (instancetype)timeoutTimerWithCallback: (FMIceLinkAction1 *) callback state: (id) state;
- (instancetype)initWithCallback: (FMIceLinkAction1 *) callback state: (id) state;
- (void) startWithTimeout: (int) timeout;
- (bool) stop;

@end


@interface FMIceLinkTimeSpan : NSObject 

/* static init */ + (instancetype)timeSpanWithTicks:(long long)ticks;
- (instancetype)initWithTicks:(long long)ticks;
/* static init */ + (instancetype)timeSpanWithHours:(int)hours minutes:(int)minutes seconds:(int)seconds;
- (instancetype)initWithHours:(int)hours minutes:(int)minutes seconds:(int)seconds;
- (double)totalSeconds;
- (double)totalMilliseconds;

@end


@interface FMIceLinkRandomizer : NSObject 

/// 
/// Returns a nonnegative random number.
/// 
/// 
- (int)next;

/// 
/// Returns a nonnegative random number less than the specified maximum.
/// 
/// The maximum value (exclusive).
/// 
- (int)nextWithMaxValue:(int)maxValue;

/// 
/// Returns a random number within a specified range.
/// 
/// The minimum value (inclusive).
/// The maximum value (exclusive).
/// 
- (int)nextWithMinValue:(int)minValue maxValue:(int)maxValue;

/// 
/// Fills the elements of a specified array of bytes with random numbers.
/// 
/// The array of bytes to fill.
- (void)nextBytesWithBuffer:(NSMutableData*)buffer;

/// 
/// Returns a random number between 0.0 and 1.0.
/// 
/// 
- (double)nextDouble;

/// 
/// Generates a random string of a specified size.
/// 
/// The size of the output string.
/// 
- (NSString*)randomStringWithSize:(int)size;

@end



@interface FMIceLinkDnsRequest : NSObject 

/* static init */ + (instancetype)dnsRequestWithName:(NSString *)name callback:(FMIceLinkAction2 *)callback state:(NSObject *)state;
- (instancetype)initWithName:(NSString *)name callback:(FMIceLinkAction2 *)callback state:(NSObject *)state;
- (void)resolve;

@end



@interface FMIceLinkWebSocketMockRequest : NSMutableURLRequest 

- (FMIceLinkNameValueCollection*)headers;
- (void)setRequestUri:(NSURL*)requestUri;
- (void)setMethod:(NSString*)method;
- (NSString*)method;

@end



@interface FMIceLinkWebSocketMockResponse : NSURLResponse 

- (FMIceLinkNameValueCollection*)headers;
- (void)setResponseUri:(NSURL*)responseUri;
- (int)statusCode;
- (void)setStatusCode:(int)statusCode;
- (void)setContentType:(NSString*)contentType;
- (void)setContentLength:(long long)contentLength;

@end


@interface FMIceLinkPathUtility : NSObject
+ (NSString *)getTempPath;
+ (NSString *)getAbsolutePath:(NSString *)path;
+ (NSString *)combinePathsWithPath1:(NSString *)path1 path2:(NSString *)path2;
+ (NSString *)combinePaths:(NSArray *)paths;
+ (void)deleteWithPath:(NSString *)path;
+ (void)createSymlinkWithDestinationPath:(NSString *)destinationPath linkPath:(NSString *)linkPath;
@end





@interface FMIceLinkAesCounterContext : NSObject

/* static init */ + (instancetype)aesCounterContextWithKey:(FMIceLinkDataBuffer *)key;
- (instancetype)initWithKey:(FMIceLinkDataBuffer *)key;
- (void)clear;
- (bool)generateKeystreamWithOutput:(FMIceLinkDataBuffer *)output length:(int)length counter:(NSMutableData *)counter;

@end


@interface FMIceLinkNative : NSObject

@end

/*!
 * <div>
 * Address types.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkAddressType) {
    /*!
     * <div>
     * Indicates an IP version 4 address.
     * </div>
     */
    FMIceLinkAddressTypeIPv4 = 1,
    /*!
     * <div>
     * Indicates an IP version 6 address.
     * </div>
     */
    FMIceLinkAddressTypeIPv6 = 2,
    /*!
     * <div>
     * Indicates an unknown address type.
     * </div>
     */
    FMIceLinkAddressTypeUnknown = 3
};

/*!
 * <div>
 * Asymmetric key types.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkAsymmetricKeyType) {
    /*!
     * <div>
     * Indicates an RSA key.
     * </div>
     */
    FMIceLinkAsymmetricKeyTypeRsa = 1,
    /*!
     * <div>
     * Indicates an ECDSA key.
     * </div>
     */
    FMIceLinkAsymmetricKeyTypeEcdsa = 2
};

/*!
 * <div>
 * A named elliptic curve.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkEcdsaNamedCurve) {
    /*!
     * <div>
     * The P256 named curve.
     * </div>
     */
    FMIceLinkEcdsaNamedCurveP256 = 1,
    /*!
     * <div>
     * The P384 named curve.
     * </div>
     */
    FMIceLinkEcdsaNamedCurveP384 = 2,
    /*!
     * <div>
     * The P521 named curve.
     * </div>
     */
    FMIceLinkEcdsaNamedCurveP521 = 3
};

/*!
 * <div>
 * An operating system.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkOperatingSystem) {
    /*!
     * <div>
     * Indicates an unknown or default OS.
     * </div>
     */
    FMIceLinkOperatingSystemUnknown = 1,
    /*!
     * <div>
     * Indicates a Windows operating system.
     * </div>
     */
    FMIceLinkOperatingSystemWindows = 2,
    /*!
     * <div>
     * Indicates a Android operating system.
     * </div>
     */
    FMIceLinkOperatingSystemAndroid = 3,
    /*!
     * <div>
     * Indicates a macOS operating system.
     * </div>
     */
    FMIceLinkOperatingSystemMacOS = 4,
    /*!
     * <div>
     * Indicates a iOS operating system.
     * </div>
     */
    FMIceLinkOperatingSystemIOS = 5,
    /*!
     * <div>
     * Indicates a Linux operating system.
     * </div>
     */
    FMIceLinkOperatingSystemLinux = 6,
    /*!
     * <div>
     * Indicates a tvOS operating system.
     * </div>
     */
    FMIceLinkOperatingSystemTvOS = 7,
    /*!
     * <div>
     * Indicates a watchOS operating system.
     * </div>
     */
    FMIceLinkOperatingSystemWatchOS = 8
};

/*!
 * <div>
 * A CPU architecture.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkArchitecture) {
    /*!
     * <div>
     * Indicates an unknown or default CPU architecture.
     * </div>
     */
    FMIceLinkArchitectureUnknown = 1,
    /*!
     * <div>
     * Indicates an Intel-based 32-bit CPU architecture.
     * </div>
     */
    FMIceLinkArchitectureX86 = 2,
    /*!
     * <div>
     * Indicates an Intel-based 64-bit CPU architecture.
     * </div>
     */
    FMIceLinkArchitectureX64 = 3,
    /*!
     * <div>
     * Indicates an ARMv7-based 32-bit CPU architecture.
     * </div>
     */
    FMIceLinkArchitectureArmv7 = 4,
    /*!
     * <div>
     * Indicates an ARMv8-based 32-bit CPU architecture.
     * </div>
     */
    FMIceLinkArchitectureArmv8 = 5,
    /*!
     * <div>
     * Indicates an ARM-based 64-bit CPU architecture.
     * </div>
     */
    FMIceLinkArchitectureArm64 = 6,
    /*!
     * <div>
     * Indicates a MIPS-based 32-bit CPU architecture.
     * </div>
     */
    FMIceLinkArchitectureMips = 7,
    /*!
     * <div>
     * Indicates a MIPS-based 64-bit CPU architecture.
     * </div>
     */
    FMIceLinkArchitectureMips64 = 8
};

/*!
 * <div>
 * A source language.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkSourceLanguage) {
    /*!
     * <div>
     * Indicates that the source language is C#.
     * </div>
     */
    FMIceLinkSourceLanguageCSharp = 1,
    /*!
     * <div>
     * Indicates that the source language is Java.
     * </div>
     */
    FMIceLinkSourceLanguageJava = 2,
    /*!
     * <div>
     * Indicates that the source language is Objective-C.
     * </div>
     */
    FMIceLinkSourceLanguageObjectiveC = 3,
    /*!
     * <div>
     * Indicates that the source language is TypeScript.
     * </div>
     */
    FMIceLinkSourceLanguageTypeScript = 4
};

/*!
 * <div>
 * The compare result in a sort operation.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkCompareResult) {
    /*!
     * <div>
     * Indicates that the two elements are equal.
     * </div>
     */
    FMIceLinkCompareResultEqual = 1,
    /*!
     * <div>
     * Indicates that the first element belongs before the second.
     * </div>
     */
    FMIceLinkCompareResultNegative = 2,
    /*!
     * <div>
     * Indicates that ths second element belongs before the first.
     * </div>
     */
    FMIceLinkCompareResultPositive = 3
};

/*!
 * <div>
 * A hash algorithm.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkHashType) {
    /*!
     * <div>
     * Indciates MD5.
     * </div>
     */
    FMIceLinkHashTypeMd5 = 1,
    /*!
     * <div>
     * Indicates SHA1.
     * </div>
     */
    FMIceLinkHashTypeSha1 = 2,
    /*!
     * <div>
     * Indicates SHA256.
     * </div>
     */
    FMIceLinkHashTypeSha256 = 3
};

/*!
 * <div>
 * A message authentication code (MAC) algorithm.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkMacType) {
    /*!
     * <div>
     * Indicates HMAC-MD5.
     * </div>
     */
    FMIceLinkMacTypeHmacMd5 = 1,
    /*!
     * <div>
     * Indicates HMAC-SHA1
     * </div>
     */
    FMIceLinkMacTypeHmacSha1 = 2,
    /*!
     * <div>
     * Indicates HMAC-SHA256
     * </div>
     */
    FMIceLinkMacTypeHmacSha256 = 3
};

/*!
 * <div>
 * Error codes are six digit values, where the first three digits indicate component, while the remaining three digits particular problem with the component.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkErrorCode) {
    /*!
     * <div>
     * Indicates that the socket encountered an error while sending.
     * </div>
     */
    FMIceLinkErrorCodeSocketSendError = 100000,
    /*!
     * <div>
     * Indicates that the socket encountered an error while receiving.
     * </div>
     */
    FMIceLinkErrorCodeSocketReceiveError = 100001,
    /*!
     * <div>
     * Indicates that the socket is closed.
     * </div>
     */
    FMIceLinkErrorCodeSocketClosed = 100002,
    /*!
     * <div>
     * Indicates that the socket's send buffer is full.
     * </div>
     */
    FMIceLinkErrorCodeSocketSendBufferFull = 100003,
    /*!
     * <div>
     * 300 Try Alternate. RFC5389. Indicates that a server using this extension redirects a client to another server by
     * replying to a request message with an error response message with an error code of 300 (Try Alternate).
     * The server MUST include an ALTERNATE-SERVER attribute in the error response.  The error response
     * message MAY be authenticated; however, there are uses cases for
     * ALTERNATE-SERVER where authentication of the response is not possible
     * or practical.
     * </div>
     */
    FMIceLinkErrorCodeStunTryAlternate = 114000,
    /*!
     * <div>
     * 400 Bad Request. RFC5389. Idicates that the original request was malformed.  The client SHOULD NOT retry the
     * request without modification from the previous attempt.  The server may not be able
     * to generate a valid MESSAGE-INTEGRITY for this error, so the client MUST NOT expect
     * a valid MESSAGE-INTEGRITY attribute on this response.
     * </div>
     */
    FMIceLinkErrorCodeStunBadRequest = 114001,
    /*!
     * <div>
     * 401  Unauthorized. RFC5389. Indicates that the request did not contain the correct
     * credentials to proceed.  The client should retry the request with proper credentials.
     * </div>
     */
    FMIceLinkErrorCodeStunUnauthorized = 114002,
    /*!
     * <div>
     * 403 Forbidden. RFC 5766. Indicates that the request is valid, but the server is refusing
     * to perform it, likely due to administrative restrictions. The client considers the current
     * transaction as having failed. The client MAY notify the user or operator and SHOULD NOT retry the
     * same request with this server until it believes the problem has been fixed.
     * </div>
     */
    FMIceLinkErrorCodeStunTurnForbidden = 114003,
    /*!
     * <div>
     * 405 Mobility Forbidden. RFC 8016. Indicates that the request is valid, but the server is refusing to perform it,
     * likely due to administrative restrictions. The client considers the current transaction as having failed.
     * The client can notify the user or operator.  The client SHOULD NOT retry sending the Allocate request
     * containing the MOBILITY-TICKET with this server until it believes the problem has been fixed.
     * </div>
     */
    FMIceLinkErrorCodeStunTurnMobilityForbidden = 114004,
    /*!
     * <div>
     * 420  Unknown Attribute. RFC5389. Indicates that the server received a STUN packet containing a comprehension-required
     * attribute that it did not understand. The server MUST put this unknown attribute in the UNKNOWN-ATTRIBUTE
     * attribute of its error response.
     * </div>
     */
    FMIceLinkErrorCodeStunUnknownAttribute = 114005,
    /*!
     * <div>
     * 430 Stale credentials; the shared secret sent in the request is expired; the client should obtain a new shared secret.
     * </div>
     */
    FMIceLinkErrorCodeStunStaleCredentials = 114006,
    /*!
     * <div>
     * 431 Integrity Check Failure.
     * </div>
     */
    FMIceLinkErrorCodeStunIntegrityCheckFailure = 114007,
    /*!
     * <div>
     * 432 Missing Username; the username attribute is not present in the request.
     * </div>
     */
    FMIceLinkErrorCodeStunMissingUsername = 114008,
    /*!
     * <div>
     * 437 Allocation Mismatch. RFC 5766. This indicates that the client has picked a 5-tuple that the server sees as already in use.
     * One way this could happen is if an intervening NAT assigned a mapped transport address that was used by another client that recently
     * crashed.  The client considers the current transaction as having failed. The client SHOULD pick another client transport address
     * and retry the Allocate request (using a different transaction id).
     * The client SHOULD try three different client transport addresses before giving up on this server.Once the client gives up on the
     * server, it SHOULD NOT try to create another allocation on the server for 2 minutes.
     * </div>
     */
    FMIceLinkErrorCodeStunTurnAllocationMismatch = 114009,
    /*!
     * <div>
     * 438 Stale Nonce. RFC5389. Indicates that the NONCE used by the client was no longer valid. The client should retry, using the
     * NONCE provided in the response.
     * </div>
     */
    FMIceLinkErrorCodeStunStaleNonce = 114010,
    /*!
     * <div>
     * 440 Address Family Not Supported. RFC 6156. Indicates that the server does not support the address family requested by the client.
     * </div>
     */
    FMIceLinkErrorCodeStunAddressFamilyNotSupported = 114011,
    /*!
     * <div>
     * 441 Wrong Credentials. RFC 5766. Indicates that wrong credential were used by the client. The client should not receive this error
     * in response to an Allocate request.  The client MAY notify the user or operator and SHOULD NOT retry the same request with this server
     * until it believes the problem has been fixed.
     * </div>
     */
    FMIceLinkErrorCodeStunTurnWrongCredentials = 114012,
    /*!
     * <div>
     * 442 Unsupported Transport Protocol. The client should not receive this error in response to a request for a UDP allocation. The
     * client MAY notify the user or operator and SHOULD NOT reattempt the request with this server until it believes the problem has
     * been fixed.
     * </div>
     */
    FMIceLinkErrorCodeStunTurnUnsupportedTransportProtocol = 114013,
    /*!
     * <div>
     * 443 Peer Address Family Mismatch. A peer address was of a different address family than that of the relayed transport address of the allocation.
     * </div>
     */
    FMIceLinkErrorCodeStunTurnPeerAddressFamilyMismatch = 114014,
    /*!
     * <div>
     * 446 Connection Already exists. This indicates that either 1) the server is currently processing a Connect request for this allocation with
     * the same XOR-PEER-ADDRESS; OR 2) the server has already successfully processed a Connect request for this allocation with the same XOR-PEER-ADDRESS,
     * and the resulting client and peer data connections are either pending or active
     * </div>
     */
    FMIceLinkErrorCodeStunTurnConnectionAlreadyExists = 114015,
    /*!
     * <div>
     * 447 Connection Timeout or Failure. This indicates that the TURN server was unable to connect to the peer. The client MAY retry with the same
     * XOR-PEER-ADDRESS attribute, but MUST wait at least 10 seconds.
     * </div>
     */
    FMIceLinkErrorCodeStunTurnConnectionTimeoutOrFailure = 114016,
    /*!
     * <div>
     * 486 Allocation Quota Reached. The server is currently unable to create any more allocations with this username.  The client considers the current
     * transaction as having failed. The client SHOULD wait at least 1 minute before trying to create any more allocations on the server.
     * </div>
     */
    FMIceLinkErrorCodeStunTurnAllocationQuotaReached = 114017,
    /*!
     * <div>
     * 487 Role Conflict. The Binding request contained either the ICE-CONTROLLING or ICE-CONTROLLED attribute, indicating a role that conflicted with the server.
     * The server ran a tie-breaker based on the tie-breaker value in the request and determined that the client needs to switch roles.
     * </div>
     */
    FMIceLinkErrorCodeStunIceRoleConflict = 114018,
    /*!
     * <div>
     * 500 Server Error. RFC5389. Indicates that the server has suffered a temporary error. The client should try again.
     * </div>
     */
    FMIceLinkErrorCodeStunServerError = 114019,
    /*!
     * <div>
     * 508 Insufficient Capacity. The server has no more relayed transport addresses available, or has none with the requested properties, or the one that was
     * reserved is no longer available. The client considers the current operation as having failed. If the client is using either the EVEN-PORT or the
     * RESERVATION-TOKEN attribute, then the client MAY choose to remove or modify this attribute and try again immediately.  Otherwise, the client SHOULD
     * wait at least 1 minute before trying to create any more allocations on this server.
     * </div>
     */
    FMIceLinkErrorCodeStunTurnInsufficientCapacity = 114020,
    /*!
     * <div>
     * Indicates Invalid Response Type, where message type obtained in reponse to a request is of unexpected type.
     * </div>
     */
    FMIceLinkErrorCodeStunInvalidResponseType = 114021,
    /*!
     * <div>
     * Indicates that a failed response does not contain an error code or when the error code is inconsistent with
     * the contents of the response.
     * </div>
     */
    FMIceLinkErrorCodeStunInvalidErrorCode = 114022,
    /*!
     * <div>
     * Indicates Invalid Stun Transaction Id
     * </div>
     */
    FMIceLinkErrorCodeStunInvalidTransactionId = 114023,
    /*!
     * <div>
     * Indicates Unknown Stun Error Code
     * </div>
     */
    FMIceLinkErrorCodeStunUnknownStunErrorCode = 114024,
    /*!
     * <div>
     * Indicates Invalid Stun Message Integrity
     * </div>
     */
    FMIceLinkErrorCodeStunInvalidMessageIntegrity = 114025,
    /*!
     * <div>
     * Indicates that the stream socket ip is invalid, remote server ip is invalid or there is a mimatch in the the ip of the socket and the remote server ip version
     * </div>
     */
    FMIceLinkErrorCodeSocketIPError = 115001,
    /*!
     * <div>
     * Indicates the local relayed candidate could not be processed.
     * </div>
     */
    FMIceLinkErrorCodeIceLocalRelayedDatagramCandidateError = 101000,
    /*!
     * <div>
     * Indicates the local server reflexive could not be processed.
     * </div>
     */
    FMIceLinkErrorCodeIceLocalServerReflexiveCandidateError = 101001,
    /*!
     * <div>
     * Indicates that the ICE gatherer could not be started.
     * </div>
     */
    FMIceLinkErrorCodeIceStartError = 102000,
    /*!
     * <div>
     * Indicates that RTCP datagram sockets were assigned incorrectly after the gatherer was started.
     * </div>
     */
    FMIceLinkErrorCodeIceUnsuitableSocketAssignment = 102001,
    /*!
     * <div>
     * Indicates that all ports are in use.
     * </div>
     */
    FMIceLinkErrorCodeIceAllPortsInUse = 102002,
    /*!
     * <div>
     * Indicates that no local addresses were found.
     * </div>
     */
    FMIceLinkErrorCodeIceLocalAddressUnavailable = 102003,
    /*!
     * <div>
     * Indicates that an Ice Gatherer error occurred.
     * </div>
     */
    FMIceLinkErrorCodeIceGenericGathererError = 102004,
    /*!
     * <div>
     * Indicates that the relayed candidate refresh request timed out.
     * </div>
     */
    FMIceLinkErrorCodeIceRefreshTimeout = 103000,
    /*!
     * <div>
     * Indicates that the relayed candidate refresh request failed.
     * </div>
     */
    FMIceLinkErrorCodeIceRefreshError = 103001,
    /*!
     * <div>
     * Indicates that the candidate pair create-permission request timed out.
     * </div>
     */
    FMIceLinkErrorCodeIceCreatePermissionTimeout = 104000,
    /*!
     * <div>
     * Indicates that the candidate pair create-permission request failed.
     * </div>
     */
    FMIceLinkErrorCodeIceCreatePermissionError = 104001,
    /*!
     * <div>
     * Indicates that the ICE transport encountered an error while sending.
     * </div>
     */
    FMIceLinkErrorCodeIceSendError = 105000,
    /*!
     * <div>
     * Indicates that the ICE transport encountered a problem creating a peer reflexive candidate.
     * </div>
     */
    FMIceLinkErrorCodeIcePeerReflexiveError = 105001,
    /*!
     * <div>
     * Indicates that the IcePolicy requirements are not supported by the remote client.
     * </div>
     */
    FMIceLinkErrorCodeIncompatibleIceSetup = 105002,
    /*!
     * <div>
     * Indicates that an internal DTLS error occurred.
     * </div>
     */
    FMIceLinkErrorCodeDtlsInternalError = 106000,
    /*!
     * <div>
     * Indicates that the DTLS key exchange failed.
     * </div>
     */
    FMIceLinkErrorCodeDtlsKeyExchangeFailed = 106001,
    /*!
     * <div>
     * Indicates that a DTLS message was received before the DTLS endpoint was ready.
     * </div>
     */
    FMIceLinkErrorCodeDtlsNotReady = 106002,
    /*!
     * <div>
     * Indicates that an SCTP message had no payload data.
     * </div>
     */
    FMIceLinkErrorCodeSctpNoPayloadData = 107000,
    /*!
     * <div>
     * Indicates that an attempt was made to send data on an unsupported stream.
     * </div>
     */
    FMIceLinkErrorCodeSctpUnsupportedStream = 107001,
    /*!
     * <div>
     * Indicates that an operation was attempted while in a state that doesn't allow it.
     * </div>
     */
    FMIceLinkErrorCodeSctpInvalidState = 107002,
    /*!
     * <div>
     * Indicates that an internal SCTP error occurred.
     * </div>
     */
    FMIceLinkErrorCodeSctpInternalError = 107003,
    /*!
     * <div>
     * Indicates the media transport failed.
     * </div>
     */
    FMIceLinkErrorCodeMediaTransportFailed = 108000,
    /*!
     * <div>
     * Indicates that the reliable data channel encountered an error while opening.
     * </div>
     */
    FMIceLinkErrorCodeReliableDataChannelOpenError = 109000,
    /*!
     * <div>
     * Indicates that the reliable data channel encountered an error while sending.
     * </div>
     */
    FMIceLinkErrorCodeReliableDataChannelSendError = 109001,
    /*!
     * <div>
     * Indicates that the connection architecture is invalid.
     * </div>
     */
    FMIceLinkErrorCodeConnectionInvalidArchitecture = 110000,
    /*!
     * <div>
     * Indicates that an internal connection error occurred.
     * </div>
     */
    FMIceLinkErrorCodeConnectionInternalError = 110001,
    /*!
     * <div>
     * Indicates that the connection's inner transport could not be started.
     * </div>
     */
    FMIceLinkErrorCodeConnectionTransportStartError = 110002,
    /*!
     * <div>
     * Indicates that the connection's inner transport is closed.
     * </div>
     */
    FMIceLinkErrorCodeConnectionTransportClosed = 110003,
    /*!
     * <div>
     * Indicates that a connection has failed connectivity checks for an extended period.
     * </div>
     */
    FMIceLinkErrorCodeConnectionDeadStream = 110004,
    /*!
     * <div>
     * Indicates that a connection has not been established within allocated timeframe.
     * </div>
     */
    FMIceLinkErrorCodeConnectionNotEstablished = 110005,
    /*!
     * <div>
     * Indicates that the stream was disabled.
     * </div>
     */
    FMIceLinkErrorCodeStreamDisabled = 111000,
    /*!
     * <div>
     * Indicates that the local and remote stream encryption modes are not compatible.
     * </div>
     */
    FMIceLinkErrorCodeStreamEncryptionMismatch = 111001,
    /*!
     * <div>
     * Indicates that the local and remote stream directions are not compatible.
     * </div>
     */
    FMIceLinkErrorCodeStreamDirectionMismatch = 111002,
    /*!
     * <div>
     * Indicates that an attempt was made to modify Data Stream direction; however, this is not allowed.
     * </div>
     */
    FMIceLinkErrorCodeDataStreamDirectionCannotBeChanged = 111003,
    /*!
     * <div>
     * Indicates that a Media Stream direction change attempt was made; however, new direction setting is not supported by the existing stream capabilities (inputs or outpus are missing).
     * </div>
     */
    FMIceLinkErrorCodeInvalidStreamDirectionChange = 111004,
    /*!
     * <div>
     * Indicates that an error was encountered while processing the local description.
     * </div>
     */
    FMIceLinkErrorCodeLocalDescriptionError = 112000,
    /*!
     * <div>
     * Indicates that an error was encountered while processing the remote description.
     * </div>
     */
    FMIceLinkErrorCodeRemoteDescriptionError = 112001,
    /*!
     * <div>
     * Indicates the local relayed candidate could not be processed.
     * </div>
     */
    FMIceLinkErrorCodeIceLocalRelayedStreamCandidateError = 113000,
    /*!
     * <div>
     * Indicates the supplied Turn relay server is invalid or not resolved
     * </div>
     */
    FMIceLinkErrorCodeIceInvalidServerAssignmentError = 113001
};

/*!
 * <div>
 * A file stream access type.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkFileStreamAccess) {
    /*!
     * <div>
     * Indicates read access.
     * </div>
     */
    FMIceLinkFileStreamAccessRead = 1,
    /*!
     * <div>
     * Indicates write access.
     * </div>
     */
    FMIceLinkFileStreamAccessWrite = 2
};

/*!
 * <div>
 * The method used by an HTTP request.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkHttpMethod) {
    /*!
     * <div>
     * Indicates a GET request.
     * </div>
     */
    FMIceLinkHttpMethodGet = 1,
    /*!
     * <div>
     * Indicates a HEAD request.
     * </div>
     */
    FMIceLinkHttpMethodHead = 2,
    /*!
     * <div>
     * Indicates a POST request.
     * </div>
     */
    FMIceLinkHttpMethodPost = 3,
    /*!
     * <div>
     * Indicates a PUT request.
     * </div>
     */
    FMIceLinkHttpMethodPut = 4,
    /*!
     * <div>
     * Indicates a PATCH request.
     * </div>
     */
    FMIceLinkHttpMethodPatch = 5,
    /*!
     * <div>
     * Indicates a DELETE request.
     * </div>
     */
    FMIceLinkHttpMethodDelete = 6
};

/*!
 * <div>
 * The level at which to log.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkLogLevel) {
    /*!
     * <div>
     * Logs extensive messages detailing the program's state for troubleshooting.
     * </div>
     */
    FMIceLinkLogLevelVerbose = 1,
    /*!
     * <div>
     * Logs messages relevant to development and troubleshooting.
     * </div>
     */
    FMIceLinkLogLevelDebug = 2,
    /*!
     * <div>
     * Logs messages relevant to expected use.
     * </div>
     */
    FMIceLinkLogLevelInfo = 3,
    /*!
     * <div>
     * Logs messages relevant to potential pit-falls.
     * </div>
     */
    FMIceLinkLogLevelWarn = 4,
    /*!
     * <div>
     * Logs messages relevant to errors that allow program execution to continue.
     * </div>
     */
    FMIceLinkLogLevelError = 5,
    /*!
     * <div>
     * Logs messages relevant to errors that require the program to terminate.
     * </div>
     */
    FMIceLinkLogLevelFatal = 6,
    /*!
     * <div>
     * Logs nothing.
     * </div>
     */
    FMIceLinkLogLevelNone = 7
};

/*!
 * <div>
 * The state of a future.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkFutureState) {
    /*!
     * <div>
     * Indicates that the promise has not been resolved or rejected.
     * </div>
     */
    FMIceLinkFutureStatePending = 1,
    /*!
     * <div>
     * Indicates that the promise has been resolved.
     * </div>
     */
    FMIceLinkFutureStateResolved = 2,
    /*!
     * <div>
     * Indicates that the promise has been rejected.
     * </div>
     */
    FMIceLinkFutureStateRejected = 3
};

/*!
 * <div>
 * An enumeration of potential WebSocket status codes.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkWebSocketStatusCode) {
    /*!
     * <div>
     * Indicates normal closure, meaning that the purpose for which
     * the connection was established has been fulfilled.
     * </div>
     */
    FMIceLinkWebSocketStatusCodeNormal = 1000,
    /*!
     * <div>
     * Indicates that an endpoint is "going away", such as a server
     * going down or a browser having navigated away from a page.
     * </div>
     */
    FMIceLinkWebSocketStatusCodeGoingAway = 1001,
    /*!
     * <div>
     * Indicates that an endpoint is terminating the connection
     * due to a protocol error.
     * </div>
     */
    FMIceLinkWebSocketStatusCodeProtocolError = 1002,
    /*!
     * <div>
     * Indicates that an endpoint is terminating the connection
     * because it has received a type of data that it cannot accept.
     * </div>
     */
    FMIceLinkWebSocketStatusCodeInvalidType = 1003,
    /*!
     * <div>
     * Indicates that no status code was present in the Close frame.
     * Reserved for use outside Close frames.
     * </div>
     */
    FMIceLinkWebSocketStatusCodeNoStatus = 1005,
    /*!
     * <div>
     * Indicates that the connection was closed abnormally, without
     * sending a Close frame. Reserved for use outside Close frames.
     * </div>
     */
    FMIceLinkWebSocketStatusCodeAbnormal = 1006,
    /*!
     * <div>
     * Indicates that an endpoint is terminating the connection
     * because it has received data within a message that was not
     * consistent with the type of message.
     * </div>
     */
    FMIceLinkWebSocketStatusCodeInvalidData = 1007,
    /*!
     * <div>
     * Indicates that an endpoint is terminating the connection
     * because it has received a message that violates its policy.
     * </div>
     */
    FMIceLinkWebSocketStatusCodePolicyViolation = 1008,
    /*!
     * <div>
     * Indicates that an endpoint is terminating the connection
     * because it has received a message that is too big for it
     * to process.
     * </div>
     */
    FMIceLinkWebSocketStatusCodeMessageTooLarge = 1009,
    /*!
     * <div>
     * Indicates that the client is terminating the connection
     * because it has expected the server to negotiate one or
     * more extensions, but the server didn't return them in the
     * response message of the WebSocket handshake.
     * </div>
     */
    FMIceLinkWebSocketStatusCodeUnsupportedExtension = 1010,
    /*!
     * <div>
     * Indicates that the server is terminating the connection
     * because it encountered an unexpected condition that
     * prevented it from fulfilling the request.
     * </div>
     */
    FMIceLinkWebSocketStatusCodeUnexpectedCondition = 1011,
    /*!
     * <div>
     * Indicates that the connection was closed due to a failure
     * to perform a TLS handshake. Reserved for use outside Close
     * frames.
     * </div>
     */
    FMIceLinkWebSocketStatusCodeSecureHandshakeFailure = 1015
};

/*!
 * <div>
 * The list of valid message types.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkStunMessageType) {
    /*!
     * <div>
     * Specifies that the message is a request.
     * </div>
     */
    FMIceLinkStunMessageTypeRequest = 1,
    /*!
     * <div>
     * Specifies that the message is an indication (no response).
     * </div>
     */
    FMIceLinkStunMessageTypeIndication = 2,
    /*!
     * <div>
     * Specifies that the message is a response indicating success.
     * </div>
     */
    FMIceLinkStunMessageTypeSuccessResponse = 3,
    /*!
     * <div>
     * Specifies that the message is a response indicating failure.
     * </div>
     */
    FMIceLinkStunMessageTypeErrorResponse = 4
};

/*!
 * <div>
 * The CCM FIR policy.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkCcmFirPolicy) {
    /*!
     * <div>
     * The usage of CCM FIR is disabled.
     * </div>
     */
    FMIceLinkCcmFirPolicyDisabled = 1,
    /*!
     * <div>
     * The usage of CCM FIR is negotiated with the peer.
     * </div>
     */
    FMIceLinkCcmFirPolicyNegotiated = 2
};

/*!
 * <div>
 * The NACK PLI policy.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkNackPliPolicy) {
    /*!
     * <div>
     * The usage of NACK PLI is disabled.
     * </div>
     */
    FMIceLinkNackPliPolicyDisabled = 1,
    /*!
     * <div>
     * The usage of NACK PLI is negotiated with the peer.
     * </div>
     */
    FMIceLinkNackPliPolicyNegotiated = 2
};

/*!
 * <div>
 * SDP Group Semantics
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkSdpGroupSemanticsType) {
    /*!
     * <div>
     * An application that receives a session description that contains "m"
     * lines that are grouped together using LS semantics MUST synchronize
     * the playout of the corresponding media streams.Note that LS
     * semantics not only apply to a video stream that has to be
     * synchronized with an audio stream.The playout of two streams of the
     * same type can be synchronized as well.
     * </div>
     */
    FMIceLinkSdpGroupSemanticsTypeLipSynchronization = 1,
    /*!
     * <div>
     * An "m" line in an SDP session description defines a media stream.
     * However, SDP does not define what a media stream is.  This definition
     * can be found in the RTSP specification.The RTSP RFC[5] defines a
     * media stream as "a single media instance, e.g., an audio stream or a
     * video stream as well as a single whiteboard or shared application
     * group. When using RTP, a stream consists of all RTP and RTCP packets
     * created by a source within an RTP session".
     * </div>
     */
    FMIceLinkSdpGroupSemanticsTypeFlowIdentification = 2,
    /*!
     * <div>
     * The extension can be used with the Session Description Protocol(SDP)
     * Offer/Answer mechanism[RFC3264] to negotiate which "m=" sections will
     * become part of a BUNDLE group.
     * </div>
     */
    FMIceLinkSdpGroupSemanticsTypeBundling = 3,
    /*!
     * <div>
     * Unknown Group semantics type.
     * </div>
     */
    FMIceLinkSdpGroupSemanticsTypeUnknown = 4
};

/*!
 * <div>
 * The local bundle negotiation policy. Denotes the policy this peer uses when negotiating resulting connection bundling policy.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkBundlePolicy) {
    /*!
     * <div>
     * Indicates that the first media section of each type will contain transport parameters.
     * The second and any subsequent media sections of each type will be marked as "bundle only".
     * </div>
     */
    FMIceLinkBundlePolicyBalanced = 1,
    /*!
     * <div>
     * Indicates that all media sections will contain transport parameters.
     * No media sections will be marked as "bundle only".
     * </div>
     */
    FMIceLinkBundlePolicyMaxCompatibility = 2,
    /*!
     * <div>
     * Indicates that only the first media section will contain transport parameters.
     * All other media sections will be marked as "bundle only".
     * </div>
     */
    FMIceLinkBundlePolicyMaxBundle = 3
};

/*!
 * <div>
 * The state of a candidate pair.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkCandidatePairState) {
    /*!
     * <div>
     * Indicates that the candidate pair has been formed,
     * but connectivity checks have not yet started.
     * </div>
     */
    FMIceLinkCandidatePairStateNew = 1,
    /*!
     * <div>
     * Indicates that the connectivity check is ready for
     * connectivity checks, but checks have not yet started.
     * </div>
     */
    FMIceLinkCandidatePairStateWaiting = 2,
    /*!
     * <div>
     * Indicates that connectivity checks are in progress.
     * </div>
     */
    FMIceLinkCandidatePairStateInProgress = 3,
    /*!
     * <div>
     * Indicates that a connectivity check was successful.
     * </div>
     */
    FMIceLinkCandidatePairStateSucceeded = 4,
    /*!
     * <div>
     * Indicates that all connectivity checks have timed
     * out or produced a failure response.
     * </div>
     */
    FMIceLinkCandidatePairStateFailed = 5,
    /*!
     * <div>
     * Indicates that connectivity checks have been stopped
     * intentionally due to transport closure.
     * </div>
     */
    FMIceLinkCandidatePairStateClosed = 6,
    /*!
     * <div>
     * Indicates that connectivity checks have succeeded in
     * the past, but are currently not responding.
     * </div>
     */
    FMIceLinkCandidatePairStateConnectivityLost = 7
};

/*!
 * <div>
 * The type of a candidate.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkCandidateType) {
    /*!
     * <div>
     * Indicates a 'host' candidate, discovered by
     * querying a local network interface adapter.
     * The candidate should contain a private IP
     * address of this client.
     * </div>
     */
    FMIceLinkCandidateTypeHost = 1,
    /*!
     * <div>
     * Indicates a 'srflx' candidate, discovered by
     * using a STUN server to echo back the source
     * IP address it sees in a UDP binding request.
     * When the STUN server is properly configured,
     * the candidate should contain a public IP
     * address of this client.
     * </div>
     */
    FMIceLinkCandidateTypeServerReflexive = 2,
    /*!
     * <div>
     * Indicates a 'relay' candidate, discovered by
     * using a TURN server to set up a public port
     * in response to a UDP or TCP allocate request.
     * When the TURN server is properly configured,
     * the candidate should contain a public IP
     * address of the TURN server.
     * </div>
     */
    FMIceLinkCandidateTypeRelayed = 3,
    /*!
     * <div>
     * Indicates a 'prflx' candidate, discovered by
     * sending STUN connectivity checks between peers
     * residing behind more restrictive firewalls.
     * The candidate should contain a public IP
     * address of this client.
     * </div>
     */
    FMIceLinkCandidateTypePeerReflexive = 4,
    /*!
     * <div>
     * Indicates an unknown candidate type.
     * </div>
     */
    FMIceLinkCandidateTypeUnknown = 5
};

/*!
 * <div>
 * A value used to indicate whether this codec is used to encode or decode.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkCodecType) {
    /*!
     * <div>
     * The attached RTCCodecStats represents a media format that is being encoded, or that the implementation is prepared to encode.
     * </div>
     */
    FMIceLinkCodecTypeEncode = 1,
    /*!
     * <div>
     * The attached RTCCodecStats represents a media format that the implementation is prepared to decode.
     * </div>
     */
    FMIceLinkCodecTypeDecode = 2
};

/*!
 * <div>
 * The state of a connection.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkConnectionState) {
    /*!
     * <div>
     * Indicates that the connection is new and has not been started.
     * </div>
     */
    FMIceLinkConnectionStateNew = 1,
    /*!
     * <div>
     * Indicates that the connection is being initialized but no connecting attempts have been made.
     * </div>
     */
    FMIceLinkConnectionStateInitializing = 2,
    /*!
     * <div>
     * Indicates that the connection is currently connecting.
     * </div>
     */
    FMIceLinkConnectionStateConnecting = 3,
    /*!
     * <div>
     * Indicates that the connection is currently connected.
     * </div>
     */
    FMIceLinkConnectionStateConnected = 4,
    /*!
     * <div>
     * Indicates that the connection has encountered an error and is cleaning up.
     * </div>
     */
    FMIceLinkConnectionStateFailing = 5,
    /*!
     * <div>
     * Indicates that the connection has encountered an error and has cleaned up.
     * </div>
     */
    FMIceLinkConnectionStateFailed = 6,
    /*!
     * <div>
     * Indicates that the connection has been instructed to close and is cleaning up.
     * </div>
     */
    FMIceLinkConnectionStateClosing = 7,
    /*!
     * <div>
     * Indicates that the connection has been instructed to close and has cleaned up.
     * </div>
     */
    FMIceLinkConnectionStateClosed = 8
};

/*!
 * <div>
 * A data channel state.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkDataChannelState) {
    /*!
     * <div>
     * Indicates the FMIceLinkDataChannel has been created and has not started negotiating yet.
     * </div>
     */
    FMIceLinkDataChannelStateNew = 1,
    /*!
     * <div>
     * Indicates the FMIceLinkDataChannel is in the process of negotiating a secure connection.
     * </div>
     */
    FMIceLinkDataChannelStateConnecting = 2,
    /*!
     * <div>
     * Indicates the FMIceLinkDataChannel has completed negotiation of a secure connection.
     * </div>
     */
    FMIceLinkDataChannelStateConnected = 3,
    /*!
     * <div>
     * Indicates the FMIceLinkDataChannel is in the process of closing due to an intentional request.
     * </div>
     */
    FMIceLinkDataChannelStateClosing = 4,
    /*!
     * <div>
     * Indicates the FMIceLinkDataChannel has been closed due to an intentional request.
     * </div>
     */
    FMIceLinkDataChannelStateClosed = 5,
    /*!
     * <div>
     * Indicates the FMIceLinkDataChannel has been closed as the result of an error.
     * </div>
     */
    FMIceLinkDataChannelStateFailed = 6
};

/*!
 * <div>
 * A cipher suite.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkDtlsCipherSuite) {
    /*!
     * <div>
     * Indicates TLS_RSA_WITH_AES_128_CBC_SHA.
     * </div>
     */
    FMIceLinkDtlsCipherSuiteRsaAes128Sha = 1,
    /*!
     * <div>
     * Indicates TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA.
     * </div>
     */
    FMIceLinkDtlsCipherSuiteEcdheRsaAes128Sha = 2,
    /*!
     * <div>
     * Indicates TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA.
     * </div>
     */
    FMIceLinkDtlsCipherSuiteEcdheEcdsaAes128Sha = 3,
    /*!
     * <div>
     * Indicates TLS_RSA_WITH_AES_128_GCM_SHA256.
     * </div>
     */
    FMIceLinkDtlsCipherSuiteRsaAes128GcmSha256 = 4,
    /*!
     * <div>
     * Indicates TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256.
     * </div>
     */
    FMIceLinkDtlsCipherSuiteEcdheRsaAes128GcmSha256 = 5,
    /*!
     * <div>
     * Indicates TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256.
     * </div>
     */
    FMIceLinkDtlsCipherSuiteEcdheEcdsaAes128GcmSha256 = 6,
    /*!
     * <div>
     * Indicates TLS_RSA_WITH_AES_128_CBC_SHA256.
     * </div>
     */
    FMIceLinkDtlsCipherSuiteRsaAes128CbcSha256 = 7,
    /*!
     * <div>
     * Indicates TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256.
     * </div>
     */
    FMIceLinkDtlsCipherSuiteEcdheRsaAes128CbcSha256 = 8,
    /*!
     * <div>
     * Indicates TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256.
     * </div>
     */
    FMIceLinkDtlsCipherSuiteEcdheEcdsaAes128CbcSha256 = 9
};

/*!
 * <div>
 * DTLS protocol versions.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkDtlsProtocolVersion) {
    /*!
     * <div>
     * Indicates DTLS 1.0.
     * </div>
     */
    FMIceLinkDtlsProtocolVersionDtls10 = 1,
    /*!
     * <div>
     * Indicates DTLS 1.2.
     * </div>
     */
    FMIceLinkDtlsProtocolVersionDtls12 = 2
};

/*!
 * <div>
 * A DTLS role.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkDtlsRole) {
    /*!
     * <div>
     * Indicates a negotiated role.
     * </div>
     */
    FMIceLinkDtlsRoleAuto = 1,
    /*!
     * <div>
     * Indicates a client role.
     * </div>
     */
    FMIceLinkDtlsRoleClient = 2,
    /*!
     * <div>
     * Indicates a server role.
     * </div>
     */
    FMIceLinkDtlsRoleServer = 3
};

/*!
 * <div>
 * The encryption mode for the stream.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkEncryptionMode) {
    /*!
     * <div>
     * No encryption and no integrity checking.
     * </div>
     */
    FMIceLinkEncryptionModeNull = 1,
    /*!
     * <div>
     * AES 128-bit encryption with strong HMAC-SHA1 integrity checking (80-bit).
     * </div>
     */
    FMIceLinkEncryptionModeAes128Strong = 2,
    /*!
     * <div>
     * AES 128-bit encryption with weak HMAC-SHA1 integrity checking (32-bit).
     * </div>
     */
    FMIceLinkEncryptionModeAes128Weak = 3,
    /*!
     * <div>
     * Null encryption with strong HMAC-SHA1 integrity checking (80-bit).
     * </div>
     */
    FMIceLinkEncryptionModeNullStrong = 4,
    /*!
     * <div>
     * Null encryption with weak HMAC-SHA1 integrity checking (32-bit).
     * </div>
     */
    FMIceLinkEncryptionModeNullWeak = 5
};

/*!
 * <div>
 * Indicates encryption policy for a connection.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkEncryptionPolicy) {
    /*!
     * <div>
     * Encryption is required. If encryption is not supported by peer, connection must fail.
     * </div>
     */
    FMIceLinkEncryptionPolicyRequired = 1,
    /*!
     * <div>
     * Encryption is preferred but not required. If the other peer does not support encryption, connection will be established without encryption.
     * </div>
     */
    FMIceLinkEncryptionPolicyNegotiated = 2,
    /*!
     * <div>
     * Encryption will not be available for the given connection.
     * </div>
     */
    FMIceLinkEncryptionPolicyDisabled = 3
};

/*!
 * <div>
 * The state of an ICE gatherer.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkIceConnectionState) {
    /*!
     * <div>
     * Indicates that the ICE agent(s) is(are) gathering addresses or is(are) waiting to be given remote candidates (or both)..
     * </div>
     */
    FMIceLinkIceConnectionStateNew = 1,
    /*!
     * <div>
     * Indicates that the ICE agent(s) has(ve) been given one or more remote candidates and is(are) checking pairs of local and remote candidates against one another to try to find a compatible match, but has(ve) not yet found a pair which will allow the peer connection to be made. It's possible that gathering of candidates is also still underway.
     * </div>
     */
    FMIceLinkIceConnectionStateChecking = 2,
    /*!
     * <div>
     * Indicates that a usable pairing of local and remote candidates has been found for all components of the connection, and the connection has been established. It's possible that gathering is still underway, and it's also possible that the ICE agent is still checking candidates against one another looking for a better connection to use.
     * </div>
     */
    FMIceLinkIceConnectionStateConnected = 3,
    /*!
     * <div>
     * Indicates that the ICE agent has finished gathering candidates, has checked all pairs against one another, and has found a connection for all components.
     * </div>
     */
    FMIceLinkIceConnectionStateCompleted = 4,
    /*!
     * <div>
     * Indicates that the ICE candidate has checked all candidates pairs against one another and has failed to find compatible matches for all components of the connection. It is, however, possible that the ICE agent did find compatible connections for some components.
     * </div>
     */
    FMIceLinkIceConnectionStateFailed = 5,
    /*!
     * <div>
     * Indicates that checks to ensure that components are still connected failed for at least one component of the RTCPeerConnection. This is a less stringent test than "failed" and may trigger intermittently and resolve just as spontaneously on less reliable networks, or during temporary disconnections. When the problem resolves, the connection may return to the "Connected" state.
     * </div>
     */
    FMIceLinkIceConnectionStateDisconnected = 6,
    /*!
     * <div>
     * The ICE agent(s) for this RTCPeerConnection has shut down and is no longer handling requests
     * </div>
     */
    FMIceLinkIceConnectionStateClosed = 7
};

/*!
 * <div>
 * The state of an ICE gatherer.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkIceGatheringState) {
    /*!
     * <div>
     * Indicates that the gatherer has been created and no gathering has occurred yet.
     * </div>
     */
    FMIceLinkIceGatheringStateNew = 1,
    /*!
     * <div>
     * Indicates that the gatherer is in the process of gathering candidates.
     * </div>
     */
    FMIceLinkIceGatheringStateGathering = 2,
    /*!
     * <div>
     * Indicates that the gatherer has completed gathering candidates.
     * </div>
     */
    FMIceLinkIceGatheringStateComplete = 3,
    /*!
     * <div>
     * Indicates that the gatherer has started closing intentionally via a call to stop.
     * </div>
     */
    FMIceLinkIceGatheringStateClosing = 4,
    /*!
     * <div>
     * Indicates that the gatherer has been closed intentionally via a call to stop.
     * </div>
     */
    FMIceLinkIceGatheringStateClosed = 5,
    /*!
     * <div>
     * Indicates that the gatherer failed due to an error.
     * </div>
     */
    FMIceLinkIceGatheringStateFailed = 6
};

/*!
 * <div>
 * The local policy for gathering candidates.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkIceGatherPolicy) {
    /*!
     * <div>
     * All candidates (host, reflexive, and relay) will be gathered.
     * </div>
     */
    FMIceLinkIceGatherPolicyAll = 1,
    /*!
     * <div>
     * Only reflexive and relay candidates will be gathered.
     * </div>
     */
    FMIceLinkIceGatherPolicyNoHost = 2,
    /*!
     * <div>
     * Only relay candidates will be gathered.
     * </div>
     */
    FMIceLinkIceGatherPolicyRelay = 3
};

/*!
 * <div>
 * Policy indicating whether ICE connectivity checks are required (and enabled) or disabled (and not required for a Connection)
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkIcePolicy) {
    /*!
     * <div>
     * Indicates that ICE connectivity checks are enabled and required on a Connection.
     * </div>
     */
    FMIceLinkIcePolicyRequired = 1,
    /*!
     * <div>
     * Indicates that ICE is disabled on a Connection.
     * </div>
     */
    FMIceLinkIcePolicyDisabled = 2,
    /*!
     * <div>
     * Indicates that ICE connectivity checks will be conducted only if supported by the other party.
     * </div>
     */
    FMIceLinkIcePolicyNegotiated = 3
};

/*!
 * <div>
 * An ICE role.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkIceRole) {
    /*!
     * <div>
     * Indicates a controlling role.
     * </div>
     */
    FMIceLinkIceRoleControlling = 1,
    /*!
     * <div>
     * Indicates a controlled role.
     * </div>
     */
    FMIceLinkIceRoleControlled = 2
};

/*!
 * <div>
 * A layout alignment definition.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkLayoutAlignment) {
    /*!
     * <div>
     * Indicates a top-left alignment.
     * </div>
     */
    FMIceLinkLayoutAlignmentTopLeft = 1,
    /*!
     * <div>
     * Indicates a top-center alignment.
     * </div>
     */
    FMIceLinkLayoutAlignmentTop = 2,
    /*!
     * <div>
     * Indicates a top-right alignment.
     * </div>
     */
    FMIceLinkLayoutAlignmentTopRight = 3,
    /*!
     * <div>
     * Indicates a center-left alignment.
     * </div>
     */
    FMIceLinkLayoutAlignmentLeft = 4,
    /*!
     * <div>
     * Indicates a center-center alignment.
     * </div>
     */
    FMIceLinkLayoutAlignmentCenter = 5,
    /*!
     * <div>
     * Indicates a center-right alignment.
     * </div>
     */
    FMIceLinkLayoutAlignmentRight = 6,
    /*!
     * <div>
     * Indicates a bottom-left alignment.
     * </div>
     */
    FMIceLinkLayoutAlignmentBottomLeft = 7,
    /*!
     * <div>
     * Indicates a bottom-center alignment.
     * </div>
     */
    FMIceLinkLayoutAlignmentBottom = 8,
    /*!
     * <div>
     * Indicates a bottom-right alignment.
     * </div>
     */
    FMIceLinkLayoutAlignmentBottomRight = 9
};

/*!
 * <div>
 * Specifies the direction of the layout flow.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkLayoutDirection) {
    /*!
     * <div>
     * Indicates that the layout should flow
     * horizontally, filling rows as needed.
     * </div>
     */
    FMIceLinkLayoutDirectionHorizontal = 1,
    /*!
     * <div>
     * Indicates that the layout should flow
     * vertically, filling columns as needed.
     * </div>
     */
    FMIceLinkLayoutDirectionVertical = 2
};

/*!
 * <div>
 * Specifies the layout mode that should be used.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkLayoutMode) {
    /*!
     * <div>
     * Indicates that the local video feed should be displayed as
     * a floating element above the remote video feeds.
     * </div>
     */
    FMIceLinkLayoutModeFloatLocal = 1,
    /*!
     * <div>
     * Indicates that the remote video feeds should be displayed as
     * floating elements above the local video feed.
     * </div>
     */
    FMIceLinkLayoutModeFloatRemote = 2,
    /*!
     * <div>
     * Indicates that the video feed should be displayed as a block
     * element on its own row, separate from other video feeds.
     * </div>
     */
    FMIceLinkLayoutModeBlock = 3,
    /*!
     * <div>
     * Indicates that the video feed should be displayed as an inline
     * element that shares a row with other video feeds.
     * </div>
     */
    FMIceLinkLayoutModeInline = 4
};

/*!
 * <div>
 * A layout origin definition.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkLayoutOrigin) {
    /*!
     * <div>
     * Indicates an origin where 0,0 is in the top-left corner.
     * </div>
     */
    FMIceLinkLayoutOriginTopLeft = 1,
    /*!
     * <div>
     * Indicates an origin where 0,0 is in the top-right corner.
     * </div>
     */
    FMIceLinkLayoutOriginTopRight = 2,
    /*!
     * <div>
     * Indicates an origin where 0,0 is in the bottom-right corner.
     * </div>
     */
    FMIceLinkLayoutOriginBottomRight = 3,
    /*!
     * <div>
     * Indicates an origin where 0,0 is in the bottom-left corner.
     * </div>
     */
    FMIceLinkLayoutOriginBottomLeft = 4
};

/*!
 * <div>
 * Specifies how an element should be scaled within a layout.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkLayoutScale) {
    /*!
     * <div>
     * Indicates that the element should be uniformly scaled
     * (maintaining aspect ratio) to the largest size such
     * that both its width and its height can fit inside its
     * bounding box.
     * </div>
     */
    FMIceLinkLayoutScaleContain = 1,
    /*!
     * <div>
     * Indicates that the element should be uniformly scaled
     * (maintaining aspect ratio) to be as large as possible
     * so that the bounding box is completely covered. Some
     * parts of the element may not be in view (cropped).
     * </div>
     */
    FMIceLinkLayoutScaleCover = 2,
    /*!
     * <div>
     * Indicates that the element should be non-uniformly
     * scaled (not maintaining aspect ratio) so that the
     * bounding box is completely covered, but all parts
     * of the element are in view (no cropping).
     * </div>
     */
    FMIceLinkLayoutScaleStretch = 3
};

/*!
 * <div>
 * The state of local media.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkLocalMediaState) {
    /*!
     * <div>
     * Indicates that the local media has not been started yet.
     * </div>
     */
    FMIceLinkLocalMediaStateNew = 1,
    /*!
     * <div>
     * Indicates that the local media is starting.
     * </div>
     */
    FMIceLinkLocalMediaStateStarting = 2,
    /*!
     * <div>
     * Indicates that the local media has started.
     * </div>
     */
    FMIceLinkLocalMediaStateStarted = 3,
    /*!
     * <div>
     * Indicates that the local media is stopping.
     * </div>
     */
    FMIceLinkLocalMediaStateStopping = 4,
    /*!
     * <div>
     * Indicates that the local media has stopped.
     * </div>
     */
    FMIceLinkLocalMediaStateStopped = 5,
    /*!
     * <div>
     * Indicates that the local media is being destroyed.
     * </div>
     */
    FMIceLinkLocalMediaStateDestroying = 6,
    /*!
     * <div>
     * Indicates that the local media has been destroyed.
     * </div>
     */
    FMIceLinkLocalMediaStateDestroyed = 7
};

/*!
 * <div>
 * The policy on how a media input should process the frame.
 * 
 * ProcessFramePolicy affects how media packets move from one processing element to the next in a media track.
 * The default behaviour is synchronous, which is recommended for almost all applications.
 * There are a few niche use cases (generally server-side) where a media track includes a branch with hundreds or thousands of leaves,
 * in which case processing asynchronously (with accompanying thread-pool tuning)
 * can eliminate the effects of favoritism in processing time towards the first leaves.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkProcessFramePolicy) {
    /*!
     * <div>
     * The media input will process the frame synchronously.
     * </div>
     */
    FMIceLinkProcessFramePolicySynchronous = 1,
    /*!
     * <div>
     * The media input will process the frame asynchronously.
     * </div>
     */
    FMIceLinkProcessFramePolicyAsynchronous = 2
};

/*!
 * <div>
 * The state of a media pipe.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkMediaPipeState) {
    /*!
     * <div>
     * Indicates that the media sink has been initialized.
     * </div>
     */
    FMIceLinkMediaPipeStateInitialized = 1,
    /*!
     * <div>
     * Indicates that the media pipe is being destroyed.
     * </div>
     */
    FMIceLinkMediaPipeStateDestroying = 2,
    /*!
     * <div>
     * Indicates that the media pipe has been destroyed.
     * </div>
     */
    FMIceLinkMediaPipeStateDestroyed = 3
};

/*!
 * <div>
 * The state of a media sink.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkMediaSinkState) {
    /*!
     * <div>
     * Indicates that the media sink has been initialized.
     * </div>
     */
    FMIceLinkMediaSinkStateInitialized = 1,
    /*!
     * <div>
     * Indicates that the media sink is being destroyed.
     * </div>
     */
    FMIceLinkMediaSinkStateDestroying = 2,
    /*!
     * <div>
     * Indicates that the media sink has been destroyed.
     * </div>
     */
    FMIceLinkMediaSinkStateDestroyed = 3
};

/*!
 * <div>
 * The state of a media source.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkMediaSourceState) {
    /*!
     * <div>
     * Indicates that the media source has not been started yet.
     * </div>
     */
    FMIceLinkMediaSourceStateNew = 1,
    /*!
     * <div>
     * Indicates that the media source is starting.
     * </div>
     */
    FMIceLinkMediaSourceStateStarting = 2,
    /*!
     * <div>
     * Indicates that the media source has started.
     * </div>
     */
    FMIceLinkMediaSourceStateStarted = 3,
    /*!
     * <div>
     * Indicates that the media source is stopping.
     * </div>
     */
    FMIceLinkMediaSourceStateStopping = 4,
    /*!
     * <div>
     * Indicates that the media source has stopped.
     * </div>
     */
    FMIceLinkMediaSourceStateStopped = 5,
    /*!
     * <div>
     * Indicates that the media source is being destroyed.
     * </div>
     */
    FMIceLinkMediaSourceStateDestroying = 6,
    /*!
     * <div>
     * Indicates that the media source has been destroyed.
     * </div>
     */
    FMIceLinkMediaSourceStateDestroyed = 7
};

/*!
 * <div>
 * The local policy for RTP/RTCP multiplex negotation.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkMultiplexPolicy) {
    /*!
     * <div>
     * Indicates that multiplexing will be used only if the remote end supports it.
     * </div>
     */
    FMIceLinkMultiplexPolicyNegotiated = 1,
    /*!
     * <div>
     * Indicates that multiplexing will be required. The connection will fail if the remote end does not support multiplexing.
     * </div>
     */
    FMIceLinkMultiplexPolicyRequired = 2
};

/*!
 * <div>
 * The local policy for the use of generic RTP Negative Acknowledgements (NACK).
 * Cf. https://tools.ietf.org/html/draft-ietf-rtcweb-rtp-usage-26
 * 
 * NackPolicy is for enabling/configuring negative acknowledgement.
 * Negative acknowledgements are used by media receivers to request that a media sender retransmit a packet.
 * It is highly effective for video in low-latency networks since video is stateful and the cost of losing a packet is high.
 * It is far less effective for audio, where any delay is especially harmful and the cost of losing a packet is not significant. Because of this,
 * it is enabled by default for video and disabled by default for audio. You can modify the buffer size using NackConfig, but generally,
 * it should be left with default values. The option to set these values will most likely be removed in a future release as our adaptive algorithms improve.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkNackPolicy) {
    /*!
     * <div>
     * The usage of generic NACKs is disabled.
     * </div>
     */
    FMIceLinkNackPolicyDisabled = 1,
    /*!
     * <div>
     * The usage of generic NACKs is negotiated with the peer.
     * </div>
     */
    FMIceLinkNackPolicyNegotiated = 2
};

/*!
 * <div>
 * A protocol type.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkProtocolType) {
    /*!
     * <div>
     * Indicates the UDP protocol.
     * </div>
     */
    FMIceLinkProtocolTypeUdp = 1,
    /*!
     * <div>
     * Indicates the TCP protocol.
     * </div>
     */
    FMIceLinkProtocolTypeTcp = 2,
    /*!
     * <div>
     * Indicates the TLS protocol.
     * </div>
     */
    FMIceLinkProtocolTypeTls = 3,
    /*!
     * <div>
     * Indicates an unknown protocol.
     * </div>
     */
    FMIceLinkProtocolTypeUnknown = 4
};

/*!
 * <div>
 * The local policy for the RED Forward Error Correction support.
 * Cf. https://tools.ietf.org/html/draft-ietf-rtcweb-fec-04
 * 
 * RedFecPolicy is for enabling/configuring forward error correction.
 * Forward error correction adds redundancy to the media stream (increased bandwidth)
 * with the intention that media receivers can recover from packet loss without requiring the media server to retransmit anything.
 * It is a last resort for high latency networks.
 * It is disabled by default and not currently supported as it does not have sufficient test coverage.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkRedFecPolicy) {
    /*!
     * <div>
     * The usage of RED FEC is disabled.
     * </div>
     */
    FMIceLinkRedFecPolicyDisabled = 1,
    /*!
     * <div>
     * The usage of RED FEC is negotiated with the peer.
     * </div>
     */
    FMIceLinkRedFecPolicyNegotiated = 2
};

/*!
 * <div>
 * The local policy for the use of Receiver Estimated Maximum Bitrates (goog-remb).
 * Cf. https://tools.ietf.org/html/draft-alvestrand-rmcat-remb-03
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkRembPolicy) {
    /*!
     * <div>
     * The usage of goog-rembs is disabled.
     * </div>
     */
    FMIceLinkRembPolicyDisabled = 1,
    /*!
     * <div>
     * The usage of goog-rembs is negotiated with the peer.
     * </div>
     */
    FMIceLinkRembPolicyNegotiated = 2
};

/*!
 * <div>
 * Indicates Sdes policy for stream.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkSdesPolicy) {
    /*!
     * <div>
     * Sdes is preferred but not required. If stream type is compatible (i.e. not a DataStream) Crypto attributes will be included in the session description.
     * </div>
     */
    FMIceLinkSdesPolicyNegotiated = 2,
    /*!
     * <div>
     * Sdes is disabled. Crypto attributes will not be included in the session description.
     * </div>
     */
    FMIceLinkSdesPolicyDisabled = 3
};

/*!
 * <div>
 * SDP Attribute types
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkSdpAttributeType) {
    /*!
     * <div>
     * Unknown SDP Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeUnknownAttribute = 999666,
    /*!
     * <div>
     * SDP Direction Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeDirectionAttribute = 1,
    /*!
     * <div>
     * SDP Category Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeCategoryAttribute = 2,
    /*!
     * <div>
     * SDP Character Set Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeCharacterSetAttribute = 3,
    /*!
     * <div>
     * SDP Conference Type Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeConferenceTypeAttribute = 4,
    /*!
     * <div>
     * SDP Crypto Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeCryptoAttribute = 5,
    /*!
     * <div>
     * SDP Format Parameters Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeFormatParametersAttribute = 6,
    /*!
     * <div>
     * SDP Frame Rate Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeFrameRateAttribute = 7,
    /*!
     * <div>
     * SDP Keywords Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeKeywordsAttribute = 8,
    /*!
     * <div>
     * SDP Language Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeLanguageAttribute = 9,
    /*!
     * <div>
     * SDP Max Packet Time Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeMaxPacketTimeAttribute = 10,
    /*!
     * <div>
     * SDP Orientiation Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeOrientationAttribute = 11,
    /*!
     * <div>
     * SDP Packet Time Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypePacketTimeAttribute = 12,
    /*!
     * <div>
     * SDP Quality Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeQualityAttribute = 13,
    /*!
     * <div>
     * SDP Sdp Language Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeSdpLanguageAttribute = 14,
    /*!
     * <div>
     * SDP Setup Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeSetupAttribute = 15,
    /*!
     * <div>
     * SDP Tool  Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeToolAttribute = 16,
    /*!
     * <div>
     * SDP Media Stream Id Semantic Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeMediaStreamIdSemanticAttribute = 17,
    /*!
     * <div>
     * SDP Stream Id Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeMediaStreamIdAttribute = 18,
    /*!
     * <div>
     * SDP Group Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeGroupAttribute = 36,
    /*!
     * <div>
     * SDP Ice Candidate Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeIceCandidateAttribute = 19,
    /*!
     * <div>
     * SDP Ice Fingerprint Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeIceFingerprintAttribute = 20,
    /*!
     * <div>
     * SDP Ice Lite Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeIceLiteAttribute = 21,
    /*!
     * <div>
     * SDP Ice Mismatch Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeIceMismatchAttribute = 22,
    /*!
     * <div>
     * SDP Ice Options Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeIceOptionsAttribute = 23,
    /*!
     * <div>
     * SDP Ice Password Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeIcePasswordAttribute = 24,
    /*!
     * <div>
     * SDP Ice Ufrag Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeIceUfragAttribute = 25,
    /*!
     * <div>
     * SDP Ice Remote Candidates Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeIceRemoteCandidatesAttribute = 26,
    /*!
     * <div>
     * SDP RTP Map Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeRtpMapAttribute = 27,
    /*!
     * <div>
     * SDP RTP SSRC Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeRtpSsrcAttribute = 28,
    /*!
     * <div>
     * SDP RTP Extension Map Attribute (https://tools.ietf.org/html/rfc5285#section-5)
     * </div>
     */
    FMIceLinkSdpAttributeTypeRtpExtMapAttribute = 29,
    /*!
     * <div>
     * SDP RTCP Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeRtcpAttribute = 30,
    /*!
     * <div>
     * SDP RTCP Feedback Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeRtcpFeedbackAttribute = 31,
    /*!
     * <div>
     * SDP RTCP Mux Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeRtcpMuxAttribute = 32,
    /*!
     * <div>
     * SDP SCTP Port Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeSctpPortAttribute = 33,
    /*!
     * <div>
     * SDP SCTP Map Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeSctpMapAttribute = 34,
    /*!
     * <div>
     * SDP SCTP Max Message Size Attribute
     * </div>
     */
    FMIceLinkSdpAttributeTypeSctpMaxMessageSizeAttribute = 35
};

/*!
 * <div>
 * A list of known types for FMIceLinkSdpIceOptionTag.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkSdpIceOptionTagType) {
    /*!
     * <div>
     * Indicates an unknown option tag.
     * </div>
     */
    FMIceLinkSdpIceOptionTagTypeUnknown = 1,
    /*!
     * <div>
     * Indicates the trickle-ice option tag.
     * </div>
     */
    FMIceLinkSdpIceOptionTagTypeTrickle = 2
};

/*!
 * <div>
 * Media Stream Id Semantic Tokens
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkSdpMediaStreamIdSemanticToken) {
    /*!
     * <div>
     * WebRTC Media Stream Semantic
     * </div>
     */
    FMIceLinkSdpMediaStreamIdSemanticTokenWms = 1
};

/*!
 * <div>
 * A session description type.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkSessionDescriptionType) {
    /*!
     * <div>
     * Indicates an offer.
     * </div>
     */
    FMIceLinkSessionDescriptionTypeOffer = 1,
    /*!
     * <div>
     * Indicates an answer.
     * </div>
     */
    FMIceLinkSessionDescriptionTypeAnswer = 2
};

/*!
 * <div>
 * The signalling state of a connection.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkSignallingState) {
    /*!
     * <div>
     * Indicates that no offer/answer exchange ever occurred.
     * </div>
     */
    FMIceLinkSignallingStateNew = 1,
    /*!
     * <div>
     * Indicates that the connection has a local offer and remote answer is outstanding.
     * </div>
     */
    FMIceLinkSignallingStateHaveLocalOffer = 2,
    /*!
     * <div>
     * Indicates that the connection has a remote offer and local answer is outstanding.
     * </div>
     */
    FMIceLinkSignallingStateHaveRemoteOffer = 3,
    /*!
     * <div>
     * Indicates that for each offer there is a matching answer.
     * </div>
     */
    FMIceLinkSignallingStateStable = 4
};

/*!
 * <div>
 * A stream direction.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkStreamDirection) {
    /*!
     * <div>
     * Indicates a stream that can send and can receive.
     * </div>
     */
    FMIceLinkStreamDirectionSendReceive = 1,
    /*!
     * <div>
     * Indicates a stream that can send.
     * </div>
     */
    FMIceLinkStreamDirectionSendOnly = 2,
    /*!
     * <div>
     * Indicates a stream that can receive.
     * </div>
     */
    FMIceLinkStreamDirectionReceiveOnly = 3,
    /*!
     * <div>
     * Indicates a stream that cannot send or receive.
     * </div>
     */
    FMIceLinkStreamDirectionInactive = 4,
    /*!
     * <div>
     * Indicates that a stream direction has not been set.
     * </div>
     */
    FMIceLinkStreamDirectionUnset = 5
};

/*!
 * <div>
 * The state of a stream.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkStreamState) {
    /*!
     * <div>
     * Indicates that the stream is new and has not been started.
     * </div>
     */
    FMIceLinkStreamStateNew = 1,
    /*!
     * <div>
     * Indicates that the stream is being initialized but no connecting attempts have been made.
     * </div>
     */
    FMIceLinkStreamStateInitializing = 2,
    /*!
     * <div>
     * Indicates that the stream is currently connecting.
     * </div>
     */
    FMIceLinkStreamStateConnecting = 3,
    /*!
     * <div>
     * Indicates that the stream is currently connected.
     * </div>
     */
    FMIceLinkStreamStateConnected = 4,
    /*!
     * <div>
     * Indicates that the stream has encountered an error and is cleaning up.
     * </div>
     */
    FMIceLinkStreamStateFailing = 5,
    /*!
     * <div>
     * Indicates that the stream has encountered an error and has cleaned up.
     * </div>
     */
    FMIceLinkStreamStateFailed = 6,
    /*!
     * <div>
     * Indicates that the stream has been instructed to close and is cleaning up.
     * </div>
     */
    FMIceLinkStreamStateClosing = 7,
    /*!
     * <div>
     * Indicates that the stream has been instructed to close and has cleaned up.
     * </div>
     */
    FMIceLinkStreamStateClosed = 8
};

/*!
 * <div>
 * A stream type.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkStreamType) {
    /*!
     * <div>
     * Indicates an audio stream.
     * </div>
     */
    FMIceLinkStreamTypeAudio = 1,
    /*!
     * <div>
     * Indicates a video stream.
     * </div>
     */
    FMIceLinkStreamTypeVideo = 2,
    /*!
     * <div>
     * Indicates an application stream.
     * </div>
     */
    FMIceLinkStreamTypeApplication = 3,
    /*!
     * <div>
     * Indicates a message stream.
     * </div>
     */
    FMIceLinkStreamTypeMessage = 4,
    /*!
     * <div>
     * Indicates a text stream.
     * </div>
     */
    FMIceLinkStreamTypeText = 5
};

/*!
 * <div>
 * The local policy for TrickleIce support.
 * Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-04
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkTrickleIcePolicy) {
    /*!
     * <div>
     * A Trickle ICE mode of operation where the offerer
     * gathers all of the possible candidates strictly before
     * creating and sending the offer.
     * </div>
     */
    FMIceLinkTrickleIcePolicyNotSupported = 1,
    /*!
     * <div>
     * The regular mode of operation for Trickle ICE agents,
     * in which an initial offer can include any number of candidates
     * (even zero candidates) and does not need to include the entire
     * first generation of candidates as in half trickle.
     * </div>
     */
    FMIceLinkTrickleIcePolicyFullTrickle = 2,
    /*!
     * <div>
     * A Trickle ICE mode of operation where the offerer
     * gathers its first generation of candidates strictly before
     * creating and sending the offer. Once sent, that offer can be
     * processed by Vanilla ICE agents and does not require support for
     * this specification. It also allows Trickle ICE capable answerers
     * to still gather candidates and perform connectivity checks in a
     * non-blocking way, thus roughly offering "half" the advantages of
     * Trickle ICE. The mechanism is mostly meant for use in cases where
     * support for Trickle ICE cannot be confirmed prior to sending an
     * initial offer.
     * </div>
     */
    FMIceLinkTrickleIcePolicyHalfTrickle = 3
};

/*!
 * <div>
 * An authenticated TURN operation.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkTurnAuthOperation) {
    /*!
     * <div>
     * Indicates a socket allocation request.
     * </div>
     */
    FMIceLinkTurnAuthOperationAllocate = 1,
    /*!
     * <div>
     * Indicates a create-permission request.
     * </div>
     */
    FMIceLinkTurnAuthOperationCreatePermission = 2,
    /*!
     * <div>
     * Indicates an allocation refresh request.
     * </div>
     */
    FMIceLinkTurnAuthOperationRefresh = 3,
    /*!
     * <div>
     * Indicates a channel-bind request.
     * </div>
     */
    FMIceLinkTurnAuthOperationChannelBind = 4
};

/*!
 * <div>
 * RTP packet header Extension support policies.
 * </div>
 */
typedef NS_ENUM(NSInteger, FMIceLinkBandwidthAdaptationPolicy) {
    /*!
     * <div>
     * Indicates a policy where stream bandwidth adaptation of encoder bitrates is disabled.
     * </div>
     */
    FMIceLinkBandwidthAdaptationPolicyDisabled = 1,
    /*!
     * <div>
     * Indicates a policy where stream bandwidth adaptation of encoder bitrates is enabled.
     * </div>
     */
    FMIceLinkBandwidthAdaptationPolicyEnabled = 2
};

/*!
 * <div>
 * ILog interface for loggers.
 * </div>
 */
@protocol FMIceLinkILog

/*!
 * <div>
 * Writes a debug message to the log.
 * </div>
 * @param message The log message.
 */
- (void) debugWithMessage:(NSString*)message;
/*!
 * <div>
 * Writes a debug message with exception to the log.
 * </div>
 * @param message The log message.
 * @param ex The exception.
 */
- (void) debugWithMessage:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Writes a debug message to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 */
- (void) debugWithScope:(NSString*)scope message:(NSString*)message;
/*!
 * <div>
 * Writes a debug message with exception to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 * @param ex The exception.
 */
- (void) debugWithScope:(NSString*)scope message:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Writes a error message to the log.
 * </div>
 * @param message The log message.
 */
- (void) errorWithMessage:(NSString*)message;
/*!
 * <div>
 * Writes a error message with exception to the log.
 * </div>
 * @param message The log message.
 * @param ex The exception.
 */
- (void) errorWithMessage:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Writes a error message to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 */
- (void) errorWithScope:(NSString*)scope message:(NSString*)message;
/*!
 * <div>
 * Writes a error message with exception to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 * @param ex The exception.
 */
- (void) errorWithScope:(NSString*)scope message:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Writes a fatal message to the log.
 * </div>
 * @param message The log message.
 */
- (void) fatalWithMessage:(NSString*)message;
/*!
 * <div>
 * Writes a fatal message with exception to the log.
 * </div>
 * @param message The log message.
 * @param ex The exception.
 */
- (void) fatalWithMessage:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Writes a fatal message to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 */
- (void) fatalWithScope:(NSString*)scope message:(NSString*)message;
/*!
 * <div>
 * Writes a fatal message with exception to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 * @param ex The exception.
 */
- (void) fatalWithScope:(NSString*)scope message:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Ensures that all logs are written out.
 * </div>
 */
- (void) flush;
/*!
 * <div>
 * Writes a info message to the log.
 * </div>
 * @param message The log message.
 */
- (void) infoWithMessage:(NSString*)message;
/*!
 * <div>
 * Writes an info message with exception to the log.
 * </div>
 * @param message The log message.
 * @param ex The exception.
 */
- (void) infoWithMessage:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Writes a info message to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 */
- (void) infoWithScope:(NSString*)scope message:(NSString*)message;
/*!
 * <div>
 * Writes an info message with exception to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 * @param ex The exception.
 */
- (void) infoWithScope:(NSString*)scope message:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Gets if the debug log level is enabled.
 * </div>
 */
- (bool) isDebugEnabled;
/*!
 * <div>
 * Gets if the error log level is enabled.
 * </div>
 */
- (bool) isErrorEnabled;
/*!
 * <div>
 * Gets if the fatal log level is enabled.
 * </div>
 */
- (bool) isFatalEnabled;
/*!
 * <div>
 * Gets if the info log level is enabled.
 * </div>
 */
- (bool) isInfoEnabled;
/*!
 * <div>
 * Returns true if the passed log level is enabled on this logger.
 * </div>
 * @param level Log level to check.
 */
- (bool) isLogEnabledWithLevel:(FMIceLinkLogLevel)level;
/*!
 * <div>
 * Gets if the verbose log level is enabled.
 * </div>
 */
- (bool) isVerboseEnabled;
/*!
 * <div>
 * Gets if the warn log level is enabled.
 * </div>
 */
- (bool) isWarnEnabled;
/*!
 * <div>
 * Writes a log event to the log.
 * </div>
 * @param logEvent The log event.
 */
- (void) logWithLogEvent:(FMIceLinkLogEvent*)logEvent;
/*!
 * <div>
 * Writes a generic message to the log.
 * </div>
 * @param message The log message.
 */
- (void) logWithMessage:(NSString*)message;
/*!
 * <div>
 * Writes a generic message to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 */
- (void) logWithScope:(NSString*)scope message:(NSString*)message;
/*!
 * <div>
 * Gets the tag of the logger.
 * </div>
 */
- (NSString*) tag;
/*!
 * <div>
 * Writes a verbose message to the log.
 * </div>
 * @param message The log message.
 */
- (void) verboseWithMessage:(NSString*)message;
/*!
 * <div>
 * Writes a verbose message with exception to the log.
 * </div>
 * @param message The log message.
 * @param ex The exception.
 */
- (void) verboseWithMessage:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Writes a verbose message to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 */
- (void) verboseWithScope:(NSString*)scope message:(NSString*)message;
/*!
 * <div>
 * Writes a verbose message with exception to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 * @param ex The exception.
 */
- (void) verboseWithScope:(NSString*)scope message:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Writes a warn message to the log.
 * </div>
 * @param message The log message.
 */
- (void) warnWithMessage:(NSString*)message;
/*!
 * <div>
 * Writes a warn message with exception to the log.
 * </div>
 * @param message The log message.
 * @param ex The exception.
 */
- (void) warnWithMessage:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Writes a warn message to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 */
- (void) warnWithScope:(NSString*)scope message:(NSString*)message;
/*!
 * <div>
 * Writes a warn message with exception to the log.
 * </div>
 * @param scope The scope of this log message.
 * @param message The log message.
 * @param ex The exception.
 */
- (void) warnWithScope:(NSString*)scope message:(NSString*)message ex:(NSException*)ex;

@end

/*!
 * <div>
 * A file stream.
 * </div>
 */
@protocol FMIceLinkIFileStream

/*!
 * <div>
 * Closes the file stream.
 * </div>
 */
- (void) close;
/*!
 * <div>
 * Returns a boolean value indicating whether the file exists.
 * </div>
 */
- (bool) exists;
/*!
 * <div>
 * Flushes the file stream.
 * </div>
 */
- (bool) flush;
/*!
 * <div>
 * Gets the file stream length (must be opened first).
 * </div>
 */
- (long long) length;
/*!
 * <div>
 * Opens the file stream.
 * </div>
 * @param access The access requirement.
 */
- (void) openWithAccess:(FMIceLinkFileStreamAccess)access;
/*!
 * <div>
 * Gets the path.
 * </div>
 */
- (NSString*) path;
/*!
 * <div>
 * Gets the position in the file stream.
 * </div>
 */
- (long long) position;
/*!
 * <div>
 * Reads data from the file stream.
 * </div>
 * @param data The buffer to fill with data from the file.
 * @param index The index at which to start writing.
 * @param length The maximum number of bytes to read.
 * @return The number of bytes read from the file.
 */
- (int) readWithData:(NSMutableData*)data index:(int)index length:(int)length;
/*!
 * <div>
 * Sets the position in the file stream.
 * </div>
 */
- (void) setPosition:(long long)value;
/*!
 * <div>
 * Writes data to the file stream.
 * </div>
 * @param location The location to write to.
 * @param data The data to write to the file.
 * @param index The index at which to start reading.
 * @param length The number of bytes to write.
 * @return true if the data was written; otherwise, false.
 */
- (bool) writeToWithLocation:(int)location data:(NSMutableData*)data index:(int)index length:(int)length;
/*!
 * <div>
 * Writes data to the file stream.
 * </div>
 * @param data The data to write.
 * @param index The index at which to start reading.
 * @param length The number of bytes to write.
 * @return true if the data was written; otherwise, false.
 */
- (bool) writeWithData:(NSMutableData*)data index:(int)index length:(int)length;

@end

/*!
 * <div>
 * Platform-specific methods.
 * </div>
 */
@protocol FMIceLinkIPlatform

/*!
 * <div>
 * Gets the current CPU architecture.
 * </div>
 */
- (FMIceLinkArchitecture) architecture;
/*!
 * <div>
 * Gets the character used to separate directories.
 * </div>
 */
- (NSString*) directorySeparator;
/*!
 * <div>
 * Gets a value indicating whether this is little-endian platform.
 * </div>
 */
- (bool) isLittleEndian;
/*!
 * <div>
 * Gets a value indicating whether this is a mobile platform.
 * </div>
 */
- (bool) isMobile;
/*!
 * <div>
 * Gets the current operating system.
 * </div>
 */
- (FMIceLinkOperatingSystem) operatingSystem;
/*!
 * <div>
 * Gets the id of the current process.
 * </div>
 */
- (int) processId;
/*!
 * <div>
 * Sets a value indicating whether this is a mobile platform.
 * </div>
 */
- (void) setIsMobile:(bool)value;
/*!
 * <div>
 * Sets a value that indicates whether FIPS algorithms should be used.
 * Note that not all platforms or third-party libraries are FIPS-compliant, so
 * this should not be used as a guarantee of FIPS compliance.
 * </div>
 */
- (void) setUseFipsAlgorithms:(bool)value;
/*!
 * <div>
 * Gets the current programming language for the source code.
 * </div>
 */
- (FMIceLinkSourceLanguage) sourceLanguage;
/*!
 * <div>
 * Gets a value that indicates whether FIPS algorithms should be used.
 * Note that not all platforms or third-party libraries are FIPS-compliant, so
 * this should not be used as a guarantee of FIPS compliance.
 * </div>
 */
- (bool) useFipsAlgorithms;

@end

/*!
 * <div>
 * A thread-safe class for running timeouts on asynchronous methods.
 * </div>
 */
@protocol FMIceLinkITimeoutTimer

/*!
 * <div>
 * Starts the timer.
 * </div>
 * @param timeout The timeout length, in milliseconds.
 */
- (void) startWithTimeout:(int)timeout;
/*!
 * <div>
 * Stops the timer, notifying the calling code if the timeout has already elapsed.
 * </div>
 * @return true if the timer was successfully stopped in time; false
 * if the timeout elapsed and the timeout callback has been invoked.
 */
- (bool) stop;

@end

/*!
 * <div>
 * Interface for a promise that can be rejected.
 * </div>
 */
@protocol FMIceLinkIPromise

/*!
 * <div>
 * Rejects the promise.
 * </div>
 * @param exception The exception.
 */
- (bool) rejectWithException:(NSException*)exception;

@end

/*!
 * <div>
 * Contract for an implementation of the WebSocket protocol v8.
 * </div>
 */
@protocol FMIceLinkIWebSocket

/*!
 * <div>
 * Gets the number of bytes buffered in the send queue.
 * </div>
 */
- (int) bufferedAmount;
/*!
 * <div>
 * Closes the WebSocket connection.
 * </div>
 */
- (void) close;
/*!
 * <div>
 * Closes the WebSocket connection.
 * </div>
 * @param closeArgs The close arguments
 */
- (void) closeWithCloseArgs:(FMIceLinkWebSocketCloseArgs*)closeArgs;
/*!
 * <div>
 * Gets a value indicating whether the WebSocket is connected.
 * </div>
 */
- (bool) isOpen;
/*!
 * <div>
 * Opens the WebSocket connection.
 * </div>
 * @param openArgs The open arguments.
 */
- (void) openWithOpenArgs:(FMIceLinkWebSocketOpenArgs*)openArgs;
/*!
 * <div>
 * Gets a value indicating whether the WebSocket is secure.
 * </div>
 */
- (bool) secure;
/*!
 * <div>
 * Sends a message to the WebSocket server.
 * </div>
 * @param sendArgs The send arguments.
 */
- (void) sendWithSendArgs:(FMIceLinkWebSocketSendArgs*)sendArgs;

@end

/*!
 * <div>
 * An element.
 * </div>
 */
@protocol FMIceLinkIElement

/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Gets the pipeline JSON with this as the central point.
 * </div>
 */
- (NSString*) pipelineJson;

@end

/*!
 * <div>
 * An output.
 * </div><typeparam name="TIOutput">The type of the output interface.</typeparam><typeparam name="TIInput">The type of the input interface.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam>
 */
@protocol FMIceLinkIOutput

/*!
 * <div>
 * Adds an output.
 * </div>
 * @param output The output.
 */
- (void) addOutput:(NSObject<FMIceLinkIInput>*)output;
/*!
 * <div>
 * Adds some outputs.
 * </div>
 * @param outputs The outputs.
 */
- (void) addOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Gets the output.
 * </div>
 */
- (NSObject<FMIceLinkIInput>*) output;
/*!
 * <div>
 * Gets the output format.
 * </div>
 */
- (FMIceLinkMediaFormat*) outputFormat;
/*!
 * <div>
 * Gets the outputs.
 * </div>
 */
- (NSMutableArray*) outputs;
/*!
 * <div>
 * Gets the pipeline JSON from an output.
 * </div>
 */
- (NSString*) pipelineJsonFromOutput;
/*!
 * <div>
 * Removes an output.
 * </div>
 * @param output The output.
 */
- (bool) removeOutput:(NSObject<FMIceLinkIInput>*)output;
/*!
 * <div>
 * Removes all outputs.
 * </div>
 */
- (void) removeOutputs;
/*!
 * <div>
 * Removes some outputs.
 * </div>
 * @param outputs The outputs.
 */
- (void) removeOutputs:(NSMutableArray*)outputs;

@end

/*!
 * <div>
 * A media element.
 * </div>
 */
@protocol FMIceLinkIMediaElement

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (bool) destroy;
/*!
 * <div>
 * Gets a value indicating whether this instance is disabled.
 * </div>
 */
- (bool) disabled;
/*!
 * <div>
 * Gets a label that identifies this instance.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets a value indicating whether this instance is muted.
 * </div>
 */
- (bool) muted;
/*!
 * <div>
 * Gets a value indicating whether this instance is persistent.
 * If <code>true</code>, this element will not be destroyed unless
 * FMIceLinkIMediaElement#destroy is called explicitly on this instance.
 * It will survive destruction of any parent elements that are
 * being destroyed.
 * </div>
 */
- (bool) persistent;
/*!
 * <div>
 * Sets a value indicating whether this instance is muted.
 * </div>
 */
- (void) setMuted:(bool)value;

@end

/*!
 * <div>
 * A media output.
 * </div><typeparam name="TIOutput">The type of the output interface.</typeparam><typeparam name="TIInput">The type of the input interface.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam>
 */
@protocol FMIceLinkIMediaOutput

/*!
 * <div>
 * Adds a handler that is raised when control frames are processed.
 * </div>
 */
- (void) addOnProcessControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when control frames are processed.
 * </div>
 */
- (void (^)(void(^)(NSMutableArray*))) addOnProcessControlFramesWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are processed.
 * </div>
 */
- (void) addOnProcessControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is raised.
 * </div>
 */
- (void) addOnRaiseFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame is raised.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnRaiseFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is raised.
 * </div>
 */
- (void) addOnRaiseFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Gets the FIR sequence number.
 * </div>
 */
- (int) getFirSequenceNumber;
/*!
 * <div>
 * Increments the FIR sequence number.
 * </div>
 */
- (void) incrementFirSequenceNumber;
/*!
 * <div>
 * Gets the bitrate supported by this output, in kbps. Returns -1 if unknown.
 * </div>
 */
- (int) maxOutputBitrate;
/*!
 * <div>
 * Processes the control frames.
 * </div>
 * @param controlFrames The control frames.
 */
- (void) processControlFrames:(NSMutableArray*)controlFrames;
/*!
 * <div>
 * Gets whether the stream is muted or not.
 * </div>
 * @return
 */
- (bool) processGetMuteFromStream;
/*!
 * <div>
 * Processes a local SDP media description from an output.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 */
- (FMIceLinkError*) processSdpMediaDescriptionFromOutputWithMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Process a set mute call from a stream.
 * </div>
 * @param mute Whether to mute or not.
 */
- (void) processSetMuteFromStreamWithMute:(bool)mute;
/*!
 * <div>
 * Processes stats from an output.
 * </div>
 * @param stats The stats.
 */
- (void) processStatsFromOutputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Removes a handler that is raised when control frames are processed.
 * </div>
 */
- (void) removeOnProcessControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame is raised.
 * </div>
 */
- (void) removeOnRaiseFrame:(FMIceLinkAction1*)value;

@end

/*!
 * <div>
 * An input.
 * </div><typeparam name="TIOutput">The type of the output interface.</typeparam><typeparam name="TIInput">The type of the input interface.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam>
 */
@protocol FMIceLinkIInput

/*!
 * <div>
 * Adds an input.
 * </div>
 * @param input The input.
 */
- (void) addInput:(NSObject<FMIceLinkIOutput>*)input;
/*!
 * <div>
 * Adds some inputs.
 * </div>
 * @param inputs The inputs.
 */
- (void) addInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Gets the input.
 * </div>
 */
- (NSObject<FMIceLinkIOutput>*) input;
/*!
 * <div>
 * Gets the input format.
 * </div>
 */
- (FMIceLinkMediaFormat*) inputFormat;
/*!
 * <div>
 * Gets the inputs.
 * </div>
 */
- (NSMutableArray*) inputs;
/*!
 * <div>
 * Gets the pipeline JSON from an input.
 * </div>
 */
- (NSString*) pipelineJsonFromInput;
/*!
 * <div>
 * Removes an input.
 * </div>
 * @param input The input.
 */
- (bool) removeInput:(NSObject<FMIceLinkIOutput>*)input;
/*!
 * <div>
 * Removes all inputs.
 * </div>
 */
- (void) removeInputs;
/*!
 * <div>
 * Removes some inputs.
 * </div>
 * @param inputs The inputs.
 */
- (void) removeInputs:(NSMutableArray*)inputs;

@end

/*!
 * <div>
 * A media input.
 * </div><typeparam name="TIOutput">The type of the output interface.</typeparam><typeparam name="TIInput">The type of the input interface.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam>
 */
@protocol FMIceLinkIMediaInput

/*!
 * <div>
 * Adds a handler that is raised when the Disabled property changes state.
 * </div>
 */
- (void) addOnDisabledChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame is processed.
 * </div>
 */
- (void) addOnProcessFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame is processed.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnProcessFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is processed.
 * </div>
 */
- (void) addOnProcessFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are raised.
 * </div>
 */
- (void) addOnRaiseControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when control frames are raised.
 * </div>
 */
- (void (^)(void(^)(NSMutableArray*))) addOnRaiseControlFramesWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are raised.
 * </div>
 */
- (void) addOnRaiseControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/*!
 * <div>
 * Gets the bitrate supported by this input, in kbps. Returns -1 if unknown.
 * </div>
 */
- (int) maxInputBitrate;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 */
- (bool) processFrame:(FMIceLinkMediaFrame*)frame;
/*!
 * <div>
 * Gets the ProcessFramePolicy for this media input.
 * </div>
 */
- (FMIceLinkProcessFramePolicy) processFramePolicy;
/*!
 * <div>
 * Processes a local SDP media description from an input.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 */
- (FMIceLinkError*) processSdpMediaDescriptionFromInputWithMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Processes stats from an input.
 * </div>
 * @param stats The stats.
 */
- (void) processStatsFromInputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Removes a handler that is raised when the Disabled property changes state.
 * </div>
 */
- (void) removeOnDisabledChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame is processed.
 * </div>
 */
- (void) removeOnProcessFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when control frames are raised.
 * </div>
 */
- (void) removeOnRaiseControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the ProcessFramePolicy for this media input.
 * </div>
 */
- (void) setProcessFramePolicy:(FMIceLinkProcessFramePolicy)value;

@end

/*!
 * <div>
 * An audio element.
 * </div>
 */
@protocol FMIceLinkIAudioElement

@end

/*!
 * <div>
 * An audio input.
 * </div>
 */
@protocol FMIceLinkIAudioInput

/*!
 * <div>
 * Gets the configuration.
 * </div>
 */
- (FMIceLinkAudioConfig*) config;
/*!
 * <div>
 * Gets a value indicating the gain
 * (input amplification) of this sink.
 * Any value greater than or equal to 0.0
 * is acceptable.
 * </div>
 */
- (double) gain;
/*!
 * <div>
 * Sets a value indicating the gain
 * (input amplification) of this sink.
 * Any value greater than or equal to 0.0
 * is acceptable.
 * </div>
 */
- (void) setGain:(double)value;

@end

/*!
 * <div>
 * An audio output.
 * </div>
 */
@protocol FMIceLinkIAudioOutput

/*!
 * <div>
 * Gets the configuration.
 * </div>
 */
- (FMIceLinkAudioConfig*) config;
/*!
 * <div>
 * Sets a value indicating the volume
 * (output resistance) of this source.
 * Valid value range is 0.0 to 1.0, inclusive.
 * </div>
 */
- (void) setVolume:(double)value;
/*!
 * <div>
 * Gets a value indicating the volume
 * (output resistance) of this source.
 * Valid value range is 0.0 to 1.0, inclusive.
 * </div>
 */
- (double) volume;

@end

/*!
 * <div>
 * Stream interface.
 * </div>
 */
@protocol FMIceLinkIStream

/*!
 * <div>
 * Adds a handler that is raised when the signalling state changes.
 * </div>
 */
- (void) addOnDirectionChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the stream state changes.
 * </div>
 */
- (void) addOnStateChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Changes this stream's direction.
 * </div>
 */
- (FMIceLinkError*) changeDirectionWithNewDirection:(FMIceLinkStreamDirection)newDirection;
/*!
 * <div>
 * Gets the current direction.
 * </div>
 */
- (FMIceLinkStreamDirection) direction;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets current direction indicated by the local description.
 * </div>
 */
- (FMIceLinkStreamDirection) localDirection;
/*!
 * <div>
 * Gets a value indicating whether receiving media is supported by the local peer on this stream.
 * </div>
 */
- (bool) localReceive;
/*!
 * <div>
 * Gets a value indicating whether sending media is supported by the local peer on this stream.
 * </div>
 */
- (bool) localSend;
/*!
 * <div>
 * Gets the current direction indicated by the remote description.
 * </div>
 */
- (FMIceLinkStreamDirection) remoteDirection;
/*!
 * <div>
 * Gets a value indicating whether receiving media is supported by the local peer on this stream. Returns false if the remote stream direction has not been received.
 * </div>
 */
- (bool) remoteReceive;
/*!
 * <div>
 * Gets a value indicating whether sending media is supported by the remote peer on this stream. Returns false if the remote stream direction has not been received.
 * </div>
 */
- (bool) remoteSend;
/*!
 * <div>
 * Removes a handler that is raised when the signalling state changes.
 * </div>
 */
- (void) removeOnDirectionChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the stream state changes.
 * </div>
 */
- (void) removeOnStateChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Sets current direction indicated by the local description.
 * </div>
 */
- (void) setLocalDirection:(FMIceLinkStreamDirection)value;
/*!
 * <div>
 * Sets a value indicating whether receiving media is supported by the local peer on this stream.
 * </div>
 */
- (void) setLocalReceive:(bool)value;
/*!
 * <div>
 * Sets a value indicating whether sending media is supported by the local peer on this stream.
 * </div>
 */
- (void) setLocalSend:(bool)value;
/*!
 * <div>
 * Sets an optional tag to identify this instance.
 * </div>
 */
- (void) setTag:(NSString*)value;
/*!
 * <div>
 * Gets the current state.
 * </div>
 */
- (FMIceLinkStreamState) state;
/*!
 * <div>
 * Gets an optional tag to identify this instance.
 * </div>
 */
- (NSString*) tag;
/*!
 * <div>
 * Gets the type.
 * </div>
 */
- (FMIceLinkStreamType) type;

@end

/*!
 * <div>
 * Media stream interface.
 * </div>
 */
@protocol FMIceLinkIMediaStream

/*!
 * <div>
 * Gets the local bandwidth in Kbps (Kilobits per second).
 * </div>
 */
- (int) localBandwidth;
/*!
 * <div>
 * Gets a value indicating whether this instance is muted.
 * </div>
 */
- (bool) muted;
/*!
 * <div>
 * Gets the remote bandwidth in Kbps (Kilobits per second).
 * </div>
 */
- (int) remoteBandwidth;
/*!
 * <div>
 * Sets the local bandwidth in Kbps (Kilobits per second).
 * </div>
 */
- (void) setLocalBandwidth:(int)value;
/*!
 * <div>
 * Sets a value indicating whether this instance is muted.
 * </div>
 */
- (void) setMuted:(bool)value;

@end

/*!
 * <div>
 * A synchronizable stream.
 * </div>
 */
@protocol FMIceLinkISynchronizableStream

/*!
 * <div>
 * Adds a handler that is raised by master streams when the synchronize context is ready.
 * </div>
 */
- (void) addOnMasterSynchronizeContextReady:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised by master streams when the synchronize context is ready.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkSynchronizeContext*))) addOnMasterSynchronizeContextReadyWithBlock;
/*!
 * <div>
 * Adds a handler that is raised by master streams when the synchronize context is ready.
 * </div>
 */
- (void) addOnMasterSynchronizeContextReadyWithBlock:(void(^)(FMIceLinkSynchronizeContext*))valueBlock;
/*!
 * <div>
 * Gets the stream identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Gets the remote description media identifier.
 * </div>
 */
- (NSString*) remoteDescriptionMediaId;
/*!
 * <div>
 * Removes a handler that is raised by master streams when the synchronize context is ready.
 * </div>
 */
- (void) removeOnMasterSynchronizeContextReady:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the synchronize context.
 * </div>
 */
- (void) setSynchronizeContext:(FMIceLinkSynchronizeContext*)value;
/*!
 * <div>
 * Gets the synchronize context.
 * </div>
 */
- (FMIceLinkSynchronizeContext*) synchronizeContext;
/*!
 * <div>
 * Gets all synchronizers in the stream output tracks.
 * </div>
 */
- (NSMutableArray*) synchronizers;
/*!
 * <div>
 * Initializes synchronization.
 * </div>
 * @param master Whether this is a master stream.
 */
- (void) synchronizeWithMaster:(bool)master;
/*!
 * <div>
 * Gets the stream type.
 * </div>
 */
- (FMIceLinkStreamType) type;

@end

/*!
 * <div>
 * Audio stream interface.
 * </div>
 */
@protocol FMIceLinkIAudioStream

/*!
 * <div>
 * Adds a handler that is raised when a DTMF tone is received.
 * </div>
 */
- (void) addOnReceiveDtmfTone:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the received DTMF tone changes.
 * </div>
 */
- (void) addOnReceiveDtmfToneChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the received DTMF tone changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDtmfTone*))) addOnReceiveDtmfToneChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the received DTMF tone changes.
 * </div>
 */
- (void) addOnReceiveDtmfToneChangeWithBlock:(void(^)(FMIceLinkDtmfTone*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a DTMF tone is received.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDtmfTone*))) addOnReceiveDtmfToneWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a DTMF tone is received.
 * </div>
 */
- (void) addOnReceiveDtmfToneWithBlock:(void(^)(FMIceLinkDtmfTone*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a DTMF tone is sent.
 * </div>
 */
- (void) addOnSendDtmfTone:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the sent DTMF tone changes.
 * </div>
 */
- (void) addOnSendDtmfToneChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the sent DTMF tone changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDtmfTone*))) addOnSendDtmfToneChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the sent DTMF tone changes.
 * </div>
 */
- (void) addOnSendDtmfToneChangeWithBlock:(void(^)(FMIceLinkDtmfTone*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a DTMF tone is sent.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDtmfTone*))) addOnSendDtmfToneWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a DTMF tone is sent.
 * </div>
 */
- (void) addOnSendDtmfToneWithBlock:(void(^)(FMIceLinkDtmfTone*))valueBlock;
/*!
 * <div>
 * Inserts a DTMF tone.
 * </div>
 * @param dtmfTone The DTMF tone.
 */
- (bool) insertDtmfTone:(FMIceLinkDtmfTone*)dtmfTone;
/*!
 * <div>
 * Inserts DTMF tones.
 * </div>
 * @param dtmfTones The DTMF tones.
 */
- (bool) insertDtmfTones:(NSMutableArray*)dtmfTones;
/*!
 * <div>
 * Removes a handler that is raised when a DTMF tone is received.
 * </div>
 */
- (void) removeOnReceiveDtmfTone:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the received DTMF tone changes.
 * </div>
 */
- (void) removeOnReceiveDtmfToneChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a DTMF tone is sent.
 * </div>
 */
- (void) removeOnSendDtmfTone:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the sent DTMF tone changes.
 * </div>
 */
- (void) removeOnSendDtmfToneChange:(FMIceLinkAction1*)value;

@end

/*!
 * <div>
 * A media rendering synchronizer.
 * </div>
 */
@protocol FMIceLinkISynchronizer

/*!
 * <div>
 * Gets whether this is the master.
 * </div>
 */
- (bool) master;
/*!
 * <div>
 * Gets the master system timestamp.
 * </div>
 */
- (long long) masterSystemTimestamp;
/*!
 * <div>
 * Sets the master system timestamp.
 * </div>
 */
- (void) setMasterSystemTimestamp:(long long)value;
/*!
 * <div>
 * Gets the slaves.
 * </div>
 */
- (NSMutableArray*) slaves;
/*!
 * <div>
 * Starts synchronizing with slaves. This
 * method is only called if this is the master.
 * </div>
 * @param slaves The slaves.
 */
- (void) synchronizeWithSlaves:(NSMutableArray*)slaves;

@end

/*!
 * <div>
 * Media track interface.
 * </div>
 */
@protocol FMIceLinkIMediaTrack

/*!
 * <div>
 * Adds a handler that is raised when the track is destroyed.
 * </div>
 */
- (void) addOnDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the track is started.
 * Only applicable for local media tracks.
 * </div>
 */
- (void) addOnStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the track is stopped.
 * Only applicable for local media tracks.
 * </div>
 */
- (void) addOnStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Changes the sink output while the media track is active.
 * </div>
 * @param sinkOutput The sink output.
 * @return
 */
- (FMIceLinkFuture*) changeSinkOutput:(FMIceLinkSinkOutput*)sinkOutput;
/*!
 * <div>
 * Changes the source input while the media track is active.
 * </div>
 * @param sourceInput The source input.
 * @return
 */
- (FMIceLinkFuture*) changeSourceInput:(FMIceLinkSourceInput*)sourceInput;
/*!
 * <div>
 * Destroys this media track.
 * </div>
 */
- (bool) destroy;
/*!
 * <div>
 * Gets the available sink outputs.
 * </div>
 * @return
 * A future with an array of sink outputs.
 * 
 */
- (FMIceLinkFuture*) getSinkOutputs;
/*!
 * <div>
 * Gets the available source inputs.
 * </div>
 * @return
 * A future with an array of source inputs.
 * 
 */
- (FMIceLinkFuture*) getSourceInputs;
/*!
 * <div>
 * Gets a value indicating whether this
 * track is muted.
 * </div>
 */
- (bool) muted;
/*!
 * <div>
 * Removes a handler that is raised when the track is destroyed.
 * </div>
 */
- (void) removeOnDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the track is started.
 * Only applicable for local media tracks.
 * </div>
 */
- (void) removeOnStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the track is stopped.
 * Only applicable for local media tracks.
 * </div>
 */
- (void) removeOnStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Sets a value indicating whether this
 * track is muted.
 * </div>
 */
- (void) setMuted:(bool)value;
/*!
 * <div>
 * Sets the current sink output.
 * </div>
 */
- (void) setSinkOutput:(FMIceLinkSinkOutput*)value;
/*!
 * <div>
 * Sets the current source input.
 * </div>
 */
- (void) setSourceInput:(FMIceLinkSourceInput*)value;
/*!
 * <div>
 * Gets the current sink output.
 * </div>
 */
- (FMIceLinkSinkOutput*) sinkOutput;
/*!
 * <div>
 * Gets the current source input.
 * </div>
 */
- (FMIceLinkSourceInput*) sourceInput;

@end

/*!
 * <div>
 * Audio track interface.
 * </div>
 */
@protocol FMIceLinkIAudioTrack

/*!
 * <div>
 * Adds a handler that is raised whenever the level of
 * this track is calculated.
 * </div>
 */
- (void) addOnLevel:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the level of
 * this track is calculated.
 * </div>
 */
- (void (^)(void(^)(double))) addOnLevelWithBlock;
/*!
 * <div>
 * Adds a handler that is raised whenever the level of
 * this track is calculated.
 * </div>
 */
- (void) addOnLevelWithBlock:(void(^)(double))valueBlock;
/*!
 * <div>
 * Gets a value indicating the gain
 * (input amplification) of this track.
 * Any value greater than or equal to 0.0
 * is acceptable.
 * </div>
 */
- (double) gain;
/*!
 * <div>
 * Removes a handler that is raised whenever the level of
 * this track is calculated.
 * </div>
 */
- (void) removeOnLevel:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets a value indicating the gain
 * (input amplification) of this track.
 * Any value greater than or equal to 0.0
 * is acceptable.
 * </div>
 */
- (void) setGain:(double)value;
/*!
 * <div>
 * Sets a value indicating the volume
 * (output resistance) of this track.
 * Valid value range is 0.0 to 1.0, inclusive.
 * </div>
 */
- (void) setVolume:(double)value;
/*!
 * <div>
 * Gets a value indicating the volume
 * (output resistance) of this track.
 * Valid value range is 0.0 to 1.0, inclusive.
 * </div>
 */
- (double) volume;

@end

/*!
 * <div>
 * A video element.
 * </div>
 */
@protocol FMIceLinkIVideoElement

@end

/*!
 * <div>
 * A video input.
 * </div>
 */
@protocol FMIceLinkIVideoInput

@end

/*!
 * <div>
 * A video output.
 * </div>
 */
@protocol FMIceLinkIVideoOutput

@end

/*!
 * <div>
 * Connection interface.
 * </div>
 */
@protocol FMIceLinkIConnection

/*!
 * <div>
 * Adds an ICE server.
 * </div>
 */
- (void) addIceServer:(FMIceLinkIceServer*)iceServer;
/*!
 * <div>
 * Adds some ICE servers.
 * </div>
 */
- (void) addIceServers:(NSMutableArray*)iceServers;
/*!
 * <div>
 * Adds a handler that is raised when external connection Id changes.
 * </div>
 */
- (void) addOnExternalIdChange:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Adds a handler that is raised when external connection Id changes.
 * </div>
 */
- (void (^)(void(^)(NSString*, NSString*))) addOnExternalIdChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when external connection Id changes.
 * </div>
 */
- (void) addOnExternalIdChangeWithBlock:(void(^)(NSString*, NSString*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the gathering state changes.
 * </div>
 */
- (void) addOnGatheringStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the gathering state changes.
 * </div>
 */
- (void (^)(void(^)(id))) addOnGatheringStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the gathering state changes.
 * </div>
 */
- (void) addOnGatheringStateChangeWithBlock:(void(^)(id))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the Ice connection state changes.
 * </div>
 */
- (void) addOnIceConnectionStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the Ice connection state changes.
 * </div>
 */
- (void (^)(void(^)(id))) addOnIceConnectionStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the Ice connection state changes.
 * </div>
 */
- (void) addOnIceConnectionStateChangeWithBlock:(void(^)(id))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a local candidate is added.
 * </div>
 */
- (void) addOnLocalCandidate:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Adds a handler that is raised when a local candidate is added.
 * </div>
 */
- (void (^)(void(^)(id, FMIceLinkCandidate*))) addOnLocalCandidateWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a local candidate is added.
 * </div>
 */
- (void) addOnLocalCandidateWithBlock:(void(^)(id, FMIceLinkCandidate*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a local description is set.
 * </div>
 */
- (void) addOnLocalDescription:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Adds a handler that is raised when a local description is set.
 * </div>
 */
- (void (^)(void(^)(id, FMIceLinkSessionDescription*))) addOnLocalDescriptionWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a local description is set.
 * </div>
 */
- (void) addOnLocalDescriptionWithBlock:(void(^)(id, FMIceLinkSessionDescription*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a remote candidate is added.
 * </div>
 */
- (void) addOnRemoteCandidate:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Adds a handler that is raised when a remote candidate is added.
 * </div>
 */
- (void (^)(void(^)(id, FMIceLinkCandidate*))) addOnRemoteCandidateWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a remote candidate is added.
 * </div>
 */
- (void) addOnRemoteCandidateWithBlock:(void(^)(id, FMIceLinkCandidate*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a remote description is set.
 * </div>
 */
- (void) addOnRemoteDescription:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Adds a handler that is raised when a remote description is set.
 * </div>
 */
- (void (^)(void(^)(id, FMIceLinkSessionDescription*))) addOnRemoteDescriptionWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a remote description is set.
 * </div>
 */
- (void) addOnRemoteDescriptionWithBlock:(void(^)(id, FMIceLinkSessionDescription*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the signalling state changes.
 * </div>
 */
- (void) addOnSignallingStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the signalling state changes.
 * </div>
 */
- (void (^)(void(^)(id))) addOnSignallingStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the signalling state changes.
 * </div>
 */
- (void) addOnSignallingStateChangeWithBlock:(void(^)(id))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the connection state changes.
 * </div>
 */
- (void) addOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the connection state changes.
 * </div>
 */
- (void (^)(void(^)(id))) addOnStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the connection state changes.
 * </div>
 */
- (void) addOnStateChangeWithBlock:(void(^)(id))valueBlock;
/*!
 * <div>
 * Adds the remote candidate.
 * </div>
 */
- (FMIceLinkFuture*) addRemoteCandidate:(FMIceLinkCandidate*)remoteCandidate;
/*!
 * <div>
 * Gets the first audio stream.
 * </div>
 */
- (id) audioStream;
/*!
 * <div>
 * Gets the audio streams.
 * </div>
 */
- (NSMutableArray*) audioStreams;
/*!
 * <div>
 * Closes this instance.
 * </div>
 */
- (void) close;
/*!
 * <div>
 * Creates an answer.
 * </div>
 */
- (FMIceLinkFuture*) createAnswer;
/*!
 * <div>
 * Creates an offer.
 * </div>
 */
- (FMIceLinkFuture*) createOffer;
/*!
 * <div>
 * Gets the first data stream.
 * </div>
 */
- (id) dataStream;
/*!
 * <div>
 * Gets the data streams.
 * </div>
 */
- (NSMutableArray*) dataStreams;
/*!
 * <div>
 * Gets the amount of time (in milliseconds)
 * to wait for connectivity checks to re-establish
 * after they start to fail on a live connection.
 * Defaults to 10,000.
 * </div>
 */
- (int) deadStreamTimeout;
/*!
 * <div>
 * Gets the error.
 * </div>
 */
- (FMIceLinkError*) error;
/*!
 * <div>
 * Gets the external identifier.
 * </div>
 */
- (NSString*) externalId;
/*!
 * <div>
 * Gets the ICE gathering state.
 * </div>
 * @return
 */
- (FMIceLinkIceGatheringState) gatheringState;
/*!
 * <div>
 * Gets connection stats.
 * </div>
 */
- (FMIceLinkFuture*) getStats;
/*!
 * <div>
 * Gets whether this connection has an audio stream.
 * </div>
 */
- (bool) hasAudio;
/*!
 * <div>
 * Gets whether this connection has a data stream.
 * </div>
 */
- (bool) hasData;
/*!
 * <div>
 * Gets whether this connection has a video stream.
 * </div>
 */
- (bool) hasVideo;
/*!
 * <div>
 * Gets the ICE connection state.
 * </div>
 * @return
 */
- (FMIceLinkIceConnectionState) iceConnectionState;
/*!
 * <div>
 * Gets the ICE gather policy.
 * </div>
 */
- (FMIceLinkIceGatherPolicy) iceGatherPolicy;
/*!
 * <div>
 * Gets the ICE server.
 * </div>
 */
- (FMIceLinkIceServer*) iceServer;
/*!
 * <div>
 * Gets the ICE servers.
 * </div>
 */
- (NSMutableArray*) iceServers;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Gets a value indicating whether legacy Connection.Timeout should be used.
 * When disabled, Connection.Timeout only accounts for the time spent trying to establish
 * connectivity (i.e. time it takes to transition from the Connecting to the Connected state;
 * from the time point when both offer and answer had been set to the connection
 * being fully established).
 * When enabled, Connection.Timeout accounts for the time spent from receiving an offer (or creating an
 * offer) to establishing connectivity (i.e. time it takes to transition from Initializing to Connected
 * state).
 * By default, LegacyTimeout is set to true, so that existing behavior is preserved. However, in the future
 * default will be updated to false. This means that IL will not account for any signalling delays that may
 * occur while establishing connectivity. This option will be later deprecated.
 * </div>
 */
- (bool) legacyTimeout;
/*!
 * <div>
 * Gets the local description.
 * </div>
 */
- (FMIceLinkSessionDescription*) localDescription;
/*!
 * <div>
 * Gets the remote description.
 * </div>
 */
- (FMIceLinkSessionDescription*) remoteDescription;
/*!
 * <div>
 * Removes an ICE server.
 * </div>
 */
- (void) removeIceServer:(FMIceLinkIceServer*)iceServer;
/*!
 * <div>
 * Removes some ICE servers.
 * </div>
 */
- (void) removeIceServers:(NSMutableArray*)iceServers;
/*!
 * <div>
 * Removes a handler that is raised when external connection Id changes.
 * </div>
 */
- (void) removeOnExternalIdChange:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Removes a handler that is raised when the gathering state changes.
 * </div>
 */
- (void) removeOnGatheringStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the Ice connection state changes.
 * </div>
 */
- (void) removeOnIceConnectionStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a local candidate is added.
 * </div>
 */
- (void) removeOnLocalCandidate:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Removes a handler that is raised when a local description is set.
 * </div>
 */
- (void) removeOnLocalDescription:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Removes a handler that is raised when a remote candidate is added.
 * </div>
 */
- (void) removeOnRemoteCandidate:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Removes a handler that is raised when a remote description is set.
 * </div>
 */
- (void) removeOnRemoteDescription:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Removes a handler that is raised when the signalling state changes.
 * </div>
 */
- (void) removeOnSignallingStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the connection state changes.
 * </div>
 */
- (void) removeOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the amount of time (in milliseconds)
 * to wait for connectivity checks to re-establish
 * after they start to fail on a live connection.
 * Defaults to 10,000.
 * </div>
 */
- (void) setDeadStreamTimeout:(int)value;
/*!
 * <div>
 * Sets the external identifier.
 * </div>
 */
- (void) setExternalId:(NSString*)value;
/*!
 * <div>
 * Sets the ICE gather policy.
 * </div>
 */
- (void) setIceGatherPolicy:(FMIceLinkIceGatherPolicy)value;
/*!
 * <div>
 * Sets the ICE server.
 * </div>
 */
- (void) setIceServer:(FMIceLinkIceServer*)value;
/*!
 * <div>
 * Sets the ICE servers.
 * </div>
 */
- (void) setIceServers:(NSMutableArray*)value;
/*!
 * <div>
 * Sets a value indicating whether legacy Connection.Timeout should be used.
 * When disabled, Connection.Timeout only accounts for the time spent trying to establish
 * connectivity (i.e. time it takes to transition from the Connecting to the Connected state;
 * from the time point when both offer and answer had been set to the connection
 * being fully established).
 * When enabled, Connection.Timeout accounts for the time spent from receiving an offer (or creating an
 * offer) to establishing connectivity (i.e. time it takes to transition from Initializing to Connected
 * state).
 * By default, LegacyTimeout is set to true, so that existing behavior is preserved. However, in the future
 * default will be updated to false. This means that IL will not account for any signalling delays that may
 * occur while establishing connectivity. This option will be later deprecated.
 * </div>
 */
- (void) setLegacyTimeout:(bool)value;
/*!
 * <div>
 * Sets the local description.
 * </div>
 */
- (FMIceLinkFuture*) setLocalDescription:(FMIceLinkSessionDescription*)localDescription;
/*!
 * <div>
 * Sets the remote description.
 * </div>
 */
- (FMIceLinkFuture*) setRemoteDescription:(FMIceLinkSessionDescription*)remoteDescription;
/*!
 * <div>
 * Sets the tie breaker.
 * </div>
 */
- (void) setTieBreaker:(NSString*)value;
/*!
 * <div>
 * Sets the amount of time (in milliseconds)
 * to wait for a connection to establish before
 * giving up and closing it. Defaults to 30,000.
 * </div>
 */
- (void) setTimeout:(int)value;
/*!
 * <div>
 * Sets the trickle ICE policy.
 * </div>
 */
- (void) setTrickleIcePolicy:(FMIceLinkTrickleIcePolicy)value;
/*!
 * <div>
 * Gets the current signalling state.
 * </div>
 */
- (FMIceLinkSignallingState) signallingState;
/*!
 * <div>
 * Gets the current state.
 * </div>
 */
- (FMIceLinkConnectionState) state;
/*!
 * <div>
 * Gets the streams.
 * </div>
 */
- (NSMutableArray*) streams;
/*!
 * <div>
 * Gets the tie breaker.
 * </div>
 */
- (NSString*) tieBreaker;
/*!
 * <div>
 * Gets the amount of time (in milliseconds)
 * to wait for a connection to establish before
 * giving up and closing it. Defaults to 30,000.
 * </div>
 */
- (int) timeout;
/*!
 * <div>
 * Gets the trickle ICE policy.
 * </div>
 */
- (FMIceLinkTrickleIcePolicy) trickleIcePolicy;
/*!
 * <div>
 * Gets the first video stream.
 * </div>
 */
- (id) videoStream;
/*!
 * <div>
 * Gets the video streams.
 * </div>
 */
- (NSMutableArray*) videoStreams;

@end

/*!
 * <div>
 * View sink interface.
 * </div>
 */
@protocol FMIceLinkIViewSink

/*!
 * <div>
 * Sets a value indicating whether the view is mirrored.
 * </div>
 */
- (void) setViewMirror:(bool)value;
/*!
 * <div>
 * Sets the view scale.
 * </div>
 */
- (void) setViewScale:(FMIceLinkLayoutScale)value;
/*!
 * <div>
 * Gets the view.
 * </div>
 */
- (id) view;
/*!
 * <div>
 * Gets a value indicating whether the view is mirrored.
 * </div>
 */
- (bool) viewMirror;
/*!
 * <div>
 * Gets the view scale.
 * </div>
 */
- (FMIceLinkLayoutScale) viewScale;

@end

/*!
 * <div>
 * Data channel interface.
 * </div>
 */
@protocol FMIceLinkIDataChannel

/*!
 * <div>
 * Adds a handler that is raised when the state changes.
 * </div>
 */
- (void) addOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the state changes.
 * </div>
 */
- (void (^)(void(^)(id))) addOnStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the state changes.
 * </div>
 */
- (void) addOnStateChangeWithBlock:(void(^)(id))valueBlock;
/*!
 * <div>
 * Gets the data channel identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Gets the label.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the callback to execute when a message is received.
 * </div>
 */
- (FMIceLinkAction1*) onReceive;
/*!
 * <div>
 * Gets a value indicating whether messages will be delivered in the order they are sent.
 * </div>
 */
- (bool) ordered;
/*!
 * <div>
 * Removes a handler that is raised when the state changes.
 * </div>
 */
- (void) removeOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sends a byte array.
 * </div>
 */
- (FMIceLinkFuture*) sendDataBytes:(FMIceLinkDataBuffer*)dataBytes;
/*!
 * <div>
 * Sends a string.
 * </div>
 */
- (FMIceLinkFuture*) sendDataString:(NSString*)dataString;
/*!
 * <div>
 * Sets the callback to execute when a message is received.
 * </div>
 */
- (void) setOnReceive:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to execute when a message is received.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDataChannelReceiveArgs*))) setOnReceiveBlock;
/*!
 * <div>
 * Sets the callback to execute when a message is received.
 * </div>
 */
- (void) setOnReceiveBlock:(void(^)(FMIceLinkDataChannelReceiveArgs*))valueBlock;
/*!
 * <div>
 * Gets the state.
 * </div>
 */
- (FMIceLinkDataChannelState) state;
/*!
 * <div>
 * Gets the subprotocol.
 * </div>
 */
- (NSString*) subprotocol;

@end

/*!
 * <div>
 * Data stream interface.
 * </div>
 */
@protocol FMIceLinkIDataStream

/*!
 * <div>
 * Gets the channels.
 * </div>
 */
- (NSMutableArray*) channels;

@end

/*!
 * <div>
 * Media interface.
 * </div>
 */
@protocol FMIceLinkIMedia

/*!
 * <div>
 * Adds a handler that is raised when the first audio track is destroyed.
 * </div>
 */
- (void) addOnAudioDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the level of
 * the first audio track is calculated.
 * </div>
 */
- (void) addOnAudioLevel:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the level of
 * the first audio track is calculated.
 * </div>
 */
- (void (^)(void(^)(double))) addOnAudioLevelWithBlock;
/*!
 * <div>
 * Adds a handler that is raised whenever the level of
 * the first audio track is calculated.
 * </div>
 */
- (void) addOnAudioLevelWithBlock:(void(^)(double))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the first video track is destroyed.
 * </div>
 */
- (void) addOnVideoDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the size of
 * the first video track is calculated.
 * </div>
 */
- (void) addOnVideoSize:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the size of
 * the first video track is calculated.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkSize*))) addOnVideoSizeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised whenever the size of
 * the first video track is calculated.
 * </div>
 */
- (void) addOnVideoSizeWithBlock:(void(^)(FMIceLinkSize*))valueBlock;
/*!
 * <div>
 * Gets a value indicating the gain
 * (input amplification) of the first audio track.
 * </div>
 */
- (double) audioGain;
/*!
 * <div>
 * Gets a value indicating whether the
 * first audio track is muted.
 * </div>
 */
- (bool) audioMuted;
/*!
 * <div>
 * Gets the first audio track.
 * </div>
 */
- (NSObject<FMIceLinkIAudioTrack>*) audioTrack;
/*!
 * <div>
 * Gets the audio tracks.
 * </div>
 */
- (NSMutableArray*) audioTracks;
/*!
 * <div>
 * Gets a value indicating the volume
 * (output resistance) of the first audio track.
 * </div>
 */
- (double) audioVolume;
/*!
 * <div>
 * Destroys this media.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Grabs a frame from the first video track.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) grabVideoFrame;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Removes a handler that is raised when the first audio track is destroyed.
 * </div>
 */
- (void) removeOnAudioDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised whenever the level of
 * the first audio track is calculated.
 * </div>
 */
- (void) removeOnAudioLevel:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the first video track is destroyed.
 * </div>
 */
- (void) removeOnVideoDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised whenever the size of
 * the first video track is calculated.
 * </div>
 */
- (void) removeOnVideoSize:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets a value indicating the gain
 * (input amplification) of the first audio track.
 * </div>
 */
- (void) setAudioGain:(double)value;
/*!
 * <div>
 * Sets a value indicating whether the
 * first audio track is muted.
 * </div>
 */
- (void) setAudioMuted:(bool)value;
/*!
 * <div>
 * Sets a value indicating the volume
 * (output resistance) of the first audio track.
 * </div>
 */
- (void) setAudioVolume:(double)value;
/*!
 * <div>
 * Sets the identifier.
 * </div>
 */
- (void) setId:(NSString*)value;
/*!
 * <div>
 * Sets a value indicating whether the
 * first video track is muted.
 * </div>
 */
- (void) setVideoMuted:(bool)value;
/*!
 * <div>
 * Gets a value indicating whether the
 * first video track is muted.
 * </div>
 */
- (bool) videoMuted;
/*!
 * <div>
 * Gets the size of the first video track.
 * </div>
 */
- (FMIceLinkSize*) videoSize;
/*!
 * <div>
 * Gets the first video track.
 * </div>
 */
- (NSObject<FMIceLinkIVideoTrack>*) videoTrack;
/*!
 * <div>
 * Gets the video tracks.
 * </div>
 */
- (NSMutableArray*) videoTracks;

@end

/*!
 * <div>
 * Local media interface.
 * </div>
 */
@protocol FMIceLinkILocalMedia

/*!
 * <div>
 * Adds a handler that is raised when the audio track is started.
 * </div>
 */
- (void) addOnAudioStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the audio track is stopped.
 * </div>
 */
- (void) addOnAudioStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the video track is started.
 * </div>
 */
- (void) addOnVideoStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the video track is stopped.
 * </div>
 */
- (void) addOnVideoStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Gets the current audio source input
 * of the first audio track.
 * </div>
 */
- (FMIceLinkSourceInput*) audioSourceInput;
/*!
 * <div>
 * Changes the audio source input of the first
 * audio track while the media is active.
 * </div>
 * @param audioSourceInput The audio source input.
 * @return
 */
- (FMIceLinkFuture*) changeAudioSourceInput:(FMIceLinkSourceInput*)audioSourceInput;
/*!
 * <div>
 * Changes the video source input of the first
 * video track while the media is active.
 * </div>
 * @param videoSourceInput The video source input.
 * @return
 */
- (FMIceLinkFuture*) changeVideoSourceInput:(FMIceLinkSourceInput*)videoSourceInput;
/*!
 * <div>
 * Gets the available audio source inputs
 * of the first audio track.
 * </div>
 * @return A future with an array of audio source inputs.
 */
- (FMIceLinkFuture*) getAudioSourceInputs;
/*!
 * <div>
 * Gets the available video source inputs
 * of the first video track.
 * </div>
 * @return A future with an array of video source inputs.
 */
- (FMIceLinkFuture*) getVideoSourceInputs;
/*!
 * <div>
 * Removes a handler that is raised when the audio track is started.
 * </div>
 */
- (void) removeOnAudioStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the audio track is stopped.
 * </div>
 */
- (void) removeOnAudioStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the video track is started.
 * </div>
 */
- (void) removeOnVideoStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the video track is stopped.
 * </div>
 */
- (void) removeOnVideoStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Sets the current audio source input
 * of the first audio track.
 * </div>
 */
- (void) setAudioSourceInput:(FMIceLinkSourceInput*)value;
/*!
 * <div>
 * Sets the current video source input
 * of the first video track.
 * </div>
 */
- (void) setVideoSourceInput:(FMIceLinkSourceInput*)value;
/*!
 * <div>
 * Starts the media track sources.
 * </div>
 */
- (FMIceLinkFuture*) start;
/*!
 * <div>
 * Gets the current state.
 * </div>
 */
- (FMIceLinkLocalMediaState) state;
/*!
 * <div>
 * Stops the media track sources.
 * </div>
 */
- (FMIceLinkFuture*) stop;
/*!
 * <div>
 * Gets the current video source input
 * of the first video track.
 * </div>
 */
- (FMIceLinkSourceInput*) videoSourceInput;

@end

/*!
 * <div>
 * Viewable media interface.
 * </div>
 */
@protocol FMIceLinkIViewableMedia

/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Gets the view.
 * </div>
 */
- (id) view;

@end

/*!
 * <div>
 * Viewable media interface with a view sink.
 * </div>
 */
@protocol FMIceLinkIViewSinkableMedia

/*!
 * <div>
 * Gets the view sink.
 * </div>
 */
- (NSObject<FMIceLinkIViewSink>*) viewSink;

@end

/*!
 * <div>
 * Remote media interface.
 * </div>
 */
@protocol FMIceLinkIRemoteMedia

/*!
 * <div>
 * Gets the current audio sink output
 * of the first audio track.
 * </div>
 */
- (FMIceLinkSinkOutput*) audioSinkOutput;
/*!
 * <div>
 * Changes the audio sink output of the first
 * audio track while the media is active.
 * </div>
 * @param audioSinkOutput The audio sink output.
 * @return
 */
- (FMIceLinkFuture*) changeAudioSinkOutput:(FMIceLinkSinkOutput*)audioSinkOutput;
/*!
 * <div>
 * Changes the video sink output of the first
 * video track while the media is active.
 * </div>
 * @param videoSinkOutput The video sink output.
 * @return
 */
- (FMIceLinkFuture*) changeVideoSinkOutput:(FMIceLinkSinkOutput*)videoSinkOutput;
/*!
 * <div>
 * Gets the available audio sink outputs
 * of the first audio track.
 * </div>
 * @return A future with an array of audio sink outputs.
 */
- (FMIceLinkFuture*) getAudioSinkOutputs;
/*!
 * <div>
 * Gets the available video sink outputs
 * of the first video track.
 * </div>
 * @return A future with an array of video sink outputs.
 */
- (FMIceLinkFuture*) getVideoSinkOutputs;
/*!
 * <div>
 * Sets the current audio sink output
 * of the first audio track.
 * </div>
 */
- (void) setAudioSinkOutput:(FMIceLinkSinkOutput*)value;
/*!
 * <div>
 * Sets the current video sink output
 * of the first video track.
 * </div>
 */
- (void) setVideoSinkOutput:(FMIceLinkSinkOutput*)value;
/*!
 * <div>
 * Gets the current video sink output
 * of the first video track.
 * </div>
 */
- (FMIceLinkSinkOutput*) videoSinkOutput;

@end

/*!
 * <div>
 * Video stream interface.
 * </div>
 */
@protocol FMIceLinkIVideoStream

@end

/*!
 * <div>
 * Video track interface.
 * </div>
 */
@protocol FMIceLinkIVideoTrack

/*!
 * <div>
 * Adds a handler that is raised whenever the size of
 * this track is calculated.
 * </div>
 */
- (void) addOnSize:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the size of
 * this track is calculated.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkSize*))) addOnSizeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised whenever the size of
 * this track is calculated.
 * </div>
 */
- (void) addOnSizeWithBlock:(void(^)(FMIceLinkSize*))valueBlock;
/*!
 * <div>
 * Grabs the next frame once it's rendered.
 * </div>
 */
- (FMIceLinkFuture*) grabFrame;
/*!
 * <div>
 * Removes a handler that is raised whenever the size of
 * this track is calculated.
 * </div>
 */
- (void) removeOnSize:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Gets the size of this track.
 * </div>
 */
- (FMIceLinkSize*) size;

@end

/*!
 * <div>
 * The interface that all rtp header extensions must implement.
 * </div>
 */
@protocol FMIceLinkIRtpHeaderExtension

/*!
 * <div>
 * Serialize the header extension to a buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset to start writing at.
 */
- (void) fillBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Free any data used by the extension.
 * </div>
 */
- (void) free;
/*!
 * <div>
 * Gets the id of the header extension.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Gets the length of the header extension in 32-bit words.
 * </div>
 */
- (int) length;

@end

@interface FMIceLinkAddressTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkAddressType)value;

@end

/*!
 * <div>
 * ASCII encoding/decoding utility.
 * </div>
 */
@interface FMIceLinkAscii : NSObject

+ (FMIceLinkAscii*) ascii;
/*!
 * <div>
 * Decodes a UTF-8 byte array to a string.
 * </div>
 * @param input The input byte array.
 */
+ (NSString*) decodeWithInput:(NSMutableData*)input;
/*!
 * <div>
 * Decodes a UTF-8 byte array to a string.
 * </div>
 * @param input The input byte array.
 * @param index The index to start reading.
 * @param length The length.
 */
+ (NSString*) decodeWithInput:(NSMutableData*)input index:(int)index length:(int)length;
/*!
 * <div>
 * Encodes a string to a UTF-8 byte array.
 * </div>
 * @param input The input string.
 */
+ (NSMutableData*) encodeWithInput:(NSString*)input;
/*!
 * <div>
 * Gets the number of bytes that would be returned by
 * a call to encode.
 * </div>
 * @param input The input string.
 */
+ (int) getByteCountWithInput:(NSString*)input;
- (instancetype) init;

@end

/*!
 * <div>
 * An asymmetric key.
 * </div>
 */
@interface FMIceLinkAsymmetricKey : NSObject

+ (FMIceLinkAsymmetricKey*) asymmetricKey;
/*!
 * <div>
 * Creates a key.
 * </div>
 * @param keyType The key type.
 * @return
 */
+ (FMIceLinkAsymmetricKey*) createKeyWithKeyType:(FMIceLinkAsymmetricKeyType)keyType;
/*!
 * <div>
 * Returns <code>true</code> if the key contains
 * private information.
 * </div>
 */
- (bool) hasPrivate;
/*!
 * <div>
 * Returns <code>true</code> if the key contains
 * public information.
 * </div>
 */
- (bool) hasPublic;
- (instancetype) init;
/*!
 * <div>
 * Gets the key type.
 * </div>
 */
- (FMIceLinkAsymmetricKeyType) type;

@end

@interface FMIceLinkAsymmetricKeyTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkAsymmetricKeyType)value;

@end

/*!
 * <div>
 * A managed mutex.
 * </div>
 */
@interface FMIceLinkAtomicMutex : NSObject

/*!
 * <div>
 * Creates a new instance of an AtomicMutex.
 * </div>
 */
+ (FMIceLinkAtomicMutex*) atomicMutex;
/*!
 * <div>
 * Creates a new instance of an AtomicMutex.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets if the mutex is locked or not.
 * </div>
 */
- (bool) isLocked;
/*!
 * <div>
 * Releases the lock.
 * </div>
 */
- (void) release;
/*!
 * <div>
 * Tries to obtain a lock with this thread.
 * </div>
 * @return
 */
- (bool) tryLock;

@end

/*!
 * <div>
 * Common binary methods.
 * </div>
 */
@interface FMIceLinkBinary : NSObject

+ (FMIceLinkBinary*) binary;
/*!
 * <div>
 * Converts a bit-string to bytes.
 * </div>
 * @param bitString The bit-string.
 * @return
 */
+ (NSMutableData*) bitStringToBytesWithBitString:(NSString*)bitString;
/*!
 * <div>
 * Converts a bit-string to bytes.
 * </div>
 * @param bitString The bit-string.
 * @param numberOfUnusedBits The number of unused bits.
 * @return
 */
+ (NSMutableData*) bitStringToBytesWithBitString:(NSString*)bitString numberOfUnusedBits:(int*)numberOfUnusedBits;
/*!
 * <div>
 * Converts a bit-string to bytes.
 * </div>
 * @param bitString The bit-string.
 * @param padLeft Whether to pad extra zero-bits to the left.
 * @return
 */
+ (NSMutableData*) bitStringToBytesWithBitString:(NSString*)bitString padLeft:(bool)padLeft;
/*!
 * <div>
 * Converts a bit-string to bytes.
 * </div>
 * @param bitString The bit-string.
 * @param padLeft Whether to pad extra zero-bits to the left.
 * @param numberOfUnusedBits The number of unused bits.
 * @return
 */
+ (NSMutableData*) bitStringToBytesWithBitString:(NSString*)bitString padLeft:(bool)padLeft numberOfUnusedBits:(int*)numberOfUnusedBits;
/*!
 * <div>
 * Converts bytes to a bit-string.
 * </div>
 * @param bytes The bytes.
 * @return
 */
+ (NSString*) bytesToBitStringWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Converts bytes to a bit-string.
 * </div>
 * @param bytes The bytes.
 * @param offset The offset.
 * @param length The length.
 * @return
 */
+ (NSString*) bytesToBitStringWithBytes:(NSMutableData*)bytes offset:(int)offset length:(int)length;
/*!
 * <div>
 * Converts bytes to a bit-string.
 * </div>
 * @param bytes The bytes.
 * @param offset The offset.
 * @param length The length.
 * @param numberOfUnusedBits The number of unused bits.
 * @return
 */
+ (NSString*) bytesToBitStringWithBytes:(NSMutableData*)bytes offset:(int)offset length:(int)length numberOfUnusedBits:(int)numberOfUnusedBits;
/*!
 * <div>
 * Converts bytes to a bit-string.
 * </div>
 * @param bytes The bytes.
 * @param offset The offset.
 * @param length The length.
 * @param numberOfUnusedBits The number of unused bits.
 * @param trimLeft Whether to trim unused bits from the left.
 * @return
 */
+ (NSString*) bytesToBitStringWithBytes:(NSMutableData*)bytes offset:(int)offset length:(int)length numberOfUnusedBits:(int)numberOfUnusedBits trimLeft:(bool)trimLeft;
/*!
 * <div>
 * Deinterleave and transform (rotate) a byte array containing two planes
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param width The width.
 * @param height The height.
 * @param stride The stride.
 * @param rotation Values 0, 90, 180, 270.
 */
+ (void) deinterleaveTransformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation;
/*!
 * <div>
 * Deinterleave and transform (rotate) a byte array containing two planes
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param width The width.
 * @param height The height.
 * @param stride The stride.
 * @param rotation Values 0, 90, 180, 270.
 * @param start The start.
 */
+ (void) deinterleaveTransformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation start:(int)start;
/*!
 * <div>
 * Deinterleave and transform (rotate) a byte array containing two planes
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param width The width.
 * @param height The height.
 * @param stride The stride.
 * @param start The start.
 * @param rotation Values 0, 90, 180, 270.
 * @param reversePlanes Reverse output plane order.
 */
+ (void) deinterleaveTransformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation start:(int)start reversePlanes:(bool)reversePlanes;
/*!
 * <div>
 * Deinterleaves a byte array i.e.
 * XYXYXYXY -&gt; XXXXYYYY
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 */
+ (void) deinterleaveWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame;
/*!
 * <div>
 * Deinterleaves a byte array i.e.
 * XYXYXYXY -&gt; XXXXYYYY
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param start The start.
 * @param length The length.
 */
+ (void) deinterleaveWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame start:(int)start length:(int)length;
/*!
 * <div>
 * Deinterleaves a byte array
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param start The start.
 * @param length The length.
 * @param reversePlanes The reversePlanes.
 */
+ (void) deinterleaveWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame start:(int)start length:(int)length reversePlanes:(bool)reversePlanes;
/*!
 * <div>
 * Reads a 10-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes10WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 11-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes11WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 12-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes12WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 13-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes13WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 14-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes14WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 15-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes15WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 16-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @return The value.
 */
+ (int) fromBytes16WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Reads an 17-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes17WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads an 18-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes18WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads an 19-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes19WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 1-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (bool) fromBytes1WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads an 20-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes20WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads an 21-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes21WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads an 22-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes22WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads an 23-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes23WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 24-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @return The value.
 */
+ (int) fromBytes24WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Reads a 2-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes2WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 32-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @return The value.
 */
+ (long long) fromBytes32WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Reads a 3-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes3WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 40-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @return The value.
 */
+ (long long) fromBytes40WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Reads a 48-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @return The value.
 */
+ (long long) fromBytes48WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Reads a 4-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes4WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 56-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @return The value.
 */
+ (long long) fromBytes56WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Reads a 5-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes5WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 64-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @return The value.
 */
+ (long long) fromBytes64WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Reads a 6-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes6WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 7-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes7WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads an 8-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @return The value.
 */
+ (int) fromBytes8WithInput:(NSMutableData*)input inputIndex:(int)inputIndex;
/*!
 * <div>
 * Reads a 9-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @return The value.
 */
+ (int) fromBytes9WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset;
- (instancetype) init;
/*!
 * <div>
 * Interleave and transform (rotate) a byte array containing two planes
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param width The width.
 * @param height The height.
 * @param stride The stride.
 * @param rotation Values 0, 90, 180, 270.
 */
+ (void) interleaveTransformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation;
/*!
 * <div>
 * Interleave and transform (rotate) a byte array containing two planes
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param width The width.
 * @param height The height.
 * @param stride The stride.
 * @param rotation Values 0, 90, 180, 270.
 * @param start The start.
 */
+ (void) interleaveTransformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation start:(int)start;
/*!
 * <div>
 * Interleave and transform (rotate) a byte array containing two planes
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param width The width.
 * @param height The height.
 * @param stride The stride.
 * @param start The start.
 * @param rotation Values 0, 90, 180, 270.
 * @param reversePlanes Reverse output plane order.
 */
+ (void) interleaveTransformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation start:(int)start reversePlanes:(bool)reversePlanes;
/*!
 * <div>
 * Interleaves a byte array i.e.
 * XXXXYYYY -&gt; XYXYXYXY
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 */
+ (void) interleaveWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame;
/*!
 * <div>
 * Interleaves a byte array i.e.
 * XXXXYYYY -&gt; XYXYXYXY
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param start The start.
 * @param length The length.
 */
+ (void) interleaveWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame start:(int)start length:(int)length;
/*!
 * <div>
 * Interleaves a byte array  i.e.
 * XXXXYYYY -&gt; XYXYXYXY
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param start The start.
 * @param length The length.
 * @param reversePlanes XXXXYYYY -&gt; YXYXYXYX
 */
+ (void) interleaveWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame start:(int)start length:(int)length reversePlanes:(bool)reversePlanes;
/*!
 * <div>
 * Converts a 1-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes1:(bool)value bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 1-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes1:(bool)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 10-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes10:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 10-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes10:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 11-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes11:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 11-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes11:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 12-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes12:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 12-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes12:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 13-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes13:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 13-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes13:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 14-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes14:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 14-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes14:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 15-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes15:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 15-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes15:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 16-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes16:(int)value littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 16-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes16:(int)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 17-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes17:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 17-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes17:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts an 18-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes18:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes an 18-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes18:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 19-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes19:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 19-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes19:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 2-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes2:(int)value bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 2-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes2:(int)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 20-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes20:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 20-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes20:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 21-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes21:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 21-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes21:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 22-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes22:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 22-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes22:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 23-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes23:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 23-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes23:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 24-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes24:(int)value littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 24-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes24:(int)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 3-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes3:(int)value bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 3-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes3:(int)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 32-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes32:(long long)value littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 32-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes32:(long long)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 4-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes4:(int)value bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 4-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes4:(int)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 40-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes40:(long long)value littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 40-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes40:(long long)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 48-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes48:(long long)value littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 48-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes48:(long long)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 5-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes5:(int)value bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 5-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes5:(int)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 56-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes56:(long long)value littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 56-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes56:(long long)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 6-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes6:(int)value bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 6-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes6:(int)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 64-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes64:(long long)value littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 64-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes64:(long long)value littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 7-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes7:(int)value bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 7-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes7:(int)value bitOffset:(int)bitOffset output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts an 8-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes8:(int)value;
/*!
 * <div>
 * Writes an 8-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes8:(int)value output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Converts a 9-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes9:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 9-bit value to a byte array.
 * </div>
 * @param value The value to write.
 * @param bitOffset The offset of the value within the byte.
 * @param littleEndian Whether to use little-endian format.
 * @param output The output byte array.
 * @param outputIndex The index to start writing.
 * @return The output byte array.
 */
+ (NSMutableData*) toBytes9:(int)value bitOffset:(int)bitOffset littleEndian:(bool)littleEndian output:(NSMutableData*)output outputIndex:(int)outputIndex;
/*!
 * <div>
 * Transforms a byte containing a 2D plane (rotates 90, 180, 270)
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param rotation The rotation.
 * @param width The width.
 * @param height The height.
 * @param stride The stride.
 */
+ (void) transformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation;
/*!
 * <div>
 * Transforms a byte containing a 2D plane (rotates 90, 180, 270)
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param rotation The rotation.
 * @param width The width.
 * @param height The height.
 * @param stride The stride.
 * @param inputStart The inputStart.
 * @param outputStart The outputStart.
 */
+ (void) transformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation inputStart:(int)inputStart outputStart:(int)outputStart;
/*!
 * <div>
 * Transforms a byte containing a 2D plane (rotates 90, 180, 270).
 * When transforming interleaved planes. Set the chunkLength to
 * the number of planes.
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param rotation The rotation.
 * @param width The width.
 * @param height The height.
 * @param stride The stride.
 * @param inputStart The inputStart.
 * @param outputStart The outputStart.
 * @param chunkLength The chunkLength.
 */
+ (void) transformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation inputStart:(int)inputStart outputStart:(int)outputStart chunkLength:(int)chunkLength;
/*!
 * <div>
 * Transforms a byte containing a 2D plane (rotates 90, 180, 270)
 * </div>
 * @param inputFrame The inputFrame.
 * @param outputFrame The outputFrame.
 * @param rotation The rotation.
 * @param width The width.
 * @param height The height.
 * @param stride The stride.
 * @param start Start position for both input and output frame
 */
+ (void) transformWithInputFrame:(NSMutableData*)inputFrame outputFrame:(NSMutableData*)outputFrame width:(int)width height:(int)height stride:(int)stride rotation:(int)rotation start:(int)start;
/*!
 * <div>
 * Tries to read a 10-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes10WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 11-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes11WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 12-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes12WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 13-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes13WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 14-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes14WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 15-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes15WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 16-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes16WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(int*)value;
/*!
 * <div>
 * Tries to read a 17-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes17WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 18-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes18WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 19-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes19WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 1-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes1WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(bool*)value;
/*!
 * <div>
 * Tries to read a 20-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes20WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 21-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes21WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 22-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes22WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 23-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes23WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 24-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes24WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(int*)value;
/*!
 * <div>
 * Tries to read a 2-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes2WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 32-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes32WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(long long*)value;
/*!
 * <div>
 * Tries to read a 3-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes3WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 40-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes40WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(long long*)value;
/*!
 * <div>
 * Tries to read a 48-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes48WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(long long*)value;
/*!
 * <div>
 * Tries to read a 4-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes4WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 56-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes56WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(long long*)value;
/*!
 * <div>
 * Tries to read a 5-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes5WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 64-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param littleEndian Whether to use little-endian format.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes64WithInput:(NSMutableData*)input inputIndex:(int)inputIndex littleEndian:(bool)littleEndian value:(long long*)value;
/*!
 * <div>
 * Tries to read a 6-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes6WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 7-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes7WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read an 8-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes8WithInput:(NSMutableData*)input inputIndex:(int)inputIndex value:(int*)value;
/*!
 * <div>
 * Tries to read a 9-bit value from a byte array.
 * </div>
 * @param input The input byte array.
 * @param inputIndex The index to start reading.
 * @param bitOffset The offset of the value within the byte.
 * @param value The value.
 * @return true if the index is valid and the value was read; otherwise, false
 */
+ (bool) tryFromBytes9WithInput:(NSMutableData*)input inputIndex:(int)inputIndex bitOffset:(int)bitOffset value:(int*)value;

@end

/*!
 * <div>
 * Class to hold a boolean value passed by reference.
 * </div>
 */
@interface FMIceLinkBooleanHolder : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBooleanHolder class.
 * </div>
 */
+ (FMIceLinkBooleanHolder*) booleanHolder;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBooleanHolder class.
 * </div>
 * @param value The value.
 */
+ (FMIceLinkBooleanHolder*) booleanHolder:(bool)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBooleanHolder class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBooleanHolder class.
 * </div>
 * @param value The value.
 */
- (instancetype) initWithValue:(bool)value;
/*!
 * <div>
 * Sets the value.
 * </div>
 */
- (void) setValue:(bool)value;
/*!
 * <div>
 * Gets the value.
 * </div>
 */
- (bool) value;

@end

/*!
 * <div>
 * Details about the current build.
 * </div>
 */
@interface FMIceLinkBuild : NSObject

+ (FMIceLinkBuild*) build;
/*!
 * <div>
 * Gets the build date.
 * </div>
 */
+ (NSDate*) date;
/*!
 * <div>
 * Gets the build day.
 * </div>
 */
+ (int) day;
- (instancetype) init;
/*!
 * <div>
 * Gets the build major version.
 * </div>
 */
+ (int) majorVersion;
/*!
 * <div>
 * Gets the build minor version.
 * </div>
 */
+ (int) minorVersion;
/*!
 * <div>
 * Gets the build month.
 * </div>
 */
+ (int) month;
/*!
 * <div>
 * Gets the build patch version.
 * </div>
 */
+ (int) patchVersion;
/*!
 * <div>
 * Gets the build revision version.
 * </div>
 */
+ (int) revisionVersion;
/*!
 * <div>
 * Gets the full build version.
 * </div>
 */
+ (NSString*) version;
/*!
 * <div>
 * Gets the build year.
 * </div>
 */
+ (int) year;

@end

/*!
 * <div>
 * Class to hold a byte value passed by reference.
 * </div>
 */
@interface FMIceLinkByteHolder : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByteHolder class.
 * </div>
 */
+ (FMIceLinkByteHolder*) byteHolder;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByteHolder class.
 * </div>
 * @param value The value.
 */
+ (FMIceLinkByteHolder*) byteHolder:(uint8_t)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByteHolder class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByteHolder class.
 * </div>
 * @param value The value.
 */
- (instancetype) initWithValue:(uint8_t)value;
/*!
 * <div>
 * Sets the value.
 * </div>
 */
- (void) setValue:(uint8_t)value;
/*!
 * <div>
 * Gets the value.
 * </div>
 */
- (uint8_t) value;

@end

/*!
 * <div>
 * An buffer of bytes that can be read sequentially.
 * </div>
 */
@interface FMIceLinkByteInputStream : NSObject

/*!
 * <div>
 * Gets the number of available bytes for reading.
 * </div>
 */
- (int) available;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByteInputStream class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkByteInputStream*) byteInputStreamWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByteInputStream class.
 * </div>
 * @param bytes The bytes.
 * @param offset The offset.
 */
+ (FMIceLinkByteInputStream*) byteInputStreamWithBytes:(NSMutableData*)bytes offset:(int)offset;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByteInputStream class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByteInputStream class.
 * </div>
 * @param bytes The bytes.
 * @param offset The offset.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes offset:(int)offset;
/*!
 * <div>
 * Marks the current position for a later reset.
 * </div>
 */
- (void) mark;
/*!
 * <div>
 * Reads a value from the byte array.
 * </div>
 * @return The byte, or -1 if no more bytes are available for reading.
 */
- (int) read;
/*!
 * <div>
 * Reads a segment from the byte array.
 * </div>
 * @return The number of bytes read.
 */
- (int) readWithBuffer:(NSMutableData*)buffer offset:(int)offset length:(int)length;
/*!
 * <div>
 * Resets the stream to the marked position.
 * </div>
 */
- (void) reset;
/*!
 * <div>
 * Advances the stream position by the amount specified.
 * </div>
 * @param n The number of bytes to skip.
 * @return The number of bytes skipped.
 */
- (int) skipWithN:(int)n;

@end

/*!
 * <div>
 * An buffer of bytes that can be written sequentially.
 * </div>
 */
@interface FMIceLinkByteOutputStream : NSObject

+ (FMIceLinkByteOutputStream*) byteOutputStream;
- (instancetype) init;
/*!
 * <div>
 * Empties this stream and resets it.
 * </div>
 */
- (void) reset;
/*!
 * <div>
 * Gets the number of bytes written to the stream.
 * </div>
 */
- (int) size;
/*!
 * <div>
 * Converts the stream to a byte array.
 * </div>
 */
- (NSMutableData*) toArray;
/*!
 * <div>
 * Writes a value to the stream.
 * </div>
 * @param value The value.
 */
- (void) write:(uint8_t)value;
/*!
 * <div>
 * Writes a buffer to the stream.
 * </div>
 * @param buffer The buffer.
 */
- (void) writeBuffer:(NSMutableData*)buffer;
/*!
 * <div>
 * Writes a buffer to the stream.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param length The length.
 */
- (void) writeBuffer:(NSMutableData*)buffer offset:(int)offset length:(int)length;
/*!
 * <div>
 * Writes the contents of this stream to another stream.
 * </div>
 * @param stream The stream.
 */
- (void) writeToWithStream:(FMIceLinkByteOutputStream*)stream;

@end

/*!
 * <div>
 * A bzip2 decompressor.
 * </div>
 */
@interface FMIceLinkBZip2Decompressor : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBZip2Decompressor class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkBZip2Decompressor*) decompressorWithInput:(FMIceLinkDataBuffer*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBZip2Decompressor class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(FMIceLinkDataBuffer*)input;
/*!
 * <div>
 * Read a single byte from the stream.
 * </div>
 * @return the byte read from the stream, or -1 if EOF
 */
- (int) readByte;
/*!
 * <div>
 * Read data from the stream.
 * </div><div>
 * <p>
 * To decompress a BZip2 data stream, create a <code>BZip2InputStream</code>,
 * providing a stream that reads compressed data.  Then call Read() on
 * that <code>BZip2InputStream</code>, and the data read will be decompressed
 * as you read.
 * </p>
 * <p>
 * A <code>BZip2InputStream</code> can be used only for <code>Read()</code>, not for <code>Write()</code>.
 * </p>
 * </div>
 * @param buffer The buffer into which the read data should be placed.
 * @param offset the offset within that data array to put the first byte read.
 * @param count the number of bytes to read.
 * @return the number of bytes actually read
 */
- (int) readWithBuffer:(NSMutableData*)buffer offset:(int)offset count:(int)count;

@end

/*!
 * <div>
 * A certificate to be used for secure communication.
 * </div>
 */
@interface FMIceLinkCertificate : NSObject

/*!
 * <div>
 * Gets whether the certificate's cryptography
 * data should be automatically regenerated when
 * it is about to expire. Defaults to <code>true</code>.
 * </div>
 */
- (bool) autoRegenerate;
/*!
 * <div>
 * Calculates a fingerprint for this certificate.
 * </div>
 * @param algorithm The algorithm.
 */
- (FMIceLinkFingerprint*) calculateFingerprintWithAlgorithm:(NSString*)algorithm;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCertificate`2 class.
 * </div>
 */
+ (FMIceLinkCertificate*) certificate;
/*!
 * <div>
 * Clones this instance.
 * </div>
 */
- (FMIceLinkCertificate*) clone;
/*!
 * <div>
 * Creates a certificate.
 * </div>
 * @return
 */
- (FMIceLinkCertificate*) createCertificate;
/*!
 * <div>
 * Creates a fingerprint.
 * </div>
 * @param algorithm The algorithm.
 * @param value The value.
 * @return
 */
- (FMIceLinkFingerprint*) createFingerprintWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/*!
 * <div>
 * Gets the effective date.
 * </div>
 */
- (NSDate*) effectiveDate;
/*!
 * <div>
 * Gets the expiration date.
 * </div>
 */
- (NSDate*) expirationDate;
/*!
 * <div>
 * Serializes this certificate to binary.
 * </div>
 */
- (FMIceLinkDataBuffer*) getBuffer;
/*!
 * <div>
 * Serializes this certificate to binary.
 * </div>
 */
- (NSMutableData*) getBytes;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCertificate`2 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets whether the certificate is expired.
 * </div>
 */
- (bool) isExpired;
/*!
 * <div>
 * Gets whether the certificate is expiring within 24 hours.
 * </div>
 */
- (bool) isExpiring;
/*!
 * <div>
 * Gets a value indicating whether this certificate is
 * sealed and can no longer be modified.
 * </div>
 */
- (bool) isSealed;
/*!
 * <div>
 * Gets the name of the issuer.
 * </div>
 */
- (NSString*) issuerName;
/*!
 * <div>
 * Gets the asymmetric key.
 * </div>
 */
- (FMIceLinkAsymmetricKey*) key;
/*!
 * <div>
 * Regenerates the certificate's cryptography data using an
 * expiration date of 10 days from now.
 * </div>
 */
- (void) regenerate;
/*!
 * <div>
 * Regenerates the certificate's cryptography data using the
 * given expiration date.
 * </div>
 * @param expirationDate The expiration date.
 */
- (void) regenerateWithExpirationDate:(NSDate*)expirationDate;
/*!
 * <div>
 * Sets whether the certificate's cryptography
 * data should be automatically regenerated when
 * it is about to expire. Defaults to <code>true</code>.
 * </div>
 */
- (void) setAutoRegenerate:(bool)value;
/*!
 * <div>
 * Sets the identifier.
 * </div>
 */
- (void) setId:(NSString*)value;
/*!
 * <div>
 * Sets the asymmetric key.
 * </div>
 */
- (void) setKey:(FMIceLinkAsymmetricKey*)value;
/*!
 * <div>
 * Gets the name of the subject.
 * </div>
 */
- (NSString*) subjectName;

@end

/*!
 * <div>
 * Class to hold a character value passed by reference.
 * </div>
 */
@interface FMIceLinkCharacterHolder : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCharacterHolder class.
 * </div>
 */
+ (FMIceLinkCharacterHolder*) characterHolder;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCharacterHolder class.
 * </div>
 * @param value The value.
 */
+ (FMIceLinkCharacterHolder*) characterHolder:(unichar)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCharacterHolder class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCharacterHolder class.
 * </div>
 * @param value The value.
 */
- (instancetype) initWithValue:(unichar)value;
/*!
 * <div>
 * Sets the value.
 * </div>
 */
- (void) setValue:(unichar)value;
/*!
 * <div>
 * Gets the value.
 * </div>
 */
- (unichar) value;

@end

/*!
 * <div>
 * A circular buffer.
 * </div>
 */
@interface FMIceLinkCircularBuffer : NSObject

/*!
 * <div>
 * Gets the number of bytes available for reading.
 * </div>
 */
- (int) available;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCircularBuffer class.
 * </div>
 * @param length The length.
 * @param latency The latency.
 */
+ (FMIceLinkCircularBuffer*) circularBufferWithLength:(int)length latency:(int)latency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCircularBuffer class.
 * </div>
 * @param length The length.
 * @param latency The latency.
 * @param littleEndian Whether the data is little-endian.
 */
+ (FMIceLinkCircularBuffer*) circularBufferWithLength:(int)length latency:(int)latency littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCircularBuffer class.
 * </div>
 * @param length The length.
 * @param latency The latency.
 */
- (instancetype) initWithLength:(int)length latency:(int)latency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCircularBuffer class.
 * </div>
 * @param length The length.
 * @param latency The latency.
 * @param littleEndian Whether the data is little-endian.
 */
- (instancetype) initWithLength:(int)length latency:(int)latency littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Gets the latency.
 * </div>
 */
- (int) latency;
/*!
 * <div>
 * Gets the length.
 * </div>
 */
- (int) length;
/*!
 * <div>
 * Gets whether the data is little-endian.
 * </div>
 */
- (bool) littleEndian;
/*!
 * <div>
 * Gets the read offset.
 * </div>
 */
- (int) readOffset;
/*!
 * <div>
 * Reads data from the buffer.
 * </div>
 * @param length The number of bytes to read.
 */
- (FMIceLinkDataBuffer*) readWithLength:(int)length;
/*!
 * <div>
 * Gets the read offset.
 * </div>
 */
- (int) writeOffset;
/*!
 * <div>
 * Writes data to the buffer.
 * </div>
 * @param buffer The data to write.
 */
- (void) writeWithBuffer:(FMIceLinkDataBuffer*)buffer;

@end

/*!
 * <div>
 * A collection of values.
 * </div><typeparam name="T"></typeparam><typeparam name="TCollection"></typeparam>
 */
@interface FMIceLinkCollection : NSObject

/*!
 * <div>
 * Adds a value.
 * </div>
 * @param value The value.
 */
- (bool) add:(id)value;
/*!
 * <div>
 * Adds some values.
 * </div>
 * @param values The values.
 */
- (void) addMany:(NSMutableArray*)values;
/*!
 * <div>
 * Invoked when an element is added to the collection.
 * </div>
 * @param value The value.
 */
- (void) addSuccess:(id)value;
/*!
 * <div>
 * Invoked after an element is added to the collection.
 * </div>
 * @param value The value.
 */
- (void) addSuccessNoLock:(id)value;
/*!
 * <div>
 * Determined whether the collection contains at least one value.
 * </div>
 */
- (bool) any;
/*!
 * <div>
 * Determined whether the collection contains at least one value
 * that matches the specified predicate.
 * </div>
 * @param predicate The predicate.
 */
- (bool) anyWithPredicate:(FMIceLinkFunction1*)predicate;
/*!
 * <div>
 * Determined whether the collection contains at least one value
 * that matches the specified predicate.
 * </div>
 * @inlineparam predicateBlock The predicate.
 */
- (bool (^)(bool(^)(id))) anyWithPredicateBlock;
/*!
 * <div>
 * Determined whether the collection contains at least one value
 * that matches the specified predicate.
 * </div>
 * @param predicateBlock The predicate.
 */
- (bool) anyWithPredicateBlock:(bool(^)(id))predicateBlock;
/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
+ (FMIceLinkCollection*) collection;
/*!
 * <div>
 * Determines whether the collection contains a value.
 * </div>
 * @param value The value.
 */
- (bool) contains:(id)value;
/*!
 * <div>
 * Gets the count.
 * </div>
 */
- (int) count;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkCollection*) createCollection;
/*!
 * <div>
 * Gets the first value.
 * Throws an exception if there are
 * no values in the collection.
 * </div>
 */
- (id) first;
/*!
 * <div>
 * Gets the first value.
 * Returns a default value if there are
 * no values in the collection.
 * </div>
 */
- (id) firstOrDefault;
/*!
 * <div>
 * Gets the first value that matches
 * the specified predicate.
 * Returns a default value if there are
 * no such values in the collection.
 * </div>
 * @param predicate The predicate.
 */
- (id) firstOrDefaultWithPredicate:(FMIceLinkFunction1*)predicate;
/*!
 * <div>
 * Gets the first value that matches
 * the specified predicate.
 * Returns a default value if there are
 * no such values in the collection.
 * </div>
 * @inlineparam predicateBlock The predicate.
 */
- (id (^)(bool(^)(id))) firstOrDefaultWithPredicateBlock;
/*!
 * <div>
 * Gets the first value that matches
 * the specified predicate.
 * Returns a default value if there are
 * no such values in the collection.
 * </div>
 * @param predicateBlock The predicate.
 */
- (id) firstOrDefaultWithPredicateBlock:(bool(^)(id))predicateBlock;
/*!
 * <div>
 * Gets the first value that matches
 * the specified predicate.
 * Throws an exception if there are
 * no such values in the collection.
 * </div>
 * @param predicate The predicate.
 */
- (id) firstWithPredicate:(FMIceLinkFunction1*)predicate;
/*!
 * <div>
 * Gets the first value that matches
 * the specified predicate.
 * Throws an exception if there are
 * no such values in the collection.
 * </div>
 * @inlineparam predicateBlock The predicate.
 */
- (id (^)(bool(^)(id))) firstWithPredicateBlock;
/*!
 * <div>
 * Gets the first value that matches
 * the specified predicate.
 * Throws an exception if there are
 * no such values in the collection.
 * </div>
 * @param predicateBlock The predicate.
 */
- (id) firstWithPredicateBlock:(bool(^)(id))predicateBlock;
/*!
 * <div>
 * Executes a callback function once per value.
 * </div>
 * @param callback The callback to execute.
 */
- (void) forEachWithCallback:(FMIceLinkAction2*)callback;
/*!
 * <div>
 * Executes a callback function once per value.
 * </div>
 * @inlineparam callbackBlock The callback to execute.
 */
- (void (^)(void(^)(id, int))) forEachWithCallbackBlock;
/*!
 * <div>
 * Executes a callback function once per value.
 * </div>
 * @param callbackBlock The callback to execute.
 */
- (void) forEachWithCallbackBlock:(void(^)(id, int))callbackBlock;
- (instancetype) init;
/*!
 * <div>
 * Gets the last value.
 * Throws an exception if there are
 * no values in the collection.
 * </div>
 */
- (id) last;
/*!
 * <div>
 * Gets the last value.
 * Returns a default value if there are
 * no values in the collection.
 * </div>
 */
- (id) lastOrDefault;
/*!
 * <div>
 * Gets the last value that matches
 * the specified predicate.
 * Returns a default value if there are
 * no such values in the collection.
 * </div>
 * @param predicate The predicate.
 */
- (id) lastOrDefaultWithPredicate:(FMIceLinkFunction1*)predicate;
/*!
 * <div>
 * Gets the last value that matches
 * the specified predicate.
 * Returns a default value if there are
 * no such values in the collection.
 * </div>
 * @inlineparam predicateBlock The predicate.
 */
- (id (^)(bool(^)(id))) lastOrDefaultWithPredicateBlock;
/*!
 * <div>
 * Gets the last value that matches
 * the specified predicate.
 * Returns a default value if there are
 * no such values in the collection.
 * </div>
 * @param predicateBlock The predicate.
 */
- (id) lastOrDefaultWithPredicateBlock:(bool(^)(id))predicateBlock;
/*!
 * <div>
 * Gets the last value that matches
 * the specified predicate.
 * Throws an exception if there are
 * no such values in the collection.
 * </div>
 * @param predicate The predicate.
 */
- (id) lastWithPredicate:(FMIceLinkFunction1*)predicate;
/*!
 * <div>
 * Gets the last value that matches
 * the specified predicate.
 * Throws an exception if there are
 * no such values in the collection.
 * </div>
 * @inlineparam predicateBlock The predicate.
 */
- (id (^)(bool(^)(id))) lastWithPredicateBlock;
/*!
 * <div>
 * Gets the last value that matches
 * the specified predicate.
 * Throws an exception if there are
 * no such values in the collection.
 * </div>
 * @param predicateBlock The predicate.
 */
- (id) lastWithPredicateBlock:(bool(^)(id))predicateBlock;
/*!
 * <div>
 * Removes a value.
 * </div>
 * @param value The value.
 */
- (bool) remove:(id)value;
/*!
 * <div>
 * Removes all values.
 * </div>
 */
- (void) removeAll;
/*!
 * <div>
 * Removes the first value.
 * </div>
 */
- (id) removeFirst;
/*!
 * <div>
 * Removes the first value that matches a given condition.
 * </div>
 */
- (id) removeFirstWithCondition:(FMIceLinkFunction1*)condition;
/*!
 * <div>
 * Removes the first value that matches a given condition.
 * </div>
 */
- (id (^)(bool(^)(id))) removeFirstWithConditionBlock;
/*!
 * <div>
 * Removes the first value that matches a given condition.
 * </div>
 */
- (id) removeFirstWithConditionBlock:(bool(^)(id))conditionBlock;
/*!
 * <div>
 * Removes the last value.
 * </div>
 */
- (id) removeLast;
/*!
 * <div>
 * Removes the last value that matches a given condition.
 * </div>
 */
- (id) removeLastWithCondition:(FMIceLinkFunction1*)condition;
/*!
 * <div>
 * Removes the last value that matches a given condition.
 * </div>
 */
- (id (^)(bool(^)(id))) removeLastWithConditionBlock;
/*!
 * <div>
 * Removes the last value that matches a given condition.
 * </div>
 */
- (id) removeLastWithConditionBlock:(bool(^)(id))conditionBlock;
/*!
 * <div>
 * Removes some values.
 * </div>
 * @param values The values.
 */
- (void) removeMany:(NSMutableArray*)values;
/*!
 * <div>
 * Invoked when an element is removed from the collection.
 * </div>
 * @param value The value.
 */
- (void) removeSuccess:(id)value;
/*!
 * <div>
 * Invoked after an element is removed from the collection.
 * </div>
 * @param value The value.
 */
- (void) removeSuccessNoLock:(id)value;
/*!
 * <div>
 * Replaces the collection with a new set of values.
 * </div>
 * @param values The values.
 */
- (void) replace:(NSMutableArray*)values;
/*!
 * <div>
 * Sets the value.
 * </div>
 */
- (void) setValue:(id)value;
/*!
 * <div>
 * Sets the values.
 * </div>
 */
- (void) setValues:(NSMutableArray*)value;
/*!
 * <div>
 * Gets the only value.
 * Throws an exception if there are
 * no values or more than one value
 * in the collection.
 * </div>
 */
- (id) single;
/*!
 * <div>
 * Gets the only value.
 * Returns a default value if there are
 * no values or more than one value
 * in the collection.
 * </div>
 */
- (id) singleOrDefault;
/*!
 * <div>
 * Gets the only value that matches
 * the specified predicate.
 * Returns a default value if there are
 * no values or more than one value
 * in the collection.
 * </div>
 */
- (id) singleOrDefaultWithPredicate:(FMIceLinkFunction1*)predicate;
/*!
 * <div>
 * Gets the only value that matches
 * the specified predicate.
 * Returns a default value if there are
 * no values or more than one value
 * in the collection.
 * </div>
 */
- (id (^)(bool(^)(id))) singleOrDefaultWithPredicateBlock;
/*!
 * <div>
 * Gets the only value that matches
 * the specified predicate.
 * Returns a default value if there are
 * no values or more than one value
 * in the collection.
 * </div>
 */
- (id) singleOrDefaultWithPredicateBlock:(bool(^)(id))predicateBlock;
/*!
 * <div>
 * Gets the only value that matches
 * the specified predicate.
 * Throws an exception if there are
 * no values or more than one value
 * in the collection.
 * </div>
 */
- (id) singleWithPredicate:(FMIceLinkFunction1*)predicate;
/*!
 * <div>
 * Gets the only value that matches
 * the specified predicate.
 * Throws an exception if there are
 * no values or more than one value
 * in the collection.
 * </div>
 */
- (id (^)(bool(^)(id))) singleWithPredicateBlock;
/*!
 * <div>
 * Gets the only value that matches
 * the specified predicate.
 * Throws an exception if there are
 * no values or more than one value
 * in the collection.
 * </div>
 */
- (id) singleWithPredicateBlock:(bool(^)(id))predicateBlock;
/*!
 * <div>
 * Gets the value.
 * </div>
 */
- (id) value;
/*!
 * <div>
 * Gets the value at the specified index.
 * Returns a default value if a value does
 * not exist at that index.
 * </div>
 * @param index The index.
 */
- (id) valueAtOrDefaultWithIndex:(int)index;
/*!
 * <div>
 * Gets the value at the specified index.
 * Throws an exception if a value does
 * not exist at that index.
 * </div>
 * @param index The index.
 */
- (id) valueAtWithIndex:(int)index;
/*!
 * <div>
 * Gets the values.
 * </div>
 */
- (NSMutableArray*) values;
/*!
 * <div>
 * Creates a new collection with values
 * that match the specified predicate.
 * </div>
 * @param predicate The predicate.
 */
- (FMIceLinkCollection*) whereWithPredicate:(FMIceLinkFunction2*)predicate;
/*!
 * <div>
 * Creates a new collection with values
 * that match the specified predicate.
 * </div>
 * @inlineparam predicateBlock The predicate.
 */
- (FMIceLinkCollection* (^)(bool(^)(id, int))) whereWithPredicateBlock;
/*!
 * <div>
 * Creates a new collection with values
 * that match the specified predicate.
 * </div>
 * @param predicateBlock The predicate.
 */
- (FMIceLinkCollection*) whereWithPredicateBlock:(bool(^)(id, int))predicateBlock;

@end

/*!
 * <div>
 * Base class for all logging provider implementations.
 * </div>
 */
@interface FMIceLinkLogProvider : NSObject

/*!
 * <div>
 * Logs a message at the specified log level.
 * </div>
 * @param logEvent The log event details.
 */
- (void) doLogWithLogEvent:(FMIceLinkLogEvent*)logEvent;
/*!
 * <div>
 * Gets a filter on the log provider.
 * Returning <code>true</code> will log the event,
 * while returning <code>false</code> will skip it.
 * </div>
 */
- (FMIceLinkFunction1*) filter;
/*!
 * <div>
 * Generates a default log line.
 * </div>
 * @param logEvent The log event details.
 */
- (NSString*) generateLogLineWithLogEvent:(FMIceLinkLogEvent*)logEvent;
/*!
 * <div>
 * Converts a log-level to a 5-character string for
 * consistently-spaced character sequences.
 * </div>
 * @param level The log level.
 * @return The log level as an upper-case string
 * with right-side whitespace padding to ensure
 * a 5-character sequence.
 */
- (NSString*) getLogLevelStringWithLevel:(FMIceLinkLogLevel)level;
/*!
 * <div>
 * Converts a timestamp to an ISO-8601-formatted string
 * for rendering in a log message (YYYY-MM-DDThh:mm:ss.sssZ).
 * </div>
 * @param timestamp The timestamp.
 * @return The timestamp as a formatted string.
 */
- (NSString*) getPrefixTimestamp:(NSDate*)timestamp;
/*!
 * <div>
 * Converts a log-level to a 5-character string for
 * consistently-spaced character sequences.
 * </div>
 * @param level The log level.
 * @param includeTimestamp Whether to include a timestamp in the prefix.
 * @return The log level as an upper-case string
 * with right-side whitespace padding to ensure
 * a 5-character sequence.
 */
- (NSString*) getPrefixWithLevel:(FMIceLinkLogLevel)level includeTimestamp:(bool)includeTimestamp;
/*!
 * <div>
 * Returns the name of the current product.
 * </div>
 */
- (NSString*) getProduct;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLogProvider class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets the log level.
 * </div>
 */
- (FMIceLinkLogLevel) level;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLogProvider class.
 * </div>
 */
+ (FMIceLinkLogProvider*) logProvider;
/*!
 * <div>
 * Log a message.
 * </div>
 * @param logEvent The log event details.
 */
- (void) logWithLogEvent:(FMIceLinkLogEvent*)logEvent;
/*!
 * <div>
 * Gets the current process id.
 * </div>
 */
- (int) processId;
/*!
 * <div>
 * Sets a filter on the log provider.
 * Returning <code>true</code> will log the event,
 * while returning <code>false</code> will skip it.
 * </div>
 */
- (void) setFilter:(FMIceLinkFunction1*)value;
/*!
 * <div>
 * Sets a filter on the log provider.
 * Returning <code>true</code> will log the event,
 * while returning <code>false</code> will skip it.
 * </div>
 */
- (void (^)(bool(^)(FMIceLinkLogEvent*))) setFilterBlock;
/*!
 * <div>
 * Sets a filter on the log provider.
 * Returning <code>true</code> will log the event,
 * while returning <code>false</code> will skip it.
 * </div>
 */
- (void) setFilterBlock:(bool(^)(FMIceLinkLogEvent*))valueBlock;
/*!
 * <div>
 * Sets the log level.
 * </div>
 */
- (void) setLevel:(FMIceLinkLogLevel)value;

@end

/*!
 * <div>
 * A utility class that allows a continuous stream
 * of data to be written to it with properly framed
 * messages being read out of it. This class is
 * not thread-safe for concurrent reads/writes.
 * </div>
 */
@interface FMIceLinkDataBufferFramer : NSObject

/*!
 * <div>
 * Gets the available data.
 * </div>
 */
- (FMIceLinkDataBuffer*) availableDataBuffer;
/*!
 * <div>
 * Gets the available length.
 * </div>
 */
- (int) availableLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataBufferFramer class.
 * </div>
 */
+ (FMIceLinkDataBufferFramer*) dataBufferFramer;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Gets the size of the internal data buffer, in bytes.
 * </div>
 */
- (int) footprint;
/*!
 * <div>
 * Gets the hexadecimal string representing the current contents of the data buffer.
 * </div>
 * @return
 */
- (NSString*) getHexString;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataBufferFramer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Reads a data buffer from the internal data buffer.
 * </div>
 * @param getFrameLength A callback that returns the next frame length.
 * @return
 */
- (FMIceLinkDataBuffer*) readWithGetFrameLength:(FMIceLinkFunction1*)getFrameLength;
/*!
 * <div>
 * Reads a data buffer from the internal data buffer.
 * </div>
 * @inlineparam getFrameLengthBlock A callback that returns the next frame length.
 * @return
 */
- (FMIceLinkDataBuffer* (^)(int(^)(FMIceLinkDataBuffer*))) readWithGetFrameLengthBlock;
/*!
 * <div>
 * Reads a data buffer from the internal data buffer.
 * </div>
 * @param getFrameLengthBlock A callback that returns the next frame length.
 * @return
 */
- (FMIceLinkDataBuffer*) readWithGetFrameLengthBlock:(int(^)(FMIceLinkDataBuffer*))getFrameLengthBlock;
/*!
 * <div>
 * Writes a data buffer to the internal data buffer.
 * </div>
 * @param dataBuffer The data buffer.
 * @return
 */
- (void) writeWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer;

@end

/*!
 * <div>
 * A record that calculates the min, max, and average from integer samples.
 * </div>
 */
@interface FMIceLinkDiagnosticSampler : NSObject

/*!
 * <div>
 * Adds a new sample to the calculation.
 * </div>
 * @param longSample The sample to add.
 */
- (void) addSampleWithLongSample:(long long)longSample;
/*!
 * <div>
 * Gets the average of all samples.
 * </div>
 */
- (double) average;
/*!
 * <div>
 * Gets how many samples this record has used.
 * </div>
 */
- (long long) count;
/*!
 * <div>
 * Creates a new instance of the DiagnosticRecord.
 * </div>
 */
+ (FMIceLinkDiagnosticSampler*) diagnosticSampler;
/*!
 * <div>
 * Creates a new instance of the DiagnosticRecord.
 * </div>
 * @param averageSampleCount How many samples to include in the average.
 */
+ (FMIceLinkDiagnosticSampler*) diagnosticSamplerWithAverageSampleCount:(int)averageSampleCount;
/*!
 * <div>
 * Creates a new instance of the DiagnosticRecord.
 * </div>
 * @param averageSampleCount How many samples to include in the average.
 * @param label The label for this sampler.
 */
+ (FMIceLinkDiagnosticSampler*) diagnosticSamplerWithAverageSampleCount:(int)averageSampleCount label:(NSString*)label;
/*!
 * <div>
 * Creates a new instance of the DiagnosticRecord.
 * </div>
 * @param label The label for this sampler.
 */
+ (FMIceLinkDiagnosticSampler*) diagnosticSamplerWithLabel:(NSString*)label;
/*!
 * <div>
 * Creates a new instance of the DiagnosticRecord.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Creates a new instance of the DiagnosticRecord.
 * </div>
 * @param averageSampleCount How many samples to include in the average.
 */
- (instancetype) initWithAverageSampleCount:(int)averageSampleCount;
/*!
 * <div>
 * Creates a new instance of the DiagnosticRecord.
 * </div>
 * @param averageSampleCount How many samples to include in the average.
 * @param label The label for this sampler.
 */
- (instancetype) initWithAverageSampleCount:(int)averageSampleCount label:(NSString*)label;
/*!
 * <div>
 * Creates a new instance of the DiagnosticRecord.
 * </div>
 * @param label The label for this sampler.
 */
- (instancetype) initWithLabel:(NSString*)label;
/*!
 * <div>
 * Gets the label for this sampler.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the value of the last sample recorded.
 * </div>
 */
- (long long) lastValue;
/*!
 * <div>
 * Gets the maximum sample ever recorded.
 * </div>
 */
- (long long) max;
/*!
 * <div>
 * Gets the minimum sample ever recorded.
 * </div>
 */
- (long long) min;
/*!
 * <div>
 * Gets how many samples are included in the average.
 * </div>
 */
- (int) samplesInAverage;

@end

/*!
 * <div>
 * A certificate to be used for DTLS communication.
 * </div>
 */
@interface FMIceLinkDtlsCertificate : FMIceLinkCertificate

/*!
 * <div>
 * Creates the certificate.
 * </div>
 * @return
 */
- (FMIceLinkDtlsCertificate*) createCertificate;
/*!
 * <div>
 * Creates a fingerprint.
 * </div>
 * @param algorithm The algorithm.
 * @param value The value.
 * @return
 */
- (FMIceLinkDtlsFingerprint*) createFingerprintWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/*!
 * <div>
 * Gets the default asymmetric key type (ECDSA).
 * </div>
 */
+ (FMIceLinkAsymmetricKeyType) defaultKeyType;
+ (FMIceLinkDtlsCertificate*) dtlsCertificate;
/*!
 * <div>
 * Generates a certificate with a default issuer/subject name and
 * an expiration date of 10 days from now.
 * </div>
 */
+ (FMIceLinkDtlsCertificate*) generateCertificate;
/*!
 * <div>
 * Generates a certificate using the issuer/subject name from an
 * old certificate and an expiration date of 10 days from now.
 * </div>
 * @param oldCertificate The old certificate.
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateFromOldCertificate:(FMIceLinkDtlsCertificate*)oldCertificate;
/*!
 * <div>
 * Generates a certificate using the issuer/subject name from an
 * old certificate and the given expiration date.
 * </div>
 * @param oldCertificate The old certificate.
 * @param expirationDate The expiration date.
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateFromOldCertificate:(FMIceLinkDtlsCertificate*)oldCertificate expirationDate:(NSDate*)expirationDate;
/*!
 * <div>
 * Generates a certificate with the given issuer name, subject name, and
 * an expiration date of 10 days from now.
 * </div>
 * @param issuerName The name of the issuer.
 * @param subjectName The name of the subject.
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName;
/*!
 * <div>
 * Generates a certificate with the given issuer name, subject name, and expiration date.
 * </div>
 * @param issuerName The name of the issuer.
 * @param subjectName The name of the subject.
 * @param expirationDate The expiration date.
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName expirationDate:(NSDate*)expirationDate;
/*!
 * <div>
 * Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.
 * </div>
 * @param issuerName The name of the issuer.
 * @param subjectName The name of the subject.
 * @param expirationDate The expiration date.
 * @param key The asymmetric key (with public and private details).
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName expirationDate:(NSDate*)expirationDate key:(FMIceLinkAsymmetricKey*)key;
/*!
 * <div>
 * Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.
 * </div>
 * @param issuerName The name of the issuer.
 * @param subjectName The name of the subject.
 * @param expirationDate The expiration date.
 * @param keyType The asymmetric key type.
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName expirationDate:(NSDate*)expirationDate keyType:(FMIceLinkAsymmetricKeyType)keyType;
/*!
 * <div>
 * Generates a certificate with the given issuer name, subject name, and
 * an expiration date of 10 days from now.
 * </div>
 * @param issuerName The name of the issuer.
 * @param subjectName The name of the subject.
 * @param key The asymmetric key (with public and private details).
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName key:(FMIceLinkAsymmetricKey*)key;
/*!
 * <div>
 * Generates a certificate with the given issuer name, subject name, and
 * an expiration date of 10 days from now.
 * </div>
 * @param issuerName The name of the issuer.
 * @param subjectName The name of the subject.
 * @param keyType The asymmetric key type.
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName keyType:(FMIceLinkAsymmetricKeyType)keyType;
/*!
 * <div>
 * Generates a certificate with a default issuer/subject name and
 * an expiration date of 10 days from now.
 * </div>
 * @param key The asymmetric key (with public and private details).
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateWithKey:(FMIceLinkAsymmetricKey*)key;
/*!
 * <div>
 * Generates a certificate with a default issuer/subject name and
 * an expiration date of 10 days from now.
 * </div>
 * @param keyType The asymmetric key type.
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateWithKeyType:(FMIceLinkAsymmetricKeyType)keyType;
/*!
 * <div>
 * Generates a certificate with the given issuer/subject name and an
 * expiration date of 10 days from now.
 * </div>
 * @param name The name of the issuer/subject.
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateWithName:(NSString*)name;
/*!
 * <div>
 * Generates a certificate with the given issuer/subject name and an
 * expiration date of 10 days from now.
 * </div>
 * @param name The name of the issuer/subject.
 * @param key The asymmetric key (with public and private details).
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateWithName:(NSString*)name key:(FMIceLinkAsymmetricKey*)key;
/*!
 * <div>
 * Generates a certificate with the given issuer/subject name and an
 * expiration date of 10 days from now.
 * </div>
 * @param name The name of the issuer/subject.
 * @param keyType The asymmetric key type.
 */
+ (FMIceLinkDtlsCertificate*) generateCertificateWithName:(NSString*)name keyType:(FMIceLinkAsymmetricKeyType)keyType;
- (instancetype) init;
/*!
 * <div>
 * Deserializes a certificate from binary.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkDtlsCertificate*) parseBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Sets the default asymmetric key type (ECDSA).
 * </div>
 */
+ (void) setDefaultKeyType:(FMIceLinkAsymmetricKeyType)value;

@end

/*!
 * <div>
 * A fingerprint.
 * </div>
 */
@interface FMIceLinkFingerprint : NSObject

/*!
 * <div>
 * Gets the algorithm.
 * </div>
 */
- (NSString*) algorithm;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFingerprint class.
 * </div>
 * @param algorithm The algorithm.
 * @param value The value.
 */
+ (FMIceLinkFingerprint*) fingerprintWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFingerprint class.
 * </div>
 * @param algorithm The algorithm.
 * @param value The value.
 */
- (instancetype) initWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/*!
 * <div>
 * Gets the MD2 algorithm.
 * </div>
 */
+ (NSString*) md2Algorithm;
/*!
 * <div>
 * Gets the MD5 algorithm.
 * </div>
 */
+ (NSString*) md5Algorithm;
/*!
 * <div>
 * Gets the SHA-1 algorithm.
 * </div>
 */
+ (NSString*) sha1Algorithm;
/*!
 * <div>
 * Gets the SHA-224 algorithm.
 * </div>
 */
+ (NSString*) sha224Algorithm;
/*!
 * <div>
 * Gets the SHA-256 algorithm.
 * </div>
 */
+ (NSString*) sha256Algorithm;
/*!
 * <div>
 * Gets the SHA-384 algorithm.
 * </div>
 */
+ (NSString*) sha384Algorithm;
/*!
 * <div>
 * Gets the SHA-512 algorithm.
 * </div>
 */
+ (NSString*) sha512Algorithm;
/*!
 * <div>
 * Gets the value.
 * </div>
 */
- (NSString*) value;

@end

/*!
 * <div>
 * A DTLS fingerprint.
 * </div>
 */
@interface FMIceLinkDtlsFingerprint : FMIceLinkFingerprint

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtlsFingerprint class.
 * </div>
 * @param algorithm The algorithm.
 * @param value The value.
 */
+ (FMIceLinkDtlsFingerprint*) dtlsFingerprintWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtlsFingerprint class.
 * </div>
 * @param algorithm The algorithm.
 * @param value The value.
 */
- (instancetype) initWithAlgorithm:(NSString*)algorithm value:(NSString*)value;

@end

@interface FMIceLinkEcdsaNamedCurveWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkEcdsaNamedCurve)value;

@end

/*!
 * <div>
 * Utility class to assist with ISO-8601 timestamp conversions.
 * </div>
 */
@interface FMIceLinkIso8601Timestamp : NSObject

/*!
 * <div>
 * Converts a date to a ISO-8601 timestamp.
 * </div>
 * @param dateTime The date to convert.
 * @return The equivalent ISO-8601 timestamp.
 */
+ (NSString*) dateTimeToIso8601WithDateTime:(NSDate*)dateTime;
- (instancetype) init;
+ (FMIceLinkIso8601Timestamp*) iso8601Timestamp;
/*!
 * <div>
 * Converts a ISO-8601 timestamp to a date.
 * </div>
 * @param iso8601 The ISO-8601 timestamp to convert.
 * @return The equivalent date.
 */
+ (NSDate*) iso8601ToDateTimeWithIso8601:(NSString*)iso8601;
/*!
 * <div>
 * Gets the current UTC time in ISO-8601 format.
 * </div>
 */
+ (NSString*) utcNow;

@end

/*!
 * <div>
 * A log provider that sends logs to LogStash.
 * </div>
 */
@interface FMIceLinkLogStashLogProvider : FMIceLinkLogProvider

/*!
 * <div>
 * Gets the LogStash server address.
 * </div>
 */
- (NSString*) address;
/*!
 * <div>
 * Logs a message at the specified log level.
 * </div>
 * @param logEvent The log event details.
 */
- (void) doLogWithLogEvent:(FMIceLinkLogEvent*)logEvent;
/*!
 * <div>
 * Creates a new instance of a LogStash log provider.
 * </div>
 * @param address The LogStash server address.
 * @param port The LogStash server port.
 * @param useSSL Whether to use SSL/TLS when connecting to the LogStash server.
 */
- (instancetype) initWithAddress:(NSString*)address port:(int)port useSSL:(bool)useSSL;
/*!
 * <div>
 * Creates a new instance of a LogStash log provider.
 * </div>
 * @param address The address of LogStash.
 * @param port The port of LogStash.
 * @param useSSL Whether to use SSL/TLS when connecting to the LogStash server.
 * @param level The initial log level.
 */
- (instancetype) initWithAddress:(NSString*)address port:(int)port useSSL:(bool)useSSL level:(FMIceLinkLogLevel)level;
/*!
 * <div>
 * Creates a new instance of a LogStash log provider.
 * </div>
 * @param address The LogStash server address.
 * @param port The LogStash server port.
 * @param useSSL Whether to use SSL/TLS when connecting to the LogStash server.
 */
+ (FMIceLinkLogStashLogProvider*) logStashLogProviderWithAddress:(NSString*)address port:(int)port useSSL:(bool)useSSL;
/*!
 * <div>
 * Creates a new instance of a LogStash log provider.
 * </div>
 * @param address The address of LogStash.
 * @param port The port of LogStash.
 * @param useSSL Whether to use SSL/TLS when connecting to the LogStash server.
 * @param level The initial log level.
 */
+ (FMIceLinkLogStashLogProvider*) logStashLogProviderWithAddress:(NSString*)address port:(int)port useSSL:(bool)useSSL level:(FMIceLinkLogLevel)level;
/*!
 * <div>
 * Gets the LogStash server port.
 * </div>
 */
- (int) port;

@end

/*!
 * <div>
 * A countdown latch that will signal when the counter reaches zero.
 * </div>
 */
@interface FMIceLinkManagedCountdownLatch : NSObject

/*!
 * <div>
 * Gets the current count on the latch.
 * </div>
 */
- (int) count;
/*!
 * <div>
 * Decrements the counter by one and signals if it reaches zero.
 * </div>
 */
- (void) decrement;
/*!
 * <div>
 * Generates a string description of this instance.
 * </div>
 * @return
 */
- (NSString*) description;
/*!
 * <div>
 * Creates a new instance of the latch with an unknown count.
 * This will cause the latch to count into the negatives until SetCount is called.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Creates a new instance of the latch with a count.
 * </div>
 * @param initialCount The initial counter value.
 */
- (instancetype) initWithInitialCount:(int)initialCount;
/*!
 * <div>
 * Creates a new instance of the latch with an unknown count.
 * This will cause the latch to count into the negatives until SetCount is called.
 * </div>
 */
+ (FMIceLinkManagedCountdownLatch*) managedCountdownLatch;
/*!
 * <div>
 * Creates a new instance of the latch with a count.
 * </div>
 * @param initialCount The initial counter value.
 */
+ (FMIceLinkManagedCountdownLatch*) managedCountdownLatchWithInitialCount:(int)initialCount;
/*!
 * <div>
 * Resets the latch with an unknown count.
 * This will cause the latch to count into the negatives until SetCount is called.
 * </div>
 */
- (void) reset;
/*!
 * <div>
 * Resets the latch with a count.
 * </div>
 * @param initialCount The initial counter value.
 */
- (void) resetWithInitialCount:(int)initialCount;
/*!
 * <div>
 * Sets the counter for the latch.
 * This brings the count back up into positive numbers.
 * </div>
 */
- (void) setCount:(int)count;
/*!
 * <div>
 * Returns a promise that resolves once the counter reaches zero.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) waitAsync;
/*!
 * <div>
 * Blocks until the counter reaches zero.
 * </div>
 */
- (void) waitSync;

@end

@interface FMIceLinkOperatingSystemWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkOperatingSystem)value;

@end

@interface FMIceLinkArchitectureWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkArchitecture)value;

@end

/*!
 * <div>
 * A pool of objects.
 * </div><typeparam name="T"></typeparam>
 */
@interface FMIceLinkPool : NSObject

/*!
 * <div>
 * Gets the number of available objects.
 * </div>
 */
- (int) available;
/*!
 * <div>
 * Removes all items from the pool and calls a callback for each one.
 * </div>
 * @param cleanCallback
 */
- (void) cleanWithCleanCallback:(FMIceLinkAction1*)cleanCallback;
/*!
 * <div>
 * Removes all items from the pool and calls a callback for each one.
 * </div>
 * @inlineparam cleanCallbackBlock
 */
- (void (^)(void(^)(id))) cleanWithCleanCallbackBlock;
/*!
 * <div>
 * Removes all items from the pool and calls a callback for each one.
 * </div>
 * @param cleanCallbackBlock
 */
- (void) cleanWithCleanCallbackBlock:(void(^)(id))cleanCallbackBlock;
/*!
 * <div>
 * Gets an object.
 * </div>
 * @return
 */
- (id) get;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPool`1 class
 * with a minimum size of 0 and a maximum size of 2,147,483,647.
 * </div>
 * @param createObject A function that creates an object.
 */
- (instancetype) initWithCreateObject:(FMIceLinkFunction0*)createObject;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPool`1 class
 * with a specified minimum size and a maximum size of 2,147,483,647.
 * </div>
 * @param createObject A function that creates an object.
 * @param minSize The minimum size.
 */
- (instancetype) initWithCreateObject:(FMIceLinkFunction0*)createObject minSize:(int)minSize;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPool`1 class.
 * with a specified minimum size and a specified maximum size.
 * </div>
 * @param createObject A function that creates an object.
 * @param minSize The minimum size.
 * @param maxSize The maximum size.
 */
- (instancetype) initWithCreateObject:(FMIceLinkFunction0*)createObject minSize:(int)minSize maxSize:(int)maxSize;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPool`1 class
 * with a minimum size of 0 and a maximum size of 2,147,483,647.
 * </div>
 * @param createObjectBlock A function that creates an object.
 */
- (instancetype) initWithCreateObjectBlock:(id(^)(void))createObjectBlock;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPool`1 class
 * with a specified minimum size and a maximum size of 2,147,483,647.
 * </div>
 * @param createObjectBlock A function that creates an object.
 * @param minSize The minimum size.
 */
- (instancetype) initWithCreateObjectBlock:(id(^)(void))createObjectBlock minSize:(int)minSize;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPool`1 class.
 * with a specified minimum size and a specified maximum size.
 * </div>
 * @param createObjectBlock A function that creates an object.
 * @param minSize The minimum size.
 * @param maxSize The maximum size.
 */
- (instancetype) initWithCreateObjectBlock:(id(^)(void))createObjectBlock minSize:(int)minSize maxSize:(int)maxSize;
/*!
 * <div>
 * Gets the maximum size. Value must be &gt;= 0.
 * A value of 0 indicates no maximum.
 * </div>
 */
- (int) maxSize;
/*!
 * <div>
 * Gets the minimum size. Value must be &gt;= 0.
 * </div>
 */
- (int) minSize;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPool`1 class
 * with a minimum size of 0 and a maximum size of 2,147,483,647.
 * </div>
 * @param createObject A function that creates an object.
 */
+ (FMIceLinkPool*) poolWithCreateObject:(FMIceLinkFunction0*)createObject;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPool`1 class
 * with a specified minimum size and a maximum size of 2,147,483,647.
 * </div>
 * @param createObject A function that creates an object.
 * @param minSize The minimum size.
 */
+ (FMIceLinkPool*) poolWithCreateObject:(FMIceLinkFunction0*)createObject minSize:(int)minSize;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPool`1 class.
 * with a specified minimum size and a specified maximum size.
 * </div>
 * @param createObject A function that creates an object.
 * @param minSize The minimum size.
 * @param maxSize The maximum size.
 */
+ (FMIceLinkPool*) poolWithCreateObject:(FMIceLinkFunction0*)createObject minSize:(int)minSize maxSize:(int)maxSize;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPool`1 class
 * with a minimum size of 0 and a maximum size of 2,147,483,647.
 * </div>
 * @param createObjectBlock A function that creates an object.
 */
+ (FMIceLinkPool*) poolWithCreateObjectBlock:(id(^)(void))createObjectBlock;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPool`1 class
 * with a specified minimum size and a maximum size of 2,147,483,647.
 * </div>
 * @param createObjectBlock A function that creates an object.
 * @param minSize The minimum size.
 */
+ (FMIceLinkPool*) poolWithCreateObjectBlock:(id(^)(void))createObjectBlock minSize:(int)minSize;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPool`1 class.
 * with a specified minimum size and a specified maximum size.
 * </div>
 * @param createObjectBlock A function that creates an object.
 * @param minSize The minimum size.
 * @param maxSize The maximum size.
 */
+ (FMIceLinkPool*) poolWithCreateObjectBlock:(id(^)(void))createObjectBlock minSize:(int)minSize maxSize:(int)maxSize;
/*!
 * <div>
 * Put an object back.
 * </div>
 * @param item
 */
- (void) putWithItem:(id)item;
/*!
 * <div>
 * Gets the current size of the pool.
 * </div>
 */
- (int) size;

@end

/*!
 * <div>
 * An elliptic-curve key.
 * </div>
 */
@interface FMIceLinkEcdsaKey : FMIceLinkAsymmetricKey

+ (FMIceLinkEcdsaKey*) ecdsaKey;
/*!
 * <div>
 * Serializes this key to binary.
 * </div>
 */
- (NSMutableData*) getBytes;
/*!
 * <div>
 * Serializes this key to a string.
 * </div>
 */
- (NSString*) getString;
/*!
 * <div>
 * Returns <code>true</code> if the key contains
 * private information.
 * </div>
 */
- (bool) hasPrivate;
/*!
 * <div>
 * Returns <code>true</code> if the key contains
 * public information.
 * </div>
 */
- (bool) hasPublic;
- (instancetype) init;
/*!
 * <div>
 * Gets the named curve.
 * </div>
 */
- (FMIceLinkEcdsaNamedCurve) namedCurve;
/*!
 * <div>
 * Deserializes a key from binary.
 * </div>
 * @param buffer The buffer.
 * @param isPrivate Whether this is a public key.
 * @return
 */
+ (FMIceLinkEcdsaKey*) parseBuffer:(FMIceLinkDataBuffer*)buffer isPrivate:(bool)isPrivate;
/*!
 * <div>
 * Deserializes a key from binary.
 * </div>
 * @param bytes The bytes.
 * @param isPrivate Whether this is a public key.
 * @return
 */
+ (FMIceLinkEcdsaKey*) parseBytes:(NSMutableData*)bytes isPrivate:(bool)isPrivate;
/*!
 * <div>
 * Parses a signature.
 * </div>
 * @param signature The signature.
 * @param r The R value.
 * @param s The S value.
 * @return
 */
+ (bool) parseSignature:(NSMutableData*)signature r:(NSMutableData**)r s:(NSMutableData**)s;
/*!
 * <div>
 * Deserializes a key from a string.
 * </div>
 * @param str The string.
 * @return
 */
+ (FMIceLinkEcdsaKey*) parseStringWithStr:(NSString*)str;
/*!
 * <div>
 * Gets the private key.
 * </div>
 */
- (NSMutableData*) privateKey;
/*!
 * <div>
 * Gets the public key.
 * </div>
 */
- (NSMutableData*) publicKey;
/*!
 * <div>
 * Sets the named curve.
 * </div>
 */
- (void) setNamedCurve:(FMIceLinkEcdsaNamedCurve)value;
/*!
 * <div>
 * Sets the private key.
 * </div>
 */
- (void) setPrivateKey:(NSMutableData*)value;
/*!
 * <div>
 * Sets the public key.
 * </div>
 */
- (void) setPublicKey:(NSMutableData*)value;
/*!
 * <div>
 * Gets the size of the key.
 * </div>
 */
- (int) size;
/*!
 * <div>
 * Creates a copy of this key without the private key.
 * </div>
 * @return
 */
- (FMIceLinkEcdsaKey*) toPublic;
/*!
 * <div>
 * Gets the key type.
 * </div>
 */
- (FMIceLinkAsymmetricKeyType) type;

@end

@interface FMIceLinkSourceLanguageWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkSourceLanguage)value;

@end

/*!
 * <div>
 * Provides methods for serializing/deserializing .NET value types to/from JSON
 * as well as facilities for converting objects and arrays if appropriate callbacks
 * are supplied to assist with the conversion.
 * </div>
 */
@interface FMIceLinkJsonSerializer : NSObject

/*!
 * <div>
 * Deserializes a boolean array from JSON.
 * </div>
 * @param arrayJson A JSON-serialized boolean array.
 * @return An array of boolean values.
 */
+ (NSMutableArray*) deserializeBooleanArrayWithArrayJson:(NSString*)arrayJson;
/*!
 * <div>
 * Deserializes a boolean value.
 * </div>
 * @param valueJson The boolean JSON to deserialize.
 * @return The deserialized boolean value.
 */
+ (FMIceLinkNullableBool*) deserializeBooleanWithValueJson:(NSString*)valueJson;
/*!
 * <div>
 * Deserializes a decimal array from JSON.
 * </div>
 * @param arrayJson A JSON-serialized decimal array.
 * @return An array of decimal values.
 */
+ (NSMutableArray*) deserializeDecimalArrayWithArrayJson:(NSString*)arrayJson;
/*!
 * <div>
 * Deserializes a decimal value.
 * </div>
 * @param valueJson The decimal JSON to deserialize.
 * @return The deserialized decimal value.
 */
+ (FMIceLinkNullableDecimal*) deserializeDecimalWithValueJson:(NSString*)valueJson;
/*!
 * <div>
 * Deserializes a JSON string into a dictionary.
 * </div><typeparam name="T">The type of value stored in the dictionary.</typeparam>
 * @param dictionaryJson The JSON-encoded dictionary.
 * @param createDictionaryCallback The callback that creates a blank dictionary.
 * @param deserializeValueCallback The callback that deserializes a value.
 * @return
 * The deserialized dictionary.
 * 
 */
+ (NSMutableDictionary*) deserializeDictionaryWithDictionaryJson:(NSString*)dictionaryJson createDictionaryCallback:(FMIceLinkFunction0*)createDictionaryCallback deserializeValueCallback:(FMIceLinkFunction1*)deserializeValueCallback;
/*!
 * <div>
 * Deserializes a JSON string into a dictionary.
 * </div><typeparam name="T">The type of value stored in the dictionary.</typeparam>
 * @param dictionaryJson The JSON-encoded dictionary.
 * @param createDictionaryCallbackBlock The callback that creates a blank dictionary.
 * @param deserializeValueCallbackBlock The callback that deserializes a value.
 * @return
 * The deserialized dictionary.
 * 
 */
+ (NSMutableDictionary*) deserializeDictionaryWithDictionaryJson:(NSString*)dictionaryJson createDictionaryCallbackBlock:(NSMutableDictionary*(^)(void))createDictionaryCallbackBlock deserializeValueCallbackBlock:(id(^)(NSString*))deserializeValueCallbackBlock;
/*!
 * <div>
 * Deserializes a JSON string into a dictionary.
 * </div><typeparam name="T">The type of value stored in the dictionary.</typeparam>
 * @inlineparam dictionaryJson The JSON-encoded dictionary.
 * @inlineparam createDictionaryCallbackBlock The callback that creates a blank dictionary.
 * @inlineparam deserializeValueCallbackBlock The callback that deserializes a value.
 * @return
 * The deserialized dictionary.
 * 
 */
+ (NSMutableDictionary* (^)(NSString*, NSMutableDictionary*(^)(void), id(^)(NSString*))) deserializeDictionaryWithDictionaryJsonAndCreateDictionaryCallbackBlockAndDeserializeValueCallbackBlock;
/*!
 * <div>
 * Deserializes a double array from JSON.
 * </div>
 * @param arrayJson A JSON-serialized double array.
 * @return An array of double values.
 */
+ (NSMutableArray*) deserializeDoubleArrayWithArrayJson:(NSString*)arrayJson;
/*!
 * <div>
 * Deserializes a double value.
 * </div>
 * @param valueJson The double JSON to deserialize.
 * @return The deserialized double value.
 */
+ (FMIceLinkNullableDouble*) deserializeDoubleWithValueJson:(NSString*)valueJson;
/*!
 * <div>
 * Deserializes a float array from JSON.
 * </div>
 * @param arrayJson A JSON-serialized float array.
 * @return An array of float values.
 */
+ (NSMutableArray*) deserializeFloatArrayWithArrayJson:(NSString*)arrayJson;
/*!
 * <div>
 * Deserializes a float value.
 * </div>
 * @param valueJson The float JSON to deserialize.
 * @return The deserialized float value.
 */
+ (FMIceLinkNullableFloat*) deserializeFloatWithValueJson:(NSString*)valueJson;
/*!
 * <div>
 * Deserializes a GUID array from JSON.
 * </div>
 * @param arrayJson A JSON-serialized GUID array.
 * @return An array of GUID values.
 */
+ (NSMutableArray*) deserializeGuidArrayWithArrayJson:(NSString*)arrayJson;
/*!
 * <div>
 * Deserializes a globally unique identifier.
 * </div>
 * @param valueJson The GUID JSON to deserialize.
 * @return The deserialized GUID.
 */
+ (FMIceLinkNullableGuid*) deserializeGuidWithValueJson:(NSString*)valueJson;
/*!
 * <div>
 * Deserializes a integer array from JSON.
 * </div>
 * @param arrayJson A JSON-serialized integer array.
 * @return An array of integer values.
 */
+ (NSMutableArray*) deserializeIntegerArrayWithArrayJson:(NSString*)arrayJson;
/*!
 * <div>
 * Deserializes an integer value.
 * </div>
 * @param valueJson The integer JSON to deserialize.
 * @return The deserialized integer value.
 */
+ (FMIceLinkNullableInt*) deserializeIntegerWithValueJson:(NSString*)valueJson;
/*!
 * <div>
 * Deserializes a long array from JSON.
 * </div>
 * @param arrayJson A JSON-serialized long array.
 * @return An array of long values.
 */
+ (NSMutableArray*) deserializeLongArrayWithArrayJson:(NSString*)arrayJson;
/*!
 * <div>
 * Deserializes a long value.
 * </div>
 * @param valueJson The long JSON to deserialize.
 * @return The deserialized long value.
 */
+ (FMIceLinkNullableLong*) deserializeLongWithValueJson:(NSString*)valueJson;
/*!
 * <div>
 * Deserializes a JSON string into an array of target object types.
 * </div><typeparam name="T">The type of the object to deserialize.</typeparam>
 * @param json The JSON-encoded string.
 * @param deserializer The callback used to deserialize each item in the array.
 * @return An array of deserialized objects.
 */
+ (NSMutableArray*) deserializeObjectArrayWithJson:(NSString*)json deserializer:(FMIceLinkFunction1*)deserializer;
/*!
 * <div>
 * Deserializes a JSON string into an array of target object types.
 * </div><typeparam name="T">The type of the object to deserialize.</typeparam>
 * @param json The JSON-encoded string.
 * @param deserializerBlock The callback used to deserialize each item in the array.
 * @return An array of deserialized objects.
 */
+ (NSMutableArray*) deserializeObjectArrayWithJson:(NSString*)json deserializerBlock:(id(^)(NSString*))deserializerBlock;
/*!
 * <div>
 * Deserializes a JSON string into an array of target object types.
 * </div><typeparam name="T">The type of the object to deserialize.</typeparam>
 * @inlineparam json The JSON-encoded string.
 * @inlineparam deserializerBlock The callback used to deserialize each item in the array.
 * @return An array of deserialized objects.
 */
+ (NSMutableArray* (^)(NSString*, id(^)(NSString*))) deserializeObjectArrayWithJsonAndDeserializerBlock;
/*!
 * <div>
 * Deserializes a JSON string into a FMIceLinkSerializable target object type.
 * </div><typeparam name="T">The type of the object to deserialize.</typeparam>
 * @param json The JSON-encoded string.
 * @param creator The method used for creating a new object.
 * @param callback The method used for deserializing a property.
 * @return The deserialized object.
 */
+ (FMIceLinkSerializable*) deserializeObjectFastWithJson:(NSString*)json creator:(FMIceLinkFunction0*)creator callback:(FMIceLinkAction3*)callback;
/*!
 * <div>
 * Deserializes a JSON string into a FMIceLinkSerializable target object type.
 * </div><typeparam name="T">The type of the object to deserialize.</typeparam>
 * @param json The JSON-encoded string.
 * @param creatorBlock The method used for creating a new object.
 * @param callbackBlock The method used for deserializing a property.
 * @return The deserialized object.
 */
+ (FMIceLinkSerializable*) deserializeObjectFastWithJson:(NSString*)json creatorBlock:(FMIceLinkSerializable*(^)(void))creatorBlock callbackBlock:(void(^)(FMIceLinkSerializable*, NSString*, NSString*))callbackBlock;
/*!
 * <div>
 * Deserializes a JSON string into a FMIceLinkSerializable target object type.
 * </div><typeparam name="T">The type of the object to deserialize.</typeparam>
 * @inlineparam json The JSON-encoded string.
 * @inlineparam creatorBlock The method used for creating a new object.
 * @inlineparam callbackBlock The method used for deserializing a property.
 * @return The deserialized object.
 */
+ (FMIceLinkSerializable* (^)(NSString*, FMIceLinkSerializable*(^)(void), void(^)(FMIceLinkSerializable*, NSString*, NSString*))) deserializeObjectFastWithJsonAndCreatorBlockAndCallbackBlock;
/*!
 * <div>
 * Deserializes a JSON string into a target object type.
 * </div><typeparam name="T">The type of the object to deserialize.</typeparam>
 * @param json The JSON-encoded string.
 * @param creator The method used for creating a new object.
 * @param callback The method used for deserializing a property.
 * @return The deserialized object.
 */
+ (id) deserializeObjectWithJson:(NSString*)json creator:(FMIceLinkFunction0*)creator callback:(FMIceLinkAction3*)callback;
/*!
 * <div>
 * Deserializes a JSON string into a target object type.
 * </div><typeparam name="T">The type of the object to deserialize.</typeparam>
 * @param json The JSON-encoded string.
 * @param creatorBlock The method used for creating a new object.
 * @param callbackBlock The method used for deserializing a property.
 * @return The deserialized object.
 */
+ (id) deserializeObjectWithJson:(NSString*)json creatorBlock:(id(^)(void))creatorBlock callbackBlock:(void(^)(id, NSString*, NSString*))callbackBlock;
/*!
 * <div>
 * Deserializes a JSON string into a target object type.
 * </div><typeparam name="T">The type of the object to deserialize.</typeparam>
 * @inlineparam json The JSON-encoded string.
 * @inlineparam creatorBlock The method used for creating a new object.
 * @inlineparam callbackBlock The method used for deserializing a property.
 * @return The deserialized object.
 */
+ (id (^)(NSString*, id(^)(void), void(^)(id, NSString*, NSString*))) deserializeObjectWithJsonAndCreatorBlockAndCallbackBlock;
/*!
 * <div>
 * Deserializes a raw array from JSON.
 * </div>
 * @param json A JSON-serialized raw array.
 * @return An array of raw values.
 */
+ (NSMutableArray*) deserializeRawArrayWithJson:(NSString*)json;
/*!
 * <div>
 * Deserializes a piece of raw JSON.
 * </div>
 * @param dataJson The raw data.
 * @return The deserialized data.
 */
+ (NSString*) deserializeRawWithDataJson:(NSString*)dataJson;
/*!
 * <div>
 * Deserializes a simple string array from JSON.
 * </div>
 * @param arrayJson A JSON-serialized string array.
 * @return An array of string values.
 */
+ (NSMutableArray*) deserializeStringArrayWithArrayJson:(NSString*)arrayJson;
/*!
 * <div>
 * Deserializes a string.
 * </div>
 * @param valueJson The string to deserialize.
 * @return The deserialized string value.
 */
+ (NSString*) deserializeStringWithValueJson:(NSString*)valueJson;
/*!
 * <div>
 * Escapes any special characters in a string.
 * </div>
 * @param text The string without escaped characters.
 * @return The escaped string.
 */
+ (NSString*) escapeStringWithText:(NSString*)text;
- (instancetype) init;
/*!
 * <div>
 * Determines whether the specified JSON string is valid.
 * </div>
 * @param json The JSON string to validate.
 * @return True if the JSON string is valid; false otherwise.
 */
+ (bool) isValidJson:(NSString*)json;
+ (FMIceLinkJsonSerializer*) jsonSerializer;
/*!
 * <div>
 * Serializes a boolean value.
 * </div>
 * @param value The boolean to serialize.
 * @return The serialized boolean value.
 */
+ (NSString*) serializeBoolean:(FMIceLinkNullableBool*)value;
/*!
 * <div>
 * Serializes a boolean array to JSON.
 * </div>
 * @param array An array of boolean values.
 * @return A JSON-serialized boolean array.
 */
+ (NSString*) serializeBooleanArray:(NSMutableArray*)array;
/*!
 * <div>
 * Serializes a decimal value.
 * </div>
 * @param value The decimal to serialize.
 * @return The serialized decimal value.
 */
+ (NSString*) serializeDecimal:(FMIceLinkNullableDecimal*)value;
/*!
 * <div>
 * Serializes a decimal array to JSON.
 * </div>
 * @param array An array of decimal values.
 * @return A JSON-serialized decimal array.
 */
+ (NSString*) serializeDecimalArray:(NSMutableArray*)array;
/*!
 * <div>
 * Serializes a dictionary into a JSON string.
 * </div><typeparam name="T">The type of value stored in the dictionary.</typeparam>
 * @param dictionary The dictionary being serialized.
 * @param serializeValueCallback The callback that serializes a value.
 * @return The dictionary as a JSON string.
 */
+ (NSString*) serializeDictionary:(NSMutableDictionary*)dictionary serializeValueCallback:(FMIceLinkFunction1*)serializeValueCallback;
/*!
 * <div>
 * Serializes a dictionary into a JSON string.
 * </div><typeparam name="T">The type of value stored in the dictionary.</typeparam>
 * @param dictionary The dictionary being serialized.
 * @param serializeValueCallbackBlock The callback that serializes a value.
 * @return The dictionary as a JSON string.
 */
+ (NSString*) serializeDictionary:(NSMutableDictionary*)dictionary serializeValueCallbackBlock:(NSString*(^)(id))serializeValueCallbackBlock;
/*!
 * <div>
 * Serializes a dictionary into a JSON string.
 * </div><typeparam name="T">The type of value stored in the dictionary.</typeparam>
 * @inlineparam dictionary The dictionary being serialized.
 * @inlineparam serializeValueCallbackBlock The callback that serializes a value.
 * @return The dictionary as a JSON string.
 */
+ (NSString* (^)(NSMutableDictionary*, NSString*(^)(id))) serializeDictionaryAndSerializeValueCallbackBlock;
/*!
 * <div>
 * Serializes a double value.
 * </div>
 * @param value The double to serialize.
 * @return The serialized double value.
 */
+ (NSString*) serializeDouble:(FMIceLinkNullableDouble*)value;
/*!
 * <div>
 * Serializes a double array to JSON.
 * </div>
 * @param array An array of double values.
 * @return A JSON-serialized double array.
 */
+ (NSString*) serializeDoubleArray:(NSMutableArray*)array;
/*!
 * <div>
 * Serializes a float value.
 * </div>
 * @param value The float to serialize.
 * @return The serialized float value.
 */
+ (NSString*) serializeFloat:(FMIceLinkNullableFloat*)value;
/*!
 * <div>
 * Serializes a float array to JSON.
 * </div>
 * @param array An array of float values.
 * @return A JSON-serialized float array.
 */
+ (NSString*) serializeFloatArray:(NSMutableArray*)array;
/*!
 * <div>
 * Serializes a globally unique identifier.
 * </div>
 * @param value The GUID to serialize.
 * @return The serialized GUID.
 */
+ (NSString*) serializeGuid:(FMIceLinkNullableGuid*)value;
/*!
 * <div>
 * Serializes a GUID array to JSON.
 * </div>
 * @param array An array of GUID values.
 * @return A JSON-serialized GUID array.
 */
+ (NSString*) serializeGuidArray:(NSMutableArray*)array;
/*!
 * <div>
 * Serializes an integer value.
 * </div>
 * @param value The integer to serialize.
 * @return The serialized integer value.
 */
+ (NSString*) serializeInteger:(FMIceLinkNullableInt*)value;
/*!
 * <div>
 * Serializes a integer array to JSON.
 * </div>
 * @param array An array of integer values.
 * @return A JSON-serialized integer array.
 */
+ (NSString*) serializeIntegerArray:(NSMutableArray*)array;
/*!
 * <div>
 * Serializes a long value.
 * </div>
 * @param value The long to serialize.
 * @return The serialized long value.
 */
+ (NSString*) serializeLong:(FMIceLinkNullableLong*)value;
/*!
 * <div>
 * Serializes a long array to JSON.
 * </div>
 * @param array An array of long values.
 * @return A JSON-serialized long array.
 */
+ (NSString*) serializeLongArray:(NSMutableArray*)array;
/*!
 * <div>
 * Serializes an object array into a JSON string.
 * </div><typeparam name="T">The type of the object to serialize.</typeparam>
 * @param objects The object array being serialized.
 * @param serializer The callback used to serialize each item in the array.
 * @return The object array as a JSON string.
 */
+ (NSString*) serializeObjectArrayWithObjects:(NSMutableArray*)objects serializer:(FMIceLinkFunction1*)serializer;
/*!
 * <div>
 * Serializes an object array into a JSON string.
 * </div><typeparam name="T">The type of the object to serialize.</typeparam>
 * @param objects The object array being serialized.
 * @param serializerBlock The callback used to serialize each item in the array.
 * @return The object array as a JSON string.
 */
+ (NSString*) serializeObjectArrayWithObjects:(NSMutableArray*)objects serializerBlock:(NSString*(^)(id))serializerBlock;
/*!
 * <div>
 * Serializes an object array into a JSON string.
 * </div><typeparam name="T">The type of the object to serialize.</typeparam>
 * @inlineparam objects The object array being serialized.
 * @inlineparam serializerBlock The callback used to serialize each item in the array.
 * @return The object array as a JSON string.
 */
+ (NSString* (^)(NSMutableArray*, NSString*(^)(id))) serializeObjectArrayWithObjectsAndSerializerBlock;
/*!
 * <div>
 * Serializes a FMIceLinkSerializable object into a JSON string.
 * </div><typeparam name="T">The type of the object to serialize.</typeparam>
 * @param source The object being serialized.
 * @param callback The method used for serializing properties.
 * @return The object as a JSON string.
 */
+ (NSString*) serializeObjectFastWithSource:(FMIceLinkSerializable*)source callback:(FMIceLinkAction2*)callback;
/*!
 * <div>
 * Serializes a FMIceLinkSerializable object into a JSON string.
 * </div><typeparam name="T">The type of the object to serialize.</typeparam>
 * @param source The object being serialized.
 * @param callbackBlock The method used for serializing properties.
 * @return The object as a JSON string.
 */
+ (NSString*) serializeObjectFastWithSource:(FMIceLinkSerializable*)source callbackBlock:(void(^)(FMIceLinkSerializable*, NSMutableDictionary*))callbackBlock;
/*!
 * <div>
 * Serializes a FMIceLinkSerializable object into a JSON string.
 * </div><typeparam name="T">The type of the object to serialize.</typeparam>
 * @inlineparam source The object being serialized.
 * @inlineparam callbackBlock The method used for serializing properties.
 * @return The object as a JSON string.
 */
+ (NSString* (^)(FMIceLinkSerializable*, void(^)(FMIceLinkSerializable*, NSMutableDictionary*))) serializeObjectFastWithSourceAndCallbackBlock;
/*!
 * <div>
 * Serializes an object into a JSON string.
 * </div><typeparam name="T">The type of the object to serialize.</typeparam>
 * @param source The object being serialized.
 * @param callback The method used for serializing properties.
 * @return The object as a JSON string.
 */
+ (NSString*) serializeObjectWithSource:(id)source callback:(FMIceLinkAction2*)callback;
/*!
 * <div>
 * Serializes an object into a JSON string.
 * </div><typeparam name="T">The type of the object to serialize.</typeparam>
 * @param source The object being serialized.
 * @param callbackBlock The method used for serializing properties.
 * @return The object as a JSON string.
 */
+ (NSString*) serializeObjectWithSource:(id)source callbackBlock:(void(^)(id, NSMutableDictionary*))callbackBlock;
/*!
 * <div>
 * Serializes an object into a JSON string.
 * </div><typeparam name="T">The type of the object to serialize.</typeparam>
 * @inlineparam source The object being serialized.
 * @inlineparam callbackBlock The method used for serializing properties.
 * @return The object as a JSON string.
 */
+ (NSString* (^)(id, void(^)(id, NSMutableDictionary*))) serializeObjectWithSourceAndCallbackBlock;
/*!
 * <div>
 * Serializes a raw array to JSON.
 * </div>
 * @param jsons An array of raw values.
 * @return A JSON-serialized raw array.
 */
+ (NSString*) serializeRawArrayWithJsons:(NSMutableArray*)jsons;
/*!
 * <div>
 * Serializes a piece of raw JSON.
 * </div>
 * @param dataJson The raw data.
 * @return The serialized data.
 */
+ (NSString*) serializeRawWithDataJson:(NSString*)dataJson;
/*!
 * <div>
 * Serializes a string.
 * </div>
 * @param value The string to serialize.
 * @return The serialized string value.
 */
+ (NSString*) serializeString:(NSString*)value;
/*!
 * <div>
 * Serializes a string array to JSON.
 * </div>
 * @param array An array of string values.
 * @return A JSON-serialized string array.
 */
+ (NSString*) serializeStringArray:(NSMutableArray*)array;
/*!
 * <div>
 * Trims the quotes from a JavaScript string value.
 * </div>
 * @param value The JavaScript string value.
 * @return The string without quotes.
 */
+ (NSString*) trimQuotes:(NSString*)value;
/*!
 * <div>
 * Unescapes any special characters from a string.
 * </div>
 * @param text The string with escaped characters.
 * @return The unescaped string.
 */
+ (NSString*) unescapeStringWithText:(NSString*)text;

@end

/*!
 * <div>
 * Provides methods for serializing/deserializing .NET value types to/from JSON
 * as well as facilities for converting objects and arrays if appropriate callbacks
 * are supplied to assist with the conversion.
 * </div>
 */
@interface FMIceLinkSerializer : FMIceLinkJsonSerializer

- (instancetype) init;
+ (FMIceLinkSerializer*) serializer;

@end

/*!
 * <div>
 * A simple state machine.
 * </div>
 */
@interface FMIceLinkStateMachine : NSObject

/*!
 * <div>
 * Adds an allowed transition.
 * </div>
 * @param fromState The "from" state.
 * @param toState The "to" state.
 */
- (void) addTransitionWithFromState:(id)fromState toState:(id)toState;
/*!
 * <div>
 * Determines whether a transition to the specified state is allowed.
 * </div>
 * @param toState The "to" state.
 * @return true if a transition to the specified state is allowed; otherwise, false.
 * 
 */
- (bool) canTransitionWithToState:(id)toState;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStateMachine`1 class.
 * </div>
 * @param initialState The initial state.
 */
- (instancetype) initWithInitialState:(id)initialState;
/*!
 * <div>
 * Gets the length of time spent in the last state,
 * in milliseconds.
 * </div>
 */
- (long long) lastStateMillis;
/*!
 * <div>
 * Gets the length of time spent in the last state,
 * in ticks.
 * </div>
 */
- (long long) lastStateTicks;
/*!
 * <div>
 * Gets the state.
 * </div>
 */
- (id) state;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStateMachine`1 class.
 * </div>
 * @param initialState The initial state.
 */
+ (FMIceLinkStateMachine*) stateMachineWithInitialState:(id)initialState;
/*!
 * <div>
 * Converts a state to an integer value.
 * </div>
 * @param state The state.
 * @return
 */
- (int) stateToValueWithState:(id)state;
/*!
 * <div>
 * Gets the state value.
 * </div>
 */
- (int) stateValue;
/*!
 * <div>
 * Gets the system timestamp of the last
 * state transition.
 * </div>
 */
- (long long) systemTimestamp;
/*!
 * <div>
 * Transitions to the specified state.
 * </div>
 * @param toState The "to" state.
 * @return true if a transition to the specified state is allowed; otherwise, false.
 * 
 */
- (bool) transitionWithToState:(id)toState;
/*!
 * <div>
 * Converts an integer value to a state.
 * </div>
 * @param value The integer value.
 * @return
 */
- (id) valueToState:(int)value;

@end

/*!
 * <div>
 * A linked list node.
 * </div>
 */
@interface FMIceLinkLinkedListNode : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLinkedListNode`1 class.
 * </div>
 * @param item The item.
 */
- (instancetype) initWithItem:(id)item;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLinkedListNode`1 class.
 * </div>
 * @param item The item.
 */
+ (FMIceLinkLinkedListNode*) linkedListNodeWithItem:(id)item;
/*!
 * <div>
 * Gets the next node. Will be <code>null</code> if last.
 * </div>
 */
- (FMIceLinkLinkedListNode*) next;
/*!
 * <div>
 * Gets the previous node. Null if first.
 * </div>
 */
- (FMIceLinkLinkedListNode*) previous;
/*!
 * <div>
 * Gets the item in the linked list.
 * </div>
 */
- (id) value;

@end

/*!
 * <div>
 * A linked list enumerator.
 * </div><typeparam name="T"></typeparam>
 */
@interface FMIceLinkLinkedListEnumerator : NSObject

/*!
 * <div>
 * Gets the current value.
 * </div>
 */
- (id) current;
/*!
 * <div>
 * Gets the current node.
 * </div>
 */
- (FMIceLinkLinkedListNode*) currentNode;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLinkedListEnumerator`1 class.
 * </div>
 * @param root The root node.
 */
- (instancetype) initWithRoot:(FMIceLinkLinkedListNode*)root;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLinkedListEnumerator`1 class.
 * </div>
 * @param root The root node.
 */
+ (FMIceLinkLinkedListEnumerator*) linkedListEnumeratorWithRoot:(FMIceLinkLinkedListNode*)root;
/*!
 * <div>
 * Moves to the next node.
 * </div>
 */
- (bool) moveNext;
/*!
 * <div>
 * Resets this instance.
 * </div>
 */
- (void) reset;

@end

/*!
 * <div>
 * A ConcurrentDictonary that maps to the appropriate platform version.
 * </div>
 */
@interface FMIceLinkManagedConcurrentDictionary : NSObject

/*!
 * <div>
 * Updates a value in the dictionary or adds it if it does not exist.
 * </div>
 * @param key The key to use for updating for adding.
 * @param addValue The value to be added for an absent key.
 * @return
 */
- (id) addOrUpdateWithKey:(id)key addValue:(id)addValue;
/*!
 * <div>
 * Updates a value in the dictionary or adds it if it does not exist.
 * </div>
 * @param key The key to use for updating for adding.
 * @param addValue The value to be added for an absent key.
 * @param updateValueFactory The function to use for generating a value based on an existing key.
 * @return
 */
- (id) addOrUpdateWithKey:(id)key addValue:(id)addValue updateValueFactory:(FMIceLinkFunction2*)updateValueFactory;
/*!
 * <div>
 * Updates a value in the dictionary or adds it if it does not exist.
 * </div>
 * @param key The key to use for updating for adding.
 * @param addValue The value to be added for an absent key.
 * @param updateValueFactoryBlock The function to use for generating a value based on an existing key.
 * @return
 */
- (id) addOrUpdateWithKey:(id)key addValue:(id)addValue updateValueFactoryBlock:(id(^)(id, id))updateValueFactoryBlock;
/*!
 * <div>
 * Updates a value in the dictionary or adds it if it does not exist.
 * </div>
 * @inlineparam key The key to use for updating for adding.
 * @inlineparam addValue The value to be added for an absent key.
 * @inlineparam updateValueFactoryBlock The function to use for generating a value based on an existing key.
 * @return
 */
- (id (^)(id, id, id(^)(id, id))) addOrUpdateWithKeyAndAddValueAndUpdateValueFactoryBlock;
/*!
 * <div>
 * Clears the dictionary of all items.
 * </div>
 */
- (void) clear;
/*!
 * <div>
 * True if the dictionary contains the key.
 * </div>
 * @param key The key to check.
 */
- (bool) containsKey:(id)key;
/*!
 * <div>
 * Gets the number of items in the dictionary.
 * </div>
 */
- (int) count;
/*!
 * <div>
 * Gets the value from the dictionary or adds a new one if it does not exist.
 * </div>
 * @param key The key to use when adding to the dictionary.
 * @param valueFactory The Func that will create a value if needed.
 * @return The dictionary value if exist, the value returned by the Func if not.
 */
- (id) getOrAddWithKey:(id)key valueFactory:(FMIceLinkFunction1*)valueFactory;
/*!
 * <div>
 * Gets the value from the dictionary or adds a new one if it does not exist.
 * </div>
 * @param key The key to use when adding to the dictionary.
 * @param valueFactoryBlock The Func that will create a value if needed.
 * @return The dictionary value if exist, the value returned by the Func if not.
 */
- (id) getOrAddWithKey:(id)key valueFactoryBlock:(id(^)(id))valueFactoryBlock;
/*!
 * <div>
 * Gets the value from the dictionary or adds a new one if it does not exist.
 * </div>
 * @inlineparam key The key to use when adding to the dictionary.
 * @inlineparam valueFactoryBlock The Func that will create a value if needed.
 * @return The dictionary value if exist, the value returned by the Func if not.
 */
- (id (^)(id, id(^)(id))) getOrAddWithKeyAndValueFactoryBlock;
/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Creates a new ManagedConcurrentDictionary.
 * </div>
 * @param hashCallback The hash function to use when the backing dictionary requires the key to be a string.
 */
- (instancetype) initWithHashCallback:(FMIceLinkFunction1*)hashCallback;
/*!
 * <div>
 * Creates a new ManagedConcurrentDictionary.
 * </div>
 * @param hashCallbackBlock The hash function to use when the backing dictionary requires the key to be a string.
 */
- (instancetype) initWithHashCallbackBlock:(NSString*(^)(id))hashCallbackBlock;
/*!
 * <div>
 * Gets true if dictionary is empty.
 * </div>
 */
- (bool) isEmpty;
/*!
 * <div>
 * Gets an array of keys.
 * </div>
 */
- (NSMutableArray*) keys;
/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
+ (FMIceLinkManagedConcurrentDictionary*) managedConcurrentDictionary;
/*!
 * <div>
 * Creates a new ManagedConcurrentDictionary.
 * </div>
 * @param hashCallback The hash function to use when the backing dictionary requires the key to be a string.
 */
+ (FMIceLinkManagedConcurrentDictionary*) managedConcurrentDictionaryWithHashCallback:(FMIceLinkFunction1*)hashCallback;
/*!
 * <div>
 * Creates a new ManagedConcurrentDictionary.
 * </div>
 * @param hashCallbackBlock The hash function to use when the backing dictionary requires the key to be a string.
 */
+ (FMIceLinkManagedConcurrentDictionary*) managedConcurrentDictionaryWithHashCallbackBlock:(NSString*(^)(id))hashCallbackBlock;
/*!
 * <div>
 * Tries to add a new value to the dictionary.
 * </div>
 * @param key The key to use when adding.
 * @param value The value to be added to the dictionary.
 * @return True if added, false if key already exists.
 */
- (bool) tryAddWithKey:(id)key value:(id)value;
/*!
 * <div>
 * Tries to get a value from the dictionary.
 * </div>
 * @param key They key of the item to get form the dictionary.
 * @param value The value that was just received or null if failed.
 * @return True if succeeded.
 */
- (bool) tryGetValueWithKey:(id)key value:(id*)value;
/*!
 * <div>
 * Tries and removes a value from the dictionary.
 * </div>
 * @param key The key of the item to remove.
 * @return True if successful.
 */
- (bool) tryRemoveWithKey:(id)key;
/*!
 * <div>
 * Tries and removes a value from the dictionary.
 * </div>
 * @param key The key of the item to remove.
 * @param value The value that was just removed.
 * @return True if successful.
 */
- (bool) tryRemoveWithKey:(id)key value:(id*)value;
/*!
 * <div>
 * Tries to update the value in the dictionary.
 * </div>
 * @param key The key to use when updating.
 * @param newValue The new value.
 * @param comparisonValue The value to compare with the current value in the dictionary.
 * @return True if succeeded.
 */
- (bool) tryUpdateWithKey:(id)key newValue:(id)newValue comparisonValue:(id)comparisonValue;
/*!
 * <div>
 * Gets an array of Values.
 * </div>
 */
- (NSMutableArray*) values;

@end

/*!
 * <div>
 * A thread-safe queue.
 * </div><typeparam name="T">The type that the queue holds.</typeparam>
 */
@interface FMIceLinkManagedConcurrentQueue : NSObject

/*!
 * <div>
 * Gets the amount of items in this queue.
 * </div>
 */
- (int) count;
/*!
 * <div>
 * Add the item to the end of the queue.
 * </div>
 * @param item The item to add.
 */
- (void) enqueueWithItem:(id)item;
/*!
 * <div>
 * Creates a new ConcurrentQueue.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets true if the queue is empty.
 * </div>
 */
- (bool) isEmpty;
/*!
 * <div>
 * Creates a new ConcurrentQueue.
 * </div>
 */
+ (FMIceLinkManagedConcurrentQueue*) managedConcurrentQueue;
/*!
 * <div>
 * Removes and returns the item at the front of the queue.
 * </div>
 * @param item The dequeued item.
 * @return True if item received, false if no item.
 */
- (bool) tryDequeueWithItem:(id*)item;
/*!
 * <div>
 * Peeks at the first item in the queue.
 * </div>
 * @param item The item at the front of the queue.
 * @return False if queue is empty. True if first item peeked at.
 */
- (bool) tryPeekWithItem:(id*)item;

@end

/*!
 * <div>
 * A ConcurrentStack that maps to the appropriate platform version.
 * </div>
 */
@interface FMIceLinkManagedConcurrentStack : NSObject

/*!
 * <div>
 * Clears the stack of all items.
 * </div>
 */
- (void) clear;
/*!
 * <div>
 * Gets the amount of items in the stack.
 * </div>
 */
- (int) count;
/*!
 * <div>
 * Creates a new instance of a ConcurrentStack.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets true if the stack is empty.
 * </div>
 */
- (bool) isEmpty;
/*!
 * <div>
 * Creates a new instance of a ConcurrentStack.
 * </div>
 */
+ (FMIceLinkManagedConcurrentStack*) managedConcurrentStack;
/*!
 * <div>
 * Pushes a new item on top of the stack.
 * </div>
 * @param item The item to push.
 */
- (void) pushWithItem:(id)item;
/*!
 * <div>
 * Tries to peek at the top value in stack.
 * </div>
 * @param result The value from the stack if possible, null otherwise.
 * @return True if peek succeeded, false if not.
 */
- (bool) tryPeekWithResult:(id*)result;
/*!
 * <div>
 * Tries to pop the top value off of the stack.
 * </div>
 * @param result The value from the top of the stack if possible, null otherwise.
 * @return True if pop suceeded, false if not.
 */
- (bool) tryPopWithResult:(id*)result;

@end

/*!
 * <div>
 * A linked list.
 * </div><typeparam name="T"></typeparam>
 */
@interface FMIceLinkLinkedList : NSObject

/*!
 * <div>
 * Adds an item after a node.
 * </div>
 * @param node The node after which to add the value.
 * @param value The value.
 */
- (FMIceLinkLinkedListNode*) addAfterNode:(FMIceLinkLinkedListNode*)node value:(id)value;
/*!
 * <div>
 * Adds an item before a node.
 * </div>
 * @param node The node before which to add the value.
 * @param value The value.
 */
- (FMIceLinkLinkedListNode*) addBeforeNode:(FMIceLinkLinkedListNode*)node value:(id)value;
/*!
 * <div>
 * Adds an item to the beginning of the linked list.
 * </div>
 * @param value The value.
 */
- (FMIceLinkLinkedListNode*) addFirst:(id)value;
/*!
 * <div>
 * Adds an item to the end of the linked list.
 * </div>
 * @param value The value.
 */
- (FMIceLinkLinkedListNode*) addLast:(id)value;
/*!
 * <div>
 * Clears all nodes from the linked list.
 * </div>
 */
- (void) clear;
/*!
 * <div>
 * Gets the number of items in this linked list.
 * </div>
 */
- (int) count;
/*!
 * <div>
 * Gets the first node in the linked list.
 * </div>
 */
- (FMIceLinkLinkedListNode*) first;
/*!
 * <div>
 * Gets the enumerator for this linked list.
 * </div>
 */
- (FMIceLinkLinkedListEnumerator*) getEnumerator;
- (instancetype) init;
/*!
 * <div>
 * Gets the last node in the linked list.
 * </div>
 */
- (FMIceLinkLinkedListNode*) last;
+ (FMIceLinkLinkedList*) linkedList;
/*!
 * <div>
 * Removes an item from the linked list.
 * </div>
 * @param value The value.
 */
- (bool) remove:(id)value;
/*!
 * <div>
 * Removes the first item in the linked list.
 * </div>
 */
- (bool) removeFirst;
/*!
 * <div>
 * Removes the last item in the linked list.
 * </div>
 */
- (bool) removeLast;
/*!
 * <div>
 * Removes a specific node from the linked list.
 * </div>
 * @param node The node.
 */
- (bool) removeNode:(FMIceLinkLinkedListNode*)node;
/*!
 * <div>
 * Returns the linked list as a regular list.
 * </div>
 */
- (NSMutableArray*) toList;

@end

/*!
 * <div>
 * A mutable 2-tuple.
 * </div><typeparam name="T1">First type the tuple holds.</typeparam><typeparam name="T2">Second type the tuple holds.</typeparam>
 */
@interface FMIceLinkMutablePair : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMutablePair`2 class.
 * </div>
 * @param item1 First item the tuple holds.
 * @param item2 Second item the tuple holds.
 */
- (instancetype) initWithItem1:(id)item1 item2:(id)item2;
/*!
 * <div>
 * Gets the first item in the tuple.
 * </div>
 */
- (id) item1;
/*!
 * <div>
 * Gets the second item in the tuple.
 * </div>
 */
- (id) item2;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMutablePair`2 class.
 * </div>
 * @param item1 First item the tuple holds.
 * @param item2 Second item the tuple holds.
 */
+ (FMIceLinkMutablePair*) mutablePairWithItem1:(id)item1 item2:(id)item2;
/*!
 * <div>
 * Sets the first item in the tuple.
 * </div>
 */
- (void) setItem1:(id)value;
/*!
 * <div>
 * Sets the second item in the tuple.
 * </div>
 */
- (void) setItem2:(id)value;

@end

/*!
 * <div>
 * A mutable 1-tuple.
 * </div><typeparam name="T">Type the tuple holds.</typeparam>
 */
@interface FMIceLinkMutableUnit : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMutableUnit`1 class.
 * </div>
 * @param item The item to hold.
 */
- (instancetype) initWithItem:(id)item;
/*!
 * <div>
 * Gets the first item in the tuple.
 * </div>
 */
- (id) item;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMutableUnit`1 class.
 * </div>
 * @param item The item to hold.
 */
+ (FMIceLinkMutableUnit*) mutableUnitWithItem:(id)item;
/*!
 * <div>
 * Sets the first item in the tuple.
 * </div>
 */
- (void) setItem:(id)value;

@end

/*!
 * <div>
 * A 2-tuple.
 * </div><typeparam name="T1">First type the tuple holds.</typeparam><typeparam name="T2">Second type the tuple holds.</typeparam>
 */
@interface FMIceLinkPair : NSObject

/*!
 * <div>
 * Calculates the hashcode for this pair.
 * </div>
 */
- (int) hash;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPair`2 class.
 * </div>
 * @param item1 First item the tuple holds.
 * @param item2 Second item the tuple holds.
 */
- (instancetype) initWithItem1:(id)item1 item2:(id)item2;
/*!
 * <div>
 * Determines whether the specified System.Object is equal to the current System.Object.
 * </div>
 * @param obj The object to compare with the current object.
 * @return true if the specified System.Object is equal to the current System.Object; otherwise, false.
 */
- (bool) isEqualWithObj:(id)obj;
/*!
 * <div>
 * Gets the first item in the tuple.
 * </div>
 */
- (id) item1;
/*!
 * <div>
 * Gets the second item in the tuple.
 * </div>
 */
- (id) item2;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPair`2 class.
 * </div>
 * @param item1 First item the tuple holds.
 * @param item2 Second item the tuple holds.
 */
+ (FMIceLinkPair*) pairWithItem1:(id)item1 item2:(id)item2;

@end

/*!
 * <div>
 * A priority queue.
 * </div><typeparam name="T"></typeparam>
 */
@interface FMIceLinkPriorityQueue : NSObject

/*!
 * <div>
 * Gets the count.
 * </div>
 */
- (int) count;
/*!
 * <div>
 * Dequeues an item.
 * </div>
 */
- (id) dequeue;
/*!
 * <div>
 * Enqueues an item.
 * </div>
 * @param item The item.
 */
- (void) enqueueWithItem:(id)item;
/*!
 * <div>
 * Checks if an item exists in the queue.
 * </div>
 * @param item The item.
 */
- (bool) existsWithItem:(id)item;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPriorityQueue`1 class.
 * </div>
 * @param comparer The comparer.
 */
- (instancetype) initWithComparer:(FMIceLinkFunction2*)comparer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPriorityQueue`1 class.
 * </div>
 * @param comparerBlock The comparer.
 */
- (instancetype) initWithComparerBlock:(FMIceLinkCompareResult(^)(id, id))comparerBlock;
/*!
 * <div>
 * Determines whether the queue is consistent.
 * </div>
 */
- (bool) isConsistent;
/*!
 * <div />
 */
- (id) peek;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPriorityQueue`1 class.
 * </div>
 * @param comparer The comparer.
 */
+ (FMIceLinkPriorityQueue*) priorityQueueWithComparer:(FMIceLinkFunction2*)comparer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPriorityQueue`1 class.
 * </div>
 * @param comparerBlock The comparer.
 */
+ (FMIceLinkPriorityQueue*) priorityQueueWithComparerBlock:(FMIceLinkCompareResult(^)(id, id))comparerBlock;

@end

/*!
 * <div>
 * A certificate to be used for TLS communication.
 * </div>
 */
@interface FMIceLinkTlsCertificate : FMIceLinkCertificate

/*!
 * <div>
 * Creates the certificate.
 * </div>
 * @return
 */
- (FMIceLinkTlsCertificate*) createCertificate;
/*!
 * <div>
 * Creates a fingerprint.
 * </div>
 * @param algorithm The algorithm.
 * @param value The value.
 * @return
 */
- (FMIceLinkTlsFingerprint*) createFingerprintWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/*!
 * <div>
 * Gets the default asymmetric key type (RSA).
 * </div>
 */
+ (FMIceLinkAsymmetricKeyType) defaultKeyType;
/*!
 * <div>
 * Generates a certificate with a default issuer/subject name and
 * an expiration date of 10 days from now.
 * </div>
 */
+ (FMIceLinkTlsCertificate*) generateCertificate;
/*!
 * <div>
 * Generates a certificate using the issuer/subject name from an
 * old certificate and an expiration date of 10 days from now.
 * </div>
 * @param oldCertificate The old certificate.
 */
+ (FMIceLinkTlsCertificate*) generateCertificateFromOldCertificate:(FMIceLinkTlsCertificate*)oldCertificate;
/*!
 * <div>
 * Generates a certificate using the issuer/subject name from an
 * old certificate and the given expiration date.
 * </div>
 * @param oldCertificate The old certificate.
 * @param expirationDate The expiration date.
 */
+ (FMIceLinkTlsCertificate*) generateCertificateFromOldCertificate:(FMIceLinkTlsCertificate*)oldCertificate expirationDate:(NSDate*)expirationDate;
/*!
 * <div>
 * Generates a certificate with the given issuer name, subject name, and
 * an expiration date of 10 days from now.
 * </div>
 * @param issuerName The name of the issuer.
 * @param subjectName The name of the subject.
 */
+ (FMIceLinkTlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName;
/*!
 * <div>
 * Generates a certificate with the given issuer name, subject name, and expiration date.
 * </div>
 * @param issuerName The name of the issuer.
 * @param subjectName The name of the subject.
 * @param expirationDate The expiration date.
 */
+ (FMIceLinkTlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName expirationDate:(NSDate*)expirationDate;
/*!
 * <div>
 * Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.
 * </div>
 * @param issuerName The name of the issuer.
 * @param subjectName The name of the subject.
 * @param expirationDate The expiration date.
 * @param key The asymmetric key (with public and private details).
 */
+ (FMIceLinkTlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName expirationDate:(NSDate*)expirationDate key:(FMIceLinkAsymmetricKey*)key;
/*!
 * <div>
 * Generates a certificate with the given issuer name, subject name, expiration date, and asymmetric key.
 * </div>
 * @param issuerName The name of the issuer.
 * @param subjectName The name of the subject.
 * @param expirationDate The expiration date.
 * @param keyType The asymmetric key type.
 */
+ (FMIceLinkTlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName expirationDate:(NSDate*)expirationDate keyType:(FMIceLinkAsymmetricKeyType)keyType;
/*!
 * <div>
 * Generates a certificate with the given issuer name, subject name, and
 * an expiration date of 10 days from now.
 * </div>
 * @param issuerName The name of the issuer.
 * @param subjectName The name of the subject.
 * @param key The asymmetric key (with public and private details).
 */
+ (FMIceLinkTlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName key:(FMIceLinkAsymmetricKey*)key;
/*!
 * <div>
 * Generates a certificate with the given issuer name, subject name, and
 * an expiration date of 10 days from now.
 * </div>
 * @param issuerName The name of the issuer.
 * @param subjectName The name of the subject.
 * @param keyType The asymmetric key type.
 */
+ (FMIceLinkTlsCertificate*) generateCertificateWithIssuerName:(NSString*)issuerName subjectName:(NSString*)subjectName keyType:(FMIceLinkAsymmetricKeyType)keyType;
/*!
 * <div>
 * Generates a certificate with a default issuer/subject name and
 * an expiration date of 10 days from now.
 * </div>
 * @param key The asymmetric key (with public and private details).
 */
+ (FMIceLinkTlsCertificate*) generateCertificateWithKey:(FMIceLinkAsymmetricKey*)key;
/*!
 * <div>
 * Generates a certificate with a default issuer/subject name and
 * an expiration date of 10 days from now.
 * </div>
 * @param keyType The asymmetric key type.
 */
+ (FMIceLinkTlsCertificate*) generateCertificateWithKeyType:(FMIceLinkAsymmetricKeyType)keyType;
/*!
 * <div>
 * Generates a certificate with the given issuer/subject name and an
 * expiration date of 10 days from now.
 * </div>
 * @param name The name of the issuer/subject.
 */
+ (FMIceLinkTlsCertificate*) generateCertificateWithName:(NSString*)name;
/*!
 * <div>
 * Generates a certificate with the given issuer/subject name and an
 * expiration date of 10 days from now.
 * </div>
 * @param name The name of the issuer/subject.
 * @param key The asymmetric key (with public and private details).
 */
+ (FMIceLinkTlsCertificate*) generateCertificateWithName:(NSString*)name key:(FMIceLinkAsymmetricKey*)key;
/*!
 * <div>
 * Generates a certificate with the given issuer/subject name and an
 * expiration date of 10 days from now.
 * </div>
 * @param name The name of the issuer/subject.
 * @param keyType The asymmetric key type.
 */
+ (FMIceLinkTlsCertificate*) generateCertificateWithName:(NSString*)name keyType:(FMIceLinkAsymmetricKeyType)keyType;
- (instancetype) init;
/*!
 * <div>
 * Deserializes a certificate from binary.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkTlsCertificate*) parseBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Sets the default asymmetric key type (RSA).
 * </div>
 */
+ (void) setDefaultKeyType:(FMIceLinkAsymmetricKeyType)value;
+ (FMIceLinkTlsCertificate*) tlsCertificate;

@end

/*!
 * <div>
 * A TLS fingerprint.
 * </div>
 */
@interface FMIceLinkTlsFingerprint : FMIceLinkFingerprint

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTlsFingerprint class.
 * </div>
 * @param algorithm The algorithm.
 * @param value The value.
 */
- (instancetype) initWithAlgorithm:(NSString*)algorithm value:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTlsFingerprint class.
 * </div>
 * @param algorithm The algorithm.
 * @param value The value.
 */
+ (FMIceLinkTlsFingerprint*) tlsFingerprintWithAlgorithm:(NSString*)algorithm value:(NSString*)value;

@end

/*!
 * <div>
 * A 3-tuple.
 * </div><typeparam name="T1">First type the tuple holds.</typeparam><typeparam name="T2">Second type the tuple holds.</typeparam><typeparam name="T3">Third type the tuple holds.</typeparam>
 */
@interface FMIceLinkTriple : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTriple`3 class.
 * </div>
 * @param item1 First item the tuple holds.
 * @param item2 Second item the tuple holds.
 * @param item3 Third item the tuple holds.
 */
- (instancetype) initWithItem1:(id)item1 item2:(id)item2 item3:(id)item3;
/*!
 * <div>
 * Gets the first item in the tuple.
 * </div>
 */
- (id) item1;
/*!
 * <div>
 * Gets the second item in the tuple.
 * </div>
 */
- (id) item2;
/*!
 * <div>
 * Gets the third item in the tuple.
 * </div>
 */
- (id) item3;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTriple`3 class.
 * </div>
 * @param item1 First item the tuple holds.
 * @param item2 Second item the tuple holds.
 * @param item3 Third item the tuple holds.
 */
+ (FMIceLinkTriple*) tripleWithItem1:(id)item1 item2:(id)item2 item3:(id)item3;

@end

/*!
 * <div>
 * A 1-tuple.
 * </div><typeparam name="T">Type the tuple holds.</typeparam>
 */
@interface FMIceLinkUnit : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkUnit`1 class.
 * </div>
 * @param item The item to hold.
 */
- (instancetype) initWithItem:(id)item;
/*!
 * <div>
 * Gets the item in the tuple.
 * </div>
 */
- (id) item;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkUnit`1 class.
 * </div>
 * @param item The item to hold.
 */
+ (FMIceLinkUnit*) unitWithItem:(id)item;

@end

@interface FMIceLinkCompareResultWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkCompareResult)value;

@end

/*!
 * <div>
 * A collection of platform-independent constant values.
 * </div>
 */
@interface FMIceLinkConstants : NSObject

+ (FMIceLinkConstants*) constants;
/*!
 * <div>
 * Gets the number of hours in one day.
 * </div>
 */
+ (int) hoursPerDay;
- (instancetype) init;
/*!
 * <div>
 * Gets the number of milliseconds in one hour.
 * </div>
 */
+ (int) millisecondsPerDay;
/*!
 * <div>
 * Gets the number of milliseconds in one hour.
 * </div>
 */
+ (int) millisecondsPerHour;
/*!
 * <div>
 * Gets the number of milliseconds in one minute.
 * </div>
 */
+ (int) millisecondsPerMinute;
/*!
 * <div>
 * Gets the number of milliseconds in one second.
 * </div>
 */
+ (int) millisecondsPerSecond;
/*!
 * <div>
 * Gets the number of minutes in one day.
 * </div>
 */
+ (int) minutesPerDay;
/*!
 * <div>
 * Gets the number of minutes in one hour.
 * </div>
 */
+ (int) minutesPerHour;
/*!
 * <div>
 * Gets the number of nanoseconds in one tick.
 * </div>
 */
+ (int) nanosecondsPerTick;
/*!
 * <div>
 * Gets the number of seconds in one day.
 * </div>
 */
+ (int) secondsPerDay;
/*!
 * <div>
 * Gets the number of seconds in one hour.
 * </div>
 */
+ (int) secondsPerHour;
/*!
 * <div>
 * Gets the number of seconds in one minute.
 * </div>
 */
+ (int) secondsPerMinute;
/*!
 * <div>
 * Gets the number of ticks in one day.
 * </div>
 */
+ (long long) ticksPerDay;
/*!
 * <div>
 * Gets the number of ticks in one hour.
 * </div>
 */
+ (long long) ticksPerHour;
/*!
 * <div>
 * Gets the number of ticks in one millisecond.
 * </div>
 */
+ (int) ticksPerMillisecond;
/*!
 * <div>
 * Gets the number of ticks in one minute.
 * </div>
 */
+ (int) ticksPerMinute;
/*!
 * <div>
 * Gets the number of ticks in one second.
 * </div>
 */
+ (int) ticksPerSecond;

@end

/*!
 * <div>
 * Calculates CRC32 checksums.
 * </div>
 */
@interface FMIceLinkCrc32 : NSObject

/*!
 * <div>
 * Computes the 32-bit CRC hex string for an array of bytes.
 * </div>
 * @param bytes The bytes.
 */
- (NSString*) computeHexWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Computes the 32-bit CRC hex string for an array of bytes.
 * </div>
 * @param bytes The bytes.
 * @param offset The offset.
 */
- (NSString*) computeHexWithBytes:(NSMutableData*)bytes offset:(int)offset;
/*!
 * <div>
 * Computes the 32-bit CRC hex string for an array of bytes.
 * </div>
 * @param bytes The bytes.
 * @param offset The offset.
 * @param length The length.
 */
- (NSString*) computeHexWithBytes:(NSMutableData*)bytes offset:(int)offset length:(int)length;
/*!
 * <div>
 * Computes the 32-bit CRC for an array of bytes.
 * </div>
 * @param bytes The bytes.
 */
- (long long) computeWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Computes the 32-bit CRC for an array of bytes.
 * </div>
 * @param bytes The bytes.
 * @param offset The offset.
 */
- (long long) computeWithBytes:(NSMutableData*)bytes offset:(int)offset;
/*!
 * <div>
 * Computes the 32-bit CRC for an array of bytes.
 * </div>
 * @param bytes The bytes.
 * @param offset The offset.
 * @param length The length.
 */
- (long long) computeWithBytes:(NSMutableData*)bytes offset:(int)offset length:(int)length;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCrc32 class
 * using the CRC32 polynomial.
 * </div>
 */
+ (FMIceLinkCrc32*) crc32;
/*!
 * <div>
 * Gets the CRC32c polynomial.
 * </div>
 */
+ (long long) crc32cPolynomial;
/*!
 * <div>
 * Gets the CRC32d polynomial.
 * </div>
 */
+ (long long) crc32dPolynomial;
/*!
 * <div>
 * Gets the CRC32 polynomial.
 * </div>
 */
+ (long long) crc32Polynomial;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCrc32 class
 * using the specified polynomial.
 * </div>
 * @param polynomial The polynomial.
 */
+ (FMIceLinkCrc32*) crc32WithPolynomial:(long long)polynomial;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCrc32 class
 * using the specified polynomial.
 * </div>
 * @param polynomial The polynomial.
 * @param reverseBits Whether to reverse the bits.
 */
+ (FMIceLinkCrc32*) crc32WithPolynomial:(long long)polynomial reverseBits:(bool)reverseBits;
/*!
 * <div>
 * Gets the value used to XOR the final result.
 * </div>
 */
- (long long) finalXorValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCrc32 class
 * using the CRC32 polynomial.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets the initial value.
 * </div>
 */
- (long long) initialValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCrc32 class
 * using the specified polynomial.
 * </div>
 * @param polynomial The polynomial.
 */
- (instancetype) initWithPolynomial:(long long)polynomial;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkCrc32 class
 * using the specified polynomial.
 * </div>
 * @param polynomial The polynomial.
 * @param reverseBits Whether to reverse the bits.
 */
- (instancetype) initWithPolynomial:(long long)polynomial reverseBits:(bool)reverseBits;
/*!
 * <div>
 * Gets the polynomial.
 * </div>
 */
- (long long) polynomial;
/*!
 * <div>
 * Gets a value indicating whether to reverse the bits.
 * </div>
 */
- (bool) reverseBits;
/*!
 * <div>
 * Sets the value used to XOR the final result.
 * </div>
 */
- (void) setFinalXorValue:(long long)value;
/*!
 * <div>
 * Sets the initial value.
 * </div>
 */
- (void) setInitialValue:(long long)value;

@end

/*!
 * <div>
 * A data buffer stream.
 * </div>
 */
@interface FMIceLinkDataBufferStream : NSObject

/*!
 * <div>
 * Gets the available bytes to be read from the DataBuffer.
 * </div>
 */
- (int) available;
/*!
 * <div>
 * Gets the bit position within a byte.
 * </div>
 */
- (uint8_t) bitPosition;
/*!
 * <div>
 * Gets the buffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataBufferStream class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkDataBufferStream*) dataBufferStreamWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataBufferStream class.
 * </div>
 * @param dataBufferSize Size of the data buffer.
 */
+ (FMIceLinkDataBufferStream*) dataBufferStreamWithDataBufferSize:(int)dataBufferSize;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataBufferStream class.
 * </div>
 * @param dataBufferSize Size of the data buffer.
 * @param littleEndian Whether the data is little-endian.
 */
+ (FMIceLinkDataBufferStream*) dataBufferStreamWithDataBufferSize:(int)dataBufferSize littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataBufferStream class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataBufferStream class.
 * </div>
 * @param dataBufferSize Size of the data buffer.
 */
- (instancetype) initWithDataBufferSize:(int)dataBufferSize;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataBufferStream class.
 * </div>
 * @param dataBufferSize Size of the data buffer.
 * @param littleEndian Whether the data is little-endian.
 */
- (instancetype) initWithDataBufferSize:(int)dataBufferSize littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Gets the buffer length.
 * </div>
 */
- (int) length;
/*!
 * <div>
 * Resets the bit count to 0 and advances to the next byte.
 * </div>
 */
- (void) nextByte;
/*!
 * <div>
 * Reads an 8-bit value from the DataBuffer without advancing the Position.
 * </div>
 */
- (int) peek;
/*!
 * <div>
 * Gets the position within the stream.
 * </div>
 */
- (int) position;
/*!
 * <div>
 * Read a single bit and advance the bit position by 1.
 * </div>
 */
- (bool) read1;
/*!
 * <div>
 * Reads an 15-bit value from the DataBuffer and advances the Position by 1 and the BitPosition by 7.
 * </div>
 */
- (int) read15;
/*!
 * <div>
 * Reads an 16-bit value from the DataBuffer and advances the Position by 2.
 * </div>
 */
- (int) read16;
/*!
 * <div>
 * Read a 2-bit value and advance the BitPosition by 2.
 * </div>
 */
- (int) read2;
/*!
 * <div>
 * Reads an 24-bit value from the DataBuffer and advances the Position by 3.
 * </div>
 */
- (int) read24;
/*!
 * <div>
 * Read a 3-bit value and advance the BitPosition by 3.
 * </div>
 */
- (int) read3;
/*!
 * <div>
 * Reads an 32-bit value from the DataBuffer and advances the Position by 4.
 * </div>
 */
- (long long) read32;
/*!
 * <div>
 * Read a 4-bit value and advance the BitPosition by 4.
 * </div>
 */
- (int) read4;
/*!
 * <div>
 * Reads an 40-bit value from the DataBuffer and advances the Position by 5.
 * </div>
 */
- (long long) read40;
/*!
 * <div>
 * Reads an 48-bit value from the DataBuffer and advances the Position by 6.
 * </div>
 */
- (long long) read48;
/*!
 * <div>
 * Reads an 56-bit value from the DataBuffer and advances the Position by 7.
 * </div>
 */
- (long long) read56;
/*!
 * <div>
 * Reads an 64-bit value from the DataBuffer and advances the Position by 8.
 * </div>
 */
- (long long) read64;
/*!
 * <div>
 * Reads an 7-bit value from the DataBuffer and advances the BitPosition by 7.
 * </div>
 */
- (int) read7;
/*!
 * <div>
 * Reads an 8-bit value from the DataBuffer and advances the Position by 1.
 * </div>
 */
- (int) read8;
/*!
 * <div>
 * Reads a single byte from the stream and advances the Position by 1.
 * </div>
 */
- (int) readByte;
/*!
 * <div>
 * Read a specified number of bytes from the DataBuffer and advance the Position by that number.
 * </div>
 * @param length The number of bytes to read.
 */
- (NSMutableData*) readBytesWithLength:(int)length;
/*!
 * <div>
 * Reads the specified length from the DataBuffer and advances the position by the length.
 * </div>
 * @param length The length.
 */
- (FMIceLinkDataBuffer*) readWithLength:(int)length;
/*!
 * <div>
 * Sets the bit position within a byte.
 * </div>
 */
- (void) setBitPosition:(uint8_t)value;
/*!
 * <div>
 * Sets the position within the stream.
 * </div>
 */
- (void) setPosition:(int)value;
/*!
 * <div>
 * Writes an 16-bit value to the DataBuffer and advances the Position by 2.
 * </div>
 * @param value The value.
 */
- (FMIceLinkDataBufferStream*) write16:(int)value;
/*!
 * <div>
 * Writes an 32-bit value to the DataBuffer and advances the Position by 4.
 * </div>
 * @param value The value.
 */
- (FMIceLinkDataBufferStream*) write32:(long long)value;
/*!
 * <div>
 * Writes an 64-bit value to the DataBuffer and advances the Position by 8.
 * </div>
 * @param value The value.
 */
- (FMIceLinkDataBufferStream*) write64:(long long)value;
/*!
 * <div>
 * Writes an 8-bit value to the DataBuffer and advances the Position by 1.
 * </div>
 * @param value The value.
 */
- (FMIceLinkDataBufferStream*) write8:(int)value;
/*!
 * <div>
 * Writes the specified data to the DataBuffer and advances the Position by the length of the data.
 * </div>
 * @param data The data.
 */
- (FMIceLinkDataBufferStream*) writeBytesWithData:(NSMutableData*)data;
/*!
 * <div>
 * Writes the specified data to the DataBuffer and advances the Position by the length.
 * </div>
 * @param data The data.
 * @param index The index.
 * @param length The length.
 */
- (FMIceLinkDataBufferStream*) writeBytesWithData:(NSMutableData*)data index:(int)index length:(int)length;
/*!
 * <div>
 * Writes the specified buffer to the DataBuffer and advances the Position by the length of the buffer.
 * </div>
 * @param buffer The buffer.
 */
- (FMIceLinkDataBufferStream*) writeWithBuffer:(FMIceLinkDataBuffer*)buffer;

@end

/*!
 * <div>
 * Binary data buffer implementation
 * </div>
 */
@interface FMIceLinkDataBuffer : NSObject

/*!
 * <div>
 * Allocates a new data buffer with a given size (in bytes)
 * in big-endian format.
 * </div>
 * @param count Pre-allocated data buffer size  (in bytes).
 */
+ (FMIceLinkDataBuffer*) allocateWithCount:(int)count;
/*!
 * <div>
 * Allocates a new data buffer with a given size (in bytes).
 * </div>
 * @param count Pre-allocated data buffer size  (in bytes).
 * @param littleEndian Whether the data is little-endian.
 */
+ (FMIceLinkDataBuffer*) allocateWithCount:(int)count littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Performs a bitwise "and" operation on a value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 */
- (bool) and:(int)value offset:(int)offset;
/*!
 * <div>
 * Appends a buffer.
 * </div>
 * @param buffer The buffer.
 */
- (FMIceLinkDataBuffer*) appendWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Appends some buffers.
 * </div>
 * @param buffers The buffers.
 */
- (FMIceLinkDataBuffer*) appendWithBuffers:(NSMutableArray*)buffers;
/*!
 * <div>
 * Tests if the two buffers have equal contents.
 * </div>
 * @param buffer1 First buffer to test.
 * @param buffer2 Second buffer to test.
 */
+ (bool) areEqualWithBuffer1:(FMIceLinkDataBuffer*)buffer1 buffer2:(FMIceLinkDataBuffer*)buffer2;
/*!
 * <div>
 * Clones this instance.
 * </div>
 */
- (FMIceLinkDataBuffer*) clone;
/*!
 * <div>
 * Clones this instance.
 * </div>
 * @param littleEndian Whether to clone into a little endian buffer.
 */
- (FMIceLinkDataBuffer*) cloneWithLittleEndian:(bool)littleEndian;
/*!
 * <div>
 * Copies this instance into new memory.
 * </div>
 * @return
 */
- (FMIceLinkDataBuffer*) copy;
/*!
 * <div>
 * Copies this instance.
 * </div>
 * @return
 */
- (FMIceLinkDataBuffer*) copyWithUsePool:(bool)usePool;
/*!
 * <div>
 * Gets the data.
 * </div>
 */
- (NSMutableData*) data;
/*!
 * <div>
 * Gets an empty data buffer.
 * </div>
 */
+ (FMIceLinkDataBuffer*) empty;
/*!
 * <div>
 * Decrements the retain count by one and returns the Buffer to the pool if zero.
 * </div>
 */
- (FMIceLinkDataBuffer*) free;
/*!
 * <div>
 * Deserializes an array of instances from JSON.
 * </div>
 * @param dataBuffersJson The data buffers JSON.
 * @return
 */
+ (NSMutableArray*) fromJsonArrayWithDataBuffersJson:(NSString*)dataBuffersJson;
/*!
 * <div>
 * Deserializes an instance from JSON.
 * </div>
 * @param dataBufferJson The data buffer JSON.
 * @return
 */
+ (FMIceLinkDataBuffer*) fromJsonWithDataBufferJson:(NSString*)dataBufferJson;
/*!
 * <div>
 * Gets the index.
 * </div>
 */
- (int) index;
/*!
 * <div>
 * Gets backing data buffer.
 * </div>
 */
- (NSMutableData*) innerData;
/*!
 * <div>
 * Gets whether this DataBuffer is from a pool.
 * </div>
 */
- (bool) isPooled;
/*!
 * <div>
 * Gets whether this DataBuffer is a subset.
 * </div>
 */
- (bool) isSubset;
/*!
 * <div>
 * Increment the retain count by one.
 * </div>
 */
- (FMIceLinkDataBuffer*) keep;
/*!
 * <div>
 * Gets the length.
 * </div>
 */
- (int) length;
/*!
 * <div>
 * Gets whether FMIceLinkDataBuffer#data is little-endian.
 * </div>
 */
- (bool) littleEndian;
/*!
 * <div>
 * Performs a bitwise "or" operation on a value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 */
- (bool) or:(int)value offset:(int)offset;
/*!
 * <div>
 * Prepends a buffer.
 * </div>
 * @param buffer The buffer.
 */
- (FMIceLinkDataBuffer*) prependWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Prepends some buffers.
 * </div>
 * @param buffers The buffers.
 */
- (void) prependWithBuffers:(NSMutableArray*)buffers;
/*!
 * <div>
 * Reads a 10-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read10SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 10-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bitoffset.
 */
- (int) read10WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 11-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read11SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 11-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bitoffset.
 */
- (int) read11WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 12-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read12SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 12-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bitoffset.
 */
- (int) read12WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 13-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read13SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 13-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bitoffset.
 */
- (int) read13WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 14-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read14SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 14-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read14WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 15-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read15SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 15-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read15WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 16-bit signed value.
 * </div>
 * @param offset The offset.
 */
- (int) read16SignedWithOffset:(int)offset;
/*!
 * <div>
 * Reads a 16-bit signed value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (int) read16SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 16-bit value.
 * </div>
 * @param offset The offset.
 */
- (int) read16WithOffset:(int)offset;
/*!
 * <div>
 * Reads a 16-bit value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (int) read16WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 17-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read17SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 17-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read17WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads an 18-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read18SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads an 18-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read18WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 19-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read19SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 19-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read19WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 1-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) read1WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 20-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read20SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 20-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read20WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 21-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read21SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 21-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read21WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 22-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read22SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 22-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read22WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 23-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read23SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 23-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read23WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 24-bit signed value.
 * </div>
 * @param offset The offset.
 */
- (int) read24SignedWithOffset:(int)offset;
/*!
 * <div>
 * Reads a 24-bit signed value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (int) read24SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 24-bit value.
 * </div>
 * @param offset The offset.
 */
- (int) read24WithOffset:(int)offset;
/*!
 * <div>
 * Reads a 24-bit value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (int) read24WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 2-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read2SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 2-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read2WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 32-bit signed value.
 * </div>
 * @param offset The offset.
 */
- (long long) read32SignedWithOffset:(int)offset;
/*!
 * <div>
 * Reads a 32-bit signed value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (long long) read32SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 32-bit value.
 * </div>
 * @param offset The offset.
 */
- (long long) read32WithOffset:(int)offset;
/*!
 * <div>
 * Reads a 32-bit value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (long long) read32WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 3-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read3SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 3-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read3WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 40-bit signed value.
 * </div>
 * @param offset The offset.
 */
- (long long) read40SignedWithOffset:(int)offset;
/*!
 * <div>
 * Reads a 40-bit signed value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (long long) read40SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 40-bit value.
 * </div>
 * @param offset The offset.
 */
- (long long) read40WithOffset:(int)offset;
/*!
 * <div>
 * Reads a 40-bit value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (long long) read40WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 48-bit signed value.
 * </div>
 * @param offset The offset.
 */
- (long long) read48SignedWithOffset:(int)offset;
/*!
 * <div>
 * Reads a 48-bit signed value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (long long) read48SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 48-bit value.
 * </div>
 * @param offset The offset.
 */
- (long long) read48WithOffset:(int)offset;
/*!
 * <div>
 * Reads a 48-bit value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (long long) read48WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 4-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read4SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 4-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read4WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 56-bit signed value.
 * </div>
 * @param offset The offset.
 */
- (long long) read56SignedWithOffset:(int)offset;
/*!
 * <div>
 * Reads a 56-bit signed value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (long long) read56SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 56-bit value.
 * </div>
 * @param offset The offset.
 */
- (long long) read56WithOffset:(int)offset;
/*!
 * <div>
 * Reads a 56-bit value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (long long) read56WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 5-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read5SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 5-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read5WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 64-bit signed value.
 * </div>
 * @param offset The offset.
 */
- (long long) read64SignedWithOffset:(int)offset;
/*!
 * <div>
 * Reads a 64-bit signed value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (long long) read64SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 64-bit value.
 * </div>
 * @param offset The offset.
 */
- (long long) read64WithOffset:(int)offset;
/*!
 * <div>
 * Reads a 64-bit value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (long long) read64WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 6-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read6SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 6-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read6WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 7-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read7SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 7-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read7WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads an 8-bit signed value.
 * </div>
 * @param offset The offset.
 */
- (int) read8SignedWithOffset:(int)offset;
/*!
 * <div>
 * Reads an 8-bit signed value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (int) read8SignedWithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads an 8-bit value.
 * </div>
 * @param offset The offset.
 */
- (int) read8WithOffset:(int)offset;
/*!
 * <div>
 * Reads an 8-bit value.
 * </div>
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (int) read8WithOffset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a 9-bit signed value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (int) read9SignedWithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Reads a 9-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bitoffset.
 */
- (int) read9WithOffset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Read a UTF-8 string.
 * </div>
 * @param offset The offset.
 */
- (NSString*) readUtf8StringWithOffset:(int)offset;
/*!
 * <div>
 * Reads a UTF-8 string.
 * </div>
 * @param offset The offset.
 * @param length The length.
 */
- (NSString*) readUtf8StringWithOffset:(int)offset length:(int)length;
/*!
 * <div>
 * Resizes this buffer to a new length with new data being inserted at the end.
 * </div>
 * @param newLength The new length.
 */
- (void) resizeWithNewLength:(int)newLength;
/*!
 * <div>
 * Resizes this buffer to a new length with new data being inserted at a given offset.
 * </div>
 * @param newLength The new length.
 * @param offset The offset.
 */
- (void) resizeWithNewLength:(int)newLength offset:(int)offset;
/*!
 * <div>
 * Resizes this buffer to a new length with new data being inserted at a given offset.
 * </div>
 * @param newLength The new length.
 * @param offset The offset.
 * @param setZero Sets empty space to zero.
 */
- (void) resizeWithNewLength:(int)newLength offset:(int)offset setZero:(bool)setZero;
/*!
 * <div>
 * Compares a data buffer for equality in constant time.
 * </div>
 * @param buffer The buffer.
 * @return true if the sequences are equal; otherwise, false.
 * 
 */
- (bool) sequenceEqualsConstantTimeWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Compares a data buffer for equality.
 * </div>
 * @param buffer The data buffer.
 * @return true if the sequences are equal; otherwise, false.
 * 
 */
- (bool) sequenceEqualsWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Sets the data buffer to the specified value.
 * </div>
 * @param value The value.
 */
- (void) set:(uint8_t)value;
/*!
 * <div>
 * Sets a subset of the data buffer to the specified value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 */
- (void) set:(uint8_t)value offset:(int)offset;
/*!
 * <div>
 * Sets a subset of the data buffer to the specified value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param length The length.
 */
- (void) set:(uint8_t)value offset:(int)offset length:(int)length;
/*!
 * <div>
 * Sets backing data buffer.
 * </div>
 */
- (void) setInnerData:(NSMutableData*)value;
/*!
 * <div>
 * Sets whether FMIceLinkDataBuffer#data is little-endian.
 * </div>
 */
- (void) setLittleEndian:(bool)value;
/*!
 * <div>
 * Gets a subset of this instance.
 * </div>
 * @param offset The offset.
 */
- (FMIceLinkDataBuffer*) subsetWithOffset:(int)offset;
/*!
 * <div>
 * Gets a subset of this instance.
 * </div>
 * @param offset The offset.
 * @param length The length.
 */
- (FMIceLinkDataBuffer*) subsetWithOffset:(int)offset length:(int)length;
/*!
 * <div>
 * Converts this instance to an array of bytes.
 * </div>
 */
- (NSMutableData*) toArray;
/*!
 * <div>
 * Converts this instance to a hexadecimal string.
 * </div>
 */
- (NSString*) toHexString;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an array of instances to JSON.
 * </div>
 * @param dataBuffers The data buffers.
 * @return
 */
+ (NSString*) toJsonArrayWithDataBuffers:(NSMutableArray*)dataBuffers;
/*!
 * <div>
 * Serializes an instance to JSON.
 * </div>
 * @param dataBuffer The data buffer.
 * @return
 */
+ (NSString*) toJsonWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Tries to read a 10-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead10WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read an 11-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead11WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 12-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead12WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 13-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead13WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 14-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead14WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 15-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead15WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 16-bit value.
 * </div>
 * @param offset The offset.
 * @param value The value.
 */
- (bool) tryRead16WithOffset:(int)offset value:(int*)value;
/*!
 * <div>
 * Tries to read a 17-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead17WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read an 18-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead18WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 19-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead19WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 1-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value if set to true [value].
 */
- (bool) tryRead1WithOffset:(int)offset bitOffset:(int)bitOffset value:(bool*)value;
/*!
 * <div>
 * Tries to read a 20-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead20WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 21-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead21WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 22-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead22WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 23-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead23WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 24-bit value.
 * </div>
 * @param offset The offset.
 * @param value The value.
 */
- (bool) tryRead24WithOffset:(int)offset value:(int*)value;
/*!
 * <div>
 * Tries to read a 2-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead2WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 32-bit value.
 * </div>
 * @param offset The offset.
 * @param value The value.
 */
- (bool) tryRead32WithOffset:(int)offset value:(long long*)value;
/*!
 * <div>
 * Tries to read a 3-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead3WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 40-bit value.
 * </div>
 * @param offset The offset.
 * @param value The value.
 */
- (bool) tryRead40WithOffset:(int)offset value:(long long*)value;
/*!
 * <div>
 * Tries to read a 48-bit value.
 * </div>
 * @param offset The offset.
 * @param value The value.
 */
- (bool) tryRead48WithOffset:(int)offset value:(long long*)value;
/*!
 * <div>
 * Tries to read a 4-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead4WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 56-bit value.
 * </div>
 * @param offset The offset.
 * @param value The value.
 */
- (bool) tryRead56WithOffset:(int)offset value:(long long*)value;
/*!
 * <div>
 * Tries to read a 5-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead5WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 64-bit value.
 * </div>
 * @param offset The offset.
 * @param value The value.
 */
- (bool) tryRead64WithOffset:(int)offset value:(long long*)value;
/*!
 * <div>
 * Tries to read a 6-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead6WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read a 7-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead7WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Tries to read an 8-bit value.
 * </div>
 * @param offset The offset.
 * @param value The value.
 */
- (bool) tryRead8WithOffset:(int)offset value:(int*)value;
/*!
 * <div>
 * Tries to read a 9-bit value.
 * </div>
 * @param offset The offset.
 * @param bitOffset The bit offset.
 * @param value The value.
 */
- (bool) tryRead9WithOffset:(int)offset bitOffset:(int)bitOffset value:(int*)value;
/*!
 * <div>
 * Produces a new data buffer containing supplied data
 * in big-endian format.
 * </div>
 * @param data The data.
 */
+ (FMIceLinkDataBuffer*) wrapWithData:(NSMutableData*)data;
/*!
 * <div>
 * Produces a new data buffer containing supplied data
 * in big-endian format.
 * </div>
 * @param data The data.
 * @param index The index.
 */
+ (FMIceLinkDataBuffer*) wrapWithData:(NSMutableData*)data index:(int)index;
/*!
 * <div>
 * Produces a new data buffer containing supplied data
 * in big-endian format.
 * </div>
 * @param data The data.
 * @param index The index.
 * @param length The length.
 */
+ (FMIceLinkDataBuffer*) wrapWithData:(NSMutableData*)data index:(int)index length:(int)length;
/*!
 * <div>
 * Produces a new data buffer containing supplied data.
 * </div>
 * @param data The data.
 * @param index The index.
 * @param length The length.
 * @param littleEndian Whether the data is little-endian.
 */
+ (FMIceLinkDataBuffer*) wrapWithData:(NSMutableData*)data index:(int)index length:(int)length littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Produces a new data buffer containing supplied data.
 * </div>
 * @param data The data.
 * @param index The index.
 * @param littleEndian Whether the data is little-endian.
 */
+ (FMIceLinkDataBuffer*) wrapWithData:(NSMutableData*)data index:(int)index littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Produces a new data buffer containing supplied data.
 * </div>
 * @param data The data.
 * @param littleEndian Whether the data is little-endian.
 */
+ (FMIceLinkDataBuffer*) wrapWithData:(NSMutableData*)data littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Writes a 1-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write1:(bool)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 10-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write10:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes an 11-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write11:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 12-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write12:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 13-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write13:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 14-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write14:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 15-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write15:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 16-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 */
- (bool) write16:(int)value offset:(int)offset;
/*!
 * <div>
 * Writes a 16-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (bool) write16:(int)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Writes a 17-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write17:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes an 18-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write18:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 19-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write19:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 2-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write2:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 20-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write20:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 21-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write21:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 22-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write22:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 23-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write23:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 24-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 */
- (bool) write24:(int)value offset:(int)offset;
/*!
 * <div>
 * Writes a 24-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (bool) write24:(int)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Writes a 3-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write3:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 32-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 */
- (bool) write32:(long long)value offset:(int)offset;
/*!
 * <div>
 * Writes a 32-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (bool) write32:(long long)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Writes a 4-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write4:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 40-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 */
- (bool) write40:(long long)value offset:(int)offset;
/*!
 * <div>
 * Writes a 40-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (bool) write40:(long long)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Writes a 48-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 */
- (bool) write48:(long long)value offset:(int)offset;
/*!
 * <div>
 * Writes a 48-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (bool) write48:(long long)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Writes a 5-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write5:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 56-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 */
- (bool) write56:(long long)value offset:(int)offset;
/*!
 * <div>
 * Writes a 56-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (bool) write56:(long long)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Writes a 6-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write6:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a 64-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 */
- (bool) write64:(long long)value offset:(int)offset;
/*!
 * <div>
 * Writes a 64-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (bool) write64:(long long)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Writes a 7-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write7:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes an 8-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 */
- (bool) write8:(int)value offset:(int)offset;
/*!
 * <div>
 * Writes an 8-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (bool) write8:(int)value offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Writes a 9-bit value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param bitOffset The bit offset.
 */
- (bool) write9:(int)value offset:(int)offset bitOffset:(int)bitOffset;
/*!
 * <div>
 * Writes a byte array to this instance.
 * </div>
 * @param bytes The bytes.
 */
- (void) writeBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Writes a byte array to this instance.
 * </div>
 * @param bytes The bytes.
 * @param bytesIndex The bytes index.
 * @param bytesLength The bytes length.
 * @param offset The offset.
 */
- (void) writeBytes:(NSMutableData*)bytes bytesIndex:(int)bytesIndex bytesLength:(int)bytesLength offset:(int)offset;
/*!
 * <div>
 * Writes a byte array to this instance.
 * </div>
 * @param bytes The bytes.
 * @param bytesIndex The bytes index.
 * @param bytesLength The bytes length.
 * @param offset The offset.
 * @param offsetPlus The offset plus the buffer length.
 */
- (void) writeBytes:(NSMutableData*)bytes bytesIndex:(int)bytesIndex bytesLength:(int)bytesLength offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Writes a byte array to this instance.
 * </div>
 * @param bytes The bytes.
 * @param bytesIndex The bytes index.
 * @param offset The offset.
 */
- (void) writeBytes:(NSMutableData*)bytes bytesIndex:(int)bytesIndex offset:(int)offset;
/*!
 * <div>
 * Writes a byte array to this instance.
 * </div>
 * @param bytes The bytes.
 * @param offset The offset.
 */
- (void) writeBytes:(NSMutableData*)bytes offset:(int)offset;
/*!
 * <div>
 * Writes a data buffer to this instance.
 * </div>
 * @param buffer The buffer.
 */
- (void) writeWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Writes a data buffer to this instance.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Writes a data buffer to this instance.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param offsetPlus The offset plus the buffer length.
 */
- (void) writeWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Performs a bitwise "xor" operation on a value.
 * </div>
 * @param value The value.
 * @param offset The offset.
 */
- (bool) xor:(int)value offset:(int)offset;

@end

/*!
 * <div>
 * A DataBuffer that uses a circular buffer to manage data.
 * </div>
 */
@interface FMIceLinkCircularDataBuffer : FMIceLinkDataBuffer

/*!
 * <div>
 * Appends a data buffer to the correct place in this circular data buffer.
 * </div>
 * @param buffer The buffer to write.
 */
- (void) appendDataBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Tells the CircularDataBuffer to expect more data of up to maxWriteSize. Will reshuffle data around or resize if necessary.
 * </div>
 * @param maxWriteSize The amount of bytes to make available for writing.
 */
- (int) beginWriteWithMaxWriteSize:(int)maxWriteSize;
/*!
 * <div>
 * Gets the capacity of this CircularDataBuffer.
 * </div>
 */
- (int) capacity;
/*!
 * <div>
 * Creates a new instance of the CircularDataBuffer that can hold a initial amount of data.
 * </div>
 * @param initialSize The initial size of the inner buffer.
 */
+ (FMIceLinkCircularDataBuffer*) createWithInitialSize:(int)initialSize;
/*!
 * <div>
 * Gets the data.
 * </div>
 */
- (NSMutableData*) data;
/*!
 * <div>
 * Advances the Index by amount so the space used by the data can be reused.
 * </div>
 * @param amount The amount to advance the Index by.
 */
- (void) discardWithAmount:(int)amount;
/*!
 * <div>
 * Tells the CircularDataBuffer how much data was actually written so that the Length can be set appropriately.
 * </div>
 * @param actuallyWrittenSize The amount of data actually written to the data buffer.
 */
- (void) endWriteWithActuallyWrittenSize:(int)actuallyWrittenSize;
/*!
 * <div>
 * Frees the internal pooled DataBuffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) free;

@end

/*!
 * <div>
 * A subset of a DataBuffer.
 * </div>
 */
@interface FMIceLinkDataBufferSubset : FMIceLinkDataBuffer

/*!
 * <div>
 * Appends a buffer.
 * </div>
 * @param buffer The buffer.
 */
- (FMIceLinkDataBuffer*) appendWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Appends some buffers.
 * </div>
 * @param buffers The buffers.
 */
- (FMIceLinkDataBuffer*) appendWithBuffers:(NSMutableArray*)buffers;
/*!
 * <div>
 * Gets the data.
 * </div>
 */
- (NSMutableData*) data;
/*!
 * <div>
 * Decrements the retain count by one and returns the Buffer to the pool if zero.
 * </div>
 */
- (FMIceLinkDataBuffer*) free;
/*!
 * <div>
 * Gets whether this DataBuffer is from a pool.
 * </div>
 */
- (bool) isPooled;
/*!
 * <div>
 * Gets whether this DataBuffer is a subset.
 * </div>
 */
- (bool) isSubset;
/*!
 * <div>
 * Increment the retain count by one.
 * </div>
 */
- (FMIceLinkDataBuffer*) keep;
/*!
 * <div>
 * Gets the Subset parent.
 * </div>
 */
- (FMIceLinkDataBuffer*) parent;
/*!
 * <div>
 * Prepends a buffer.
 * </div>
 * @param buffer The buffer.
 */
- (FMIceLinkDataBuffer*) prependWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Prepends some buffers.
 * </div>
 * @param buffers The buffers.
 */
- (void) prependWithBuffers:(NSMutableArray*)buffers;
/*!
 * <div>
 * Gets a subset of this instance.
 * </div>
 * @param offset The offset.
 */
- (FMIceLinkDataBuffer*) subsetWithOffset:(int)offset;
/*!
 * <div>
 * Gets a subset of this instance.
 * </div>
 * @param offset The offset.
 * @param length The length.
 */
- (FMIceLinkDataBuffer*) subsetWithOffset:(int)offset length:(int)length;

@end

/*!
 * <div>
 * A socket.
 * </div>
 */
@interface FMIceLinkManagedSocket : NSObject

/*!
 * <div>
 * Gets the adapter speed.
 * </div>
 */
- (long long) adapterSpeed;
/*!
 * <div>
 * Binds the socket to a local endpoint.
 * </div>
 * @param ipAddress The local IP address.
 * @param port The local port.
 * @param addressInUse Indicates that access to the address is forbidden or in use.
 */
- (bool) bindWithIPAddress:(NSString*)ipAddress port:(int)port addressInUse:(bool*)addressInUse;
/*!
 * <div>
 * Closes the socket.
 * </div>
 */
- (void) close;
- (instancetype) init;
/*!
 * <div>
 * Gets a value indicating whether the socket supports IPv6.
 * </div>
 */
- (bool) ipv6;
/*!
 * <div>
 * Gets a value indicating whether this instance is closed.
 * </div>
 */
- (bool) isClosed;
/*!
 * <div>
 * Gets the local IP address.
 * </div>
 */
- (NSString*) localIPAddress;
/*!
 * <div>
 * Gets the local port.
 * </div>
 */
- (int) localPort;
+ (FMIceLinkManagedSocket*) managedSocket;
/*!
 * <div>
 * Gets the public IP address, if known.
 * </div>
 */
- (NSString*) publicIPAddress;
/*!
 * <div>
 * Sets the adapter speed.
 * </div>
 */
- (void) setAdapterSpeed:(long long)value;
/*!
 * <div>
 * Sets the public IP address, if known.
 * </div>
 */
- (void) setPublicIPAddress:(NSString*)value;

@end

/*!
 * <div>
 * A datagram socket.
 * </div>
 */
@interface FMIceLinkDatagramSocket : FMIceLinkManagedSocket

+ (FMIceLinkDatagramSocket*) datagramSocket;
- (instancetype) init;
/*!
 * <div>
 * Gets the maximum number of packets
 * that can be queued at any given point in time.
 * </div>
 */
- (int) maxQueuedPackets;
/*!
 * <div>
 * Invokes the receive failure callback.
 * </div>
 * @param callback The callback.
 * @param exception The exception.
 */
- (void) raiseReceiveFailureWithCallback:(FMIceLinkAction1*)callback exception:(NSException*)exception;
/*!
 * <div>
 * Invokes the receive failure callback.
 * </div>
 * @param callbackBlock The callback.
 * @param exception The exception.
 */
- (void) raiseReceiveFailureWithCallbackBlock:(void(^)(NSException*))callbackBlock exception:(NSException*)exception;
/*!
 * <div>
 * Invokes the receive failure callback.
 * </div>
 * @inlineparam callbackBlock The callback.
 * @inlineparam exception The exception.
 */
- (void (^)(void(^)(NSException*), NSException*)) raiseReceiveFailureWithCallbackBlockAndException;
/*!
 * <div>
 * Invokes the receive success callback.
 * </div>
 * @param callback The callback.
 * @param buffer The buffer.
 * @param ipAddress The IP address.
 * @param port The port.
 */
- (void) raiseReceiveSuccessWithCallback:(FMIceLinkAction3*)callback buffer:(FMIceLinkDataBuffer*)buffer ipAddress:(NSString*)ipAddress port:(int)port;
/*!
 * <div>
 * Invokes the receive success callback.
 * </div>
 * @param callbackBlock The callback.
 * @param buffer The buffer.
 * @param ipAddress The IP address.
 * @param port The port.
 */
- (void) raiseReceiveSuccessWithCallbackBlock:(void(^)(FMIceLinkDataBuffer*, NSString*, int))callbackBlock buffer:(FMIceLinkDataBuffer*)buffer ipAddress:(NSString*)ipAddress port:(int)port;
/*!
 * <div>
 * Invokes the receive success callback.
 * </div>
 * @inlineparam callbackBlock The callback.
 * @inlineparam buffer The buffer.
 * @inlineparam ipAddress The IP address.
 * @inlineparam port The port.
 */
- (void (^)(void(^)(FMIceLinkDataBuffer*, NSString*, int), FMIceLinkDataBuffer*, NSString*, int)) raiseReceiveSuccessWithCallbackBlockAndBufferAndIPAddressAndPort;
/*!
 * <div>
 * Receives data asynchronously.
 * </div>
 * @param onSuccess The callback to invoke on success.
 * @param onFailure The callback to invoke on failure.
 */
- (void) receiveAsyncWithOnSuccess:(FMIceLinkAction3*)onSuccess onFailure:(FMIceLinkAction1*)onFailure;
/*!
 * <div>
 * Receives data asynchronously.
 * </div>
 * @param onSuccessBlock The callback to invoke on success.
 * @param onFailureBlock The callback to invoke on failure.
 */
- (void) receiveAsyncWithOnSuccessBlock:(void(^)(FMIceLinkDataBuffer*, NSString*, int))onSuccessBlock onFailureBlock:(void(^)(NSException*))onFailureBlock;
/*!
 * <div>
 * Receives data asynchronously.
 * </div>
 * @inlineparam onSuccessBlock The callback to invoke on success.
 * @inlineparam onFailureBlock The callback to invoke on failure.
 */
- (void (^)(void(^)(FMIceLinkDataBuffer*, NSString*, int), void(^)(NSException*))) receiveAsyncWithOnSuccessBlockAndOnFailureBlock;
/*!
 * <div>
 * Sends data synchronously.
 * </div>
 * @param buffer The buffer.
 * @param ipAddress The remote IP address.
 * @param port The remote port.
 */
- (int) sendWithBuffer:(FMIceLinkDataBuffer*)buffer ipAddress:(NSString*)ipAddress port:(int)port;
/*!
 * <div>
 * Sets the maximum number of packets
 * that can be queued at any given point in time.
 * </div>
 */
- (void) setMaxQueuedPackets:(int)value;

@end

/*!
 * <div>
 * Arguments for a datagram socket create event.
 * </div>
 */
@interface FMIceLinkDatagramSocketCreateArgs : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDatagramSocketCreateArgs class.
 * </div>
 * @param ipv6 Whether the socket should support IPv6.
 */
+ (FMIceLinkDatagramSocketCreateArgs*) datagramSocketCreateArgsWithIPv6:(bool)ipv6;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDatagramSocketCreateArgs class.
 * </div>
 * @param ipv6 Whether the socket should support IPv6.
 */
- (instancetype) initWithIPv6:(bool)ipv6;
/*!
 * <div>
 * Gets a value indicating whether the socket should support IPv6.
 * </div>
 */
- (bool) ipv6;
/*!
 * <div>
 * Sets the stream index.
 * </div>
 */
- (void) setStreamIndex:(int)value;
/*!
 * <div>
 * Gets the stream index.
 * </div>
 */
- (int) streamIndex;

@end

/*!
 * <div>
 * A hash context.
 * </div>
 */
@interface FMIceLinkHashContextBase : NSObject

/*!
 * <div>
 * Computes the hash.
 * </div>
 * @param input The input.
 * @return
 */
- (FMIceLinkDataBuffer*) computeWithInput:(FMIceLinkDataBuffer*)input;
/*!
 * <div>
 * Computes the hash.
 * </div>
 * @param inputString The input.
 * @return
 */
- (FMIceLinkDataBuffer*) computeWithInputString:(NSString*)inputString;
/*!
 * <div>
 * Computes the hash for a given type.
 * </div>
 * @param type The type.
 * @param input The input.
 * @return
 */
+ (FMIceLinkDataBuffer*) computeWithType:(FMIceLinkHashType)type input:(FMIceLinkDataBuffer*)input;
/*!
 * <div>
 * Computes the hash for a given type.
 * </div>
 * @param type The type.
 * @param inputString The input string.
 * @return
 */
+ (FMIceLinkDataBuffer*) computeWithType:(FMIceLinkHashType)type inputString:(NSString*)inputString;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Computes the hash.
 * </div>
 * @param input The input.
 * @return
 */
- (FMIceLinkDataBuffer*) doComputeWithInput:(FMIceLinkDataBuffer*)input;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkHashContextBase class.
 * </div>
 * @param type The type.
 */
+ (FMIceLinkHashContextBase*) hashContextBaseWithType:(FMIceLinkHashType)type;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkHashContextBase class.
 * </div>
 * @param type The type.
 */
- (instancetype) initWithType:(FMIceLinkHashType)type;
/*!
 * <div>
 * Gets the type.
 * </div>
 */
- (FMIceLinkHashType) type;

@end

/*!
 * <div>
 * A message authentication code (MAC) context.
 * </div>
 */
@interface FMIceLinkMacContextBase : NSObject

/*!
 * <div>
 * Computes the message authentication code (MAC).
 * </div>
 * @param input The input.
 * @return
 */
- (FMIceLinkDataBuffer*) computeWithInput:(FMIceLinkDataBuffer*)input;
/*!
 * <div>
 * Computes the message authentication code (MAC) for a given type.
 * </div>
 * @param type The type.
 * @param key The key.
 * @param input The input.
 * @return
 */
+ (FMIceLinkDataBuffer*) computeWithType:(FMIceLinkMacType)type key:(FMIceLinkDataBuffer*)key input:(FMIceLinkDataBuffer*)input;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Computes the message authentication code (MAC).
 * </div>
 * @param input The input.
 * @return
 */
- (FMIceLinkDataBuffer*) doComputeWithInput:(FMIceLinkDataBuffer*)input;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMacContextBase class.
 * </div>
 * @param type The type.
 */
- (instancetype) initWithType:(FMIceLinkMacType)type;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMacContextBase class.
 * </div>
 * @param type The type.
 */
+ (FMIceLinkMacContextBase*) macContextBaseWithType:(FMIceLinkMacType)type;
/*!
 * <div>
 * Gets the type.
 * </div>
 */
- (FMIceLinkMacType) type;

@end

/*!
 * <div>
 * Details about a specific log event.
 * </div>
 */
@interface FMIceLinkLogEvent : NSObject

/*!
 * <div>
 * Gets the event exception, if one exists.
 * </div>
 */
- (NSException*) exception;
/*!
 * <div>
 * Deserializes a log event from JSON.
 * </div>
 * @param logEventJson The log event JSON.
 * @return
 */
+ (FMIceLinkLogEvent*) fromJsonWithLogEventJson:(NSString*)logEventJson;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLogEvent class.
 * </div>
 * @param timestamp The event timestamp.
 * @param tag The event tag.
 * @param scope The event scope.
 * @param level The event level.
 * @param message The event message.
 * @param exception The event exception, if one exists.
 * @param threadId The ID of the thread generating the event.
 */
- (instancetype) initWithTimestamp:(NSDate*)timestamp tag:(NSString*)tag scope:(NSString*)scope level:(FMIceLinkLogLevel)level message:(NSString*)message exception:(NSException*)exception threadId:(long long)threadId;
/*!
 * <div>
 * Gets the event level.
 * </div>
 */
- (FMIceLinkLogLevel) level;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLogEvent class.
 * </div>
 * @param timestamp The event timestamp.
 * @param tag The event tag.
 * @param scope The event scope.
 * @param level The event level.
 * @param message The event message.
 * @param exception The event exception, if one exists.
 * @param threadId The ID of the thread generating the event.
 */
+ (FMIceLinkLogEvent*) logEventWithTimestamp:(NSDate*)timestamp tag:(NSString*)tag scope:(NSString*)scope level:(FMIceLinkLogLevel)level message:(NSString*)message exception:(NSException*)exception threadId:(long long)threadId;
/*!
 * <div>
 * Gets the level of this log event.
 * </div>
 */
- (FMIceLinkLogLevel) logLevel;
/*!
 * <div>
 * Gets the event message.
 * </div>
 */
- (NSString*) message;
/*!
 * <div>
 * Gets the event scope.
 * </div>
 */
- (NSString*) scope;
/*!
 * <div>
 * Sets the event exception, if one exists.
 * </div>
 */
- (void) setException:(NSException*)value;
/*!
 * <div>
 * Sets the event level.
 * </div>
 */
- (void) setLevel:(FMIceLinkLogLevel)value;
/*!
 * <div>
 * Sets the event message.
 * </div>
 */
- (void) setMessage:(NSString*)value;
/*!
 * <div>
 * Sets the event scope.
 * </div>
 */
- (void) setScope:(NSString*)value;
/*!
 * <div>
 * Sets the event tag.
 * </div>
 */
- (void) setTag:(NSString*)value;
/*!
 * <div>
 * Sets the ID of the thread generating the event.
 * </div>
 */
- (void) setThreadId:(long long)value;
/*!
 * <div>
 * Sets the event timestamp.
 * </div>
 */
- (void) setTimestamp:(NSDate*)value;
/*!
 * <div>
 * Gets the event tag.
 * </div>
 */
- (NSString*) tag;
/*!
 * <div>
 * Gets the ID of the thread generating the event.
 * </div>
 */
- (long long) threadId;
/*!
 * <div>
 * Gets the event timestamp.
 * </div>
 */
- (NSDate*) timestamp;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes a log event to JSON.
 * </div>
 * @param logEvent The log event.
 * @return
 */
+ (NSString*) toJsonWithLogEvent:(FMIceLinkLogEvent*)logEvent;

@end

@interface FMIceLinkHashTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkHashType)value;

@end

@interface FMIceLinkMacTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkMacType)value;

@end

/*!
 * <div>
 * Managed AutoResetEvent.
 * </div>
 */
@interface FMIceLinkManagedAutoResetEvent : NSObject

/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
+ (FMIceLinkManagedAutoResetEvent*) managedAutoResetEvent;
/*!
 * <div>
 * Signal to release all threads.
 * </div>
 */
- (void) set;
/*!
 * <div>
 * Blocks until signalled.
 * </div>
 */
- (void) waitOne;
/*!
 * <div>
 * Blocks until signalled or until timeout.
 * </div>
 * @param millisecondsTimeout Length of time to block for (in ms).
 */
- (bool) waitOneWithMillisecondsTimeout:(int)millisecondsTimeout;

@end

/*!
 * <div>
 * A managed timer that will tick on intervals. Might catchup if callback takes too long.
 * </div>
 */
@interface FMIceLinkManagedTimer : NSObject

/*!
 * <div>
 * Changes the interval of the timer.
 * </div>
 * @param newInterval
 */
- (void) changeIntervalWithNewInterval:(int)newInterval;
/*!
 * <div>
 * Creates a new instance of the managed timer.
 * </div>
 * @param interval The millisecond interval to tick on.
 * @param callback The callback to use when a tick occurs.
 */
- (instancetype) initWithInterval:(int)interval callback:(FMIceLinkAction0*)callback;
/*!
 * <div>
 * Gets the interval that the timer will tick on.
 * </div>
 */
- (int) interval;
/*!
 * <div>
 * Gets whether the callback is currently being called.
 * </div>
 */
- (bool) inTick;
/*!
 * <div>
 * Creates a new instance of the managed timer.
 * </div>
 * @param interval The millisecond interval to tick on.
 * @param callback The callback to use when a tick occurs.
 */
+ (FMIceLinkManagedTimer*) managedTimerWithInterval:(int)interval callback:(FMIceLinkAction0*)callback;
/*!
 * <div>
 * Calculates a interval based on how many times you want the timer to tick per second.
 * </div>
 * @param timesPerSecond The amount of times to tick per second.
 */
+ (int) perSecondIntervalWithTimesPerSecond:(int)timesPerSecond;
/*!
 * <div>
 * Gets whether the timer is running.
 * </div>
 */
- (bool) running;
/*!
 * <div>
 * Starts the timer.
 * </div>
 * @return false if the timer was already started; otherwise, true.
 */
- (bool) start;
/*!
 * <div>
 * Stops the timer.
 * </div>
 * @return false if the timer was already stopped; otherwise, true.
 */
- (bool) stop;
/*!
 * <div>
 * Stops the timer.
 * </div>
 * @return false if the timer was already stopped; otherwise, true.
 */
- (FMIceLinkFuture*) stopAsync;
/*!
 * <div>
 * Stops the timer.
 * </div>
 * @param waitForStop True if method should block until timer is stopped.
 * @return false if the timer was already stopped; otherwise, true.
 */
- (bool) stopWithWaitForStop:(bool)waitForStop;

@end

/*!
 * <div>
 * An MD5-SHA1 hash context.
 * </div>
 */
@interface FMIceLinkMd5Sha1HashContext : NSObject

/*!
 * <div>
 * Computes the specified input.
 * </div>
 * @param input The input.
 * @return
 */
- (FMIceLinkDataBuffer*) computeWithInput:(FMIceLinkDataBuffer*)input;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMd5Sha1HashContext class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMd5Sha1HashContext class.
 * </div>
 */
+ (FMIceLinkMd5Sha1HashContext*) md5Sha1HashContext;

@end

/*!
 * <div>
 * Utility class to assist with Unix timestamp conversions.
 * </div>
 */
@interface FMIceLinkUnixTimestamp : NSObject

/*!
 * <div>
 * Converts a date to a Unix timestamp with millisecond precision.
 * </div>
 * @param dateTime The date to convert.
 * @return The equivalent Unix timestamp.
 */
+ (long long) dateTimeToUnixMillisWithDateTime:(NSDate*)dateTime;
/*!
 * <div>
 * Converts a date to a Unix timestamp.
 * </div>
 * @param dateTime The date to convert.
 * @return The equivalent Unix timestamp.
 */
+ (long long) dateTimeToUnixWithDateTime:(NSDate*)dateTime;
- (instancetype) init;
/*!
 * <div>
 * Converts ticks to a Unix timestamp with millisecond precision.
 * </div>
 * @param ticks The ticks to convert.
 * @return The equivalent Unix timestamp.
 */
+ (long long) ticksToUnixMillisWithTicks:(long long)ticks;
/*!
 * <div>
 * Converts ticks to a Unix timestamp.
 * </div>
 * @param ticks The ticks to convert.
 * @return The equivalent Unix timestamp.
 */
+ (long long) ticksToUnixWithTicks:(long long)ticks;
/*!
 * <div>
 * Converts a Unix timestamp with millisecond precision to a date.
 * </div>
 * @param unix The Unix timestamp to convert.
 * @return The equivalent date.
 */
+ (NSDate*) unixMillisToDateTimeWithUnix:(long long)unix;
/*!
 * <div>
 * Converts a Unix timestamp with millisecond precision to ticks.
 * </div>
 * @param unix The Unix timestamp to convert.
 * @return The equivalent ticks.
 */
+ (long long) unixMillisToTicksWithUnix:(long long)unix;
+ (FMIceLinkUnixTimestamp*) unixTimestamp;
/*!
 * <div>
 * Converts a Unix timestamp to a date.
 * </div>
 * @param unix The Unix timestamp to convert.
 * @return The equivalent date.
 */
+ (NSDate*) unixToDateTimeWithUnix:(long long)unix;
/*!
 * <div>
 * Converts a Unix timestamp to ticks.
 * </div>
 * @param unix The Unix timestamp to convert.
 * @return The equivalent ticks.
 */
+ (long long) unixToTicksWithUnix:(long long)unix;
/*!
 * <div>
 * Gets the current UTC time in Unix format.
 * </div>
 */
+ (long long) utcNow;

@end

/*!
 * <div>
 * DNS utility methods.
 * </div>
 */
@interface FMIceLinkDns : NSObject

/*!
 * <div>
 * Resolves a host name to an IP address.
 * </div>
 * @param hostname The host name to resolve.
 */
+ (FMIceLinkFuture*) resolveWithHostname:(NSString*)hostname;
/*!
 * <div>
 * Resolves a host name to an IP address.
 * </div>
 * @param name The name to resolve.
 * @param callback The callback to invoke when resolution is complete.
 * @param state A custom state object to pass into the callback.
 */
+ (void) resolveWithName:(NSString*)name callback:(FMIceLinkAction2*)callback state:(id)state;
/*!
 * <div>
 * Resolves a host name to an IP address.
 * </div>
 * @param name The name to resolve.
 * @param callbackBlock The callback to invoke when resolution is complete.
 * @param state A custom state object to pass into the callback.
 */
+ (void) resolveWithName:(NSString*)name callbackBlock:(void(^)(NSMutableArray*, id))callbackBlock state:(id)state;
/*!
 * <div>
 * Resolves a host name to an IP address.
 * </div>
 * @inlineparam name The name to resolve.
 * @inlineparam callbackBlock The callback to invoke when resolution is complete.
 * @inlineparam state A custom state object to pass into the callback.
 */
+ (void (^)(NSString*, void(^)(NSMutableArray*, id), id)) resolveWithNameAndCallbackBlockAndState;

@end

/*!
 * <div>
 * Class to hold a double value passed by reference.
 * </div>
 */
@interface FMIceLinkDoubleHolder : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDoubleHolder class.
 * </div>
 */
+ (FMIceLinkDoubleHolder*) doubleHolder;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDoubleHolder class.
 * </div>
 * @param value The value.
 */
+ (FMIceLinkDoubleHolder*) doubleHolder:(double)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDoubleHolder class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDoubleHolder class.
 * </div>
 * @param value The value.
 */
- (instancetype) initWithValue:(double)value;
/*!
 * <div>
 * Sets the value.
 * </div>
 */
- (void) setValue:(double)value;
/*!
 * <div>
 * Gets the value.
 * </div>
 */
- (double) value;

@end

/*!
 * <div>
 * Base definition for classes that allow serialization to/from JSON.
 * </div>
 */
@interface FMIceLinkSerializable : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSerializable class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSerializable class.
 * </div>
 */
+ (FMIceLinkSerializable*) serializable;

@end

/*!
 * <div>
 * Supplies class instances with a key-value
 * mapping to support dynamic property storage.
 * </div>
 */
@interface FMIceLinkDynamic : FMIceLinkSerializable

+ (FMIceLinkDynamic*) dynamic;
/*!
 * <div>
 * Gets the dynamic properties on this instance.
 * </div>
 */
- (NSMutableDictionary*) dynamicProperties;
/*!
 * <div>
 * Gets a property value from the local cache.
 * </div>
 * @param key The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.
 * @return The stored value, if found; otherwise null.
 */
- (id) getDynamicValueWithKey:(NSString*)key;
- (instancetype) init;
/*!
 * <div>
 * Sets a property value in the local cache.
 * </div>
 * @param key The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.
 * @param value The property value. This can be any object that needs to be stored for future use.
 */
- (void) setDynamicValueWithKey:(NSString*)key value:(id)value;
/*!
 * <div>
 * Unsets a property value in the local cache.
 * </div>
 * @param key The property key. This key is used internally only, but should be namespaced to avoid conflict with third-party extensions.
 * @return true if the value was removed; otherwise, false.
 */
- (bool) unsetDynamicValueWithKey:(NSString*)key;

@end

/*!
 * <div>
 * An error.
 * </div>
 */
@interface FMIceLinkError : NSObject

/*!
 * <div>
 * Returns the string representation of this error.
 * </div>
 * @return
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the error code.
 * </div>
 */
- (FMIceLinkErrorCode) errorCode;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkError class.
 * </div>
 * @param errorCode The error code.
 * @param exception The exception.
 */
+ (FMIceLinkError*) errorWithErrorCode:(FMIceLinkErrorCode)errorCode exception:(NSException*)exception;
/*!
 * <div>
 * Gets the exception.
 * </div>
 */
- (NSException*) exception;
/*!
 * <div>
 * Deserializes an instance from JSON.
 * </div>
 * @param errorJson The JSON to deserialize.
 * @return The deserialized error.
 */
+ (FMIceLinkError*) fromJsonWithErrorJson:(NSString*)errorJson;
/*!
 * <div>
 * Gets the description for this FMIceLinkError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkError class.
 * </div>
 * @param errorCode The error code.
 * @param exception The exception.
 */
- (instancetype) initWithErrorCode:(FMIceLinkErrorCode)errorCode exception:(NSException*)exception;
/*!
 * <div>
 * Sets the error code.
 * </div>
 */
- (void) setErrorCode:(FMIceLinkErrorCode)value;
/*!
 * <div>
 * Sets the exception.
 * </div>
 */
- (void) setException:(NSException*)value;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 * @return
 * The serialized JSON.
 * 
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an instance to JSON.
 * </div>
 * @param error The error.
 * @return
 * The serialized JSON.
 * 
 */
+ (NSString*) toJsonWithError:(FMIceLinkError*)error;

@end

@interface FMIceLinkErrorCodeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkErrorCode)value;

@end

/*!
 * <div>
 * A utility class for reading/writing from/to a FMIceLinkFileAssistant#file.
 * </div>
 */
@interface FMIceLinkFileAssistant : NSObject

/*!
 * <div>
 * Gets the file.
 * </div>
 */
- (FMIceLinkFileStream*) file;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFileAssistant class.
 * </div>
 * @param file The file.
 */
+ (FMIceLinkFileAssistant*) fileAssistantWithFile:(FMIceLinkFileStream*)file;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFileAssistant class.
 * </div>
 * @param file The file.
 */
- (instancetype) initWithFile:(FMIceLinkFileStream*)file;
/*!
 * <div>
 * Gets whether to read/write using little-endian ordering.
 * </div>
 */
- (bool) littleEndian;
/*!
 * <div>
 * Converts a 16-bit network representation to an integer.
 * </div>
 */
- (int) read16;
/*!
 * <div>
 * Converts a 24-bit network representation to an integer.
 * </div>
 */
- (int) read24;
/*!
 * <div>
 * Converts a 32-bit network representation to an integer.
 * </div>
 */
- (long long) read32;
/*!
 * <div>
 * Converts a 40-bit network representation to an integer.
 * </div>
 */
- (long long) read40;
/*!
 * <div>
 * Converts a 48-bit network representation to an integer.
 * </div>
 */
- (long long) read48;
/*!
 * <div>
 * Converts a 56-bit network representation to an integer.
 * </div>
 */
- (long long) read56;
/*!
 * <div>
 * Converts a 64-bit network representation to an integer.
 * </div>
 */
- (long long) read64;
/*!
 * <div>
 * Converts an 8-bit network representation to an integer.
 * </div>
 */
- (int) read8;
/*!
 * <div>
 * Reads all the bytes of a file into a byte array.
 * </div>
 * @param path The filepath to the file to read.
 */
+ (NSMutableData*) readAllBytesWithPath:(NSString*)path;
/*!
 * <div>
 * Reads a 16-bit-length opaque value from a File.
 * </div>
 */
- (NSMutableData*) readOpaque16;
/*!
 * <div>
 * Reads a 24-bit-length opaque value from a File.
 * </div>
 */
- (NSMutableData*) readOpaque24;
/*!
 * <div>
 * Reads a 32-bit-length opaque value from a File.
 * </div>
 */
- (NSMutableData*) readOpaque32;
/*!
 * <div>
 * Reads an 8-bit-length opaque value from a File.
 * </div>
 */
- (NSMutableData*) readOpaque8;
/*!
 * <div>
 * Reads a value from a File.
 * </div>
 * @param length The number of bytes to read.
 */
- (NSMutableData*) readWithLength:(int)length;
/*!
 * <div>
 * Sets whether to read/write using little-endian ordering.
 * </div>
 */
- (void) setLittleEndian:(bool)value;
/*!
 * <div>
 * Adds a value to a File.
 * </div>
 * @param value The value.
 */
- (void) write:(NSMutableData*)value;
/*!
 * <div>
 * Adds a value to a File.
 * </div>
 * @param value The value.
 * @param offset The offset.
 * @param length The length.
 */
- (void) write:(NSMutableData*)value offset:(int)offset length:(int)length;
/*!
 * <div>
 * Adds a 16-bit value to a File.
 * </div>
 * @param value The value.
 */
- (void) write16:(int)value;
/*!
 * <div>
 * Adds a 16-bit value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) write16ToWithLocation:(int)location value:(int)value;
/*!
 * <div>
 * Adds a 24-bit value to a File.
 * </div>
 * @param value The value.
 */
- (void) write24:(int)value;
/*!
 * <div>
 * Adds a 24-bit value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) write24ToWithLocation:(int)location value:(int)value;
/*!
 * <div>
 * Adds a 32-bit value to a File.
 * </div>
 * @param value The value.
 */
- (void) write32:(long long)value;
/*!
 * <div>
 * Adds a 32-bit value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) write32ToWithLocation:(int)location value:(long long)value;
/*!
 * <div>
 * Adds a 40-bit value to a File.
 * </div>
 * @param value The value.
 */
- (void) write40:(long long)value;
/*!
 * <div>
 * Adds a 40-bit value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) write40ToWithLocation:(int)location value:(long long)value;
/*!
 * <div>
 * Adds a 48-bit value to a File.
 * </div>
 * @param value The value.
 */
- (void) write48:(long long)value;
/*!
 * <div>
 * Adds a 48-bit value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) write48ToWithLocation:(int)location value:(long long)value;
/*!
 * <div>
 * Adds a 56-bit value to a File.
 * </div>
 * @param value The value.
 */
- (void) write56:(long long)value;
/*!
 * <div>
 * Adds a 56-bit value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) write56ToWithLocation:(int)location value:(long long)value;
/*!
 * <div>
 * Adds a 64-bit value to a File.
 * </div>
 * @param value The value.
 */
- (void) write64:(long long)value;
/*!
 * <div>
 * Adds a 64-bit value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) write64ToWithLocation:(int)location value:(long long)value;
/*!
 * <div>
 * Adds an 8-bit value to a File.
 * </div>
 * @param value The value.
 */
- (void) write8:(int)value;
/*!
 * <div>
 * Adds an 8-bit value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) write8ToWithLocation:(int)location value:(int)value;
/*!
 * <div>
 * Adds a 16-bit-length opaque value to a File.
 * </div>
 * @param value The value.
 */
- (void) writeOpaque16:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 16-bit-length opaque value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) writeOpaque16ToWithLocation:(int)location value:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 24-bit-length opaque value to a File.
 * </div>
 * @param value The value.
 */
- (void) writeOpaque24:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 24-bit-length opaque value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) writeOpaque24ToWithLocation:(int)location value:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 32-bit-length opaque value to a File.
 * </div>
 * @param value The value.
 */
- (void) writeOpaque32:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 32-bit-length opaque value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) writeOpaque32ToWithLocation:(int)location value:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 40-bit-length opaque value to a File.
 * </div>
 * @param value The value.
 */
- (void) writeOpaque40:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 40-bit-length opaque value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) writeOpaque40ToWithLocation:(int)location value:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 48-bit-length opaque value to a File.
 * </div>
 * @param value The value.
 */
- (void) writeOpaque48:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 48-bit-length opaque value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) writeOpaque48ToWithLocation:(int)location value:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 56-bit-length opaque value to a File.
 * </div>
 * @param value The value.
 */
- (void) writeOpaque56:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 56-bit-length opaque value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) writeOpaque56ToWithLocation:(int)location value:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 64-bit-length opaque value to a File.
 * </div>
 * @param value The value.
 */
- (void) writeOpaque64:(NSMutableData*)value;
/*!
 * <div>
 * Adds a 64-bit-length opaque value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) writeOpaque64ToWithLocation:(int)location value:(NSMutableData*)value;
/*!
 * <div>
 * Adds an 8-bit-length opaque value to a File.
 * </div>
 * @param value The value.
 */
- (void) writeOpaque8:(NSMutableData*)value;
/*!
 * <div>
 * Adds an 8-bit-length opaque value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) writeOpaque8ToWithLocation:(int)location value:(NSMutableData*)value;
/*!
 * <div>
 * Adds a value to a File.
 * </div>
 * @param location The location to write to.
 * @param value The value.
 */
- (void) writeToWithLocation:(int)location value:(NSMutableData*)value;

@end

@interface FMIceLinkFileStreamAccessWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkFileStreamAccess)value;

@end

/*!
 * <div>
 * Class to hold a float value passed by reference.
 * </div>
 */
@interface FMIceLinkFloatHolder : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFloatHolder class.
 * </div>
 */
+ (FMIceLinkFloatHolder*) floatHolder;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFloatHolder class.
 * </div>
 * @param value The value.
 */
+ (FMIceLinkFloatHolder*) floatHolder:(float)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFloatHolder class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFloatHolder class.
 * </div>
 * @param value The value.
 */
- (instancetype) initWithValue:(float)value;
/*!
 * <div>
 * Sets the value.
 * </div>
 */
- (void) setValue:(float)value;
/*!
 * <div>
 * Gets the value.
 * </div>
 */
- (float) value;

@end

/*!
 * <div>
 * Future base properties/methods.
 * </div>
 */
@interface FMIceLinkFutureBase : NSObject

/*!
 * <div>
 * Gets the exception if rejected.
 * </div>
 */
- (NSException*) exception;
+ (FMIceLinkFutureBase*) futureBase;
- (instancetype) init;
/*!
 * <div>
 * Gets the result if resolved.
 * </div>
 */
- (id) result;
/*!
 * <div>
 * Sets the exception if rejected.
 * </div>
 */
- (void) setException:(NSException*)value;
/*!
 * <div>
 * Sets the result if resolved.
 * </div>
 */
- (void) setResult:(id)value;
/*!
 * <div>
 * Sets the current state.
 * </div>
 */
- (void) setState:(FMIceLinkFutureState)value;
/*!
 * <div>
 * Gets the current state.
 * </div>
 */
- (FMIceLinkFutureState) state;

@end

/*!
 * <div>
 * A future.
 * </div><typeparam name="T">The type of the result.</typeparam>
 */
@interface FMIceLinkFuture : FMIceLinkFutureBase

/*!
 * <div>
 * Appends a handler to be executed when the promise is rejected.
 * </div>
 * @param rejectAction The reject action.
 */
- (FMIceLinkFuture*) failWithRejectAction:(FMIceLinkAction1*)rejectAction;
/*!
 * <div>
 * Appends a handler to be executed when the promise is rejected.
 * </div>
 * @inlineparam rejectActionBlock The reject action.
 */
- (FMIceLinkFuture* (^)(void(^)(NSException*))) failWithRejectActionBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is rejected.
 * </div>
 * @param rejectActionBlock The reject action.
 */
- (FMIceLinkFuture*) failWithRejectActionBlock:(void(^)(NSException*))rejectActionBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is rejected.
 * </div>
 * @param rejectFunction The reject function.
 */
- (FMIceLinkFuture*) failWithRejectFunction:(FMIceLinkFunction1*)rejectFunction;
/*!
 * <div>
 * Appends a handler to be executed when the promise is rejected.
 * </div>
 * @inlineparam rejectFunctionBlock The reject function.
 */
- (FMIceLinkFuture* (^)(FMIceLinkFuture*(^)(NSException*))) failWithRejectFunctionBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is rejected.
 * </div>
 * @param rejectFunctionBlock The reject function.
 */
- (FMIceLinkFuture*) failWithRejectFunctionBlock:(FMIceLinkFuture*(^)(NSException*))rejectFunctionBlock;
+ (FMIceLinkFuture*) future;
- (instancetype) init;
/*!
 * <div>
 * Appends a handler to be executed when the promise is resolved.
 * </div>
 * @param resolveAction The resolve action.
 */
- (FMIceLinkFuture*) thenWithResolveAction:(FMIceLinkAction1*)resolveAction;
/*!
 * <div>
 * Appends handlers to be executed when the promise is resolved or rejected.
 * </div>
 * @param resolveAction The resolve action.
 * @param rejectAction The reject action.
 */
- (FMIceLinkFuture*) thenWithResolveAction:(FMIceLinkAction1*)resolveAction rejectAction:(FMIceLinkAction1*)rejectAction;
/*!
 * <div>
 * Appends a handler to be executed when the promise is resolved.
 * </div>
 * @inlineparam resolveActionBlock The resolve action.
 */
- (FMIceLinkFuture* (^)(void(^)(id))) thenWithResolveActionBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is resolved.
 * </div>
 * @param resolveActionBlock The resolve action.
 */
- (FMIceLinkFuture*) thenWithResolveActionBlock:(void(^)(id))resolveActionBlock;
/*!
 * <div>
 * Appends handlers to be executed when the promise is resolved or rejected.
 * </div>
 * @param resolveActionBlock The resolve action.
 * @param rejectActionBlock The reject action.
 */
- (FMIceLinkFuture*) thenWithResolveActionBlock:(void(^)(id))resolveActionBlock rejectActionBlock:(void(^)(NSException*))rejectActionBlock;
/*!
 * <div>
 * Appends handlers to be executed when the promise is resolved or rejected.
 * </div>
 * @inlineparam resolveActionBlock The resolve action.
 * @inlineparam rejectActionBlock The reject action.
 */
- (FMIceLinkFuture* (^)(void(^)(id), void(^)(NSException*))) thenWithResolveActionBlockAndRejectActionBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is resolved.
 * </div>
 * @param resolveFunction The resolve function.
 */
- (FMIceLinkFuture*) thenWithResolveFunction:(FMIceLinkFunction1*)resolveFunction;
/*!
 * <div>
 * Appends handlers to be executed when the promise is resolved or rejected.
 * </div>
 * @param resolveFunction The resolve function.
 * @param rejectAction The reject action.
 */
- (FMIceLinkFuture*) thenWithResolveFunction:(FMIceLinkFunction1*)resolveFunction rejectAction:(FMIceLinkAction1*)rejectAction;
/*!
 * <div>
 * Appends a handler to be executed when the promise is resolved.
 * </div>
 * @inlineparam resolveFunctionBlock The resolve function.
 */
- (FMIceLinkFuture* (^)(FMIceLinkFuture*(^)(id))) thenWithResolveFunctionBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is resolved.
 * </div>
 * @param resolveFunctionBlock The resolve function.
 */
- (FMIceLinkFuture*) thenWithResolveFunctionBlock:(FMIceLinkFuture*(^)(id))resolveFunctionBlock;
/*!
 * <div>
 * Appends handlers to be executed when the promise is resolved or rejected.
 * </div>
 * @param resolveFunctionBlock The resolve function.
 * @param rejectActionBlock The reject action.
 */
- (FMIceLinkFuture*) thenWithResolveFunctionBlock:(FMIceLinkFuture*(^)(id))resolveFunctionBlock rejectActionBlock:(void(^)(NSException*))rejectActionBlock;
/*!
 * <div>
 * Appends handlers to be executed when the promise is resolved or rejected.
 * </div>
 * @inlineparam resolveFunctionBlock The resolve function.
 * @inlineparam rejectActionBlock The reject action.
 */
- (FMIceLinkFuture* (^)(FMIceLinkFuture*(^)(id), void(^)(NSException*))) thenWithResolveFunctionBlockAndRejectActionBlock;
/*!
 * <div>
 * Blocks the current thread from proceeding
 * until the future state has been resolved
 * or rejected.
 * </div>
 */
- (void) waitForPromise;
/*!
 * <div>
 * Blocks the current thread from proceeding
 * until the future state has been resolved
 * or rejected or if the timeout period elapses.
 * </div>
 * @param millisecondsTimeout The number of milliseconds to wait before timing out.
 */
- (void) waitForPromiseWithMillisecondsTimeout:(int)millisecondsTimeout;
/*!
 * <div>
 * Blocks the current thread from proceeding
 * until the future has a result. Throws an
 * exception if the promise is rejected.
 * </div>
 */
- (id) waitForResult;
/*!
 * <div>
 * Blocks the current thread from proceeding
 * until the future has a result. Throws an
 * exception if the promise is rejected or
 * if the timeout period elapses.
 * </div>
 * @param millisecondsTimeout The number of milliseconds to wait before timing out.
 */
- (id) waitForResultWithMillisecondsTimeout:(int)millisecondsTimeout;

@end

/*!
 * <div>
 * Helper methods for downloading binary files.
 * </div>
 */
@interface FMIceLinkHttpFileTransfer : NSObject

/*!
 * <div>
 * Downloads a file from the url. Decompresses using BZip2 if needed.
 * </div>
 * @param url The URL.
 */
+ (FMIceLinkFuture*) downloadFileWithUrl:(NSString*)url;
/*!
 * <div>
 * Downloads a file from the url. Decompresses using BZip2 if needed. Then saves to the file system at filePath.
 * </div>
 * @param url The URL.
 * @param filePath The file path.
 */
+ (FMIceLinkFuture*) downloadFileWithUrl:(NSString*)url filePath:(NSString*)filePath;
+ (FMIceLinkHttpFileTransfer*) httpFileTransfer;
- (instancetype) init;

@end

@interface FMIceLinkHttpMethodWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkHttpMethod)value;

@end

/*!
 * <div>
 * Arguments for sending an HTTP request.
 * </div>
 */
@interface FMIceLinkHttpRequestArgs : FMIceLinkDynamic

/*!
 * <div>
 * Gets the binary content to transfer over HTTP.
 * Overrides FMIceLinkHttpRequestArgs#textContent.
 * </div>
 */
- (NSMutableData*) binaryContent;
/*!
 * <div>
 * Gets the headers to transfer over HTTP.
 * </div>
 */
- (FMIceLinkNameValueCollection*) headers;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkHttpRequestArgs class
 * with default values.
 * </div>
 */
+ (FMIceLinkHttpRequestArgs*) httpRequestArgs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkHttpRequestArgs class
 * with default values.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets the HTTP method.
 * </div>
 */
- (FMIceLinkHttpMethod) method;
/*!
 * <div>
 * Gets the callback to invoke once the outgoing HTTP request is created.
 * See FMIceLinkHttpRequestCreatedArgs for callback argument details.
 * </div>
 */
- (FMIceLinkAction1*) onRequestCreated;
/*!
 * <div>
 * Gets the callback to invoke once the incoming HTTP response has been
 * received. See FMIceLinkHttpResponseReceivedArgs for callback argument details.
 * </div>
 */
- (FMIceLinkAction1*) onResponseReceived;
/*!
 * <div>
 * Gets the sender of the content, either a client or publisher.
 * </div>
 */
- (id) sender;
/*!
 * <div>
 * Sets the binary content to transfer over HTTP.
 * Overrides FMIceLinkHttpRequestArgs#textContent.
 * </div>
 */
- (void) setBinaryContent:(NSMutableData*)value;
/*!
 * <div>
 * Sets the headers to transfer over HTTP.
 * </div>
 */
- (void) setHeaders:(FMIceLinkNameValueCollection*)value;
/*!
 * <div>
 * Sets the HTTP method.
 * </div>
 */
- (void) setMethod:(FMIceLinkHttpMethod)value;
/*!
 * <div>
 * Sets the callback to invoke once the outgoing HTTP request is created.
 * See FMIceLinkHttpRequestCreatedArgs for callback argument details.
 * </div>
 */
- (void) setOnRequestCreated:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke once the outgoing HTTP request is created.
 * See FMIceLinkHttpRequestCreatedArgs for callback argument details.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkHttpRequestCreatedArgs*))) setOnRequestCreatedBlock;
/*!
 * <div>
 * Sets the callback to invoke once the outgoing HTTP request is created.
 * See FMIceLinkHttpRequestCreatedArgs for callback argument details.
 * </div>
 */
- (void) setOnRequestCreatedBlock:(void(^)(FMIceLinkHttpRequestCreatedArgs*))valueBlock;
/*!
 * <div>
 * Sets the callback to invoke once the incoming HTTP response has been
 * received. See FMIceLinkHttpResponseReceivedArgs for callback argument details.
 * </div>
 */
- (void) setOnResponseReceived:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke once the incoming HTTP response has been
 * received. See FMIceLinkHttpResponseReceivedArgs for callback argument details.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkHttpResponseReceivedArgs*))) setOnResponseReceivedBlock;
/*!
 * <div>
 * Sets the callback to invoke once the incoming HTTP response has been
 * received. See FMIceLinkHttpResponseReceivedArgs for callback argument details.
 * </div>
 */
- (void) setOnResponseReceivedBlock:(void(^)(FMIceLinkHttpResponseReceivedArgs*))valueBlock;
/*!
 * <div>
 * Sets the sender of the content, either a client or publisher.
 * </div>
 */
- (void) setSender:(id)value;
/*!
 * <div>
 * Sets the text content to transfer over HTTP.
 * </div>
 */
- (void) setTextContent:(NSString*)value;
/*!
 * <div>
 * Sets the number of milliseconds to wait before timing out the HTTP transfer.
 * Defaults to 15000 ms (15 seconds).
 * </div>
 */
- (void) setTimeout:(int)value;
/*!
 * <div>
 * Sets the target URL for the HTTP request.
 * </div>
 */
- (void) setUrl:(NSString*)value;
/*!
 * <div>
 * Gets the text content to transfer over HTTP.
 * </div>
 */
- (NSString*) textContent;
/*!
 * <div>
 * Gets the number of milliseconds to wait before timing out the HTTP transfer.
 * Defaults to 15000 ms (15 seconds).
 * </div>
 */
- (int) timeout;
/*!
 * <div>
 * Gets the target URL for the HTTP request.
 * </div>
 */
- (NSString*) url;

@end

/*!
 * <div>
 * Arguments passed into callbacks when an HTTP request is created.
 * </div>
 */
@interface FMIceLinkHttpRequestCreatedArgs : NSObject

+ (FMIceLinkHttpRequestCreatedArgs*) httpRequestCreatedArgs;
- (instancetype) init;
/*!
 * <div>
 * Gets the outgoing HTTP request about to be sent to the server.
 * </div>
 */
- (NSMutableURLRequest*) request;
/*!
 * <div>
 * Gets the original request arguments.
 * </div>
 */
- (FMIceLinkHttpRequestArgs*) requestArgs;
/*!
 * <div>
 * Gets the sender of the request, either a client or publisher.
 * </div>
 */
- (id) sender;
/*!
 * <div>
 * Sets the outgoing HTTP request about to be sent to the server.
 * </div>
 */
- (void) setRequest:(NSMutableURLRequest*)value;
/*!
 * <div>
 * Sets the original request arguments.
 * </div>
 */
- (void) setRequestArgs:(FMIceLinkHttpRequestArgs*)value;
/*!
 * <div>
 * Sets the sender of the request, either a client or publisher.
 * </div>
 */
- (void) setSender:(id)value;

@end

/*!
 * <div>
 * Arguments for receiving an HTTP response.
 * </div>
 */
@interface FMIceLinkHttpResponseArgs : NSObject

/*!
 * <div>
 * Gets the binary content read from the HTTP response.
 * </div>
 */
- (NSMutableData*) binaryContent;
/*!
 * <div>
 * Gets the exception generated while completing the request.
 * </div>
 */
- (NSException*) exception;
/*!
 * <div>
 * Gets the headers read from the HTTP response.
 * </div>
 */
- (FMIceLinkNameValueCollection*) headers;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkHttpResponseArgs class.
 * </div>
 * @param requestArgs The request arguments.
 */
+ (FMIceLinkHttpResponseArgs*) httpResponseArgsWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkHttpResponseArgs class.
 * </div>
 * @param requestArgs The request arguments.
 */
- (instancetype) initWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs;
/*!
 * <div>
 * Gets the original FMIceLinkHttpRequestArgs.
 * </div>
 */
- (FMIceLinkHttpRequestArgs*) requestArgs;
/*!
 * <div>
 * Sets the binary content read from the HTTP response.
 * </div>
 */
- (void) setBinaryContent:(NSMutableData*)value;
/*!
 * <div>
 * Sets the exception generated while completing the request.
 * </div>
 */
- (void) setException:(NSException*)value;
/*!
 * <div>
 * Sets the original FMIceLinkHttpRequestArgs.
 * </div>
 */
- (void) setRequestArgs:(FMIceLinkHttpRequestArgs*)value;
/*!
 * <div>
 * Sets the status code read from the HTTP response.
 * </div>
 */
- (void) setStatusCode:(int)value;
/*!
 * <div>
 * Sets the text content read from the HTTP response.
 * </div>
 */
- (void) setTextContent:(NSString*)value;
/*!
 * <div>
 * Gets the status code read from the HTTP response.
 * </div>
 */
- (int) statusCode;
/*!
 * <div>
 * Gets the text content read from the HTTP response.
 * </div>
 */
- (NSString*) textContent;

@end

/*!
 * <div>
 * Arguments passed into callbacks when an HTTP response is received.
 * </div>
 */
@interface FMIceLinkHttpResponseReceivedArgs : NSObject

+ (FMIceLinkHttpResponseReceivedArgs*) httpResponseReceivedArgs;
- (instancetype) init;
/*!
 * <div>
 * Gets the original request arguments.
 * </div>
 */
- (FMIceLinkHttpRequestArgs*) requestArgs;
/*!
 * <div>
 * Gets the incoming HTTP response received from the server.
 * </div>
 */
- (NSURLResponse*) response;
/*!
 * <div>
 * Gets the sender of the request, either a client or publisher.
 * </div>
 */
- (id) sender;
/*!
 * <div>
 * Sets the original request arguments.
 * </div>
 */
- (void) setRequestArgs:(FMIceLinkHttpRequestArgs*)value;
/*!
 * <div>
 * Sets the incoming HTTP response received from the server.
 * </div>
 */
- (void) setResponse:(NSURLResponse*)value;
/*!
 * <div>
 * Sets the sender of the request, either a client or publisher.
 * </div>
 */
- (void) setSender:(id)value;

@end

/*!
 * <div>
 * Arguments for FMIceLinkHttpTransfer#addOnSendStart:.
 * </div>
 */
@interface FMIceLinkHttpSendFinishArgs : NSObject

+ (FMIceLinkHttpSendFinishArgs*) httpSendFinishArgs;
- (instancetype) init;
/*!
 * <div>
 * Gets the binary content of the request.
 * </div>
 */
- (NSMutableData*) requestBinaryContent;
/*!
 * <div>
 * Gets the text content of the request.
 * </div>
 */
- (NSString*) requestTextContent;
/*!
 * <div>
 * Gets the binary content of the response.
 * </div>
 */
- (NSMutableData*) responseBinaryContent;
/*!
 * <div>
 * Gets the headers of the response.
 * </div>
 */
- (FMIceLinkNameValueCollection*) responseHeaders;
/*!
 * <div>
 * Gets the binary content of the response.
 * </div>
 */
- (NSString*) responseTextContent;
/*!
 * <div>
 * Gets the sender of the request, either a client or publisher.
 * </div>
 */
- (id) sender;

@end

/*!
 * <div>
 * Arguments for FMIceLinkHttpTransfer#addOnSendStart:.
 * </div>
 */
@interface FMIceLinkHttpSendStartArgs : NSObject

+ (FMIceLinkHttpSendStartArgs*) httpSendStartArgs;
- (instancetype) init;
/*!
 * <div>
 * Gets the binary content of the request.
 * </div>
 */
- (NSMutableData*) requestBinaryContent;
/*!
 * <div>
 * Gets the text content of the request.
 * </div>
 */
- (NSString*) requestTextContent;
/*!
 * <div>
 * Gets the sender of the request, either a client or publisher.
 * </div>
 */
- (id) sender;

@end

/*!
 * <div>
 * Base class that defines methods for transferring content over HTTP.
 * </div>
 */
@interface FMIceLinkHttpTransfer : NSObject

/*!
 * <div>
 * Adds a handler that is raised before an HTTP request is sent.
 * </div><parameter name="args">The FMIceLinkHttpSendFinishArgs associated with the event.</parameter>
 */
+ (void) addOnSendFinish:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised before an HTTP request is sent.
 * </div><parameter name="args">The FMIceLinkHttpSendFinishArgs associated with the event.</parameter>
 */
+ (void (^)(void(^)(FMIceLinkHttpSendFinishArgs*))) addOnSendFinishWithBlock;
/*!
 * <div>
 * Adds a handler that is raised before an HTTP request is sent.
 * </div><parameter name="args">The FMIceLinkHttpSendFinishArgs associated with the event.</parameter>
 */
+ (void) addOnSendFinishWithBlock:(void(^)(FMIceLinkHttpSendFinishArgs*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised before an HTTP request is sent.
 * </div><parameter name="args">The FMIceLinkHttpSendStartArgs associated with the event.</parameter>
 */
+ (void) addOnSendStart:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised before an HTTP request is sent.
 * </div><parameter name="args">The FMIceLinkHttpSendStartArgs associated with the event.</parameter>
 */
+ (void (^)(void(^)(FMIceLinkHttpSendStartArgs*))) addOnSendStartWithBlock;
/*!
 * <div>
 * Adds a handler that is raised before an HTTP request is sent.
 * </div><parameter name="args">The FMIceLinkHttpSendStartArgs associated with the event.</parameter>
 */
+ (void) addOnSendStartWithBlock:(void(^)(FMIceLinkHttpSendStartArgs*))valueBlock;
/*!
 * <div>
 * Escapes and adds a query parameter as a key/empty-value pair to a URL.
 * </div>
 * @param url The URL with the query to which the key/value should be added.
 * @param key The key of the query parameter to add.
 * @return The original URL with the query parameter added.
 */
+ (NSString*) addQueryToUrl:(NSString*)url key:(NSString*)key;
/*!
 * <div>
 * Escapes and adds a query parameter as a key/value pair to a URL.
 * </div>
 * @param url The URL with the query to which the key/value should be added.
 * @param key The key of the query parameter to add.
 * @param value The value of the query parameter to add.
 * @return The original URL with the query parameter added.
 */
+ (NSString*) addQueryToUrl:(NSString*)url key:(NSString*)key value:(NSString*)value;
/*!
 * <div>
 * Gets a random wildcard character.
 * </div>
 * @return A random wildcard character.
 */
+ (NSString*) getRandomWildcardCharacter;
+ (FMIceLinkHttpTransfer*) httpTransfer;
- (instancetype) init;
/*!
 * <div>
 * Removes a handler that is raised before an HTTP request is sent.
 * </div><parameter name="args">The FMIceLinkHttpSendFinishArgs associated with the event.</parameter>
 */
+ (void) removeOnSendFinish:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised before an HTTP request is sent.
 * </div><parameter name="args">The FMIceLinkHttpSendStartArgs associated with the event.</parameter>
 */
+ (void) removeOnSendStart:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Replaces asterisks in URLs with characters from
 * WildcardCharacters.
 * </div>
 * @param url The URL with asterisks.
 */
+ (NSString*) replaceWildcardsWithUrl:(NSString*)url;
/*!
 * <div>
 * Sends a request asynchronously.
 * </div>
 * @param requestArgs The request parameters.
 * @param callback The callback to execute with the resulting response.
 */
- (void) sendAsyncWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs callback:(FMIceLinkAction1*)callback;
/*!
 * <div>
 * Sends a request asynchronously.
 * </div>
 * @param requestArgs The request parameters.
 * @param callbackBlock The callback to execute with the resulting response.
 */
- (void) sendAsyncWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs callbackBlock:(void(^)(FMIceLinkHttpResponseArgs*))callbackBlock;
/*!
 * <div>
 * Sends a request asynchronously.
 * </div>
 * @inlineparam requestArgs The request parameters.
 * @inlineparam callbackBlock The callback to execute with the resulting response.
 */
- (void (^)(FMIceLinkHttpRequestArgs*, void(^)(FMIceLinkHttpResponseArgs*))) sendAsyncWithRequestArgsAndCallbackBlock;
/*!
 * <div>
 * Sends binary content asynchronously using the specified arguments.
 * </div>
 * @param requestArgs The request arguments.
 * @param callback The callback to execute on success or failure.
 */
- (void) sendBinaryAsyncWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs callback:(FMIceLinkAction1*)callback;
/*!
 * <div>
 * Sends binary content asynchronously using the specified arguments.
 * </div>
 * @param requestArgs The request arguments.
 * @param callbackBlock The callback to execute on success or failure.
 */
- (void) sendBinaryAsyncWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs callbackBlock:(void(^)(FMIceLinkHttpResponseArgs*))callbackBlock;
/*!
 * <div>
 * Sends binary content asynchronously using the specified arguments.
 * </div>
 * @inlineparam requestArgs The request arguments.
 * @inlineparam callbackBlock The callback to execute on success or failure.
 */
- (void (^)(FMIceLinkHttpRequestArgs*, void(^)(FMIceLinkHttpResponseArgs*))) sendBinaryAsyncWithRequestArgsAndCallbackBlock;
/*!
 * <div>
 * Sends binary content synchronously using the specified arguments.
 * </div>
 * @param requestArgs The request arguments.
 * @return The response arguments from the server.
 */
- (FMIceLinkHttpResponseArgs*) sendBinaryWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs;
/*!
 * <div>
 * Sends text content asynchronously using the specified arguments.
 * </div>
 * @param requestArgs The request arguments.
 * @param callback The callback to execute on success or failure.
 */
- (void) sendTextAsyncWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs callback:(FMIceLinkAction1*)callback;
/*!
 * <div>
 * Sends text content asynchronously using the specified arguments.
 * </div>
 * @param requestArgs The request arguments.
 * @param callbackBlock The callback to execute on success or failure.
 */
- (void) sendTextAsyncWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs callbackBlock:(void(^)(FMIceLinkHttpResponseArgs*))callbackBlock;
/*!
 * <div>
 * Sends text content asynchronously using the specified arguments.
 * </div>
 * @inlineparam requestArgs The request arguments.
 * @inlineparam callbackBlock The callback to execute on success or failure.
 */
- (void (^)(FMIceLinkHttpRequestArgs*, void(^)(FMIceLinkHttpResponseArgs*))) sendTextAsyncWithRequestArgsAndCallbackBlock;
/*!
 * <div>
 * Sends text content synchronously using the specified arguments.
 * </div>
 * @param requestArgs The request arguments.
 * @return The response arguments from the server.
 */
- (FMIceLinkHttpResponseArgs*) sendTextWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs;
/*!
 * <div>
 * Sends a request synchronously.
 * </div>
 * @param requestArgs The request parameters.
 * @return The resulting response.
 */
- (FMIceLinkHttpResponseArgs*) sendWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs;
/*!
 * <div>
 * Sets the wildcard characters used
 * to replace asterisks in ReplaceWildcards.
 * </div>
 */
+ (void) setWildcardCharacters:(NSString*)value;
/*!
 * <div>
 * Releases any resources and shuts down.
 * </div>
 */
- (void) shutdown;
/*!
 * <div>
 * Gets the wildcard characters used
 * to replace asterisks in ReplaceWildcards.
 * </div>
 */
+ (NSString*) wildcardCharacters;

@end

/*!
 * <div>
 * Creates implementations of FMIceLinkHttpTransfer.
 * </div>
 */
@interface FMIceLinkHttpTransferFactory : NSObject

/*!
 * <div>
 * Gets the callback that creates an HTTP-based transfer class.
 * </div>
 */
+ (FMIceLinkFunction0*) createHttpTransfer;
/*!
 * <div>
 * Gets an instance of the HTTP-based transfer class.
 * </div>
 */
+ (FMIceLinkHttpTransfer*) getHttpTransfer;
+ (FMIceLinkHttpTransferFactory*) httpTransferFactory;
- (instancetype) init;
/*!
 * <div>
 * Sets the callback that creates an HTTP-based transfer class.
 * </div>
 */
+ (void) setCreateHttpTransfer:(FMIceLinkFunction0*)value;
/*!
 * <div>
 * Sets the callback that creates an HTTP-based transfer class.
 * </div>
 */
+ (void (^)(FMIceLinkHttpTransfer*(^)(void))) setCreateHttpTransferBlock;
/*!
 * <div>
 * Sets the callback that creates an HTTP-based transfer class.
 * </div>
 */
+ (void) setCreateHttpTransferBlock:(FMIceLinkHttpTransfer*(^)(void))valueBlock;

@end

/*!
 * <div>
 * An HTTP web request sender.
 * </div>
 */
@interface FMIceLinkHttpWebRequestSender : FMIceLinkDynamic

+ (FMIceLinkHttpWebRequestSender*) httpWebRequestSender;
- (instancetype) init;

@end

/*!
 * <div>
 * Class to hold an integer value passed by reference.
 * </div>
 */
@interface FMIceLinkIntegerHolder : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIntegerHolder class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIntegerHolder class.
 * </div>
 * @param value The value.
 */
- (instancetype) initWithValue:(int)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIntegerHolder class.
 * </div>
 */
+ (FMIceLinkIntegerHolder*) integerHolder;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIntegerHolder class.
 * </div>
 * @param value The value.
 */
+ (FMIceLinkIntegerHolder*) integerHolder:(int)value;
/*!
 * <div>
 * Sets the value.
 * </div>
 */
- (void) setValue:(int)value;
/*!
 * <div>
 * Gets the value.
 * </div>
 */
- (int) value;

@end

/*!
 * <div>
 * JSON utility class.
 * </div>
 */
@interface FMIceLinkJson : NSObject

/*!
 * <div>
 * Deserializes a value from a JSON string.
 * </div><typeparam name="T">The type the value to deserialize.</typeparam>
 * @param valueJson The JSON string to deserialize.
 * @return The deserialized value.
 */
+ (id) deserializeWithValueJson:(NSString*)valueJson;
- (instancetype) init;
+ (FMIceLinkJson*) json;
/*!
 * <div>
 * Gets the JSON provider to use.
 * </div>
 */
+ (FMIceLinkJsonProvider*) provider;
/*!
 * <div>
 * Serializes a value to a JSON string.
 * </div><typeparam name="T">The type the value to serialize.</typeparam>
 * @param value The value to serialize.
 * @return The serialized JSON string.
 */
+ (NSString*) serialize:(id)value;
/*!
 * <div>
 * Sets the JSON provider to use.
 * </div>
 */
+ (void) setProvider:(FMIceLinkJsonProvider*)value;

@end

/*!
 * <div>
 * Base class for all JSON provider implementations.
 * </div>
 */
@interface FMIceLinkJsonProvider : NSObject

/*!
 * <div>
 * Deserializes a value from a JSON string.
 * </div><typeparam name="T">The type the value to deserialize.</typeparam>
 * @param valueJson The JSON string to deserialize.
 * @return The deserialized value.
 */
- (id) deserializeWithValueJson:(NSString*)valueJson;
- (instancetype) init;
+ (FMIceLinkJsonProvider*) jsonProvider;
/*!
 * <div>
 * Serializes a value to a JSON string.
 * </div><typeparam name="T">The type the value to serialize.</typeparam>
 * @param value The value to serialize.
 * @return The serialized JSON string.
 */
- (NSString*) serialize:(id)value;

@end

/*!
 * <div>
 * A license.
 * </div>
 */
@interface FMIceLinkLicense : NSObject

/*!
 * <div>
 * Gets the account identifier.
 * </div>
 */
- (NSString*) accountId;
/*!
 * <div>
 * Gets a value indicating whether a valid key has been set.
 * </div>
 */
+ (void) checkKey;
/*!
 * <div>
 * Gets the current license.
 * </div>
 */
+ (FMIceLinkLicense*) current;
/*!
 * <div>
 * Gets the license identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Gets a value indicating whether this is a trial license.
 * </div>
 */
- (bool) isTrial;
/*!
 * <div>
 * Gets a value indicating whether this is a valid license.
 * </div>
 */
- (bool) isValid;
/*!
 * <div>
 * Gets the product code.
 * </div>
 */
- (NSString*) productCode;
/*!
 * <div>
 * Sets the license key.
 * </div>
 * @param key The license key.
 */
+ (void) setKey:(NSString*)key;
/*!
 * <div>
 * Gets the "valid from" date.
 * </div>
 */
- (NSDate*) validFrom;
/*!
 * <div>
 * Gets the "valid to" date.
 * </div>
 */
- (NSDate*) validTo;

@end

/*!
 * <div>
 * Thread-safe class providing access to a single FMIceLinkLockedRandomizerRandomizer.
 * </div>
 */
@interface FMIceLinkLockedRandomizer : NSObject

/*!
 * <div>
 * Returns a nonnegative random number.
 * </div>
 */
+ (int) next;
/*!
 * <div>
 * Fills the elements of a specified array of bytes with random numbers.
 * </div>
 * @param buffer The array of bytes to fill.
 */
+ (void) nextBytesWithBuffer:(NSMutableData*)buffer;
/*!
 * <div>
 * Returns a random number between 0.0 and 1.0.
 * </div>
 */
+ (double) nextDouble;
/*!
 * <div>
 * Returns a nonnegative random number.
 * </div>
 */
+ (long long) nextLong;
/*!
 * <div>
 * Returns a nonnegative random number less than the specified maximum.
 * </div>
 * @param maxValue The maximum value (exclusive).
 */
+ (int) nextWithMaxValue:(int)maxValue;
/*!
 * <div>
 * Returns a random number within a specified range.
 * </div>
 * @param minValue The minimum value (inclusive).
 * @param maxValue The maximum value (exclusive).
 */
+ (int) nextWithMinValue:(int)minValue maxValue:(int)maxValue;
/*!
 * <div>
 * Generates a random string of a specified size.
 * </div>
 * @param size The size of the output string.
 */
+ (NSString*) randomStringWithSize:(int)size;

@end

/*!
 * <div>
 * Log utility class.
 * </div>
 */
@interface FMIceLinkLog : NSObject

/*!
 * <div>
 * Registers a log provider as a logging target.
 * Alias for RegisterProvider.
 * </div>
 * @param provider The new provider.
 */
+ (void) addProvider:(FMIceLinkLogProvider*)provider;
/*!
 * <div>
 * Registers a log provider as a logging target,
 * setting its log level in the process.
 * Alias for RegisterProvider.
 * </div>
 * @param provider The new provider.
 * @param level The log level.
 */
+ (void) addProvider:(FMIceLinkLogProvider*)provider level:(FMIceLinkLogLevel)level;
/*!
 * <div>
 * Logs a debug-level message.
 * </div>
 * @param message The message.
 */
+ (void) debugWithMessage:(NSString*)message;
/*!
 * <div>
 * Logs a debug-level message.
 * </div>
 * @param message The message.
 * @param ex The exception.
 */
+ (void) debugWithMessage:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Logs an error-level message.
 * </div>
 * @param message The message.
 */
+ (void) errorWithMessage:(NSString*)message;
/*!
 * <div>
 * Logs an error-level message.
 * </div>
 * @param message The message.
 * @param ex The exception.
 */
+ (void) errorWithMessage:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Logs a fatal-level message.
 * </div>
 * @param message The message.
 */
+ (void) fatalWithMessage:(NSString*)message;
/*!
 * <div>
 * Logs a fatal-level message.
 * </div>
 * @param message The message.
 * @param ex The exception.
 */
+ (void) fatalWithMessage:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Blocks until all logs are written out.
 * </div>
 */
+ (void) flush;
/*!
 * <div>
 * Get a logger for a specific Tag.
 * </div>
 * @param tag The tag to log to.
 * @return A ILog that will log to the specified tag.
 */
+ (NSObject<FMIceLinkILog>*) getLoggerWithTag:(NSString*)tag;
/*!
 * <div>
 * Get a logger for a specific Tag.
 * </div>
 * @param tag The tag to log to.
 * @param level Logger's default log level.
 * @return A ILog that will log to the specified tag.
 */
+ (NSObject<FMIceLinkILog>*) getLoggerWithTag:(NSString*)tag level:(FMIceLinkLogLevel)level;
/*!
 * <div>
 * Get a logger for a specific Tag. The tag is taken from the class namespace and name.
 * </div>
 * @param type The type to use as the tag.
 * @return A ILog that will log to the specified tag.
 */
+ (NSObject<FMIceLinkILog>*) getLoggerWithType:(Class)type;
/*!
 * <div>
 * Get a logger for a specific Tag.  The tag is taken from the class namespace and name.
 * </div>
 * @param type The type to use as the tag.
 * @param level Logger's default log level.
 * @return A ILog that will log to the specified tag.
 */
+ (NSObject<FMIceLinkILog>*) getLoggerWithType:(Class)type level:(FMIceLinkLogLevel)level;
/*!
 * <div>
 * Logs an info-level message.
 * </div>
 * @param message The message.
 */
+ (void) infoWithMessage:(NSString*)message;
/*!
 * <div>
 * Logs an info-level message.
 * </div>
 * @param message The message.
 * @param ex The exception.
 */
+ (void) infoWithMessage:(NSString*)message ex:(NSException*)ex;
- (instancetype) init;
/*!
 * <div>
 * Gets a value indicating whether logging is enabled for debug-level messages.
 * </div><value>
 * <code>true</code> if logging is enabled for debug-level messages; otherwise, <code>false</code>.
 * </value>
 */
+ (bool) isDebugEnabled;
/*!
 * <div>
 * Gets a value indicating whether logging is enabled for error-level messages.
 * </div><value>
 * <code>true</code> if logging is enabled for error-level messages; otherwise, <code>false</code>.
 * </value>
 */
+ (bool) isErrorEnabled;
/*!
 * <div>
 * Gets a value indicating whether logging is enabled for fatal-level messages.
 * </div><value>
 * <code>true</code> if logging is enabled for fatal-level messages; otherwise, <code>false</code>.
 * </value>
 */
+ (bool) isFatalEnabled;
/*!
 * <div>
 * Gets a value indicating whether logging is enabled for info-level messages.
 * </div><value>
 * <code>true</code> if logging is enabled for info-level messages; otherwise, <code>false</code>.
 * </value>
 */
+ (bool) isInfoEnabled;
/*!
 * <div>
 * Gets a value indicating whether logging is enabled for verbose-level messages.
 * </div><value>
 * <code>true</code> if logging is enabled for verbose-level messages; otherwise, <code>false</code>.
 * </value>
 */
+ (bool) isVerboseEnabled;
/*!
 * <div>
 * Gets a value indicating whether logging is enabled for warn-level messages.
 * </div><value>
 * <code>true</code> if logging is enabled for warn-level messages; otherwise, <code>false</code>.
 * </value>
 */
+ (bool) isWarnEnabled;
+ (FMIceLinkLog*) log;
/*!
 * <div>
 * Gets the default log level.
 * </div>
 */
+ (FMIceLinkLogLevel) logLevel;
/*!
 * <div>
 * Gets the first log provider.
 * </div>
 */
+ (FMIceLinkLogProvider*) provider;
/*!
 * <div>
 * Gets the log providers.
 * </div>
 */
+ (NSMutableArray*) providers;
/*!
 * <div>
 * Registers a log provider as a logging target.
 * </div>
 * @param provider The provider.
 */
+ (void) registerProvider:(FMIceLinkLogProvider*)provider;
/*!
 * <div>
 * Registers a log provider as a logging target,
 * setting its log level in the process.
 * </div>
 * @param provider The provider.
 * @param level The log level.
 */
+ (void) registerProvider:(FMIceLinkLogProvider*)provider level:(FMIceLinkLogLevel)level;
/*!
 * <div>
 * Unregisters a log provider as a logging target.
 * Alias for UnregisterProvider.
 * </div>
 * @param provider The provider.
 */
+ (bool) removeProvider:(FMIceLinkLogProvider*)provider;
/*!
 * <div>
 * Unregisters all log providers as logging targets.
 * Alias for UnregisterProviders.
 * </div>
 */
+ (void) removeProviders;
/*!
 * <div>
 * Sets the default log level.
 * </div>
 */
+ (void) setLogLevel:(FMIceLinkLogLevel)value;
/*!
 * <div>
 * Sets the first log provider.
 * </div>
 */
+ (void) setProvider:(FMIceLinkLogProvider*)value;
/*!
 * <div>
 * Override the default log level for a specific tag.
 * </div>
 * @param tag The Tag to set the log level to.
 * @param level The new loglevel to use.
 */
+ (void) setTagOverrideWithTag:(NSString*)tag level:(FMIceLinkLogLevel)level;
/*!
 * <div>
 * Unregisters a log provider as a logging target.
 * </div>
 * @param provider The provider.
 */
+ (bool) unregisterProvider:(FMIceLinkLogProvider*)provider;
/*!
 * <div>
 * Unregisters all log providers as logging targets.
 * </div>
 */
+ (void) unregisterProviders;
/*!
 * <div>
 * Logs a verbose-level message.
 * </div>
 * @param message The message.
 */
+ (void) verboseWithMessage:(NSString*)message;
/*!
 * <div>
 * Logs a verbose-level message.
 * </div>
 * @param message The message.
 * @param ex The exception.
 */
+ (void) verboseWithMessage:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Logs a warn-level message.
 * </div>
 * @param message The message.
 */
+ (void) warnWithMessage:(NSString*)message;
/*!
 * <div>
 * Logs a warn-level message.
 * </div>
 * @param message The message.
 * @param ex The exception.
 */
+ (void) warnWithMessage:(NSString*)message ex:(NSException*)ex;
/*!
 * <div>
 * Writes a line of text to the log.
 * </div>
 * @param text The text to write to the log.
 */
+ (void) writeLineWithText:(NSString*)text;

@end

@interface FMIceLinkLogLevelWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkLogLevel)value;

@end

/*!
 * <div>
 * Class to hold a long value passed by reference.
 * </div>
 */
@interface FMIceLinkLongHolder : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLongHolder class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLongHolder class.
 * </div>
 * @param value The value.
 */
- (instancetype) initWithValue:(long long)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLongHolder class.
 * </div>
 */
+ (FMIceLinkLongHolder*) longHolder;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLongHolder class.
 * </div>
 * @param value The value.
 */
+ (FMIceLinkLongHolder*) longHolder:(long long)value;
/*!
 * <div>
 * Sets the value.
 * </div>
 */
- (void) setValue:(long long)value;
/*!
 * <div>
 * Gets the value.
 * </div>
 */
- (long long) value;

@end

/*!
 * <div>
 * Utility class to assist with Network Time Protocol (NTP) conversions.
 * NTP timestamps are 64-bit values that can span just over 136 years,
 * from 1900-01-01 to 2036-02-08. Compact NTP timestamps are 32-bit
 * values that can span span just over 18 hours.
 * These utility methods guarantee precision to the millisecond.
 * </div>
 */
@interface FMIceLinkNetworkTimeProtocol : NSObject

/*!
 * <div>
 * Gets an instance of FMIceLinkNetworkTimeProtocol that uses
 * 1900-01-01 as the reference date, for use cases where the absolute
 * wall-clock time represented is important.
 * </div>
 */
+ (FMIceLinkNetworkTimeProtocol*) absolute;
/*!
 * <div>
 * Converts a compact NTP timestamp (32 bits) to a date.
 * </div>
 * @param ntp The NTP timestamp to convert.
 * @return The equivalent date.
 */
- (NSDate*) compactNtpToDateTimeWithNtp:(long long)ntp;
/*!
 * <div>
 * Converts a compact NTP timestamp (32 bits) to ticks.
 * </div>
 * @param ntp The NTP timestamp to convert.
 * @return The equivalent ticks.
 */
- (long long) compactNtpToTicksWithNtp:(long long)ntp;
/*!
 * <div>
 * Converts a date to a compact NTP timestamp (32 bits).
 * </div>
 * @param dateTime The date to convert.
 * @return The equivalent NTP timestamp.
 */
- (long long) dateTimeToCompactNtpWithDateTime:(NSDate*)dateTime;
/*!
 * <div>
 * Converts a date to an NTP timestamp (double).
 * </div>
 * @param dateTime The date to convert.
 * @return The equivalent NTP timestamp.
 */
- (double) dateTimeToNtpSecondsWithDateTime:(NSDate*)dateTime;
/*!
 * <div>
 * Converts a date to an NTP timestamp (64 bits).
 * </div>
 * @param dateTime The date to convert.
 * @return The equivalent NTP timestamp.
 */
- (long long) dateTimeToNtpWithDateTime:(NSDate*)dateTime;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkNetworkTimeProtocol class
 * with base set to 1900-01-01.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkNetworkTimeProtocol class.
 * </div>
 * @param baseTicks The base ticks.
 */
- (instancetype) initWithBaseTicks:(long long)baseTicks;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkNetworkTimeProtocol class
 * with base set to 1900-01-01.
 * </div>
 */
+ (FMIceLinkNetworkTimeProtocol*) networkTimeProtocol;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkNetworkTimeProtocol class.
 * </div>
 * @param baseTicks The base ticks.
 */
+ (FMIceLinkNetworkTimeProtocol*) networkTimeProtocolWithBaseTicks:(long long)baseTicks;
/*!
 * <div>
 * Converts an NTP timestamp (double) to a date.
 * </div>
 * @param ntpSeconds The NTP timestamp to convert.
 * @return The equivalent date.
 */
- (NSDate*) ntpSecondsToDateTimeWithNtpSeconds:(double)ntpSeconds;
/*!
 * <div>
 * Converts an NTP timestamp (double) to ticks.
 * </div>
 * @param ntpSeconds The NTP timestamp to convert.
 * @return The equivalent ticks.
 */
- (long long) ntpSecondsToTicksWithNtpSeconds:(double)ntpSeconds;
/*!
 * <div>
 * Converts an NTP timestamp (64 bits) to a date.
 * </div>
 * @param ntp The NTP timestamp to convert.
 * @return The equivalent date.
 */
- (NSDate*) ntpToDateTimeWithNtp:(long long)ntp;
/*!
 * <div>
 * Converts an NTP timestamp (64 bits) to ticks.
 * </div>
 * @param ntp The NTP timestamp to convert.
 * @return The equivalent ticks.
 */
- (long long) ntpToTicksWithNtp:(long long)ntp;
/*!
 * <div>
 * Gets an instance of FMIceLinkNetworkTimeProtocol that uses
 * zero as the reference date, for use cases where the time is relative
 * to other times, and the reference time is not significant.
 * </div>
 */
+ (FMIceLinkNetworkTimeProtocol*) relative;
/*!
 * <div>
 * Converts ticks to a compact NTP timestamp (32 bits).
 * </div>
 * @param ticks The ticks to convert.
 * @return The equivalent NTP timestamp.
 */
- (long long) ticksToCompactNtpWithTicks:(long long)ticks;
/*!
 * <div>
 * Converts ticks to an NTP timestamp (double).
 * </div>
 * @param ticks The ticks to convert.
 * @return The equivalent NTP timestamp.
 */
- (double) ticksToNtpSecondsWithTicks:(long long)ticks;
/*!
 * <div>
 * Converts ticks to an NTP timestamp (64 bits).
 * </div>
 * @param ticks The ticks to convert.
 * @return The equivalent NTP timestamp.
 */
- (long long) ticksToNtpWithTicks:(long long)ticks;
/*!
 * <div>
 * Gets the current UTC time in NTP format.
 * </div>
 */
- (long long) utcNow;

@end

/*!
 * <div>
 * An implementation of a JSON provider that does nothing.
 * </div>
 */
@interface FMIceLinkNullJsonProvider : FMIceLinkJsonProvider

/*!
 * <div>
 * Deserializes a value from a JSON string.
 * </div><typeparam name="T">The type the value to deserialize.</typeparam>
 * @param valueJson The JSON string to deserialize.
 * @return
 * The deserialized value.
 * 
 */
- (id) deserializeWithValueJson:(NSString*)valueJson;
- (instancetype) init;
+ (FMIceLinkNullJsonProvider*) nullJsonProvider;
/*!
 * <div>
 * Serializes a value to a JSON string.
 * </div><typeparam name="T">The type the value to serialize.</typeparam>
 * @param value The value to serialize.
 * @return
 * The serialized JSON string.
 * 
 */
- (NSString*) serialize:(id)value;

@end

/*!
 * <div>
 * An implementation of a logging provider that does nothing.
 * </div>
 */
@interface FMIceLinkNullLogProvider : FMIceLinkLogProvider

/*!
 * <div>
 * Logs a message at the specified log level.
 * </div>
 * @param logEvent The log event details.
 */
- (void) doLogWithLogEvent:(FMIceLinkLogEvent*)logEvent;
- (instancetype) init;
+ (FMIceLinkNullLogProvider*) nullLogProvider;

@end

/*!
 * <div>
 * A data buffer pool.
 * </div>
 */
@interface FMIceLinkDataBufferPool : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataBufferPool class.
 * </div>
 */
+ (FMIceLinkDataBufferPool*) dataBufferPool;
/*!
 * <div>
 * Gets whether the pool is disabled.
 * If disabled, each call to take a buffer
 * will result in a new allocation.
 * </div>
 */
- (bool) disabled;
/*!
 * <div>
 * Gets whether to enable statistics.
 * </div>
 */
- (bool) enableStatistics;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataBufferPool class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets the singleton instance.
 * </div>
 */
+ (FMIceLinkDataBufferPool*) instance;
/*!
 * <div>
 * Gets a value indicating whether DataBuffer pooling is supported on this platform.
 * </div>
 */
+ (bool) isSupported;
/*!
 * <div>
 * Sets whether the pool is disabled.
 * If disabled, each call to take a buffer
 * will result in a new allocation.
 * </div>
 */
- (void) setDisabled:(bool)value;
/*!
 * <div>
 * Sets whether to enable statistics.
 * </div>
 */
- (void) setEnableStatistics:(bool)value;
/*!
 * <div>
 * Gets the pool usage statistics.
 * </div>
 */
- (FMIceLinkPoolStatistics*) statistics;
/*!
 * <div>
 * Takes a buffer from the pool.
 * </div>
 * @param size The number of bytes needed.
 */
- (FMIceLinkDataBuffer*) takeWithSize:(int)size;
/*!
 * <div>
 * Takes a buffer from the pool.
 * </div>
 * @param size The number of bytes needed.
 * @param littleEndian Whether the data buffer should be little-endian.
 */
- (FMIceLinkDataBuffer*) takeWithSize:(int)size littleEndian:(bool)littleEndian;
/*!
 * <div>
 * Takes a buffer from the pool.
 * </div>
 * @param size The number of bytes needed.
 * @param littleEndian Whether the data buffer should be little-endian.
 * @param clearBytes Whether to clear the data buffer.
 */
- (FMIceLinkDataBuffer*) takeWithSize:(int)size littleEndian:(bool)littleEndian clearBytes:(bool)clearBytes;

@end

/*!
 * <div>
 * Manager of the pool. Can take or return databuffers so that they don't get garbage collected.
 * </div>
 */
@interface FMIceLinkPoolStatistics : NSObject

/*!
 * <div>
 * Gets the number of pools in use.
 * </div>
 */
- (int) activePools;
/*!
 * <div>
 * Overriden ToString
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the percentage of pool cache hits.
 * </div>
 */
- (double) hitPercentage;
/*!
 * <div>
 * Gets the percentage of pool cache misses.
 * </div>
 */
- (double) missPercentage;
/*!
 * <div>
 * Gets the amount of buffer padding that is unused for caller's requested buffers.
 * </div>
 */
- (int) paddingWasted;
/*!
 * <div>
 * Gets the total size of all buffers currently in the pool.
 * </div>
 */
- (int) pendingPoolSize;
/*!
 * <div>
 * Gets the total calls to obtain a DataBuffer.
 * </div>
 */
- (int) totalCalls;
/*!
 * <div>
 * Gets the total pools created.
 * </div>
 */
- (int) totalPools;
/*!
 * <div>
 * Gets the total size of all buffers allocated in the pool.
 * </div>
 */
- (int) totalPoolSize;

@end

/*!
 * <div>
 * Promise base properties/methods.
 * </div><typeparam name="T">The type of the result.</typeparam>
 */
@interface FMIceLinkPromiseBase : FMIceLinkFuture

/*!
 * <div>
 * Returns a promise that resolves when all passed in promises resolve.
 * </div>
 * @param promises The promises to check.
 */
+ (FMIceLinkFuture*) allWithPromises:(NSMutableArray*)promises;
/*!
 * <div>
 * Internal DoAll.
 * </div>
 */
- (void) doAllWithPromises:(NSMutableArray*)promises counter:(FMIceLinkAtomicInteger*)counter;
/*!
 * <div>
 * Gets the identifier of this promise.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPromiseBase`1 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Processes the specified promise.
 * </div>
 * @param promise The promise.
 * @param resolve The resolve.
 * @param reject The reject.
 */
- (void) processWithPromise:(NSObject<FMIceLinkIPromise>*)promise resolve:(FMIceLinkAction1*)resolve reject:(FMIceLinkAction1*)reject;
/*!
 * <div>
 * Processes the specified promise.
 * </div>
 * @param promise The promise.
 * @param resolveBlock The resolve.
 * @param rejectBlock The reject.
 */
- (void) processWithPromise:(NSObject<FMIceLinkIPromise>*)promise resolveBlock:(void(^)(id))resolveBlock rejectBlock:(void(^)(NSException*))rejectBlock;
/*!
 * <div>
 * Processes the specified promise.
 * </div>
 * @inlineparam promise The promise.
 * @inlineparam resolveBlock The resolve.
 * @inlineparam rejectBlock The reject.
 */
- (void (^)(NSObject<FMIceLinkIPromise>*, void(^)(id), void(^)(NSException*))) processWithPromiseAndResolveBlockAndRejectBlock;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPromiseBase`1 class.
 * </div>
 */
+ (FMIceLinkPromiseBase*) promiseBase;
/*!
 * <div>
 * Rejects the promise asynchronously.
 * </div>
 * @param exception The exception.
 * @return
 */
- (FMIceLinkFuture*) rejectAsyncWithException:(NSException*)exception;
/*!
 * <div>
 * Creates a promise and rejects it immediately.
 * </div>
 * @param ex The exception.
 */
+ (FMIceLinkFuture*) rejectNowWithEx:(NSException*)ex;
/*!
 * <div>
 * Rejects the promise.
 * </div>
 * @param exception The exception.
 * @return
 */
- (bool) rejectWithException:(NSException*)exception;
/*!
 * <div>
 * Resolves the promise asynchronously.
 * </div>
 * @param result The result.
 * @return
 */
- (FMIceLinkFuture*) resolveAsyncWithResult:(id)result;
/*!
 * <div>
 * Creates a promise and resolves it immediately
 * using a null result value.
 * </div>
 */
+ (FMIceLinkFuture*) resolveNow;
/*!
 * <div>
 * Creates a promise and resolves it immediately
 * using the given result value.
 * </div>
 * @param result The result.
 */
+ (FMIceLinkFuture*) resolveNowWithResult:(id)result;
/*!
 * <div>
 * Resolves the promise.
 * </div>
 * @param result The result.
 * @return
 */
- (bool) resolveWithResult:(id)result;
/*!
 * <div>
 * Creates a promise and resolves it using the result from a
 * callback function, or rejects it if an exception is thrown.
 * </div>
 * @param callback The callback function.
 */
+ (FMIceLinkFuture*) wrapPromiseWithCallback:(FMIceLinkFunction0*)callback;
/*!
 * <div>
 * Creates a promise and resolves it using the result from a
 * callback function, or rejects it if an exception is thrown.
 * </div>
 * @inlineparam callbackBlock The callback function.
 */
+ (FMIceLinkFuture* (^)(FMIceLinkFuture*(^)(void))) wrapPromiseWithCallbackBlock;
/*!
 * <div>
 * Creates a promise and resolves it using the result from a
 * callback function, or rejects it if an exception is thrown.
 * </div>
 * @param callbackBlock The callback function.
 */
+ (FMIceLinkFuture*) wrapPromiseWithCallbackBlock:(FMIceLinkFuture*(^)(void))callbackBlock;

@end

/*!
 * <div>
 * A promise.
 * </div><typeparam name="T">The type of the result.</typeparam>
 */
@interface FMIceLinkPromise : FMIceLinkPromiseBase

/*!
 * <div>
 * Appends a handler to be executed when the promise is rejected.
 * </div>
 * @param rejectAction The reject action.
 */
- (FMIceLinkFuture*) failWithRejectAction:(FMIceLinkAction1*)rejectAction;
/*!
 * <div>
 * Appends a handler to be executed when the promise is rejected.
 * </div>
 * @inlineparam rejectActionBlock The reject action.
 */
- (FMIceLinkFuture* (^)(void(^)(NSException*))) failWithRejectActionBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is rejected.
 * </div>
 * @param rejectActionBlock The reject action.
 */
- (FMIceLinkFuture*) failWithRejectActionBlock:(void(^)(NSException*))rejectActionBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is rejected.
 * </div>
 * @param rejectFunction The reject function.
 */
- (FMIceLinkFuture*) failWithRejectFunction:(FMIceLinkFunction1*)rejectFunction;
/*!
 * <div>
 * Appends a handler to be executed when the promise is rejected.
 * </div>
 * @inlineparam rejectFunctionBlock The reject function.
 */
- (FMIceLinkFuture* (^)(FMIceLinkFuture*(^)(NSException*))) failWithRejectFunctionBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is rejected.
 * </div>
 * @param rejectFunctionBlock The reject function.
 */
- (FMIceLinkFuture*) failWithRejectFunctionBlock:(FMIceLinkFuture*(^)(NSException*))rejectFunctionBlock;
/*!
 * <div>
 * Creates a new promise.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Creates a promise with a resolve callback and a reject callback.
 * </div>
 */
- (instancetype) initWithCallback:(FMIceLinkAction2*)callback;
/*!
 * <div>
 * Creates a promise with a resolve callback and a reject callback.
 * </div>
 */
- (instancetype) initWithCallbackBlock:(void(^)(FMIceLinkAction1*, FMIceLinkAction1*))callbackBlock;
/*!
 * <div>
 * Creates a new promise.
 * </div>
 */
+ (FMIceLinkPromise*) promise;
/*!
 * <div>
 * Creates a promise with a resolve callback and a reject callback.
 * </div>
 */
+ (FMIceLinkPromise*) promiseWithCallback:(FMIceLinkAction2*)callback;
/*!
 * <div>
 * Creates a promise with a resolve callback and a reject callback.
 * </div>
 */
+ (FMIceLinkPromise*) promiseWithCallbackBlock:(void(^)(FMIceLinkAction1*, FMIceLinkAction1*))callbackBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is resolved.
 * </div>
 * @param resolveAction The resolve action.
 */
- (FMIceLinkFuture*) thenWithResolveAction:(FMIceLinkAction1*)resolveAction;
/*!
 * <div>
 * Appends handlers to be executed when the promise is resolved or rejected.
 * </div>
 * @param resolveAction The resolve action.
 * @param rejectAction The reject action.
 */
- (FMIceLinkFuture*) thenWithResolveAction:(FMIceLinkAction1*)resolveAction rejectAction:(FMIceLinkAction1*)rejectAction;
/*!
 * <div>
 * Appends a handler to be executed when the promise is resolved.
 * </div>
 * @inlineparam resolveActionBlock The resolve action.
 */
- (FMIceLinkFuture* (^)(void(^)(id))) thenWithResolveActionBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is resolved.
 * </div>
 * @param resolveActionBlock The resolve action.
 */
- (FMIceLinkFuture*) thenWithResolveActionBlock:(void(^)(id))resolveActionBlock;
/*!
 * <div>
 * Appends handlers to be executed when the promise is resolved or rejected.
 * </div>
 * @param resolveActionBlock The resolve action.
 * @param rejectActionBlock The reject action.
 */
- (FMIceLinkFuture*) thenWithResolveActionBlock:(void(^)(id))resolveActionBlock rejectActionBlock:(void(^)(NSException*))rejectActionBlock;
/*!
 * <div>
 * Appends handlers to be executed when the promise is resolved or rejected.
 * </div>
 * @inlineparam resolveActionBlock The resolve action.
 * @inlineparam rejectActionBlock The reject action.
 */
- (FMIceLinkFuture* (^)(void(^)(id), void(^)(NSException*))) thenWithResolveActionBlockAndRejectActionBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is resolved.
 * </div>
 * @param resolveFunction The resolve function.
 */
- (FMIceLinkFuture*) thenWithResolveFunction:(FMIceLinkFunction1*)resolveFunction;
/*!
 * <div>
 * Appends handlers to be executed when the promise is resolved or rejected.
 * </div>
 * @param resolveFunction The resolve function.
 * @param rejectAction The reject action.
 */
- (FMIceLinkFuture*) thenWithResolveFunction:(FMIceLinkFunction1*)resolveFunction rejectAction:(FMIceLinkAction1*)rejectAction;
/*!
 * <div>
 * Appends a handler to be executed when the promise is resolved.
 * </div>
 * @inlineparam resolveFunctionBlock The resolve function.
 */
- (FMIceLinkFuture* (^)(FMIceLinkFuture*(^)(id))) thenWithResolveFunctionBlock;
/*!
 * <div>
 * Appends a handler to be executed when the promise is resolved.
 * </div>
 * @param resolveFunctionBlock The resolve function.
 */
- (FMIceLinkFuture*) thenWithResolveFunctionBlock:(FMIceLinkFuture*(^)(id))resolveFunctionBlock;
/*!
 * <div>
 * Appends handlers to be executed when the promise is resolved or rejected.
 * </div>
 * @param resolveFunctionBlock The resolve function.
 * @param rejectActionBlock The reject action.
 */
- (FMIceLinkFuture*) thenWithResolveFunctionBlock:(FMIceLinkFuture*(^)(id))resolveFunctionBlock rejectActionBlock:(void(^)(NSException*))rejectActionBlock;
/*!
 * <div>
 * Appends handlers to be executed when the promise is resolved or rejected.
 * </div>
 * @inlineparam resolveFunctionBlock The resolve function.
 * @inlineparam rejectActionBlock The reject action.
 */
- (FMIceLinkFuture* (^)(FMIceLinkFuture*(^)(id), void(^)(NSException*))) thenWithResolveFunctionBlockAndRejectActionBlock;
/*!
 * <div>
 * Creates a promise and resolves it after invoking a callback
 * action, or rejects it if an exception is thrown.
 * The callback is always dispatched to the background.
 * </div>
 * @param callbackAction The callback action.
 */
+ (FMIceLinkFuture*) wrapAsyncWithCallbackAction:(FMIceLinkAction0*)callbackAction;
/*!
 * <div>
 * Creates a promise and resolves it using the result from a
 * callback function, or rejects it if an exception is thrown.
 * The callback is always dispatched to the background.
 * </div>
 * @param callbackFunction The callback function.
 */
+ (FMIceLinkFuture*) wrapAsyncWithCallbackFunction:(FMIceLinkFunction0*)callbackFunction;
/*!
 * <div>
 * Creates a promise and resolves it using the result from a
 * callback function, or rejects it if an exception is thrown.
 * The callback is always dispatched to the background.
 * </div>
 * @inlineparam callbackFunctionBlock The callback function.
 */
+ (FMIceLinkFuture* (^)(id(^)(void))) wrapAsyncWithCallbackFunctionBlock;
/*!
 * <div>
 * Creates a promise and resolves it using the result from a
 * callback function, or rejects it if an exception is thrown.
 * The callback is always dispatched to the background.
 * </div>
 * @param callbackFunctionBlock The callback function.
 */
+ (FMIceLinkFuture*) wrapAsyncWithCallbackFunctionBlock:(id(^)(void))callbackFunctionBlock;
/*!
 * <div>
 * Creates a promise and resolves it after invoking a callback
 * action, or rejects it if an exception is thrown.
 * </div>
 * @param callbackAction The callback action.
 */
+ (FMIceLinkFuture*) wrapWithCallbackAction:(FMIceLinkAction0*)callbackAction;
/*!
 * <div>
 * Creates a promise and resolves it using the result from a
 * callback function, or rejects it if an exception is thrown.
 * </div>
 * @param callbackFunction The callback function.
 */
+ (FMIceLinkFuture*) wrapWithCallbackFunction:(FMIceLinkFunction0*)callbackFunction;
/*!
 * <div>
 * Creates a promise and resolves it using the result from a
 * callback function, or rejects it if an exception is thrown.
 * </div>
 * @inlineparam callbackFunctionBlock The callback function.
 */
+ (FMIceLinkFuture* (^)(id(^)(void))) wrapWithCallbackFunctionBlock;
/*!
 * <div>
 * Creates a promise and resolves it using the result from a
 * callback function, or rejects it if an exception is thrown.
 * </div>
 * @param callbackFunctionBlock The callback function.
 */
+ (FMIceLinkFuture*) wrapWithCallbackFunctionBlock:(id(^)(void))callbackFunctionBlock;

@end

@interface FMIceLinkFutureStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkFutureState)value;

@end

/*!
 * <div>
 * An RSA key.
 * </div>
 */
@interface FMIceLinkRsaKey : FMIceLinkAsymmetricKey

/*!
 * <div>
 * Gets the private value inverse-Q.
 * </div>
 */
- (NSMutableData*) coefficient;
/*!
 * <div>
 * Gets the private value DP.
 * </div>
 */
- (NSMutableData*) exponent1;
/*!
 * <div>
 * Gets the private value DQ.
 * </div>
 */
- (NSMutableData*) exponent2;
/*!
 * <div>
 * Serializes this key to binary.
 * </div>
 */
- (NSMutableData*) getBytes;
/*!
 * <div>
 * Returns <code>true</code> if the key contains
 * private information.
 * </div>
 */
- (bool) hasPrivate;
/*!
 * <div>
 * Returns <code>true</code> if the key contains
 * public information.
 * </div>
 */
- (bool) hasPublic;
- (instancetype) init;
/*!
 * <div>
 * Gets the public value N.
 * </div>
 */
- (NSMutableData*) modulus;
/*!
 * <div>
 * Deserializes a key from binary.
 * </div>
 * @param buffer The buffer.
 * @return
 */
+ (FMIceLinkRsaKey*) parseBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Deserializes a key from binary.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkRsaKey*) parseBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the private value P.
 * </div>
 */
- (NSMutableData*) prime1;
/*!
 * <div>
 * Gets the private value Q.
 * </div>
 */
- (NSMutableData*) prime2;
/*!
 * <div>
 * Gets the private value D.
 * </div>
 */
- (NSMutableData*) privateExponent;
/*!
 * <div>
 * Gets the public value E.
 * </div>
 */
- (NSMutableData*) publicExponent;
+ (FMIceLinkRsaKey*) rsaKey;
/*!
 * <div>
 * Sets the private value inverse-Q.
 * </div>
 */
- (void) setCoefficient:(NSMutableData*)value;
/*!
 * <div>
 * Sets the private value DP.
 * </div>
 */
- (void) setExponent1:(NSMutableData*)value;
/*!
 * <div>
 * Sets the private value DQ.
 * </div>
 */
- (void) setExponent2:(NSMutableData*)value;
/*!
 * <div>
 * Sets the public value N.
 * </div>
 */
- (void) setModulus:(NSMutableData*)value;
/*!
 * <div>
 * Sets the private value P.
 * </div>
 */
- (void) setPrime1:(NSMutableData*)value;
/*!
 * <div>
 * Sets the private value Q.
 * </div>
 */
- (void) setPrime2:(NSMutableData*)value;
/*!
 * <div>
 * Sets the private value D.
 * </div>
 */
- (void) setPrivateExponent:(NSMutableData*)value;
/*!
 * <div>
 * Sets the public value E.
 * </div>
 */
- (void) setPublicExponent:(NSMutableData*)value;
/*!
 * <div>
 * Gets the size of the key.
 * </div>
 */
- (int) size;
/*!
 * <div>
 * Gets the key type.
 * </div>
 */
- (FMIceLinkAsymmetricKeyType) type;

@end

/*!
 * <div>
 * Class to hold a short value passed by reference.
 * </div>
 */
@interface FMIceLinkShortHolder : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkShortHolder class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkShortHolder class.
 * </div>
 * @param value The value.
 */
- (instancetype) initWithValue:(short)value;
/*!
 * <div>
 * Sets the value.
 * </div>
 */
- (void) setValue:(short)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkShortHolder class.
 * </div>
 */
+ (FMIceLinkShortHolder*) shortHolder;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkShortHolder class.
 * </div>
 * @param value The value.
 */
+ (FMIceLinkShortHolder*) shortHolder:(short)value;
/*!
 * <div>
 * Gets the value.
 * </div>
 */
- (short) value;

@end

/*!
 * <div>
 * Encapsulates useful sorting utilities.
 * </div>
 */
@interface FMIceLinkSort : NSObject

- (instancetype) init;
/*!
 * <div>
 * Sorts an array using the in-place quick-sort algorithm.
 * </div><typeparam name="T">The type of elements in the array.</typeparam>
 * @param array The array of elements.
 * @param comparer The function used to compare elements in the array -
 * should return less than 0 if item 1 is less than item 2 (item 1 should appear
 * before item 2), 0 if the items are equal, or more than 0 is item 1 is greater
 * than item 2 (item 1 should appear after item 2).
 */
+ (void) quickSortWithArray:(NSMutableArray*)array comparer:(FMIceLinkFunction2*)comparer;
/*!
 * <div>
 * Sorts an array using the in-place quick-sort algorithm.
 * </div><typeparam name="T">The type of elements in the array.</typeparam>
 * @param array The array of elements.
 * @param comparerBlock The function used to compare elements in the array -
 * should return less than 0 if item 1 is less than item 2 (item 1 should appear
 * before item 2), 0 if the items are equal, or more than 0 is item 1 is greater
 * than item 2 (item 1 should appear after item 2).
 */
+ (void) quickSortWithArray:(NSMutableArray*)array comparerBlock:(FMIceLinkCompareResult(^)(id, id))comparerBlock;
/*!
 * <div>
 * Sorts an array using the in-place quick-sort algorithm.
 * </div><typeparam name="T">The type of elements in the array.</typeparam>
 * @inlineparam array The array of elements.
 * @inlineparam comparerBlock The function used to compare elements in the array -
 * should return less than 0 if item 1 is less than item 2 (item 1 should appear
 * before item 2), 0 if the items are equal, or more than 0 is item 1 is greater
 * than item 2 (item 1 should appear after item 2).
 */
+ (void (^)(NSMutableArray*, FMIceLinkCompareResult(^)(id, id))) quickSortWithArrayAndComparerBlock;
+ (FMIceLinkSort*) sort;

@end

/*!
 * <div>
 * Utility class for splitting strings.
 * </div>
 */
@interface FMIceLinkSplitter : NSObject

- (instancetype) init;
+ (FMIceLinkSplitter*) splitter;
/*!
 * <div>
 * Splits a string using a given delimiter.
 * </div>
 * @param str The string.
 * @param delimiter The delimiter.
 */
+ (NSMutableArray*) splitWithStr:(NSString*)str delimiter:(NSString*)delimiter;

@end

/*!
 * <div>
 * A stream socket.
 * </div>
 */
@interface FMIceLinkStreamSocket : FMIceLinkManagedSocket

/*!
 * <div>
 * Accepts a new socket asynchronously.
 * </div>
 * @param onSuccess The callback to invoke on success.
 * @param onFailure The callback to invoke on failure.
 * @param onSocket The callback to invoke when a socket is ready.
 */
- (void) acceptAsyncWithOnSuccess:(FMIceLinkAction0*)onSuccess onFailure:(FMIceLinkAction1*)onFailure onSocket:(FMIceLinkAction1*)onSocket;
/*!
 * <div>
 * Accepts a new socket asynchronously.
 * </div>
 * @param onSuccessBlock The callback to invoke on success.
 * @param onFailureBlock The callback to invoke on failure.
 * @param onSocketBlock The callback to invoke when a socket is ready.
 */
- (void) acceptAsyncWithOnSuccessBlock:(void(^)(void))onSuccessBlock onFailureBlock:(void(^)(NSException*))onFailureBlock onSocketBlock:(void(^)(FMIceLinkStreamSocket*))onSocketBlock;
/*!
 * <div>
 * Accepts a new socket asynchronously.
 * </div>
 * @inlineparam onSuccessBlock The callback to invoke on success.
 * @inlineparam onFailureBlock The callback to invoke on failure.
 * @inlineparam onSocketBlock The callback to invoke when a socket is ready.
 */
- (void (^)(void(^)(void), void(^)(NSException*), void(^)(FMIceLinkStreamSocket*))) acceptAsyncWithOnSuccessBlockAndOnFailureBlockAndOnSocketBlock;
/*!
 * <div>
 * Connects the socket asynchronously.
 * </div>
 * @param hostname The remote hostname.
 * @param ipAddress The remote IP address.
 * @param port The remote port.
 * @param timeout The timeout (in ms).
 * @param onSuccess The callback to invoke on success.
 * @param onFailure The callback to invoke on failure.
 */
- (void) connectAsyncWithHostname:(NSString*)hostname ipAddress:(NSString*)ipAddress port:(int)port timeout:(int)timeout onSuccess:(FMIceLinkAction0*)onSuccess onFailure:(FMIceLinkAction2*)onFailure;
/*!
 * <div>
 * Connects the socket asynchronously.
 * </div>
 * @param hostname The remote hostname.
 * @param ipAddress The remote IP address.
 * @param port The remote port.
 * @param timeout The timeout (in ms).
 * @param onSuccessBlock The callback to invoke on success.
 * @param onFailureBlock The callback to invoke on failure.
 */
- (void) connectAsyncWithHostname:(NSString*)hostname ipAddress:(NSString*)ipAddress port:(int)port timeout:(int)timeout onSuccessBlock:(void(^)(void))onSuccessBlock onFailureBlock:(void(^)(NSException*, bool))onFailureBlock;
/*!
 * <div>
 * Connects the socket asynchronously.
 * </div>
 * @inlineparam hostname The remote hostname.
 * @inlineparam ipAddress The remote IP address.
 * @inlineparam port The remote port.
 * @inlineparam timeout The timeout (in ms).
 * @inlineparam onSuccessBlock The callback to invoke on success.
 * @inlineparam onFailureBlock The callback to invoke on failure.
 */
- (void (^)(NSString*, NSString*, int, int, void(^)(void), void(^)(NSException*, bool))) connectAsyncWithHostnameAndIPAddressAndPortAndTimeoutAndOnSuccessBlockAndOnFailureBlock;
- (instancetype) init;
/*!
 * <div>
 * Gets a callback invoked on failed read from TCP stream.
 * </div>
 */
- (FMIceLinkAction2*) onReceiveFailure;
/*!
 * <div>
 * Gets a callback invoked on successful read from TCP stream.
 * </div>
 */
- (FMIceLinkAction1*) onReceiveSuccess;
/*!
 * <div>
 * Invokes the accept failure callback.
 * </div>
 * @param callback The callback.
 * @param exception The exception.
 */
- (void) raiseAcceptFailureWithCallback:(FMIceLinkAction1*)callback exception:(NSException*)exception;
/*!
 * <div>
 * Invokes the accept failure callback.
 * </div>
 * @param callbackBlock The callback.
 * @param exception The exception.
 */
- (void) raiseAcceptFailureWithCallbackBlock:(void(^)(NSException*))callbackBlock exception:(NSException*)exception;
/*!
 * <div>
 * Invokes the accept failure callback.
 * </div>
 * @inlineparam callbackBlock The callback.
 * @inlineparam exception The exception.
 */
- (void (^)(void(^)(NSException*), NSException*)) raiseAcceptFailureWithCallbackBlockAndException;
/*!
 * <div>
 * Invokes the accept success callback.
 * </div>
 * @param callback The callback.
 * @param socket The socket.
 */
- (void) raiseAcceptSocketWithCallback:(FMIceLinkAction1*)callback socket:(FMIceLinkStreamSocket*)socket;
/*!
 * <div>
 * Invokes the accept success callback.
 * </div>
 * @param callbackBlock The callback.
 * @param socket The socket.
 */
- (void) raiseAcceptSocketWithCallbackBlock:(void(^)(FMIceLinkStreamSocket*))callbackBlock socket:(FMIceLinkStreamSocket*)socket;
/*!
 * <div>
 * Invokes the accept success callback.
 * </div>
 * @inlineparam callbackBlock The callback.
 * @inlineparam socket The socket.
 */
- (void (^)(void(^)(FMIceLinkStreamSocket*), FMIceLinkStreamSocket*)) raiseAcceptSocketWithCallbackBlockAndSocket;
/*!
 * <div>
 * Invokes the accept success callback.
 * </div>
 * @param callback The callback.
 */
- (void) raiseAcceptSuccessWithCallback:(FMIceLinkAction0*)callback;
/*!
 * <div>
 * Invokes the connect failure callback.
 * </div>
 * @param callback The callback.
 * @param exception The exception.
 * @param timedOut if set to true [timed out].
 */
- (void) raiseConnectFailureWithCallback:(FMIceLinkAction2*)callback exception:(NSException*)exception timedOut:(bool)timedOut;
/*!
 * <div>
 * Invokes the connect failure callback.
 * </div>
 * @param callbackBlock The callback.
 * @param exception The exception.
 * @param timedOut if set to true [timed out].
 */
- (void) raiseConnectFailureWithCallbackBlock:(void(^)(NSException*, bool))callbackBlock exception:(NSException*)exception timedOut:(bool)timedOut;
/*!
 * <div>
 * Invokes the connect failure callback.
 * </div>
 * @inlineparam callbackBlock The callback.
 * @inlineparam exception The exception.
 * @inlineparam timedOut if set to true [timed out].
 */
- (void (^)(void(^)(NSException*, bool), NSException*, bool)) raiseConnectFailureWithCallbackBlockAndExceptionAndTimedOut;
/*!
 * <div>
 * Invokes the connect success callback.
 * </div>
 * @param callback The callback.
 */
- (void) raiseConnectSuccessWithCallback:(FMIceLinkAction0*)callback;
/*!
 * <div>
 * Invokes the receive failure callback.
 * </div>
 * @param callback The callback.
 * @param exception The exception.
 * @param timedOut if set to true [timed out].
 */
- (void) raiseReceiveFailureWithCallback:(FMIceLinkAction2*)callback exception:(NSException*)exception timedOut:(bool)timedOut;
/*!
 * <div>
 * Invokes the receive failure callback.
 * </div>
 * @param callbackBlock The callback.
 * @param exception The exception.
 * @param timedOut if set to true [timed out].
 */
- (void) raiseReceiveFailureWithCallbackBlock:(void(^)(NSException*, bool))callbackBlock exception:(NSException*)exception timedOut:(bool)timedOut;
/*!
 * <div>
 * Invokes the receive failure callback.
 * </div>
 * @inlineparam callbackBlock The callback.
 * @inlineparam exception The exception.
 * @inlineparam timedOut if set to true [timed out].
 */
- (void (^)(void(^)(NSException*, bool), NSException*, bool)) raiseReceiveFailureWithCallbackBlockAndExceptionAndTimedOut;
/*!
 * <div>
 * Invokes the receive success callback.
 * </div>
 * @param callback The callback.
 * @param buffer The buffer.
 */
- (void) raiseReceiveSuccessWithCallback:(FMIceLinkAction1*)callback buffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Invokes the receive success callback.
 * </div>
 * @param callbackBlock The callback.
 * @param buffer The buffer.
 */
- (void) raiseReceiveSuccessWithCallbackBlock:(void(^)(FMIceLinkDataBuffer*))callbackBlock buffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Invokes the receive success callback.
 * </div>
 * @inlineparam callbackBlock The callback.
 * @inlineparam buffer The buffer.
 */
- (void (^)(void(^)(FMIceLinkDataBuffer*), FMIceLinkDataBuffer*)) raiseReceiveSuccessWithCallbackBlockAndBuffer;
/*!
 * <div>
 * Invokes the send failure callback.
 * </div>
 * @param callback The callback.
 * @param exception The exception.
 * @param timedOut if set to true [timed out].
 */
- (void) raiseSendFailureWithCallback:(FMIceLinkAction2*)callback exception:(NSException*)exception timedOut:(bool)timedOut;
/*!
 * <div>
 * Invokes the send failure callback.
 * </div>
 * @param callbackBlock The callback.
 * @param exception The exception.
 * @param timedOut if set to true [timed out].
 */
- (void) raiseSendFailureWithCallbackBlock:(void(^)(NSException*, bool))callbackBlock exception:(NSException*)exception timedOut:(bool)timedOut;
/*!
 * <div>
 * Invokes the send failure callback.
 * </div>
 * @inlineparam callbackBlock The callback.
 * @inlineparam exception The exception.
 * @inlineparam timedOut if set to true [timed out].
 */
- (void (^)(void(^)(NSException*, bool), NSException*, bool)) raiseSendFailureWithCallbackBlockAndExceptionAndTimedOut;
/*!
 * <div>
 * Invokes the send success callback.
 * </div>
 * @param callback The callback.
 */
- (void) raiseSendSuccessWithCallback:(FMIceLinkAction0*)callback;
/*!
 * <div>
 * Receives data asynchronously.
 * </div>
 * @param timeout The timeout (in ms).
 */
- (void) receiveAsyncWithTimeout:(int)timeout;
/*!
 * <div>
 * Gets the remote hostname.
 * </div>
 */
- (NSString*) remoteHostname;
/*!
 * <div>
 * Gets the remote IP address.
 * </div>
 */
- (NSString*) remoteIPAddress;
/*!
 * <div>
 * Gets the remote port.
 * </div>
 */
- (int) remotePort;
/*!
 * <div>
 * Gets a value indicating whether the socket is secure.
 * </div>
 */
- (bool) secure;
/*!
 * <div>
 * Sends data asynchronously.
 * </div>
 * @param buffer The buffer.
 * @param timeout The timeout (in ms).
 * @param onSuccess The callback to invoke on success.
 * @param onFailure The callback to invoke on failure.
 */
- (void) sendAsyncWithBuffer:(FMIceLinkDataBuffer*)buffer timeout:(int)timeout onSuccess:(FMIceLinkAction0*)onSuccess onFailure:(FMIceLinkAction2*)onFailure;
/*!
 * <div>
 * Sends data asynchronously.
 * </div>
 * @param buffer The buffer.
 * @param timeout The timeout (in ms).
 * @param onSuccessBlock The callback to invoke on success.
 * @param onFailureBlock The callback to invoke on failure.
 */
- (void) sendAsyncWithBuffer:(FMIceLinkDataBuffer*)buffer timeout:(int)timeout onSuccessBlock:(void(^)(void))onSuccessBlock onFailureBlock:(void(^)(NSException*, bool))onFailureBlock;
/*!
 * <div>
 * Sends data asynchronously.
 * </div>
 * @inlineparam buffer The buffer.
 * @inlineparam timeout The timeout (in ms).
 * @inlineparam onSuccessBlock The callback to invoke on success.
 * @inlineparam onFailureBlock The callback to invoke on failure.
 */
- (void (^)(FMIceLinkDataBuffer*, int, void(^)(void), void(^)(NSException*, bool))) sendAsyncWithBufferAndTimeoutAndOnSuccessBlockAndOnFailureBlock;
/*!
 * <div>
 * Sends data synchronously.
 * </div>
 * @param buffer The buffer.
 */
- (bool) sendWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Gets a value indicating whether the socket can accept incoming connections.
 * </div>
 */
- (bool) server;
/*!
 * <div>
 * Sets a callback invoked on failed read from TCP stream.
 * </div>
 */
- (void) setOnReceiveFailure:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Sets a callback invoked on failed read from TCP stream.
 * </div>
 */
- (void (^)(void(^)(NSException*, bool))) setOnReceiveFailureBlock;
/*!
 * <div>
 * Sets a callback invoked on failed read from TCP stream.
 * </div>
 */
- (void) setOnReceiveFailureBlock:(void(^)(NSException*, bool))valueBlock;
/*!
 * <div>
 * Sets a callback invoked on successful read from TCP stream.
 * </div>
 */
- (void) setOnReceiveSuccess:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets a callback invoked on successful read from TCP stream.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDataBuffer*))) setOnReceiveSuccessBlock;
/*!
 * <div>
 * Sets a callback invoked on successful read from TCP stream.
 * </div>
 */
- (void) setOnReceiveSuccessBlock:(void(^)(FMIceLinkDataBuffer*))valueBlock;
+ (FMIceLinkStreamSocket*) streamSocket;

@end

/*!
 * <div>
 * Arguments for a stream socket create event.
 * </div>
 */
@interface FMIceLinkStreamSocketCreateArgs : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStreamSocketCreateArgs class.
 * </div>
 * @param server Whether the socket should accept incoming connections.
 * @param ipv6 Whether the socket should support IPv6.
 * @param secure Whether the socket should be secured.
 */
- (instancetype) initWithServer:(bool)server ipv6:(bool)ipv6 secure:(bool)secure;
/*!
 * <div>
 * Gets a value indicating whether the socket should support IPv6.
 * </div>
 */
- (bool) ipv6;
/*!
 * <div>
 * Gets a value indicating whether the socket should be secured.
 * </div>
 */
- (bool) secure;
/*!
 * <div>
 * Gets a value indicating whether the socket should accept incoming connections.
 * </div>
 */
- (bool) server;
/*!
 * <div>
 * Sets the stream index.
 * </div>
 */
- (void) setStreamIndex:(int)value;
/*!
 * <div>
 * Gets the stream index.
 * </div>
 */
- (int) streamIndex;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStreamSocketCreateArgs class.
 * </div>
 * @param server Whether the socket should accept incoming connections.
 * @param ipv6 Whether the socket should support IPv6.
 * @param secure Whether the socket should be secured.
 */
+ (FMIceLinkStreamSocketCreateArgs*) streamSocketCreateArgsWithServer:(bool)server ipv6:(bool)ipv6 secure:(bool)secure;

@end

/*!
 * <div>
 * Contains methods for string manipulation.
 * </div>
 */
@interface FMIceLinkStringAssistant : NSObject

- (instancetype) init;
/*!
 * <div />
 * @param s The s.
 */
+ (bool) isNullOrWhiteSpaceWithS:(NSString*)s;
+ (FMIceLinkStringAssistant*) stringAssistant;
/*!
 * <div>
 * Creates a subarray from an existing array.
 * </div>
 * @param array The source array.
 * @param offset The offset into the source array.
 * @return The subarray.
 */
+ (NSMutableArray*) subArray:(NSMutableArray*)array offset:(int)offset;
/*!
 * <div>
 * Creates a subarray from an existing array.
 * </div>
 * @param array The source array.
 * @param offset The offset into the source array.
 * @param count The number of elements to copy into the subarray.
 * @return The subarray.
 */
+ (NSMutableArray*) subArray:(NSMutableArray*)array offset:(int)offset count:(int)count;

@end

/*!
 * <div>
 * Simple log provider that writes to a local string builder.
 * </div>
 */
@interface FMIceLinkTextLogProvider : FMIceLinkLogProvider

/*!
 * <div>
 * Gets a callback to invoke
 * whenever text is written to the log.
 * </div>
 */
- (FMIceLinkAction1*) callback;
/*!
 * <div>
 * Clears all text from the log
 * and returns the former contents.
 * </div>
 */
- (NSString*) clear;
/*!
 * <div>
 * Logs a message at the specified log level.
 * </div>
 * @param logEvent The log event details.
 */
- (void) doLogWithLogEvent:(FMIceLinkLogEvent*)logEvent;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTextLogProvider class using FMIceLinkLogLevelInfo.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTextLogProvider class.
 * </div>
 * @param level The log level.
 */
- (instancetype) initWithLevel:(FMIceLinkLogLevel)level;
/*!
 * <div>
 * Sets a callback to invoke
 * whenever text is written to the log.
 * </div>
 */
- (void) setCallback:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets a callback to invoke
 * whenever text is written to the log.
 * </div>
 */
- (void (^)(void(^)(NSString*))) setCallbackBlock;
/*!
 * <div>
 * Sets a callback to invoke
 * whenever text is written to the log.
 * </div>
 */
- (void) setCallbackBlock:(void(^)(NSString*))valueBlock;
/*!
 * <div>
 * Gets the logged text.
 * </div>
 */
- (NSString*) text;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTextLogProvider class using FMIceLinkLogLevelInfo.
 * </div>
 */
+ (FMIceLinkTextLogProvider*) textLogProvider;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTextLogProvider class.
 * </div>
 * @param level The log level.
 */
+ (FMIceLinkTextLogProvider*) textLogProviderWithLevel:(FMIceLinkLogLevel)level;

@end

/*!
 * <div>
 * An IP address and port.
 * </div>
 */
@interface FMIceLinkTransportAddress : NSObject

/*!
 * <div>
 * Gets the address type.
 * </div>
 */
- (FMIceLinkAddressType) addressType;
/*!
 * <div>
 * Compares two addresses to see if they are on
 * the same subnet.
 * </div>
 * @param address1 The first address.
 * @param address2 The second address.
 * @param mask The subnet mask.
 */
+ (bool) checkMaskWithAddress1:(NSString*)address1 address2:(NSString*)address2 mask:(NSString*)mask;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Returns a hash code for this instance.
 * </div>
 * @return
 * A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
 * 
 */
- (int) hash;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTransportAddress class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 */
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port;
/*!
 * <div>
 * Gets the IP address.
 * </div>
 */
- (NSString*) ipAddress;
/*!
 * <div>
 * Determines whether the specified IP address is all zeros
 * and represents "any" IP address.
 * </div>
 * @param ipAddress The IP address.
 */
+ (bool) isAnyWithIPAddress:(NSString*)ipAddress;
/*!
 * <div>
 * Determines whether the specified object is equal to this instance.
 * </div>
 * @param obj The object to compare with this instance.
 */
- (bool) isEqualWithObj:(id)obj;
/*!
 * <div>
 * Determines whether a string is a valid IPv4 or IPv6 address
 * </div>
 * @param address The address.
 */
+ (bool) isIPAddress:(NSString*)address;
/*!
 * <div>
 * Determines whether the specified IP address is IPv4.
 * </div>
 * @param ipAddress The IP address.
 * @return true if the specified IP address is IPv4; otherwise, false.
 * 
 */
+ (bool) isIPv4WithIPAddress:(NSString*)ipAddress;
/*!
 * <div>
 * Determines whether the specified IP address is IPv6.
 * </div>
 * @param ipAddress The IP address.
 * @return true if the specified IP address is IPv6; otherwise, false.
 * 
 */
+ (bool) isIPv6WithIPAddress:(NSString*)ipAddress;
/*!
 * <div>
 * Determines whether the specified IP address is link-local.
 * </div>
 * @param ipAddress The IP address.
 */
+ (bool) isLinkLocalWithIPAddress:(NSString*)ipAddress;
/*!
 * <div>
 * Determines whether the specified IP address is loopback.
 * </div>
 * @param ipAddress The IP address.
 */
+ (bool) isLoopbackWithIPAddress:(NSString*)ipAddress;
/*!
 * <div>
 * Determines whether the specified IP address is private.
 * </div>
 * @param ipAddress The IP address.
 */
+ (bool) isPrivateWithIPAddress:(NSString*)ipAddress;
/*!
 * <div>
 * Determines whether the specified IP address is reserved.
 * </div>
 * @param ipAddress The IP address.
 */
+ (bool) isReservedWithIPAddress:(NSString*)ipAddress;
/*!
 * <div>
 * Gets a subnet mask from a prefix length (0-32).
 * </div>
 * @param prefixLength The prefix length.
 */
+ (NSString*) maskFromPrefixLength:(int)prefixLength;
/*!
 * <div>
 * Gets the port.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Sanitizes the IP address, removing any local information.
 * </div>
 * @param ipAddress The IP address to sanitize.
 */
+ (NSString*) sanitizeIPAddress:(NSString*)ipAddress;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTransportAddress class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 */
+ (FMIceLinkTransportAddress*) transportAddressWithIPAddress:(NSString*)ipAddress port:(int)port;

@end

/*!
 * <div>
 * Throws exceptions on a separate thread.
 * </div>
 */
@interface FMIceLinkUnhandled : NSObject

- (instancetype) init;
/*!
 * <div>
 * Logs an unhandled exception.
 * </div>
 * @param ex The exception to throw.
 * @param source The source of the exception.
 */
+ (void) logExceptionWithEx:(NSException*)ex source:(NSString*)source;
+ (FMIceLinkUnhandled*) unhandled;

@end

/*!
 * <div>
 * Arguments for an unhandled exception.
 * </div>
 */
@interface FMIceLinkUnhandledExceptionArgs : NSObject

/*!
 * <div>
 * Gets the unhandled exception.
 * </div>
 */
- (NSException*) exception;
/*!
 * <div>
 * Gets whether the exception has been
 * appropriately handled. If set to <code>true</code>,
 * then the exception will not be thrown.
 * </div>
 */
- (bool) handled;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkUnhandledExceptionArgs class.
 * </div>
 * @param exception The exception.
 */
- (instancetype) initWithException:(NSException*)exception;
/*!
 * <div>
 * Sets whether the exception has been
 * appropriately handled. If set to <code>true</code>,
 * then the exception will not be thrown.
 * </div>
 */
- (void) setHandled:(bool)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkUnhandledExceptionArgs class.
 * </div>
 * @param exception The exception.
 */
+ (FMIceLinkUnhandledExceptionArgs*) unhandledExceptionArgsWithException:(NSException*)exception;

@end

/*!
 * <div>
 * UTF-8 encoding/decoding utility.
 * </div>
 */
@interface FMIceLinkUtf8 : NSObject

/*!
 * <div>
 * Decodes a UTF-8 data buffer to a string.
 * </div>
 * @param buffer The input byte array.
 */
+ (NSString*) decodeWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Decodes a UTF-8 byte array to a string.
 * </div>
 * @param input The input byte array.
 */
+ (NSString*) decodeWithInput:(NSMutableData*)input;
/*!
 * <div>
 * Decodes a UTF-8 byte array to a string.
 * </div>
 * @param input The input byte array.
 * @param index The index to start reading.
 * @param length The length.
 */
+ (NSString*) decodeWithInput:(NSMutableData*)input index:(int)index length:(int)length;
/*!
 * <div>
 * Encodes a string to a UTF-8 byte array.
 * </div>
 * @param input The input string.
 */
+ (NSMutableData*) encodeWithInput:(NSString*)input;
/*!
 * <div>
 * Gets the number of bytes that would be returned by
 * a call to encode.
 * </div>
 * @param input The input string.
 */
+ (int) getByteCountWithInput:(NSString*)input;
- (instancetype) init;
+ (FMIceLinkUtf8*) utf8;

@end

/*!
 * <div>
 * WebSocket base properties/methods.
 * </div>
 */
@interface FMIceLinkWebSocketBase : NSObject

- (instancetype) init;
/*!
 * <div>
 * Raises the close complete callback.
 * </div>
 * @param closeArgs The close arguments.
 * @param statusCode The status code.
 * @param reason The reason.
 */
- (void) raiseCloseCompleteWithCloseArgs:(FMIceLinkWebSocketCloseArgs*)closeArgs statusCode:(FMIceLinkWebSocketStatusCode)statusCode reason:(NSString*)reason;
/*!
 * <div>
 * Raises the open failure callback.
 * </div>
 * @param openArgs The open arguments.
 * @param statusCode The status code.
 * @param exception The exception.
 */
- (void) raiseOpenFailureWithOpenArgs:(FMIceLinkWebSocketOpenArgs*)openArgs statusCode:(FMIceLinkWebSocketStatusCode)statusCode exception:(NSException*)exception;
/*!
 * <div>
 * Raises the open success callback.
 * </div>
 * @param openArgs The open arguments.
 */
- (void) raiseOpenSuccessWithOpenArgs:(FMIceLinkWebSocketOpenArgs*)openArgs;
/*!
 * <div>
 * Raises the receive callback.
 * </div>
 * @param openArgs The open arguments.
 * @param textMessage The text message.
 * @param binaryMessage The binary message.
 */
- (void) raiseReceiveWithOpenArgs:(FMIceLinkWebSocketOpenArgs*)openArgs textMessage:(NSString*)textMessage binaryMessage:(NSMutableData*)binaryMessage;
/*!
 * <div>
 * Raises the stream failure callback.
 * </div>
 * @param openArgs The open arguments.
 * @param statusCode The status code.
 * @param exception The exception.
 */
- (void) raiseStreamFailureWithOpenArgs:(FMIceLinkWebSocketOpenArgs*)openArgs statusCode:(FMIceLinkWebSocketStatusCode)statusCode exception:(NSException*)exception;
+ (FMIceLinkWebSocketBase*) webSocketBase;

@end

/*!
 * <div>
 * Implementation of the WebSocket protocol v8.
 * </div>
 */
@interface FMIceLinkWebSocket : FMIceLinkWebSocketBase

/*!
 * <div>
 * Gets the number of bytes buffered in the send queue.
 * </div>
 */
- (int) bufferedAmount;
/*!
 * <div>
 * Closes the WebSocket connection.
 * </div>
 */
- (void) close;
/*!
 * <div>
 * Closes the WebSocket connection.
 * </div>
 * @param closeArgs The close arguments
 */
- (void) closeWithCloseArgs:(FMIceLinkWebSocketCloseArgs*)closeArgs;
/*!
 * <div>
 * Gets a value indicating whether WebSocket support exists on this platform.
 * </div>
 */
+ (bool) exists;
/*!
 * <div>
 * Creates a new FMIceLinkWebSocket.
 * </div>
 * @param requestUrl The target URL for the WebSocket connection.
 */
- (instancetype) initWithRequestUrl:(NSString*)requestUrl;
/*!
 * <div>
 * Creates a new FMIceLinkWebSocket.
 * </div>
 * @param requestUrl The target URL for the WebSocket connection.
 * @param protocol The WebSocket protocol.
 */
- (instancetype) initWithRequestUrl:(NSString*)requestUrl protocol:(NSString*)protocol;
/*!
 * <div>
 * Gets a value indicating whether the WebSocket is connected.
 * </div>
 */
- (bool) isOpen;
/*!
 * <div>
 * Opens the WebSocket connection.
 * </div>
 * @param openArgs The open arguments.
 */
- (void) openWithOpenArgs:(FMIceLinkWebSocketOpenArgs*)openArgs;
/*!
 * <div>
 * Gets the WebSocket protocol.
 * </div>
 */
- (NSString*) protocol;
/*!
 * <div>
 * Gets a value indicating whether the WebSocket is secure.
 * </div>
 */
- (bool) secure;
/*!
 * <div>
 * Sends a message to the WebSocket server.
 * </div>
 * @param sendArgs The send arguments.
 */
- (void) sendWithSendArgs:(FMIceLinkWebSocketSendArgs*)sendArgs;
/*!
 * <div>
 * Creates a new FMIceLinkWebSocket.
 * </div>
 * @param requestUrl The target URL for the WebSocket connection.
 */
+ (FMIceLinkWebSocket*) webSocketWithRequestUrl:(NSString*)requestUrl;
/*!
 * <div>
 * Creates a new FMIceLinkWebSocket.
 * </div>
 * @param requestUrl The target URL for the WebSocket connection.
 * @param protocol The WebSocket protocol.
 */
+ (FMIceLinkWebSocket*) webSocketWithRequestUrl:(NSString*)requestUrl protocol:(NSString*)protocol;

@end

/*!
 * <div>
 * Close arguments for the FMIceLinkWebSocket class.
 * </div>
 */
@interface FMIceLinkWebSocketCloseArgs : FMIceLinkDynamic

/*!
 * <div>
 * Creates a new instance of FMIceLinkWebSocketCloseArgs
 * with default values.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets the callback to execute when the connection is closed.
 * </div>
 */
- (FMIceLinkAction1*) onComplete;
/*!
 * <div>
 * Gets the reason to send with the close frame.
 * </div>
 */
- (NSString*) reason;
/*!
 * <div>
 * Sets the callback to execute when the connection is closed.
 * </div>
 */
- (void) setOnComplete:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to execute when the connection is closed.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkWebSocketCloseCompleteArgs*))) setOnCompleteBlock;
/*!
 * <div>
 * Sets the callback to execute when the connection is closed.
 * </div>
 */
- (void) setOnCompleteBlock:(void(^)(FMIceLinkWebSocketCloseCompleteArgs*))valueBlock;
/*!
 * <div>
 * Sets the reason to send with the close frame.
 * </div>
 */
- (void) setReason:(NSString*)value;
/*!
 * <div>
 * Sets the status code to send with the close frame.
 * </div>
 */
- (void) setStatusCode:(FMIceLinkWebSocketStatusCode)value;
/*!
 * <div>
 * Gets the status code to send with the close frame.
 * </div>
 */
- (FMIceLinkWebSocketStatusCode) statusCode;
/*!
 * <div>
 * Creates a new instance of FMIceLinkWebSocketCloseArgs
 * with default values.
 * </div>
 */
+ (FMIceLinkWebSocketCloseArgs*) webSocketCloseArgs;

@end

/*!
 * <div>
 * Arguments for FMIceLinkWebSocketCloseArgs#onComplete.
 * </div>
 */
@interface FMIceLinkWebSocketCloseCompleteArgs : FMIceLinkDynamic

/*!
 * <div>
 * Gets the original arguments passed to the close method.
 * </div>
 */
- (FMIceLinkWebSocketCloseArgs*) closeArgs;
- (instancetype) init;
/*!
 * <div>
 * Gets the reason given for closing the connection.
 * </div>
 */
- (NSString*) reason;
/*!
 * <div>
 * Sets the original arguments passed to the close method.
 * </div>
 */
- (void) setCloseArgs:(FMIceLinkWebSocketCloseArgs*)value;
/*!
 * <div>
 * Sets the reason given for closing the connection.
 * </div>
 */
- (void) setReason:(NSString*)value;
/*!
 * <div>
 * Sets the status code associated with the close operation.
 * </div>
 */
- (void) setStatusCode:(FMIceLinkWebSocketStatusCode)value;
/*!
 * <div>
 * Gets the status code associated with the close operation.
 * </div>
 */
- (FMIceLinkWebSocketStatusCode) statusCode;
+ (FMIceLinkWebSocketCloseCompleteArgs*) webSocketCloseCompleteArgs;

@end

/*!
 * <div>
 * Open arguments for the FMIceLinkWebSocket class.
 * </div>
 */
@interface FMIceLinkWebSocketOpenArgs : FMIceLinkDynamic

/*!
 * <div>
 * Gets the timeout for the handshake (in ms).
 * </div>
 */
- (int) handshakeTimeout;
/*!
 * <div>
 * Gets headers to send with the handshake request.
 * </div>
 */
- (FMIceLinkNameValueCollection*) headers;
/*!
 * <div>
 * Creates a new instance of
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets the callback to invoke when a connection could not be established.
 * </div>
 */
- (FMIceLinkAction1*) onFailure;
/*!
 * <div>
 * Gets the callback to invoke when a message is received.
 * </div>
 */
- (FMIceLinkAction1*) onReceive;
/*!
 * <div>
 * Gets the callback to invoke before the handshake request is sent.
 * </div>
 */
- (FMIceLinkAction1*) onRequestCreated;
/*!
 * <div>
 * Gets the callback to invoke after the handshake response is received.
 * </div>
 */
- (FMIceLinkAction1*) onResponseReceived;
/*!
 * <div>
 * Gets the callback to invoke when a successful connection breaks down.
 * </div>
 */
- (FMIceLinkAction1*) onStreamFailure;
/*!
 * <div>
 * Gets the callback to invoke when a successful connection has been established.
 * </div>
 */
- (FMIceLinkAction1*) onSuccess;
/*!
 * <div>
 * Gets the sender of the request.
 * </div>
 */
- (id) sender;
/*!
 * <div>
 * Sets the timeout for the handshake (in ms).
 * </div>
 */
- (void) setHandshakeTimeout:(int)value;
/*!
 * <div>
 * Sets headers to send with the handshake request.
 * </div>
 */
- (void) setHeaders:(FMIceLinkNameValueCollection*)value;
/*!
 * <div>
 * Sets the callback to invoke when a connection could not be established.
 * </div>
 */
- (void) setOnFailure:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke when a connection could not be established.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkWebSocketOpenFailureArgs*))) setOnFailureBlock;
/*!
 * <div>
 * Sets the callback to invoke when a connection could not be established.
 * </div>
 */
- (void) setOnFailureBlock:(void(^)(FMIceLinkWebSocketOpenFailureArgs*))valueBlock;
/*!
 * <div>
 * Sets the callback to invoke when a message is received.
 * </div>
 */
- (void) setOnReceive:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke when a message is received.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkWebSocketReceiveArgs*))) setOnReceiveBlock;
/*!
 * <div>
 * Sets the callback to invoke when a message is received.
 * </div>
 */
- (void) setOnReceiveBlock:(void(^)(FMIceLinkWebSocketReceiveArgs*))valueBlock;
/*!
 * <div>
 * Sets the callback to invoke before the handshake request is sent.
 * </div>
 */
- (void) setOnRequestCreated:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke before the handshake request is sent.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkHttpRequestCreatedArgs*))) setOnRequestCreatedBlock;
/*!
 * <div>
 * Sets the callback to invoke before the handshake request is sent.
 * </div>
 */
- (void) setOnRequestCreatedBlock:(void(^)(FMIceLinkHttpRequestCreatedArgs*))valueBlock;
/*!
 * <div>
 * Sets the callback to invoke after the handshake response is received.
 * </div>
 */
- (void) setOnResponseReceived:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke after the handshake response is received.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkHttpResponseReceivedArgs*))) setOnResponseReceivedBlock;
/*!
 * <div>
 * Sets the callback to invoke after the handshake response is received.
 * </div>
 */
- (void) setOnResponseReceivedBlock:(void(^)(FMIceLinkHttpResponseReceivedArgs*))valueBlock;
/*!
 * <div>
 * Sets the callback to invoke when a successful connection breaks down.
 * </div>
 */
- (void) setOnStreamFailure:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke when a successful connection breaks down.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkWebSocketStreamFailureArgs*))) setOnStreamFailureBlock;
/*!
 * <div>
 * Sets the callback to invoke when a successful connection breaks down.
 * </div>
 */
- (void) setOnStreamFailureBlock:(void(^)(FMIceLinkWebSocketStreamFailureArgs*))valueBlock;
/*!
 * <div>
 * Sets the callback to invoke when a successful connection has been established.
 * </div>
 */
- (void) setOnSuccess:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke when a successful connection has been established.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkWebSocketOpenSuccessArgs*))) setOnSuccessBlock;
/*!
 * <div>
 * Sets the callback to invoke when a successful connection has been established.
 * </div>
 */
- (void) setOnSuccessBlock:(void(^)(FMIceLinkWebSocketOpenSuccessArgs*))valueBlock;
/*!
 * <div>
 * Sets the sender of the request.
 * </div>
 */
- (void) setSender:(id)value;
/*!
 * <div>
 * Sets the timeout for the stream (in ms).
 * </div>
 */
- (void) setStreamTimeout:(int)value;
/*!
 * <div>
 * Gets the timeout for the stream (in ms).
 * </div>
 */
- (int) streamTimeout;
/*!
 * <div>
 * Creates a new instance of
 * </div>
 */
+ (FMIceLinkWebSocketOpenArgs*) webSocketOpenArgs;

@end

/*!
 * <div>
 * Arguments for FMIceLinkWebSocketOpenArgs#onFailure.
 * </div>
 */
@interface FMIceLinkWebSocketOpenFailureArgs : FMIceLinkDynamic

/*!
 * <div>
 * Gets the exception generated while connecting.
 * </div>
 */
- (NSException*) exception;
- (instancetype) init;
/*!
 * <div>
 * Gets the original arguments passed to the open method.
 * </div>
 */
- (FMIceLinkWebSocketOpenArgs*) openArgs;
/*!
 * <div>
 * Sets the exception generated while connecting.
 * </div>
 */
- (void) setException:(NSException*)value;
/*!
 * <div>
 * Sets the original arguments passed to the open method.
 * </div>
 */
- (void) setOpenArgs:(FMIceLinkWebSocketOpenArgs*)value;
/*!
 * <div>
 * Sets the status code associated with the failure to connect.
 * </div>
 */
- (void) setStatusCode:(FMIceLinkWebSocketStatusCode)value;
/*!
 * <div>
 * Gets the status code associated with the failure to connect.
 * </div>
 */
- (FMIceLinkWebSocketStatusCode) statusCode;
+ (FMIceLinkWebSocketOpenFailureArgs*) webSocketOpenFailureArgs;

@end

/*!
 * <div>
 * Arguments for FMIceLinkWebSocketOpenArgs#onSuccess.
 * </div>
 */
@interface FMIceLinkWebSocketOpenSuccessArgs : FMIceLinkDynamic

- (instancetype) init;
/*!
 * <div>
 * Gets the original arguments passed to the open method.
 * </div>
 */
- (FMIceLinkWebSocketOpenArgs*) openArgs;
/*!
 * <div>
 * Sets the original arguments passed to the open method.
 * </div>
 */
- (void) setOpenArgs:(FMIceLinkWebSocketOpenArgs*)value;
+ (FMIceLinkWebSocketOpenSuccessArgs*) webSocketOpenSuccessArgs;

@end

/*!
 * <div>
 * Arguments for FMIceLinkWebSocketOpenArgs#onReceive.
 * </div>
 */
@interface FMIceLinkWebSocketReceiveArgs : FMIceLinkDynamic

/*!
 * <div>
 * Gets the message received from the server as binary data.
 * </div>
 */
- (NSMutableData*) binaryMessage;
- (instancetype) init;
/*!
 * <div>
 * Gets whether or not the received message is text.
 * </div>
 */
- (bool) isText;
/*!
 * <div>
 * Gets the original arguments passed to the open method.
 * </div>
 */
- (FMIceLinkWebSocketOpenArgs*) openArgs;
/*!
 * <div>
 * Sets the message received from the server as binary data.
 * </div>
 */
- (void) setBinaryMessage:(NSMutableData*)value;
/*!
 * <div>
 * Sets the original arguments passed to the open method.
 * </div>
 */
- (void) setOpenArgs:(FMIceLinkWebSocketOpenArgs*)value;
/*!
 * <div>
 * Sets the message received from the server as text data.
 * </div>
 */
- (void) setTextMessage:(NSString*)value;
/*!
 * <div>
 * Gets the message received from the server as text data.
 * </div>
 */
- (NSString*) textMessage;
+ (FMIceLinkWebSocketReceiveArgs*) webSocketReceiveArgs;

@end

/*!
 * <div>
 * Send arguments for the FMIceLinkWebSocket class.
 * </div>
 */
@interface FMIceLinkWebSocketSendArgs : FMIceLinkDynamic

/*!
 * <div>
 * Gets the message to send as binary data.
 * </div>
 */
- (NSMutableData*) binaryMessage;
/*!
 * <div>
 * Creates a new FMIceLinkWebSocketSendArgs instance.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Sets the message to send as binary data.
 * </div>
 */
- (void) setBinaryMessage:(NSMutableData*)value;
/*!
 * <div>
 * Sets the message to send as text data.
 * </div>
 */
- (void) setTextMessage:(NSString*)value;
/*!
 * <div>
 * Sets the timeout for the request (in ms).
 * </div>
 */
- (void) setTimeout:(int)value;
/*!
 * <div>
 * Gets the message to send as text data.
 * </div>
 */
- (NSString*) textMessage;
/*!
 * <div>
 * Gets the timeout for the request (in ms).
 * </div>
 */
- (int) timeout;
/*!
 * <div>
 * Creates a new FMIceLinkWebSocketSendArgs instance.
 * </div>
 */
+ (FMIceLinkWebSocketSendArgs*) webSocketSendArgs;

@end

@interface FMIceLinkWebSocketStatusCodeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkWebSocketStatusCode)value;

@end

/*!
 * <div>
 * Arguments for FMIceLinkWebSocketOpenArgs#onStreamFailure.
 * </div>
 */
@interface FMIceLinkWebSocketStreamFailureArgs : FMIceLinkDynamic

/*!
 * <div>
 * Gets the exception generated by the active connection.
 * </div>
 */
- (NSException*) exception;
- (instancetype) init;
/*!
 * <div>
 * Gets the original arguments passed to the open method.
 * </div>
 */
- (FMIceLinkWebSocketOpenArgs*) openArgs;
/*!
 * <div>
 * Sets the exception generated by the active connection.
 * </div>
 */
- (void) setException:(NSException*)value;
/*!
 * <div>
 * Sets the original arguments passed to the open method.
 * </div>
 */
- (void) setOpenArgs:(FMIceLinkWebSocketOpenArgs*)value;
/*!
 * <div>
 * Sets the status code associated with the stream failure.
 * </div>
 */
- (void) setStatusCode:(FMIceLinkWebSocketStatusCode)value;
/*!
 * <div>
 * Gets the status code associated with the stream failure.
 * </div>
 */
- (FMIceLinkWebSocketStatusCode) statusCode;
+ (FMIceLinkWebSocketStreamFailureArgs*) webSocketStreamFailureArgs;

@end

/*!
 * <div>
 * Base class that defines methods for transferring content over the WebSocket protocol.
 * </div>
 */
@interface FMIceLinkWebSocketTransfer : NSObject

/*!
 * <div>
 * Gets the timeout for the initial handshake (in ms).
 * </div>
 */
- (int) handshakeTimeout;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkWebSocketTransfer class.
 * </div>
 * @param url The URL.
 */
- (instancetype) initWithUrl:(NSString*)url;
/*!
 * <div>
 * Gets the callback to invoke if the handshake fails.
 * </div>
 */
- (FMIceLinkAction1*) onOpenFailure;
/*!
 * <div>
 * Gets the callback to invoke if the handshake succeeds.
 * </div>
 */
- (FMIceLinkAction1*) onOpenSuccess;
/*!
 * <div>
 * Gets the callback to invoke when the handshake request is created.
 * </div>
 */
- (FMIceLinkAction1*) onRequestCreated;
/*!
 * <div>
 * Gets the callback to invoke when the handshake response is received.
 * </div>
 */
- (FMIceLinkAction1*) onResponseReceived;
/*!
 * <div>
 * Gets the callback to invoke if the stream errors out.
 * </div>
 */
- (FMIceLinkAction1*) onStreamFailure;
/*!
 * <div>
 * Opens the socket.
 * </div>
 * @param headers The headers to pass in with the initial handshake.
 */
- (void) openWithHeaders:(FMIceLinkNameValueCollection*)headers;
/*!
 * <div>
 * Sends a request asynchronously.
 * </div>
 * @param requestArgs The request parameters.
 * @param callback The callback to execute with the resulting response.
 */
- (void) sendAsyncWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs callback:(FMIceLinkAction1*)callback;
/*!
 * <div>
 * Sends a request asynchronously.
 * </div>
 * @param requestArgs The request parameters.
 * @param callbackBlock The callback to execute with the resulting response.
 */
- (void) sendAsyncWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs callbackBlock:(void(^)(FMIceLinkHttpResponseArgs*))callbackBlock;
/*!
 * <div>
 * Sends a request asynchronously.
 * </div>
 * @inlineparam requestArgs The request parameters.
 * @inlineparam callbackBlock The callback to execute with the resulting response.
 */
- (void (^)(FMIceLinkHttpRequestArgs*, void(^)(FMIceLinkHttpResponseArgs*))) sendAsyncWithRequestArgsAndCallbackBlock;
/*!
 * <div>
 * Gets the sender of the messages.
 * </div>
 */
- (id) sender;
/*!
 * <div>
 * Sends a request synchronously.
 * </div>
 * @param requestArgs The request parameters.
 * @return The response parameters.
 */
- (FMIceLinkHttpResponseArgs*) sendWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs;
/*!
 * <div>
 * Sets the timeout for the initial handshake (in ms).
 * </div>
 */
- (void) setHandshakeTimeout:(int)value;
/*!
 * <div>
 * Sets the callback to invoke if the handshake fails.
 * </div>
 */
- (void) setOnOpenFailure:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke if the handshake fails.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkWebSocketOpenFailureArgs*))) setOnOpenFailureBlock;
/*!
 * <div>
 * Sets the callback to invoke if the handshake fails.
 * </div>
 */
- (void) setOnOpenFailureBlock:(void(^)(FMIceLinkWebSocketOpenFailureArgs*))valueBlock;
/*!
 * <div>
 * Sets the callback to invoke if the handshake succeeds.
 * </div>
 */
- (void) setOnOpenSuccess:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke if the handshake succeeds.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkWebSocketOpenSuccessArgs*))) setOnOpenSuccessBlock;
/*!
 * <div>
 * Sets the callback to invoke if the handshake succeeds.
 * </div>
 */
- (void) setOnOpenSuccessBlock:(void(^)(FMIceLinkWebSocketOpenSuccessArgs*))valueBlock;
/*!
 * <div>
 * Sets the callback to invoke when the handshake request is created.
 * </div>
 */
- (void) setOnRequestCreated:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke when the handshake request is created.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkHttpRequestCreatedArgs*))) setOnRequestCreatedBlock;
/*!
 * <div>
 * Sets the callback to invoke when the handshake request is created.
 * </div>
 */
- (void) setOnRequestCreatedBlock:(void(^)(FMIceLinkHttpRequestCreatedArgs*))valueBlock;
/*!
 * <div>
 * Sets the callback to invoke when the handshake response is received.
 * </div>
 */
- (void) setOnResponseReceived:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke when the handshake response is received.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkHttpResponseReceivedArgs*))) setOnResponseReceivedBlock;
/*!
 * <div>
 * Sets the callback to invoke when the handshake response is received.
 * </div>
 */
- (void) setOnResponseReceivedBlock:(void(^)(FMIceLinkHttpResponseReceivedArgs*))valueBlock;
/*!
 * <div>
 * Sets the callback to invoke if the stream errors out.
 * </div>
 */
- (void) setOnStreamFailure:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to invoke if the stream errors out.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkWebSocketStreamFailureArgs*))) setOnStreamFailureBlock;
/*!
 * <div>
 * Sets the callback to invoke if the stream errors out.
 * </div>
 */
- (void) setOnStreamFailureBlock:(void(^)(FMIceLinkWebSocketStreamFailureArgs*))valueBlock;
/*!
 * <div>
 * Sets the sender of the messages.
 * </div>
 */
- (void) setSender:(id)value;
/*!
 * <div>
 * Sets the timeout for the stream (in ms).
 * </div>
 */
- (void) setStreamTimeout:(int)value;
/*!
 * <div>
 * Sets the URL.
 * </div>
 */
- (void) setUrl:(NSString*)value;
/*!
 * <div>
 * Releases any resources and shuts down.
 * </div>
 */
- (void) shutdown;
/*!
 * <div>
 * Gets the timeout for the stream (in ms).
 * </div>
 */
- (int) streamTimeout;
/*!
 * <div>
 * Gets the URL.
 * </div>
 */
- (NSString*) url;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkWebSocketTransfer class.
 * </div>
 * @param url The URL.
 */
+ (FMIceLinkWebSocketTransfer*) webSocketTransferWithUrl:(NSString*)url;

@end

/*!
 * <div>
 * Creates implementations of FMIceLinkWebSocketWebRequestTransfer.
 * </div>
 */
@interface FMIceLinkWebSocketTransferFactory : NSObject

/*!
 * <div>
 * Gets the callback that creates a WebSocket-based transfer class.
 * </div>
 */
+ (FMIceLinkFunction1*) createWebSocketTransfer;
/*!
 * <div>
 * Gets an instance of the WebSocket-based transfer class.
 * </div>
 */
+ (FMIceLinkWebSocketTransfer*) getWebSocketTransferWithUrl:(NSString*)url;
- (instancetype) init;
/*!
 * <div>
 * Sets the callback that creates a WebSocket-based transfer class.
 * </div>
 */
+ (void) setCreateWebSocketTransfer:(FMIceLinkFunction1*)value;
/*!
 * <div>
 * Sets the callback that creates a WebSocket-based transfer class.
 * </div>
 */
+ (void (^)(FMIceLinkWebSocketTransfer*(^)(NSString*))) setCreateWebSocketTransferBlock;
/*!
 * <div>
 * Sets the callback that creates a WebSocket-based transfer class.
 * </div>
 */
+ (void) setCreateWebSocketTransferBlock:(FMIceLinkWebSocketTransfer*(^)(NSString*))valueBlock;
+ (FMIceLinkWebSocketTransferFactory*) webSocketTransferFactory;

@end

/*!
 * <div>
 * Defines methods for transferring messages using the WebSocket protocol.
 * </div>
 */
@interface FMIceLinkWebSocketWebRequestTransfer : FMIceLinkWebSocketTransfer

/*!
 * <div>
 * Creates a new instance of FMIceLinkWebSocketWebRequestTransfer.
 * </div>
 * @param url The URL.
 */
- (instancetype) initWithUrl:(NSString*)url;
/*!
 * <div>
 * Opens the WebSocket connection.
 * </div>
 */
- (void) openWithHeaders:(FMIceLinkNameValueCollection*)headers;
/*!
 * <div>
 * Sends a request asynchronously.
 * </div>
 * @param requestArgs The request parameters.
 * @param callback The callback to execute with the resulting response.
 */
- (void) sendAsyncWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs callback:(FMIceLinkAction1*)callback;
/*!
 * <div>
 * Sends a request asynchronously.
 * </div>
 * @param requestArgs The request parameters.
 * @param callbackBlock The callback to execute with the resulting response.
 */
- (void) sendAsyncWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs callbackBlock:(void(^)(FMIceLinkHttpResponseArgs*))callbackBlock;
/*!
 * <div>
 * Sends a request asynchronously.
 * </div>
 * @inlineparam requestArgs The request parameters.
 * @inlineparam callbackBlock The callback to execute with the resulting response.
 */
- (void (^)(FMIceLinkHttpRequestArgs*, void(^)(FMIceLinkHttpResponseArgs*))) sendAsyncWithRequestArgsAndCallbackBlock;
/*!
 * <div>
 * Sends a request synchronously.
 * </div>
 * @param requestArgs The request parameters.
 * @return The response parameters.
 */
- (FMIceLinkHttpResponseArgs*) sendWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs;
/*!
 * <div>
 * Releases any resources and shuts down.
 * </div>
 */
- (void) shutdown;
/*!
 * <div>
 * Creates a new instance of FMIceLinkWebSocketWebRequestTransfer.
 * </div>
 * @param url The URL.
 */
+ (FMIceLinkWebSocketWebRequestTransfer*) webSocketWebRequestTransferWithUrl:(NSString*)url;

@end

/*!
 * <div>
 * A STUN address family.
 * </div>
 */
@interface FMIceLinkStunAddressFamily : NSObject

+ (FMIceLinkStunAddressFamily*) addressFamily;
- (instancetype) init;
/*!
 * <div>
 * Gets the value indicating the IPv4 address family.
 * </div>
 */
+ (uint8_t) ipv4;
/*!
 * <div>
 * Gets the value indicating the IPv6 address family.
 * </div>
 */
+ (uint8_t) ipv6;

@end

/*!
 * <div>
 * A STUN attribute.
 * </div>
 */
@interface FMIceLinkStunAttribute : NSObject

/*!
 * <div>
 * Gets the ALTERNATE-SERVER type.
 * </div>
 */
+ (int) alternateServerType;
+ (FMIceLinkStunAttribute*) attribute;
/*!
 * <div>
 * Gets the CHANNEL-NUMBER type.
 * </div>
 */
+ (int) channelNumberType;
/*!
 * <div>
 * Gets the CONNECTION-ID type.
 * </div>
 */
+ (int) connectionIdType;
/*!
 * <div>
 * Gets the CONTROLLED type.
 * </div>
 */
+ (int) controlledType;
/*!
 * <div>
 * Gets the CONTROLLING type.
 * </div>
 */
+ (int) controllingType;
/*!
 * <div>
 * Gets the DATA type.
 * </div>
 */
+ (int) dataType;
/*!
 * <div>
 * Gets the DONT-FRAGMENT type.
 * </div>
 */
+ (int) dontFragmentType;
/*!
 * <div>
 * Gets the ERROR-CODE type.
 * </div>
 */
+ (int) errorCodeType;
/*!
 * <div>
 * Gets the EVEN-PORT type.
 * </div>
 */
+ (int) evenPortType;
/*!
 * <div>
 * Gets the FINGERPRINT type.
 * </div>
 */
+ (int) fingerprintType;
/*!
 * <div>
 * Gets the length of the attribute, including header and padding.
 * </div>
 * @return
 */
- (int) getLength;
/*!
 * <div>
 * Gets the length of the padding.
 * </div>
 * @return
 */
- (int) getPaddingLengthWithValueLength:(int)valueLength;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
- (instancetype) init;
/*!
 * <div>
 * Gets the LIFETIME type.
 * </div>
 */
+ (int) lifetimeType;
/*!
 * <div>
 * Gets the MAPPED-ADDRESS type.
 * </div>
 */
+ (int) mappedAddressType;
/*!
 * <div>
 * Gets the MESSAGE-INTEGRITY type.
 * </div>
 */
+ (int) messageIntegrityType;
/*!
 * <div>
 * Reads the length of the next attribute from a data buffer, including header and padding.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (int) nextLengthWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Gets the NONCE type.
 * </div>
 */
+ (int) nonceType;
/*!
 * <div>
 * Gets the PRIORITY type.
 * </div>
 */
+ (int) priorityType;
/*!
 * <div>
 * Reads an address type.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkAddressType) readAddressTypeWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Reads an FMIceLinkStunAttribute from a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param offsetPlus The offset plus the attribute length.
 * @param transactionId The STUN message transaction ID.
 * @param messageBuffer The STUN message thus far as a byte array.
 * @return
 */
+ (FMIceLinkStunAttribute*) readFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset offsetPlus:(int*)offsetPlus transactionId:(FMIceLinkDataBuffer*)transactionId messageBuffer:(FMIceLinkDataBuffer*)messageBuffer;
/*!
 * <div>
 * Reads an FMIceLinkStunAttribute from a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param transactionId The STUN message transaction ID.
 * @param messageBuffer The STUN message thus far as a byte array.
 * @return
 */
+ (FMIceLinkStunAttribute*) readFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset transactionId:(FMIceLinkDataBuffer*)transactionId messageBuffer:(FMIceLinkDataBuffer*)messageBuffer;
/*!
 * <div>
 * Reads an IP address.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param addressType The address type.
 * @return
 */
+ (NSString*) readIPAddressWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset addressType:(FMIceLinkAddressType)addressType;
/*!
 * <div>
 * Reads a port.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (int) readPortWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Reads an XOR'd IP address.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param addressType The address type.
 * @param transactionId The transaction identifier.
 * @return
 */
+ (NSString*) readXorIPAddressWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset addressType:(FMIceLinkAddressType)addressType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Reads an XOR'd port.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param transactionId The transaction identifier.
 * @return
 */
+ (int) readXorPortWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the REALM type.
 * </div>
 */
+ (int) realmType;
/*!
 * <div>
 * Gets the REQUESTED-ADDRESS-FAMILY type.
 * </div>
 */
+ (int) requestedAddressFamilyType;
/*!
 * <div>
 * Gets the REQUESTED-TRANSPORT type.
 * </div>
 */
+ (int) requestedTransportType;
/*!
 * <div>
 * Gets the RESERVATION-TOKEN type.
 * </div>
 */
+ (int) reservationTokenType;
/*!
 * <div>
 * Gets the SOFTWARE type.
 * </div>
 */
+ (int) softwareType;
/*!
 * <div>
 * Gets the comprehension-optional TRANSACTION_TRANSMIT_COUNTER type defined in RFC 7982.
 * </div>
 */
+ (int) transactionTransmitCounterType;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Gets the UNKNOWN-ATTRIBUTES type.
 * </div>
 */
+ (int) unknownAttributesType;
/*!
 * <div>
 * Gets the USE-CANDIDATE type.
 * </div>
 */
+ (int) useCandidateType;
/*!
 * <div>
 * Gets the USERNAME type.
 * </div>
 */
+ (int) usernameType;
/*!
 * <div>
 * Writes an address type.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param addressType The address type.
 */
+ (void) writeAddressTypeWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset addressType:(FMIceLinkAddressType)addressType;
/*!
 * <div>
 * Writes an IP address.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param addressType The address type.
 * @param ipAddress The IP address.
 */
- (void) writeIPAddressWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset addressType:(FMIceLinkAddressType)addressType ipAddress:(NSString*)ipAddress;
/*!
 * <div>
 * Writes a port.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param port The port.
 */
- (void) writePortWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset port:(int)port;
/*!
 * <div>
 * Writes the attribute to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Writes the attribute to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (void) writeToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Writes an XOR'd IP address.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param addressType The address type.
 * @param ipAddress The IP address.
 * @param transactionId The transaction identifier.
 */
- (void) writeXorIPAddressWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset addressType:(FMIceLinkAddressType)addressType ipAddress:(NSString*)ipAddress transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Writes an XOR'd port.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param port The port.
 * @param transactionId The transaction identifier.
 */
- (void) writeXorPortWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset port:(int)port transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the XOR-MAPPED-ADDRESS type.
 * </div>
 */
+ (int) xorMappedAddressType;
/*!
 * <div>
 * Gets the XOR-PEER-ADDRESS type.
 * </div>
 */
+ (int) xorPeerAddressType;
/*!
 * <div>
 * Gets the XOR-RELAYED-ADDRESS type.
 * </div>
 */
+ (int) xorRelayedAddressType;

@end

/*!
 * <div>
 * The alternate server represents an alternate transport address
 * identifying a different STUN server that the STUN client should try.
 * </div>
 */
@interface FMIceLinkStunAlternateServerAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunAlternateServerAttribute class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 */
+ (FMIceLinkStunAlternateServerAttribute*) alternateServerAttributeWithIPAddress:(NSString*)ipAddress port:(int)port;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunAlternateServerAttribute class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 */
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port;
/*!
 * <div>
 * Gets the IP address.
 * </div>
 */
- (NSString*) ipAddress;
/*!
 * <div>
 * Gets the port.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunAlternateServerAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunAlternateServerAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Sets the IP address.
 * </div>
 */
- (void) setIPAddress:(NSString*)value;
/*!
 * <div>
 * Sets the port.
 * </div>
 */
- (void) setPort:(int)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the value to.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * Common functionality of various STUN/TURN server exceptions that occur while processing Allocation and Binding requests.
 * </div>
 */
@interface FMIceLinkStunError : FMIceLinkError

/*!
 * <div>
 * Creates error for the given error code and with a given message.
 * </div>
 * @param errorCode Stun error code
 * @param message Error message
 */
+ (FMIceLinkError*) createStunErrorWithErrorCode:(int)errorCode message:(FMIceLinkStunMessage*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunError class.
 * </div>
 * @param errorCode The error code.
 * @param message The error message.
 */
+ (FMIceLinkStunError*) errorWithErrorCode:(FMIceLinkErrorCode)errorCode message:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunError class.
 * </div>
 * @param errorCode The error code.
 * @param message The error message.
 */
- (instancetype) initWithErrorCode:(FMIceLinkErrorCode)errorCode message:(NSString*)message;
/*!
 * <div>
 * Gets the message associated with this error
 * </div>
 */
- (NSString*) message;
/*!
 * <div>
 * Sets the message associated with this error
 * </div>
 */
- (void) setMessage:(NSString*)value;
/*!
 * <div>
 * Gets this error's code
 * </div>
 */
- (int) stunErrorCode;

@end

/*!
 * <div>
 * The request was malformed. The client SHOULD NOT
 * retry the request without modification from the previous
 * attempt. The server may not be able to generate a valid
 * MESSAGE-INTEGRITY for this error, so the client MUST NOT expect
 * a valid MESSAGE-INTEGRITY attribute on this response.
 * </div>
 */
@interface FMIceLinkStunBadRequestError : FMIceLinkStunError

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBadRequestError class.
 * </div>
 */
+ (FMIceLinkStunBadRequestError*) badRequestError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBadRequestError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunBadRequestError*) badRequestErrorWithMessage:(NSString*)message;
/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBadRequestError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBadRequestError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * A STUN message.
 * </div>
 */
@interface FMIceLinkStunMessage : NSObject

/*!
 * <div>
 * Gets the allocate method.
 * </div>
 */
+ (int) allocateMethod;
/*!
 * <div>
 * Gets the message attributes.
 * </div>
 */
- (NSMutableArray*) attributes;
/*!
 * <div>
 * Gets the binding method.
 * </div>
 */
+ (int) bindingMethod;
/*!
 * <div>
 * Gets the channel-bind method.
 * </div>
 */
+ (int) channelBindMethod;
/*!
 * <div>
 * Gets the connection-attempt method.
 * </div>
 */
+ (int) connectionAttemptMethod;
/*!
 * <div>
 * Gets the connection-bind method.
 * </div>
 */
+ (int) connectionBindMethod;
/*!
 * <div>
 * Gets the connect method.
 * </div>
 */
+ (int) connectMethod;
/*!
 * <div>
 * Creates a message.
 * </div>
 * @param method The method.
 * @param messageType Type of the message.
 * @param transactionId The transaction ID.
 * @return
 */
+ (FMIceLinkStunMessage*) createMessageWithMethod:(int)method messageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the create-permission method.
 * </div>
 */
+ (int) createPermissionMethod;
/*!
 * <div>
 * Gets the data method.
 * </div>
 */
+ (int) dataMethod;
/*!
 * <div>
 * Generates a random transaction ID.
 * </div>
 */
+ (FMIceLinkDataBuffer*) generateTransactionId;
/*!
 * <div>
 * Gets the alternate-server attribute.
 * </div>
 */
- (FMIceLinkStunAlternateServerAttribute*) getAlternateServer;
/*!
 * <div>
 * Gets the channel-number attribute.
 * </div>
 */
- (FMIceLinkStunTurnChannelNumberAttribute*) getChannelNumber;
/*!
 * <div>
 * Gets the connection-id attribute.
 * </div>
 */
- (FMIceLinkStunTurnConnectionIdAttribute*) getConnectionId;
/*!
 * <div>
 * Gets the data attribute.
 * </div>
 */
- (FMIceLinkStunTurnDataAttribute*) getData;
/*!
 * <div>
 * Gets the don't-fragment attribute.
 * </div>
 */
- (FMIceLinkStunTurnDontFragmentAttribute*) getDontFragment;
/*!
 * <div>
 * Gets the error-code attribute.
 * </div>
 */
- (FMIceLinkStunErrorCodeAttribute*) getErrorCode;
/*!
 * <div>
 * Gets the even-port attribute.
 * </div>
 */
- (FMIceLinkStunTurnEvenPortAttribute*) getEvenPort;
/*!
 * <div>
 * Gets the fingerprint attribute.
 * </div>
 */
- (FMIceLinkStunFingerprintAttribute*) getFingerprint;
/*!
 * <div>
 * Gets the ICE-controlled attribute.
 * </div>
 */
- (FMIceLinkStunIceControlledAttribute*) getIceControlled;
/*!
 * <div>
 * Gets the ICE-controlling attribute.
 * </div>
 */
- (FMIceLinkStunIceControllingAttribute*) getIceControlling;
/*!
 * <div>
 * Gets the length of the message.
 * </div>
 * @return
 */
- (int) getLength;
/*!
 * <div>
 * Gets the lifetime attribute.
 * </div>
 */
- (FMIceLinkStunTurnLifetimeAttribute*) getLifetime;
/*!
 * <div>
 * Gets the mapped-address attribute.
 * </div>
 */
- (FMIceLinkStunMappedAddressAttribute*) getMappedAddress;
/*!
 * <div>
 * Gets the message-integrity attribute.
 * </div>
 */
- (FMIceLinkStunMessageIntegrityAttribute*) getMessageIntegrity;
/*!
 * <div>
 * Gets the nonce attribute.
 * </div>
 */
- (FMIceLinkStunNonceAttribute*) getNonce;
/*!
 * <div>
 * Gets the length of the payload.
 * </div>
 * @return
 */
- (int) getPayloadLength;
/*!
 * <div>
 * Gets the priority attribute.
 * </div>
 */
- (FMIceLinkStunIcePriorityAttribute*) getPriority;
/*!
 * <div>
 * Gets the realm attribute.
 * </div>
 */
- (FMIceLinkStunRealmAttribute*) getRealm;
/*!
 * <div>
 * Gets the requested-address-family attribute.
 * </div>
 */
- (FMIceLinkStunTurnRequestedAddressFamilyAttribute*) getRequestedAddressFamily;
/*!
 * <div>
 * Gets the requested-transport attribute.
 * </div>
 */
- (FMIceLinkStunTurnRequestedTransportAttribute*) getRequestedTransport;
/*!
 * <div>
 * Gets the reservation-token attribute.
 * </div>
 */
- (FMIceLinkStunTurnReservationTokenAttribute*) getReservationToken;
/*!
 * <div>
 * Gets the software attribute.
 * </div>
 */
- (FMIceLinkStunSoftwareAttribute*) getSoftware;
/*!
 * <div>
 * Gets the transaction-transmit-counter attribute.
 * </div>
 */
- (FMIceLinkStunTransactionTransmitCounterAttribute*) getTransactionTransmitCounter;
/*!
 * <div>
 * Gets the unknown-attributes attribute.
 * </div>
 */
- (FMIceLinkStunUnknownAttributesAttribute*) getUnknownAttributes;
/*!
 * <div>
 * Gets the use-candidate attribute.
 * </div>
 */
- (FMIceLinkStunIceUseCandidateAttribute*) getUseCandidate;
/*!
 * <div>
 * Gets the username attribute.
 * </div>
 */
- (FMIceLinkStunUsernameAttribute*) getUsername;
/*!
 * <div>
 * Gets the XOR-mapped-address attribute.
 * </div>
 */
- (FMIceLinkStunXorMappedAddressAttribute*) getXorMappedAddress;
/*!
 * <div>
 * Gets the XOR-peer-address attribute.
 * </div>
 */
- (FMIceLinkStunTurnXorPeerAddressAttribute*) getXorPeerAddress;
/*!
 * <div>
 * Gets the XOR-relayed-address attribute.
 * </div>
 */
- (FMIceLinkStunTurnXorRelayedAddressAttribute*) getXorRelayedAddress;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the "magic cookie" bytes.
 * </div>
 */
+ (NSMutableData*) magicCookieBytes;
/*!
 * <div>
 * Gets the "magic cookie" value.
 * </div>
 */
+ (long long) magicCookieValue;
/*!
 * <div>
 * Gets the message type.
 * </div>
 */
- (FMIceLinkStunMessageType) messageType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunMessage*) messageWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the method.
 * </div>
 */
- (int) method;
/*!
 * <div>
 * Reads a FMIceLinkStunMessage instance from a buffer.
 * </div>
 * @param buffer The buffer.
 * @return
 */
+ (FMIceLinkStunMessage*) readFromWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Reads a FMIceLinkStunMessage instance from a buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunMessage*) readFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Reads an FMIceLinkStunMessage instance from a buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param length The length of the parsed segment.
 * @return
 */
+ (FMIceLinkStunMessage*) readFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset length:(int*)length;
/*!
 * <div>
 * Gets the refresh method.
 * </div>
 */
+ (int) refreshMethod;
/*!
 * <div>
 * Gets the send method.
 * </div>
 */
+ (int) sendMethod;
/*!
 * <div>
 * Set the alternate-server attribute.
 * </div>
 * @param attribute The alternate-server attribute.
 */
- (void) setAlternateServerWithAttribute:(FMIceLinkStunAlternateServerAttribute*)attribute;
/*!
 * <div>
 * Sets the channel-number attribute.
 * </div>
 * @param attribute The channel-number attribute.
 */
- (void) setChannelNumberWithAttribute:(FMIceLinkStunTurnChannelNumberAttribute*)attribute;
/*!
 * <div>
 * Sets the connection-id attribute.
 * </div>
 * @param attribute The connection-id attribute.
 */
- (void) setConnectionIdWithAttribute:(FMIceLinkStunTurnConnectionIdAttribute*)attribute;
/*!
 * <div>
 * Sets the data attribute.
 * </div>
 * @param attribute The data attribute.
 */
- (void) setDataWithAttribute:(FMIceLinkStunTurnDataAttribute*)attribute;
/*!
 * <div>
 * Sets the don't-fragment attribute.
 * </div>
 * @param attribute The don't-fragment attribute.
 */
- (void) setDontFragmentWithAttribute:(FMIceLinkStunTurnDontFragmentAttribute*)attribute;
/*!
 * <div>
 * Set the error-code attribute.
 * </div>
 * @param attribute The error-code attribute.
 */
- (void) setErrorCodeWithAttribute:(FMIceLinkStunErrorCodeAttribute*)attribute;
/*!
 * <div>
 * Sets the even-port attribute.
 * </div>
 * @param attribute The even-port attribute.
 */
- (void) setEvenPortWithAttribute:(FMIceLinkStunTurnEvenPortAttribute*)attribute;
/*!
 * <div>
 * Set the fingerprint attribute.
 * </div>
 * @param attribute The fingerprint attribute.
 */
- (void) setFingerprintWithAttribute:(FMIceLinkStunFingerprintAttribute*)attribute;
/*!
 * <div>
 * Sets the ICE-controlled attribute.
 * </div>
 * @param attribute The ICE-controlled attribute.
 */
- (void) setIceControlledWithAttribute:(FMIceLinkStunIceControlledAttribute*)attribute;
/*!
 * <div>
 * Sets the ICE-controlling attribute.
 * </div>
 * @param attribute The ICE-controlling attribute.
 */
- (void) setIceControllingWithAttribute:(FMIceLinkStunIceControllingAttribute*)attribute;
/*!
 * <div>
 * Sets the lifetime attribute.
 * </div>
 * @param attribute The lifetime attribute.
 */
- (void) setLifetimeWithAttribute:(FMIceLinkStunTurnLifetimeAttribute*)attribute;
/*!
 * <div>
 * Set the mapped-address attribute.
 * </div>
 * @param attribute The mapped-address attribute.
 */
- (void) setMappedAddressWithAttribute:(FMIceLinkStunMappedAddressAttribute*)attribute;
/*!
 * <div>
 * Set the message-integrity attribute.
 * </div>
 * @param attribute The message-integrity attribute.
 */
- (void) setMessageIntegrityWithAttribute:(FMIceLinkStunMessageIntegrityAttribute*)attribute;
/*!
 * <div>
 * Set the nonce attribute.
 * </div>
 * @param attribute The nonce attribute.
 */
- (void) setNonceWithAttribute:(FMIceLinkStunNonceAttribute*)attribute;
/*!
 * <div>
 * Sets the priority attribute.
 * </div>
 * @param attribute The priority attribute.
 */
- (void) setPriorityWithAttribute:(FMIceLinkStunIcePriorityAttribute*)attribute;
/*!
 * <div>
 * Set the realm attribute.
 * </div>
 * @param attribute The realm attribute.
 */
- (void) setRealmWithAttribute:(FMIceLinkStunRealmAttribute*)attribute;
/*!
 * <div>
 * Sets the requested-address-family attribute.
 * </div>
 * @param attribute The requested-address-family attribute.
 */
- (void) setRequestedAddressFamilyWithAttribute:(FMIceLinkStunTurnRequestedAddressFamilyAttribute*)attribute;
/*!
 * <div>
 * Sets the requested-transport attribute.
 * </div>
 * @param attribute The requested-transport attribute.
 */
- (void) setRequestedTransportWithAttribute:(FMIceLinkStunTurnRequestedTransportAttribute*)attribute;
/*!
 * <div>
 * Sets the reservation-token attribute.
 * </div>
 * @param attribute The reservation-token attribute.
 */
- (void) setReservationTokenWithAttribute:(FMIceLinkStunTurnReservationTokenAttribute*)attribute;
/*!
 * <div>
 * Set the software attribute.
 * </div>
 * @param attribute The software attribute.
 */
- (void) setSoftwareWithAttribute:(FMIceLinkStunSoftwareAttribute*)attribute;
/*!
 * <div>
 * Set the transaction-transmit-counter attribute.
 * </div>
 * @param attribute The transaction-transmit-counter attribute.
 */
- (void) setTransactionTransmitCounterWithAttribute:(FMIceLinkStunTransactionTransmitCounterAttribute*)attribute;
/*!
 * <div>
 * Set the unknown-attributes attribute.
 * </div>
 * @param attribute The unknown-attributes attribute.
 */
- (void) setUnknownAttributesWithAttribute:(FMIceLinkStunUnknownAttributesAttribute*)attribute;
/*!
 * <div>
 * Sets the use-candidate attribute.
 * </div>
 * @param attribute The use-candidate attribute.
 */
- (void) setUseCandidateWithAttribute:(FMIceLinkStunIceUseCandidateAttribute*)attribute;
/*!
 * <div>
 * Set the username attribute.
 * </div>
 * @param attribute The username attribute.
 */
- (void) setUsernameWithAttribute:(FMIceLinkStunUsernameAttribute*)attribute;
/*!
 * <div>
 * Set the XOR-mapped-address attribute.
 * </div>
 * @param attribute The XOR-mapped-address attribute.
 */
- (void) setXorMappedAddressWithAttribute:(FMIceLinkStunXorMappedAddressAttribute*)attribute;
/*!
 * <div>
 * Sets the XOR-peer-address attribute.
 * </div>
 * @param attribute The XOR-peer-address attribute.
 */
- (void) setXorPeerAddressWithAttribute:(FMIceLinkStunTurnXorPeerAddressAttribute*)attribute;
/*!
 * <div>
 * Sets the XOR-relayed-address attribute.
 * </div>
 * @param attribute The XOR-relayed-address attribute.
 */
- (void) setXorRelayedAddressWithAttribute:(FMIceLinkStunTurnXorRelayedAddressAttribute*)attribute;
/*!
 * <div>
 * Gets the transaction ID.
 * </div>
 */
- (FMIceLinkDataBuffer*) transactionId;
/*!
 * <div>
 * Writes the message to a data buffer.
 * </div>
 * @param buffer The buffer.
 */
- (void) writeToWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Writes the message to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Writes the message to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param offsetPlus The offset plus the value length.
 */
- (void) writeToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset offsetPlus:(int*)offsetPlus;

@end

/*!
 * <div>
 * A generic STUN binding message.
 * </div>
 */
@interface FMIceLinkStunBindingMessage : FMIceLinkStunMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBindingMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunBindingMessage*) bindingMessageWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBindingMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the method.
 * </div>
 */
- (int) method;

@end

/*!
 * <div>
 * A STUN binding indication.
 * </div>
 */
@interface FMIceLinkStunBindingIndication : FMIceLinkStunBindingMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBindingIndication class.
 * </div>
 */
+ (FMIceLinkStunBindingIndication*) bindingIndication;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBindingIndication class.
 * </div>
 */
- (instancetype) init;

@end

/*!
 * <div>
 * A STUN binding request.
 * </div>
 */
@interface FMIceLinkStunBindingRequest : FMIceLinkStunBindingMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBindingRequest class.
 * </div>
 */
+ (FMIceLinkStunBindingRequest*) bindingRequest;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBindingRequest class.
 * </div>
 */
+ (FMIceLinkStunBindingRequest*) bindingRequestWithTransactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBindingRequest class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBindingRequest class.
 * </div>
 */
- (instancetype) initWithTransactionId:(FMIceLinkDataBuffer*)transactionId;

@end

/*!
 * <div>
 * A STUN binding response.
 * </div>
 */
@interface FMIceLinkStunBindingResponse : FMIceLinkStunBindingMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBindingResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
+ (FMIceLinkStunBindingResponse*) bindingResponseWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunBindingResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
- (instancetype) initWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;

@end

/*!
 * <div>
 * The ERROR-CODE attribute is used in error response messages.  It
 * contains a numeric error code value in the range of 300 to 699 plus a
 * textual reason phrase encoded in UTF-8 [RFC3629], and is consistent
 * in its code assignments and semantics with SIP [RFC3261] and HTTP
 * [RFC2616]. The reason phrase is meant for user consumption, and can
 * be anything appropriate for the error code.  Recommended reason
 * phrases for the defined error codes are included in the IANA registry
 * for error codes.  The reason phrase MUST be a UTF-8 [RFC3629] encoded
 * sequence of less than 128 characters (which can be as long as 763
 * bytes).
 * </div>
 */
@interface FMIceLinkStunErrorCodeAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Gets the error code.
 * </div><value>
 * The code.
 * </value>
 */
- (int) code;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunErrorCodeAttribute class.
 * </div>
 * @param code The error code.
 */
+ (FMIceLinkStunErrorCodeAttribute*) errorCodeAttributeWithCode:(int)code;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunErrorCodeAttribute class.
 * </div>
 * @param code The error code.
 * @param reason The error reason.
 */
+ (FMIceLinkStunErrorCodeAttribute*) errorCodeAttributeWithCode:(int)code reason:(NSString*)reason;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunErrorCodeAttribute class.
 * </div>
 * @param code The error code.
 */
- (instancetype) initWithCode:(int)code;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunErrorCodeAttribute class.
 * </div>
 * @param code The error code.
 * @param reason The error reason.
 */
- (instancetype) initWithCode:(int)code reason:(NSString*)reason;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunErrorCodeAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param length The length.
 * @return
 */
+ (FMIceLinkStunErrorCodeAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset length:(int)length;
/*!
 * <div>
 * Gets the error reason.
 * </div><value>
 * The reason.
 * </value>
 */
- (NSString*) reason;
/*!
 * <div>
 * Sets the error code.
 * </div><value>
 * The code.
 * </value>
 */
- (void) setCode:(int)value;
/*!
 * <div>
 * Sets the error reason.
 * </div><value>
 * The reason.
 * </value>
 */
- (void) setReason:(NSString*)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * The FINGERPRINT attribute MAY be present in all STUN messages.  The
 * value of the attribute is computed as the CRC-32 of the STUN message
 * up to (but excluding) the FINGERPRINT attribute itself, XOR'ed with
 * the 32-bit value 0x5354554e (the XOR helps in cases where an
 * application packet is also using CRC-32 in it).  The 32-bit CRC is
 * the one defined in ITU V.42 [ITU.V42.2002], which has a generator
 * polynomial of x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1.
 * When present, the FINGERPRINT attribute MUST be the last attribute in
 * the message, and thus will appear after MESSAGE-INTEGRITY.
 * </div>
 */
@interface FMIceLinkStunFingerprintAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunFingerprintAttribute class.
 * </div>
 */
+ (FMIceLinkStunFingerprintAttribute*) fingerprintAttribute;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunFingerprintAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets the message buffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) messageBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunFingerprintAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param messageBuffer The message buffer thus far.
 * @return
 */
+ (FMIceLinkStunFingerprintAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset messageBuffer:(FMIceLinkDataBuffer*)messageBuffer;
/*!
 * <div>
 * Sets the message buffer.
 * </div>
 */
- (void) setMessageBuffer:(FMIceLinkDataBuffer*)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * The ICE-CONTROLLED attribute is present in a Binding request and
 * indicates that the client believes it is currently in the controlled
 * role.
 * </div>
 */
@interface FMIceLinkStunIceControlledAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceControlledAttribute class.
 * </div>
 * @param value The tiebreaker value.
 */
+ (FMIceLinkStunIceControlledAttribute*) controlledAttribute:(long long)value;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceControlledAttribute class.
 * </div>
 * @param value The tiebreaker value.
 */
- (instancetype) initWithValue:(long long)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceControlledAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunIceControlledAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Sets the tiebreaker value.
 * </div>
 */
- (void) setValue:(long long)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Gets the tiebreaker value.
 * </div>
 */
- (long long) value;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * The ICE-CONTROLLING attribute is present in a Binding request and
 * indicates that the client believes it is currently in the controlling
 * role.
 * </div>
 */
@interface FMIceLinkStunIceControllingAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceControllingAttribute class.
 * </div>
 * @param value The tiebreaker value.
 */
+ (FMIceLinkStunIceControllingAttribute*) controllingAttribute:(long long)value;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceControllingAttribute class.
 * </div>
 * @param value The tiebreaker value.
 */
- (instancetype) initWithValue:(long long)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceControllingAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunIceControllingAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Sets the tiebreaker value.
 * </div>
 */
- (void) setValue:(long long)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Gets the tiebreaker value.
 * </div>
 */
- (long long) value;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * The PRIORITY attribute indicates the priority that is to be
 * associated with a peer reflexive candidate, should one be discovered
 * by this check.
 * </div>
 */
@interface FMIceLinkStunIcePriorityAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIcePriorityAttribute class.
 * </div>
 * @param priority The priority.
 */
- (instancetype) initWithPriority:(long long)priority;
/*!
 * <div>
 * Gets the priority.
 * </div>
 */
- (long long) priority;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIcePriorityAttribute class.
 * </div>
 * @param priority The priority.
 */
+ (FMIceLinkStunIcePriorityAttribute*) priorityAttributeWithPriority:(long long)priority;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIcePriorityAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunIcePriorityAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Sets the priority.
 * </div>
 */
- (void) setPriority:(long long)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * 487 Role Conflict. The Binding request contained either the ICE-CONTROLLING or ICE-CONTROLLED attribute, indicating a role that conflicted with the server.
 * The server ran a tie-breaker based on the tie-breaker value in the request and determined that the client needs to switch roles.
 * </div>
 */
@interface FMIceLinkStunIceRoleConflictError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Gets the ICE-controlled attribute.
 * </div>
 */
- (FMIceLinkStunIceControlledAttribute*) iceControlled;
/*!
 * <div>
 * Gets the ICE-controlling attribute.
 * </div>
 */
- (FMIceLinkStunIceControllingAttribute*) iceControlling;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceRoleConflictError class.
 * </div>
 * @param iceControlled The ICE-controlled attribute.
 * @param iceControlling The ICE-controlling attribute.
 */
- (instancetype) initWithIceControlled:(FMIceLinkStunIceControlledAttribute*)iceControlled iceControlling:(FMIceLinkStunIceControllingAttribute*)iceControlling;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceRoleConflictError class.
 * </div>
 * @param message The message.
 * @param iceControlled The ICE-controlled attribute.
 * @param iceControlling The ICE-controlling attribute.
 */
- (instancetype) initWithMessage:(NSString*)message iceControlled:(FMIceLinkStunIceControlledAttribute*)iceControlled iceControlling:(FMIceLinkStunIceControllingAttribute*)iceControlling;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceRoleConflictError class.
 * </div>
 * @param iceControlled The ICE-controlled attribute.
 * @param iceControlling The ICE-controlling attribute.
 */
+ (FMIceLinkStunIceRoleConflictError*) roleConflictErrorWithIceControlled:(FMIceLinkStunIceControlledAttribute*)iceControlled iceControlling:(FMIceLinkStunIceControllingAttribute*)iceControlling;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceRoleConflictError class.
 * </div>
 * @param message The message.
 * @param iceControlled The ICE-controlled attribute.
 * @param iceControlling The ICE-controlling attribute.
 */
+ (FMIceLinkStunIceRoleConflictError*) roleConflictErrorWithMessage:(NSString*)message iceControlled:(FMIceLinkStunIceControlledAttribute*)iceControlled iceControlling:(FMIceLinkStunIceControllingAttribute*)iceControlling;

@end

/*!
 * <div>
 * The USE-CANDIDATE attribute indicates that the candidate pair
 * resulting from this check should be used for transmission of media.
 * </div>
 */
@interface FMIceLinkStunIceUseCandidateAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 * The length of the attribute value.
 * 
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceUseCandidateAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceUseCandidateAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunIceUseCandidateAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIceUseCandidateAttribute class.
 * </div>
 */
+ (FMIceLinkStunIceUseCandidateAttribute*) useCandidateAttribute;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * 431 Integrity Check Failure.
 * </div>
 */
@interface FMIceLinkStunIntegrityCheckFailureError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIntegrityCheckFailureError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIntegrityCheckFailureError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIntegrityCheckFailureError class.
 * </div>
 */
+ (FMIceLinkStunIntegrityCheckFailureError*) integrityCheckFailureError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunIntegrityCheckFailureError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunIntegrityCheckFailureError*) integrityCheckFailureErrorWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * The MAPPED-ADDRESS attribute indicates a reflexive transport address
 * of the client.  It consists of an 8-bit address family and a 16-bit
 * port, followed by a fixed-length value representing the IP address.
 * If the address family is IPv4, the address MUST be 32 bits.  If the
 * address family is IPv6, the address MUST be 128 bits.  All fields
 * must be in network byte order.
 * </div>
 */
@interface FMIceLinkStunMappedAddressAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunMappedAddressAttribute class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 */
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port;
/*!
 * <div>
 * Gets the IP address.
 * </div>
 */
- (NSString*) ipAddress;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunMappedAddressAttribute class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 */
+ (FMIceLinkStunMappedAddressAttribute*) mappedAddressAttributeWithIPAddress:(NSString*)ipAddress port:(int)port;
/*!
 * <div>
 * Gets the port.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunMappedAddressAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunMappedAddressAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Sets the IP address.
 * </div>
 */
- (void) setIPAddress:(NSString*)value;
/*!
 * <div>
 * Sets the port.
 * </div>
 */
- (void) setPort:(int)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the value to.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * The MESSAGE-INTEGRITY attribute contains an HMAC-SHA1 [RFC2104] of
 * the STUN message.  The MESSAGE-INTEGRITY attribute can be present in
 * any STUN message type.  Since it uses the SHA1 hash, the HMAC will be
 * 20 bytes.  The text used as input to HMAC is the STUN message,
 * including the header, up to and including the attribute preceding the
 * MESSAGE-INTEGRITY attribute.  With the exception of the FINGERPRINT
 * attribute, which appears after MESSAGE-INTEGRITY, agents MUST ignore
 * all other attributes that follow MESSAGE-INTEGRITY.
 * </div>
 */
@interface FMIceLinkStunMessageIntegrityAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunMessageIntegrityAttribute class.
 * </div>
 * @param keyBuffer The key as a buffer.
 */
- (instancetype) initWithKeyBuffer:(NSMutableData*)keyBuffer;
/*!
 * <div>
 * After creating a message-integrity attribute using the byte array representation,
 * this method determines whether the supplied key is valid.
 * </div>
 * @param keyBuffer The key as a buffer.
 * @return true if the key is valid; otherwise, false.
 * 
 */
- (bool) isValidWithKeyBuffer:(NSMutableData*)keyBuffer;
/*!
 * <div>
 * Gets the message buffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) messageBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunMessageIntegrityAttribute class.
 * </div>
 * @param keyBuffer The key as a buffer.
 */
+ (FMIceLinkStunMessageIntegrityAttribute*) messageIntegrityAttributeWithKeyBuffer:(NSMutableData*)keyBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunMessageIntegrityAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param length The length.
 * @param messageBuffer The message buffer thus far.
 * @return
 */
+ (FMIceLinkStunMessageIntegrityAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset length:(int)length messageBuffer:(FMIceLinkDataBuffer*)messageBuffer;
/*!
 * <div>
 * Sets the message buffer.
 * </div>
 */
- (void) setMessageBuffer:(FMIceLinkDataBuffer*)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

@interface FMIceLinkStunMessageTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkStunMessageType)value;

@end

/*!
 * <div>
 * 432 Missing username; the username attribute is not present in the request.
 * </div>
 */
@interface FMIceLinkStunMissingUsernameError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunMissingUsernameError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunMissingUsernameError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunMissingUsernameError class.
 * </div>
 */
+ (FMIceLinkStunMissingUsernameError*) missingUsernameError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunMissingUsernameError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunMissingUsernameError*) missingUsernameErrorWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * The NONCE attribute may be present in requests and responses.  It
 * contains a sequence of qdtext or quoted-pair, which are defined in
 * RFC 3261 [RFC3261].  Note that this means that the NONCE attribute
 * will not contain actual quote characters.  See RFC 2617 [RFC2617],
 * Section 4.3, for guidance on selection of nonce values in a server.
 * </div>
 */
@interface FMIceLinkStunNonceAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunNonceAttribute class.
 * </div>
 * @param value The nonce value.
 */
- (instancetype) initWithValue:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunNonceAttribute class.
 * </div>
 * @param value The nonce value.
 */
+ (FMIceLinkStunNonceAttribute*) nonceAttribute:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunNonceAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param length The length.
 * @return
 */
+ (FMIceLinkStunNonceAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset length:(int)length;
/*!
 * <div>
 * Sets the nonce value.
 * </div>
 */
- (void) setValue:(NSString*)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Gets the nonce value.
 * </div>
 */
- (NSString*) value;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * The REALM attribute may be present in requests and responses.  It
 * contains text that meets the grammar for "realm-value" as described
 * in RFC 3261 [RFC3261] but without the double quotes and their
 * surrounding whitespace.  That is, it is an unquoted realm-value (and
 * is therefore a sequence of qdtext or quoted-pair).  It MUST be a
 * UTF-8 [RFC3629] encoded sequence of less than 128 characters (which
 * can be as long as 763 bytes), and MUST have been processed using
 * SASLprep [RFC4013].
 * </div>
 */
@interface FMIceLinkStunRealmAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunRealmAttribute class.
 * </div>
 * @param value The realm value.
 */
- (instancetype) initWithValue:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunRealmAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param length The length.
 * @return
 */
+ (FMIceLinkStunRealmAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset length:(int)length;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunRealmAttribute class.
 * </div>
 * @param value The realm value.
 */
+ (FMIceLinkStunRealmAttribute*) realmAttribute:(NSString*)value;
/*!
 * <div>
 * Sets the realm value.
 * </div>
 */
- (void) setValue:(NSString*)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Gets the realm value.
 * </div>
 */
- (NSString*) value;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * 500 Server Error. RFC5389. Indicates that the server has suffered a temporary error. The client should try again.
 * </div>
 */
@interface FMIceLinkStunServerError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunServerError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunServerError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunServerError class.
 * </div>
 */
+ (FMIceLinkStunServerError*) serverError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunServerError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunServerError*) serverErrorWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * The SOFTWARE attribute contains a textual description of the software
 * being used by the agent sending the message.  It is used by clients
 * and servers.  Its value SHOULD include manufacturer and version
 * number.  The attribute has no impact on operation of the protocol,
 * and serves only as a tool for diagnostic and debugging purposes.  The
 * value of SOFTWARE is variable length.  It MUST be a UTF-8 [RFC3629]
 * encoded sequence of less than 128 characters (which can be as long as
 * 763 bytes).
 * </div>
 */
@interface FMIceLinkStunSoftwareAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunSoftwareAttribute class.
 * </div>
 * @param value The textual description of the software being used by
 * the agent sending the message.
 */
- (instancetype) initWithValue:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunSoftwareAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param length The length.
 * @return
 */
+ (FMIceLinkStunSoftwareAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset length:(int)length;
/*!
 * <div>
 * Sets the textual description of the software being used by
 * the agent sending the message.
 * </div>
 */
- (void) setValue:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunSoftwareAttribute class.
 * </div>
 * @param value The textual description of the software being used by
 * the agent sending the message.
 */
+ (FMIceLinkStunSoftwareAttribute*) softwareAttribute:(NSString*)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Gets the textual description of the software being used by
 * the agent sending the message.
 * </div>
 */
- (NSString*) value;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * 430 Stale Credentials. The shared secret sent in the request is expired; the client should obtain a new shared secret.
 * </div>
 */
@interface FMIceLinkStunStaleCredentialsError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunStaleCredentialsError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunStaleCredentialsError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunStaleCredentialsError class.
 * </div>
 */
+ (FMIceLinkStunStaleCredentialsError*) staleCredentialsError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunStaleCredentialsError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunStaleCredentialsError*) staleCredentialsErrorWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * 438 Stale Nonce. RFC5389. Indicates that the NONCE used by the client was no longer valid. The client should retry, using the
 * NONCE provided in the response.
 * </div>
 */
@interface FMIceLinkStunStaleNonceError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunStaleNonceError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunStaleNonceError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunStaleNonceError class.
 * </div>
 * @param message The message.
 * @param nonce The nonce attribute.
 * @param realm The realm attribute.
 */
- (instancetype) initWithMessage:(NSString*)message nonce:(FMIceLinkStunNonceAttribute*)nonce realm:(FMIceLinkStunRealmAttribute*)realm;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunStaleNonceError class.
 * </div>
 * @param nonce The nonce attribute.
 * @param realm The realm attribute.
 */
- (instancetype) initWithNonce:(FMIceLinkStunNonceAttribute*)nonce realm:(FMIceLinkStunRealmAttribute*)realm;
/*!
 * <div>
 * Gets the nonce attribute.
 * </div>
 */
- (FMIceLinkStunNonceAttribute*) nonce;
/*!
 * <div>
 * Gets the realm attribute.
 * </div>
 */
- (FMIceLinkStunRealmAttribute*) realm;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunStaleNonceError class.
 * </div>
 */
+ (FMIceLinkStunStaleNonceError*) staleNonceError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunStaleNonceError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunStaleNonceError*) staleNonceErrorWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunStaleNonceError class.
 * </div>
 * @param message The message.
 * @param nonce The nonce attribute.
 * @param realm The realm attribute.
 */
+ (FMIceLinkStunStaleNonceError*) staleNonceErrorWithMessage:(NSString*)message nonce:(FMIceLinkStunNonceAttribute*)nonce realm:(FMIceLinkStunRealmAttribute*)realm;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunStaleNonceError class.
 * </div>
 * @param nonce The nonce attribute.
 * @param realm The realm attribute.
 */
+ (FMIceLinkStunStaleNonceError*) staleNonceErrorWithNonce:(FMIceLinkStunNonceAttribute*)nonce realm:(FMIceLinkStunRealmAttribute*)realm;

@end

/*!
 * <div>
 * 0                   1                   2                   3
 * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 * |        Reserved(Padding)      |    Req        |     Resp      |
 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 * Transaction Transmit Counter comprehension-optional STUN attribute.
 * </div>
 */
@interface FMIceLinkStunTransactionTransmitCounterAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTransactionTransmitCounterAttribute class.
 * </div>
 * @param numRequests The number of times the request is transmitted with the same transaction ID to the server.
 */
- (instancetype) initWithNumRequests:(int)numRequests;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTransactionTransmitCounterAttribute class.
 * </div>
 * @param numRequests The number of times the request is transmitted with the same transaction ID to the server.
 * @param numResponses The number of times a response with the same transaction ID is sent from the server.
 */
- (instancetype) initWithNumRequests:(int)numRequests numResponses:(int)numResponses;
/*!
 * <div>
 * Gets the number of times the request is transmitted with the same transaction ID to the server.
 * </div>
 */
- (int) numRequests;
/*!
 * <div>
 * Gets the number of times a response with the same transaction ID is sent from the server. MUST be set to zero in requests and ignored by the receiver.
 * </div>
 */
- (int) numResponses;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTransactionTransmitCounterAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunTransactionTransmitCounterAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Sets the number of times the request is transmitted with the same transaction ID to the server.
 * </div>
 */
- (void) setNumRequests:(int)value;
/*!
 * <div>
 * Sets the number of times a response with the same transaction ID is sent from the server. MUST be set to zero in requests and ignored by the receiver.
 * </div>
 */
- (void) setNumResponses:(int)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTransactionTransmitCounterAttribute class.
 * </div>
 * @param numRequests The number of times the request is transmitted with the same transaction ID to the server.
 */
+ (FMIceLinkStunTransactionTransmitCounterAttribute*) transactionTransmitCounterAttributeWithNumRequests:(int)numRequests;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTransactionTransmitCounterAttribute class.
 * </div>
 * @param numRequests The number of times the request is transmitted with the same transaction ID to the server.
 * @param numResponses The number of times a response with the same transaction ID is sent from the server.
 */
+ (FMIceLinkStunTransactionTransmitCounterAttribute*) transactionTransmitCounterAttributeWithNumRequests:(int)numRequests numResponses:(int)numResponses;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the value to.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * The client should contact an alternate server for
 * this request.  This error response MUST only be sent if the
 * request included a USERNAME attribute and a valid MESSAGE-
 * INTEGRITY attribute; otherwise, it MUST NOT be sent and error
 * code 400 (Bad Request) is suggested.  This error response MUST
 * be protected with the MESSAGE-INTEGRITY attribute, and receivers
 * MUST validate the MESSAGE-INTEGRITY of this response before
 * redirecting themselves to an alternate server.
 * 
 * Note: Failure to generate and validate message integrity
 * for a 300 response allows an on-path attacker to falsify a
 * 300 response thus causing subsequent STUN messages to be
 * sent to a victim.
 * </div>
 */
@interface FMIceLinkStunTryAlternateStunError : FMIceLinkStunError

/*!
 * <div>
 * Gets the alternate server attribute.
 * </div>
 */
- (FMIceLinkStunAlternateServerAttribute*) alternateServer;
/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;

@end

/*!
 * <div>
 * 440 Address Family Not Supported. RFC 6156. Indicates that the server does not support the address family requested by the client.
 * </div>
 */
@interface FMIceLinkStunTurnAddressFamilyNotSupportedError : FMIceLinkStunError

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAddressFamilyNotSupportedError class.
 * </div>
 */
+ (FMIceLinkStunTurnAddressFamilyNotSupportedError*) addressFamilyNotSupportedError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAddressFamilyNotSupportedError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunTurnAddressFamilyNotSupportedError*) addressFamilyNotSupportedErrorWithMessage:(NSString*)message;
/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAddressFamilyNotSupportedError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAddressFamilyNotSupportedError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * A generic STUN allocate message.
 * </div>
 */
@interface FMIceLinkStunTurnAllocateMessage : FMIceLinkStunMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocateMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunTurnAllocateMessage*) allocateMessageWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocateMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the method.
 * </div>
 */
- (int) method;

@end

/*!
 * <div>
 * A STUN allocate request.
 * </div>
 */
@interface FMIceLinkStunTurnAllocateRequest : FMIceLinkStunTurnAllocateMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocateRequest class.
 * </div>
 */
+ (FMIceLinkStunTurnAllocateRequest*) allocateRequest;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocateRequest class.
 * </div>
 */
- (instancetype) init;

@end

/*!
 * <div>
 * A STUN allocate response.
 * </div>
 */
@interface FMIceLinkStunTurnAllocateResponse : FMIceLinkStunTurnAllocateMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocateResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
+ (FMIceLinkStunTurnAllocateResponse*) allocateResponseWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocateResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
- (instancetype) initWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;

@end

/*!
 * <div>
 * 437 Allocation Mismatch. RFC 5766. This indicates that the client has picked a 5-tuple that the server sees as already in use.
 * One way this could happen is if an intervening NAT assigned a mapped transport address that was used by another client that recently
 * crashed.  The client considers the current transaction as having failed. The client SHOULD pick another client transport address
 * and retry the Allocate request (using a different transaction id).
 * The client SHOULD try three different client transport addresses before giving up on this server.Once the client gives up on the
 * server, it SHOULD NOT try to create another allocation on the server for 2 minutes.
 * </div>
 */
@interface FMIceLinkStunTurnAllocationMismatchError : FMIceLinkStunError

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocationMismatchError class.
 * </div>
 */
+ (FMIceLinkStunTurnAllocationMismatchError*) allocationMismatchError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocationMismatchError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunTurnAllocationMismatchError*) allocationMismatchErrorWithMessage:(NSString*)message;
/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocationMismatchError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocationMismatchError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * 486 Allocation Quota Reached. The server is currently unable to create any more allocations with this username.  The client considers the current
 * transaction as having failed. The client SHOULD wait at least 1 minute before trying to create any more allocations on the server.
 * </div>
 */
@interface FMIceLinkStunTurnAllocationQuotaReachedError : FMIceLinkStunError

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocationQuotaReachedError class.
 * </div>
 */
+ (FMIceLinkStunTurnAllocationQuotaReachedError*) allocationQuotaReachedError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocationQuotaReachedError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunTurnAllocationQuotaReachedError*) allocationQuotaReachedErrorWithMessage:(NSString*)message;
/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocationQuotaReachedError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnAllocationQuotaReachedError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * A generic STUN channel-bind message.
 * </div>
 */
@interface FMIceLinkStunTurnChannelBindMessage : FMIceLinkStunMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnChannelBindMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunTurnChannelBindMessage*) channelBindMessageWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnChannelBindMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the method.
 * </div>
 */
- (int) method;

@end

/*!
 * <div>
 * A STUN channel-bind request.
 * </div>
 */
@interface FMIceLinkStunTurnChannelBindRequest : FMIceLinkStunTurnChannelBindMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnChannelBindRequest class.
 * </div>
 */
+ (FMIceLinkStunTurnChannelBindRequest*) channelBindRequest;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnChannelBindRequest class.
 * </div>
 */
- (instancetype) init;

@end

/*!
 * <div>
 * A STUN channel-bind response.
 * </div>
 */
@interface FMIceLinkStunTurnChannelBindResponse : FMIceLinkStunTurnChannelBindMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnChannelBindResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
+ (FMIceLinkStunTurnChannelBindResponse*) channelBindResponseWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnChannelBindResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
- (instancetype) initWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;

@end

/*!
 * <div>
 * The CHANNEL-NUMBER attribute contains the number of the channel.
 * </div>
 */
@interface FMIceLinkStunTurnChannelNumberAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Gets the channel number.
 * </div>
 */
- (int) channelNumber;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnChannelNumberAttribute class.
 * </div>
 * @param channelNumber The channel number.
 */
+ (FMIceLinkStunTurnChannelNumberAttribute*) channelNumberAttributeWithChannelNumber:(int)channelNumber;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnChannelNumberAttribute class.
 * </div>
 * @param channelNumber The channel number.
 */
- (instancetype) initWithChannelNumber:(int)channelNumber;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnChannelNumberAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunTurnChannelNumberAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Sets the channel number.
 * </div>
 */
- (void) setChannelNumber:(int)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Gets the value as a byte array.
 * </div>
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * 446 Connection Already exists. This indicates that either 1) the server is currently processing a Connect request for this allocation with
 * the same XOR-PEER-ADDRESS; OR 2) the server has already successfully processed a Connect request for this allocation with the same XOR-PEER-ADDRESS,
 * and the resulting client and peer data connections are either pending or active
 * </div>
 */
@interface FMIceLinkStunTurnConnectionAlreadyExistsError : FMIceLinkStunError

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionAlreadyExistsError class.
 * </div>
 */
+ (FMIceLinkStunTurnConnectionAlreadyExistsError*) connectionAlreadyExistsError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionAlreadyExistsError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunTurnConnectionAlreadyExistsError*) connectionAlreadyExistsErrorWithMessage:(NSString*)message;
/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionAlreadyExistsError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionAlreadyExistsError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * A generic STUN data message.
 * </div>
 */
@interface FMIceLinkStunTurnDataMessage : FMIceLinkStunMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnDataMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunTurnDataMessage*) dataMessageWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnDataMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the method.
 * </div>
 */
- (int) method;

@end

/*!
 * <div>
 * A STUN connection-attempt indication.
 * </div>
 */
@interface FMIceLinkStunTurnConnectionAttemptIndication : FMIceLinkStunTurnDataMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionAttemptIndication class.
 * </div>
 */
+ (FMIceLinkStunTurnConnectionAttemptIndication*) connectionAttemptIndication;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionAttemptIndication class.
 * </div>
 */
- (instancetype) init;

@end

/*!
 * <div>
 * A generic STUN connection-attempt message.
 * </div>
 */
@interface FMIceLinkStunTurnConnectionAttemptMessage : FMIceLinkStunMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionAttemptMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunTurnConnectionAttemptMessage*) connectionAttemptMessageWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionAttemptMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the method.
 * </div>
 */
- (int) method;

@end

/*!
 * <div>
 * A generic STUN connection-bind message.
 * </div>
 */
@interface FMIceLinkStunTurnConnectionBindMessage : FMIceLinkStunMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionBindMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunTurnConnectionBindMessage*) connectionBindMessageWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionBindMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the method.
 * </div>
 */
- (int) method;

@end

/*!
 * <div>
 * A STUN connection-bind request.
 * </div>
 */
@interface FMIceLinkStunTurnConnectionBindRequest : FMIceLinkStunTurnConnectionBindMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionBindRequest class.
 * </div>
 */
+ (FMIceLinkStunTurnConnectionBindRequest*) connectionBindRequest;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionBindRequest class.
 * </div>
 */
- (instancetype) init;

@end

/*!
 * <div>
 * A STUN connection-bind response.
 * </div>
 */
@interface FMIceLinkStunTurnConnectionBindResponse : FMIceLinkStunTurnConnectionBindMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionBindResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
+ (FMIceLinkStunTurnConnectionBindResponse*) connectionBindResponseWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionBindResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
- (instancetype) initWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;

@end

/*!
 * <div>
 * The CONNECTION-ID attribute uniquely identifies a peer data connection.
 * </div>
 */
@interface FMIceLinkStunTurnConnectionIdAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Gets the connection ID.
 * </div>
 */
- (long long) connectionId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionIdAttribute class.
 * </div>
 * @param connectionId The connection ID.
 */
+ (FMIceLinkStunTurnConnectionIdAttribute*) connectionIdAttributeWithConnectionId:(long long)connectionId;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionIdAttribute class.
 * </div>
 * @param connectionId The connection ID.
 */
- (instancetype) initWithConnectionId:(long long)connectionId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnChannelNumberAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunTurnConnectionIdAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Sets the connection ID.
 * </div>
 */
- (void) setConnectionId:(long long)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * 447 Connection Timeout or Failure. This indicates that the TURN server was unable to connect to the peer. The client MAY retry with the same
 * XOR-PEER-ADDRESS attribute, but MUST wait at least 10 seconds.
 * </div>
 */
@interface FMIceLinkStunTurnConnectionTimeoutOrFailureError : FMIceLinkStunError

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionTimeoutOrFailureError class.
 * </div>
 */
+ (FMIceLinkStunTurnConnectionTimeoutOrFailureError*) connectionTimeoutOrFailureError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionTimeoutOrFailureError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunTurnConnectionTimeoutOrFailureError*) connectionTimeoutOrFailureErrorWithMessage:(NSString*)message;
/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionTimeoutOrFailureError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectionTimeoutOrFailureError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * A generic STUN connect message.
 * </div>
 */
@interface FMIceLinkStunTurnConnectMessage : FMIceLinkStunMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunTurnConnectMessage*) connectMessageWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the method.
 * </div>
 */
- (int) method;

@end

/*!
 * <div>
 * A STUN connect request.
 * </div>
 */
@interface FMIceLinkStunTurnConnectRequest : FMIceLinkStunTurnConnectMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectRequest class.
 * </div>
 */
+ (FMIceLinkStunTurnConnectRequest*) connectRequest;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectRequest class.
 * </div>
 */
- (instancetype) init;

@end

/*!
 * <div>
 * A STUN connect response.
 * </div>
 */
@interface FMIceLinkStunTurnConnectResponse : FMIceLinkStunTurnConnectMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
+ (FMIceLinkStunTurnConnectResponse*) connectResponseWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnConnectResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
- (instancetype) initWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;

@end

/*!
 * <div>
 * A generic STUN create-permission message.
 * </div>
 */
@interface FMIceLinkStunTurnCreatePermissionMessage : FMIceLinkStunMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnCreatePermissionMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunTurnCreatePermissionMessage*) createPermissionMessageWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnCreatePermissionMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the method.
 * </div>
 */
- (int) method;

@end

/*!
 * <div>
 * A STUN create-permission request.
 * </div>
 */
@interface FMIceLinkStunTurnCreatePermissionRequest : FMIceLinkStunTurnCreatePermissionMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnCreatePermissionRequest class.
 * </div>
 */
+ (FMIceLinkStunTurnCreatePermissionRequest*) createPermissionRequest;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnCreatePermissionRequest class.
 * </div>
 */
- (instancetype) init;

@end

/*!
 * <div>
 * A STUN create-permission response.
 * </div>
 */
@interface FMIceLinkStunTurnCreatePermissionResponse : FMIceLinkStunTurnCreatePermissionMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnCreatePermissionResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
+ (FMIceLinkStunTurnCreatePermissionResponse*) createPermissionResponseWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnCreatePermissionResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
- (instancetype) initWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;

@end

/*!
 * <div>
 * The DATA attribute is present in all Send and Data indications.
 * The value portion of this attribute is variable length and consists of
 * the application data.
 * </div>
 */
@interface FMIceLinkStunTurnDataAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Gets the data.
 * </div>
 */
- (FMIceLinkDataBuffer*) data;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnDataAttribute class.
 * </div>
 * @param data The data.
 */
+ (FMIceLinkStunTurnDataAttribute*) dataAttributeWithData:(FMIceLinkDataBuffer*)data;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnDataAttribute class.
 * </div>
 * @param data The data.
 */
- (instancetype) initWithData:(FMIceLinkDataBuffer*)data;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnDataAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param length The length.
 * @return
 */
+ (FMIceLinkStunTurnDataAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset length:(int)length;
/*!
 * <div>
 * Sets the data.
 * </div>
 */
- (void) setData:(FMIceLinkDataBuffer*)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * A STUN data indication.
 * </div>
 */
@interface FMIceLinkStunTurnDataIndication : FMIceLinkStunTurnDataMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnDataIndication class.
 * </div>
 */
+ (FMIceLinkStunTurnDataIndication*) dataIndication;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnDataIndication class.
 * </div>
 */
- (instancetype) init;

@end

/*!
 * <div>
 * This attribute is used by the client to request that the server set
 * the DF (Don't Fragment) bit in the IP header when relaying the
 * application data onward to the peer.
 * </div>
 */
@interface FMIceLinkStunTurnDontFragmentAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnDontFragmentAttribute class.
 * </div>
 */
+ (FMIceLinkStunTurnDontFragmentAttribute*) dontFragmentAttribute;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnDontFragmentAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnDontFragmentAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunTurnDontFragmentAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * This attribute allows the client to request that the port in the
 * relayed transport address be even, and (optionally) that the server
 * reserve the next-higher port number.
 * </div>
 */
@interface FMIceLinkStunTurnEvenPortAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnEvenPortAttribute class.
 * </div>
 * @param reserveNextHigher Whether the server should reserve the next-higher port number.
 */
+ (FMIceLinkStunTurnEvenPortAttribute*) evenPortAttributeWithReserveNextHigher:(bool)reserveNextHigher;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnEvenPortAttribute class.
 * </div>
 * @param reserveNextHigher Whether the server should reserve the next-higher port number.
 */
- (instancetype) initWithReserveNextHigher:(bool)reserveNextHigher;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnEvenPortAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunTurnEvenPortAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Gets whether the server should reserve the next-higher port number.
 * </div>
 */
- (bool) reserveNextHigher;
/*!
 * <div>
 * Sets whether the server should reserve the next-higher port number.
 * </div>
 */
- (void) setReserveNextHigher:(bool)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * 403 Forbidden. RFC 5766. Indicates that the request is valid, but the server is refusing
 * to perform it, likely due to administrative restrictions. The client considers the current
 * transaction as having failed. The client MAY notify the user or operator and SHOULD NOT retry the
 * same request with this server until it believes the problem has been fixed.
 * </div>
 */
@interface FMIceLinkStunTurnForbiddenError : FMIceLinkStunError

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnForbiddenError class.
 * </div>
 */
+ (FMIceLinkStunTurnForbiddenError*) forbiddenError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnForbiddenError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunTurnForbiddenError*) forbiddenErrorWithMessage:(NSString*)message;
/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnForbiddenError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnForbiddenError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * 508 Insufficient Capacity. The server has no more relayed transport addresses available, or has none with the requested properties, or the one that was
 * reserved is no longer available. The client considers the current operation as having failed. If the client is using either the EVEN-PORT or the
 * RESERVATION-TOKEN attribute, then the client MAY choose to remove or modify this attribute and try again immediately.  Otherwise, the client SHOULD
 * wait at least 1 minute before trying to create any more allocations on this server.
 * </div>
 */
@interface FMIceLinkStunTurnInsufficientCapacityError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnInsufficientCapacityError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnInsufficientCapacityError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnInsufficientCapacityError class.
 * </div>
 */
+ (FMIceLinkStunTurnInsufficientCapacityError*) insufficientCapacityError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnInsufficientCapacityError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunTurnInsufficientCapacityError*) insufficientCapacityErrorWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * The LIFETIME attribute represents the duration for which the server
 * will maintain an allocation in the absence of a refresh (in seconds).
 * </div>
 */
@interface FMIceLinkStunTurnLifetimeAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnLifetimeAttribute class.
 * </div>
 * @param lifetime The allocation duration in seconds.
 */
- (instancetype) initWithLifetime:(long long)lifetime;
/*!
 * <div>
 * Gets the allocation duration in seconds.
 * </div>
 */
- (long long) lifetime;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnLifetimeAttribute class.
 * </div>
 * @param lifetime The allocation duration in seconds.
 */
+ (FMIceLinkStunTurnLifetimeAttribute*) lifetimeAttributeWithLifetime:(long long)lifetime;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnLifetimeAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunTurnLifetimeAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Sets the allocation duration in seconds.
 * </div>
 */
- (void) setLifetime:(long long)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * 405 Mobility Forbidden. RFC 8016. Indicates that the request is valid, but the server is refusing to perform it,
 * likely due to administrative restrictions. The client considers the current transaction as having failed.
 * The client can notify the user or operator.  The client SHOULD NOT retry sending the Allocate request
 * containing the MOBILITY-TICKET with this server until it believes the problem has been fixed.
 * </div>
 */
@interface FMIceLinkStunTurnMobilityForbiddenError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnMobilityForbiddenError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnMobilityForbiddenError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnMobilityForbiddenError class.
 * </div>
 */
+ (FMIceLinkStunTurnMobilityForbiddenError*) mobilityForbiddenError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnMobilityForbiddenError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunTurnMobilityForbiddenError*) mobilityForbiddenErrorWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * 443 Peer Address Family Mismatch. A peer address was of a different address family than that of the relayed transport address of the allocation.
 * </div>
 */
@interface FMIceLinkStunTurnPeerAddressFamilyMismatchError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnPeerAddressFamilyMismatchError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnPeerAddressFamilyMismatchError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnPeerAddressFamilyMismatchError class.
 * </div>
 */
+ (FMIceLinkStunTurnPeerAddressFamilyMismatchError*) peerAddressFamilyMismatchError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnPeerAddressFamilyMismatchError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunTurnPeerAddressFamilyMismatchError*) peerAddressFamilyMismatchErrorWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * A generic STUN refresh message.
 * </div>
 */
@interface FMIceLinkStunTurnRefreshMessage : FMIceLinkStunMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnRefreshMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the method.
 * </div>
 */
- (int) method;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnRefreshMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunTurnRefreshMessage*) refreshMessageWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;

@end

/*!
 * <div>
 * A STUN refresh request.
 * </div>
 */
@interface FMIceLinkStunTurnRefreshRequest : FMIceLinkStunTurnRefreshMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnRefreshRequest class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnRefreshRequest class.
 * </div>
 */
+ (FMIceLinkStunTurnRefreshRequest*) refreshRequest;

@end

/*!
 * <div>
 * A STUN refresh response.
 * </div>
 */
@interface FMIceLinkStunTurnRefreshResponse : FMIceLinkStunTurnRefreshMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnRefreshResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
- (instancetype) initWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnRefreshResponse class.
 * </div>
 * @param transactionId The transaction ID.
 * @param success Whether the request was successful.
 */
+ (FMIceLinkStunTurnRefreshResponse*) refreshResponseWithTransactionId:(FMIceLinkDataBuffer*)transactionId success:(bool)success;

@end

/*!
 * <div>
 * The REQUESTED-ADDRESS-FAMILY attribute is used by clients to request
 * the allocation of a specific address type from a server.
 * </div>
 */
@interface FMIceLinkStunTurnRequestedAddressFamilyAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Gets the address family.
 * </div>
 */
- (int) addressFamily;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnRequestedAddressFamilyAttribute class.
 * </div>
 * @param addressFamily The address family.
 */
- (instancetype) initWithAddressFamily:(int)addressFamily;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnRequestedAddressFamilyAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunTurnRequestedAddressFamilyAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnRequestedAddressFamilyAttribute class.
 * </div>
 * @param addressFamily The address family.
 */
+ (FMIceLinkStunTurnRequestedAddressFamilyAttribute*) requestedAddressFamilyAttributeWithAddressFamily:(int)addressFamily;
/*!
 * <div>
 * Sets the address family.
 * </div>
 */
- (void) setAddressFamily:(int)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * This attribute is used by the client to request a specific transport
 * protocol for the allocated transport address.
 * </div>
 */
@interface FMIceLinkStunTurnRequestedTransportAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnRequestedTransportAttribute class.
 * </div>
 */
- (instancetype) initWithProtocol:(int)protocol;
/*!
 * <div>
 * Gets the transport protocol.
 * </div>
 */
- (int) protocol;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnRequestedTransportAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunTurnRequestedTransportAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnRequestedTransportAttribute class.
 * </div>
 */
+ (FMIceLinkStunTurnRequestedTransportAttribute*) requestedTransportAttributeWithProtocol:(int)protocol;
/*!
 * <div>
 * Sets the transport protocol.
 * </div>
 */
- (void) setProtocol:(int)value;
/*!
 * <div>
 * Gets the TCP transport protocol.
 * </div>
 */
+ (int) tcpProtocol;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Gets the UDP transport protocol.
 * </div>
 */
+ (int) udpProtocol;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * The RESERVATION-TOKEN attribute contains a token that uniquely
 * identifies a relayed transport address being held in reserve by the
 * server.
 * </div>
 */
@interface FMIceLinkStunTurnReservationTokenAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnReservationTokenAttribute class.
 * </div>
 * @param token The reservation token.
 */
- (instancetype) initWithToken:(FMIceLinkDataBuffer*)token;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnReservationTokenAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @return
 */
+ (FMIceLinkStunTurnReservationTokenAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnReservationTokenAttribute class.
 * </div>
 * @param token The reservation token.
 */
+ (FMIceLinkStunTurnReservationTokenAttribute*) reservationTokenAttributeWithToken:(FMIceLinkDataBuffer*)token;
/*!
 * <div>
 * Sets the reservation token.
 * </div>
 */
- (void) setToken:(FMIceLinkDataBuffer*)value;
/*!
 * <div>
 * Gets the reservation token.
 * </div>
 */
- (FMIceLinkDataBuffer*) token;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * A generic STUN send message.
 * </div>
 */
@interface FMIceLinkStunTurnSendMessage : FMIceLinkStunMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnSendMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the method.
 * </div>
 */
- (int) method;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnSendMessage class.
 * </div>
 * @param messageType The type of the message.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunTurnSendMessage*) sendMessageWithMessageType:(FMIceLinkStunMessageType)messageType transactionId:(FMIceLinkDataBuffer*)transactionId;

@end

/*!
 * <div>
 * A STUN send indication.
 * </div>
 */
@interface FMIceLinkStunTurnSendIndication : FMIceLinkStunTurnSendMessage

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnSendIndication class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnSendIndication class.
 * </div>
 */
+ (FMIceLinkStunTurnSendIndication*) sendIndication;

@end

/*!
 * <div>
 * 442 Unsupported Transport Protocol. The client should not receive this error in response to a request for a UDP allocation. The
 * client MAY notify the user or operator and SHOULD NOT reattempt the request with this server until it believes the problem has
 * been fixed.
 * </div>
 */
@interface FMIceLinkStunTurnUnsupportedTransportProtocolError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnUnsupportedTransportProtocolError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnUnsupportedTransportProtocolError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnUnsupportedTransportProtocolError class.
 * </div>
 */
+ (FMIceLinkStunTurnUnsupportedTransportProtocolError*) unsupportedTransportProtocolError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnUnsupportedTransportProtocolError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunTurnUnsupportedTransportProtocolError*) unsupportedTransportProtocolErrorWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * 441 Wrong Credentials. RFC 5766. Indicates that wrong credential were used by the client. The client should not receive this error
 * in response to an Allocate request.  The client MAY notify the user or operator and SHOULD NOT retry the same request with this server
 * until it believes the problem has been fixed.
 * </div>
 */
@interface FMIceLinkStunTurnWrongCredentialsError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnWrongCredentialsError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnWrongCredentialsError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnWrongCredentialsError class.
 * </div>
 */
+ (FMIceLinkStunTurnWrongCredentialsError*) wrongCredentialsError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnWrongCredentialsError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunTurnWrongCredentialsError*) wrongCredentialsErrorWithMessage:(NSString*)message;

@end

/*!
 * <div>
 * The XOR-PEER-ADDRESS specifies the address and port of the peer as
 * seen from the TURN server.
 * </div>
 */
@interface FMIceLinkStunTurnXorPeerAddressAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnXorPeerAddressAttribute class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the IP address.
 * </div>
 */
- (NSString*) ipAddress;
/*!
 * <div>
 * Gets the port.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnXorPeerAddressAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param transactionId The transaction ID.
 * @return
 */
+ (FMIceLinkStunTurnXorPeerAddressAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Sets the IP address.
 * </div>
 */
- (void) setIPAddress:(NSString*)value;
/*!
 * <div>
 * Sets the port.
 * </div>
 */
- (void) setPort:(int)value;
/*!
 * <div>
 * Gets the transaction ID.
 * </div>
 */
- (FMIceLinkDataBuffer*) transactionId;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the value to.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnXorPeerAddressAttribute class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunTurnXorPeerAddressAttribute*) xorPeerAddressAttributeWithIPAddress:(NSString*)ipAddress port:(int)port transactionId:(FMIceLinkDataBuffer*)transactionId;

@end

/*!
 * <div>
 * The XOR-RELAYED-ADDRESS is present in Allocate responses.  It
 * specifies the address and port that the server allocated to the
 * client.
 * </div>
 */
@interface FMIceLinkStunTurnXorRelayedAddressAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnXorRelayedAddressAttribute class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the IP address.
 * </div>
 */
- (NSString*) ipAddress;
/*!
 * <div>
 * Gets the port.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnXorRelayedAddressAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param transactionId The transaction ID.
 * @return
 */
+ (FMIceLinkStunTurnXorRelayedAddressAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Sets the IP address.
 * </div>
 */
- (void) setIPAddress:(NSString*)value;
/*!
 * <div>
 * Sets the port.
 * </div>
 */
- (void) setPort:(int)value;
/*!
 * <div>
 * Gets the transaction ID.
 * </div>
 */
- (FMIceLinkDataBuffer*) transactionId;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the value to.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunTurnXorRelayedAddressAttribute class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunTurnXorRelayedAddressAttribute*) xorRelayedAddressAttributeWithIPAddress:(NSString*)ipAddress port:(int)port transactionId:(FMIceLinkDataBuffer*)transactionId;

@end

/*!
 * <div>
 * 401  Unauthorized. RFC5389. Indicates that the request did not contain the correct
 * credentials to proceed.  The client should retry the request with proper credentials.
 * </div>
 */
@interface FMIceLinkStunUnauthorizedStunError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnauthorizedStunError class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnauthorizedStunError class.
 * </div>
 * @param message The message.
 */
- (instancetype) initWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnauthorizedStunError class.
 * </div>
 * @param nonce The nonce attribute.
 * @param realm The realm attribute.
 * @param message The message
 */
- (instancetype) initWithNonce:(FMIceLinkStunNonceAttribute*)nonce realm:(FMIceLinkStunRealmAttribute*)realm message:(NSString*)message;
/*!
 * <div>
 * Gets the nonce attribute.
 * </div>
 */
- (FMIceLinkStunNonceAttribute*) nonce;
/*!
 * <div>
 * Gets the realm attribute.
 * </div>
 */
- (FMIceLinkStunRealmAttribute*) realm;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnauthorizedStunError class.
 * </div>
 */
+ (FMIceLinkStunUnauthorizedStunError*) unauthorizedStunError;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnauthorizedStunError class.
 * </div>
 * @param message The message.
 */
+ (FMIceLinkStunUnauthorizedStunError*) unauthorizedStunErrorWithMessage:(NSString*)message;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnauthorizedStunError class.
 * </div>
 * @param nonce The nonce attribute.
 * @param realm The realm attribute.
 * @param message The message
 */
+ (FMIceLinkStunUnauthorizedStunError*) unauthorizedStunErrorWithNonce:(FMIceLinkStunNonceAttribute*)nonce realm:(FMIceLinkStunRealmAttribute*)realm message:(NSString*)message;

@end

/*!
 * <div>
 * 420  Unknown Attribute. RFC5389. Indicates that the server received a STUN packet containing a comprehension-required
 * attribute that it did not understand. The server MUST put this unknown attribute in the UNKNOWN-ATTRIBUTE
 * attribute of its error response.
 * </div>
 */
@interface FMIceLinkStunUnknownAttributeError : FMIceLinkStunError

/*!
 * <div>
 * Gets the description for this FMIceLinkStunError.
 * </div>
 */
- (NSString*) getDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnknownAttributeError class.
 * </div>
 * @param message The message.
 * @param unknownAttributes The unknown attributes attribute.
 */
- (instancetype) initWithMessage:(NSString*)message unknownAttributes:(FMIceLinkStunUnknownAttributesAttribute*)unknownAttributes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnknownAttributeError class.
 * </div>
 * @param unknownAttributes The unknown attributes attribute.
 */
- (instancetype) initWithUnknownAttributes:(FMIceLinkStunUnknownAttributesAttribute*)unknownAttributes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnknownAttributeError class.
 * </div>
 * @param message The message.
 * @param unknownAttributes The unknown attributes attribute.
 */
+ (FMIceLinkStunUnknownAttributeError*) unknownAttributeErrorWithMessage:(NSString*)message unknownAttributes:(FMIceLinkStunUnknownAttributesAttribute*)unknownAttributes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnknownAttributeError class.
 * </div>
 * @param unknownAttributes The unknown attributes attribute.
 */
+ (FMIceLinkStunUnknownAttributeError*) unknownAttributeErrorWithUnknownAttributes:(FMIceLinkStunUnknownAttributesAttribute*)unknownAttributes;
/*!
 * <div>
 * Gets the unknown attributes attribute.
 * </div>
 */
- (FMIceLinkStunUnknownAttributesAttribute*) unknownAttributes;

@end

/*!
 * <div>
 * The UNKNOWN-ATTRIBUTES attribute is present only in an error response
 * when the response code in the ERROR-CODE attribute is 420.
 * </div>
 */
@interface FMIceLinkStunUnknownAttributesAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnknownAttributesAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnknownAttributesAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param length The length.
 * @return
 */
+ (FMIceLinkStunUnknownAttributesAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset length:(int)length;
/*!
 * <div>
 * Sets the array of unknown attribute types.
 * </div>
 */
- (void) setTypes:(NSMutableArray*)value;
/*!
 * <div>
 * Gets the array of unknown attribute types.
 * </div>
 */
- (NSMutableArray*) types;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUnknownAttributesAttribute class.
 * </div>
 */
+ (FMIceLinkStunUnknownAttributesAttribute*) unknownAttributesAttribute;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * The USERNAME attribute is used for message integrity.  It identifies
 * the username and password combination used in the message-integrity
 * check.
 * </div>
 */
@interface FMIceLinkStunUsernameAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the attribute value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUsernameAttribute class.
 * </div>
 * @param value The username value.
 */
- (instancetype) initWithValue:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUsernameAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param length The length.
 * @return
 */
+ (FMIceLinkStunUsernameAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset length:(int)length;
/*!
 * <div>
 * Sets the username value.
 * </div>
 */
- (void) setValue:(NSString*)value;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunUsernameAttribute class.
 * </div>
 * @param value The username value.
 */
+ (FMIceLinkStunUsernameAttribute*) usernameAttribute:(NSString*)value;
/*!
 * <div>
 * Gets the username value.
 * </div>
 */
- (NSString*) value;
/*!
 * <div>
 * Writes the attribute value to a data buffer.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * STUN-wide methods.
 * </div>
 */
@interface FMIceLinkStunUtility : NSObject

/*!
 * <div>
 * Creates a long term key from the given username, realm, and password by calculating
 * the MD5 hash of their values concatenated as "username:realm:password".
 * </div>
 * @param username The username.
 * @param realm The realm.
 * @param password The password.
 */
+ (NSMutableData*) createLongTermKeyWithUsername:(NSString*)username realm:(NSString*)realm password:(NSString*)password;
/*!
 * <div>
 * Creates a short term key from the given password by encoding it as a UTF-8 byte array.
 * </div>
 * @param password The password.
 */
+ (NSMutableData*) createShortTermKeyWithPassword:(NSString*)password;

@end

/*!
 * <div>
 * The XOR-MAPPED-ADDRESS attribute is identical to the MAPPED-ADDRESS
 * attribute, except that the reflexive transport address is obfuscated
 * through the XOR function.
 * </div>
 */
@interface FMIceLinkStunXorMappedAddressAttribute : FMIceLinkStunAttribute

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the length of the value.
 * </div>
 * @return
 */
- (int) getValueLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunXorMappedAddressAttribute class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 * @param transactionId The transaction ID.
 */
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Gets the IP address.
 * </div>
 */
- (NSString*) ipAddress;
/*!
 * <div>
 * Gets the port.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunXorMappedAddressAttribute class.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 * @param transactionId The transaction ID.
 * @return
 */
+ (FMIceLinkStunXorMappedAddressAttribute*) readValueFromWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset transactionId:(FMIceLinkDataBuffer*)transactionId;
/*!
 * <div>
 * Sets the IP address.
 * </div>
 */
- (void) setIPAddress:(NSString*)value;
/*!
 * <div>
 * Sets the port.
 * </div>
 */
- (void) setPort:(int)value;
/*!
 * <div>
 * Gets the transaction ID.
 * </div>
 */
- (FMIceLinkDataBuffer*) transactionId;
/*!
 * <div>
 * Gets the type value.
 * </div>
 */
- (int) typeValue;
/*!
 * <div>
 * Writes the value to.
 * </div>
 * @param buffer The buffer.
 * @param offset The offset.
 */
- (void) writeValueToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStunXorMappedAddressAttribute class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 * @param transactionId The transaction ID.
 */
+ (FMIceLinkStunXorMappedAddressAttribute*) xorMappedAddressAttributeWithIPAddress:(NSString*)ipAddress port:(int)port transactionId:(FMIceLinkDataBuffer*)transactionId;

@end

/*!
 * <div>
 * An acoustic echo cancellation context.
 * </div>
 */
@interface FMIceLinkAecContext : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAecContext class.
 * </div>
 */
+ (FMIceLinkAecContext*) aecContext;
/*!
 * <div>
 * Gets the configuration.
 * </div>
 */
- (FMIceLinkAudioConfig*) config;
/*!
 * <div>
 * Creates an echo cancellation output mixer sink.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioSink*) createOutputMixerSinkWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates an echo cancellation output mixer.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioPipe*) createOutputMixerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates an echo cancellation processor.
 * </div>
 */
- (FMIceLinkAecPipe*) createProcessor;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (bool) destroy;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAecContext class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets the echo cancellation output mixer.
 * </div>
 */
- (FMIceLinkAudioPipe*) outputMixer;
/*!
 * <div>
 * Gets the echo cancellation output mixer sink.
 * </div>
 */
- (FMIceLinkAudioSink*) outputMixerSink;
/*!
 * <div>
 * Gets the echo cancellation processor.
 * </div>
 */
- (FMIceLinkAecPipe*) processor;

@end

/*!
 * <div>
 * A media pipe.
 * </div><typeparam name="TIOutput">The type of the output interface.</typeparam><typeparam name="TIOutputCollection">The type of the output interface collection.</typeparam><typeparam name="TIInput">The type of the input interface.</typeparam><typeparam name="TIInputCollection">The type of the input interface collection.</typeparam><typeparam name="TPipe">The type of the pipe.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam>
 */
@interface FMIceLinkMediaPipe : FMIceLinkDynamic

/*!
 * <div>
 * Adds an input.
 * </div>
 * @param input The input.
 */
- (void) addInput:(NSObject<FMIceLinkIMediaOutput>*)input;
/*!
 * <div>
 * Adds some inputs.
 * </div>
 * @param inputs The inputs.
 */
- (void) addInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Adds a handler that is raised when the Disabled property changes state.
 * </div>
 */
- (void) addOnDisabledChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when control frames are processed.
 * </div>
 */
- (void) addOnProcessControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when control frames are processed.
 * </div>
 */
- (void (^)(void(^)(NSMutableArray*))) addOnProcessControlFramesWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are processed.
 * </div>
 */
- (void) addOnProcessControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been processed.
 * </div>
 */
- (void) addOnProcessedFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been processed.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnProcessedFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been processed.
 * </div>
 */
- (void) addOnProcessedFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being processed.
 * </div>
 */
- (void) addOnProcessFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when an exception is thrown while processing a frame.
 * </div>
 */
- (void) addOnProcessFrameException:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Adds a handler that is raised when an exception is thrown while processing a frame.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*, NSException*))) addOnProcessFrameExceptionWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when an exception is thrown while processing a frame.
 * </div>
 */
- (void) addOnProcessFrameExceptionWithBlock:(void(^)(FMIceLinkMediaFrame*, NSException*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being processed.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnProcessFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being processed.
 * </div>
 */
- (void) addOnProcessFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are raised.
 * </div>
 */
- (void) addOnRaiseControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when control frames are raised.
 * </div>
 */
- (void (^)(void(^)(NSMutableArray*))) addOnRaiseControlFramesWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are raised.
 * </div>
 */
- (void) addOnRaiseControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been raised.
 * </div>
 */
- (void) addOnRaisedFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been raised.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnRaisedFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been raised.
 * </div>
 */
- (void) addOnRaisedFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being raised.
 * </div>
 */
- (void) addOnRaiseFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being raised.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnRaiseFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being raised.
 * </div>
 */
- (void) addOnRaiseFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the state changes.
 * </div>
 */
- (void) addOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the state changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaPipe*))) addOnStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the state changes.
 * </div>
 */
- (void) addOnStateChangeWithBlock:(void(^)(FMIceLinkMediaPipe*))valueBlock;
/*!
 * <div>
 * Adds an output.
 * </div>
 * @param output The output.
 */
- (void) addOutput:(NSObject<FMIceLinkIMediaInput>*)output;
/*!
 * <div>
 * Adds some outputs.
 * </div>
 * @param outputs The outputs.
 */
- (void) addOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Gets whether this media pipe is allowed to be timed.
 * </div>
 */
- (bool) allowDiagnosticTimer;
/*!
 * <div>
 * Creates a frame.
 * </div>
 * @param buffer The buffer.
 * @return
 */
- (FMIceLinkMediaFrame*) createFrameWithBuffer:(FMIceLinkMediaBuffer*)buffer;
/*!
 * <div>
 * Creates an input collection.
 * </div>
 * @param output The output.
 */
- (FMIceLinkIMediaInputCollection*) createInputCollectionWithOutput:(NSObject<FMIceLinkIMediaOutput>*)output;
/*!
 * <div>
 * Creates an output collection.
 * </div>
 * @param input The input.
 */
- (FMIceLinkIMediaOutputCollection*) createOutputCollectionWithInput:(NSObject<FMIceLinkIMediaInput>*)input;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (bool) destroy;
/*!
 * <div>
 * Gets a value indicating whether this pipe is disabled.
 * </div>
 */
- (bool) disabled;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes the control frames.
 * </div>
 * @param controlFrames The control frames.
 */
- (void) doProcessControlFrames:(NSMutableArray*)controlFrames;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkMediaFrame*)frame inputBuffer:(FMIceLinkMediaBuffer*)inputBuffer;
/*!
 * <div>
 * Processes an SDP media description.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 */
- (FMIceLinkError*) doProcessSdpMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Processes stats from an input.
 * </div>
 * @param stats The stats.
 */
- (void) doProcessStatsFromInputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Processes stats from an output.
 * </div>
 * @param stats The stats.
 */
- (void) doProcessStatsFromOutputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Gets the FIR sequence number.
 * </div>
 * @return
 */
- (int) getFirSequenceNumber;
/*!
 * <div>
 * Determines whether this pipe has the specified input.
 * </div>
 * @param input The input.
 */
- (bool) hasInput:(NSObject<FMIceLinkIMediaOutput>*)input;
/*!
 * <div>
 * Determines whether this pipe has the specified output.
 * </div>
 * @param output The output.
 */
- (bool) hasOutput:(NSObject<FMIceLinkIMediaInput>*)output;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Increments the FIR sequence number.
 * </div>
 */
- (void) incrementFirSequenceNumber;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaPipe`9 class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkMediaFormat*)inputFormat outputFormat:(FMIceLinkMediaFormat*)outputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaPipe`9 class.
 * </div>
 * @param outputFormat The output format.
 */
- (instancetype) initWithOutputFormat:(FMIceLinkMediaFormat*)outputFormat;
/*!
 * <div>
 * Gets the input.
 * </div>
 */
- (NSObject<FMIceLinkIMediaOutput>*) input;
/*!
 * <div>
 * Gets the input format.
 * </div>
 */
- (FMIceLinkMediaFormat*) inputFormat;
/*!
 * <div>
 * Gets the inputs.
 * </div>
 */
- (NSMutableArray*) inputs;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the maximum supported bitrate.
 * </div>
 */
- (int) maxInputBitrate;
/*!
 * <div>
 * Gets the maximum bitrate that all outputs can support.
 * </div>
 */
- (int) maxOutputBitrate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaPipe`9 class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
+ (FMIceLinkMediaPipe*) mediaPipeWithInputFormat:(FMIceLinkMediaFormat*)inputFormat outputFormat:(FMIceLinkMediaFormat*)outputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaPipe`9 class.
 * </div>
 * @param outputFormat The output format.
 */
+ (FMIceLinkMediaPipe*) mediaPipeWithOutputFormat:(FMIceLinkMediaFormat*)outputFormat;
/*!
 * <div>
 * Gets a value indicating whether this instance is muted.
 * </div>
 */
- (bool) muted;
/*!
 * <div>
 * Gets the output.
 * </div>
 */
- (NSObject<FMIceLinkIMediaInput>*) output;
/*!
 * <div>
 * Gets the output format.
 * </div>
 */
- (FMIceLinkMediaFormat*) outputFormat;
/*!
 * <div>
 * Gets the outputs.
 * </div>
 */
- (NSMutableArray*) outputs;
/*!
 * <div>
 * Gets a value indicating whether this instance is persistent.
 * If <code>true</code>, this instance will not be destroyed unless
 * FMIceLinkMediaPipe`9#destroy is called explicitly on this instance.
 * It will survive destruction of any parent elements that are
 * being destroyed.
 * </div>
 */
- (bool) persistent;
/*!
 * <div>
 * Gets the pipeline JSON with this as the central point.
 * </div>
 */
- (NSString*) pipelineJson;
/*!
 * <div>
 * Gets the pipeline JSON base.
 * </div>
 */
- (NSString*) pipelineJsonBase;
/*!
 * <div>
 * Gets the pipeline JSON from an input.
 * </div>
 */
- (NSString*) pipelineJsonFromInput;
/*!
 * <div>
 * Gets the pipeline JSON from an output.
 * </div>
 */
- (NSString*) pipelineJsonFromOutput;
/*!
 * <div>
 * Gets the pipeline JSON inputs.
 * </div>
 */
- (NSString*) pipelineJsonInputs;
/*!
 * <div>
 * Gets the pipeline JSON outputs.
 * </div>
 */
- (NSString*) pipelineJsonOutputs;
/*!
 * <div>
 * Processes a buffer, returning a future that is resolved when processing is complete.
 * The resolved future will contain a buffer that MUST be freed, as it is not known
 * whether the underlying implementation is using data buffer pooling.
 * </div>
 * @param buffer The buffer.
 * @return
 */
- (FMIceLinkFuture*) processBuffer:(FMIceLinkMediaBuffer*)buffer;
/*!
 * <div>
 * Processes the control frames.
 * </div>
 * @param controlFrames The control frames.
 */
- (void) processControlFrames:(NSMutableArray*)controlFrames;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 */
- (bool) processFrame:(FMIceLinkMediaFrame*)frame;
/*!
 * <div>
 * Gets the ProcessFramePolicy for this media input.
 * </div>
 */
- (FMIceLinkProcessFramePolicy) processFramePolicy;
/*!
 * <div>
 * Gets whether the stream is muted or not.
 * </div>
 */
- (bool) processGetMuteFromStream;
/*!
 * <div>
 * Processes an SDP media description from an input.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 */
- (FMIceLinkError*) processSdpMediaDescriptionFromInputWithMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Processes an SDP media description from an output.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 */
- (FMIceLinkError*) processSdpMediaDescriptionFromOutputWithMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Process a set mute call from a stream.
 * </div>
 * @param mute Whether to mute or not.
 */
- (void) processSetMuteFromStreamWithMute:(bool)mute;
/*!
 * <div>
 * Processes stats from an input.
 * </div>
 * @param stats The stats.
 */
- (void) processStatsFromInputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Processes stats from an output.
 * </div>
 * @param stats The stats.
 */
- (void) processStatsFromOutputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Raises a control frame.
 * </div>
 * @param controlFrame The control frame.
 */
- (void) raiseControlFrame:(FMIceLinkMediaControlFrame*)controlFrame;
/*!
 * <div>
 * Raises some control frames.
 * </div>
 * @param controlFrames The control frames.
 */
- (void) raiseControlFrames:(NSMutableArray*)controlFrames;
/*!
 * <div>
 * Raises a frame.
 * </div>
 * @param frame The frame.
 */
- (void) raiseFrame:(FMIceLinkMediaFrame*)frame;
/*!
 * <div>
 * Removes an input.
 * </div>
 * @param input The input.
 */
- (bool) removeInput:(NSObject<FMIceLinkIMediaOutput>*)input;
/*!
 * <div>
 * Removes all inputs.
 * </div>
 */
- (void) removeInputs;
/*!
 * <div>
 * Removes some inputs.
 * </div>
 * @param inputs The inputs.
 */
- (void) removeInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Removes a handler that is raised when the Disabled property changes state.
 * </div>
 */
- (void) removeOnDisabledChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when control frames are processed.
 * </div>
 */
- (void) removeOnProcessControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame has been processed.
 * </div>
 */
- (void) removeOnProcessedFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame is being processed.
 * </div>
 */
- (void) removeOnProcessFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when an exception is thrown while processing a frame.
 * </div>
 */
- (void) removeOnProcessFrameException:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Removes a handler that is raised when control frames are raised.
 * </div>
 */
- (void) removeOnRaiseControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame has been raised.
 * </div>
 */
- (void) removeOnRaisedFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame is being raised.
 * </div>
 */
- (void) removeOnRaiseFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the state changes.
 * </div>
 */
- (void) removeOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes an output.
 * </div>
 * @param output The output.
 */
- (bool) removeOutput:(NSObject<FMIceLinkIMediaInput>*)output;
/*!
 * <div>
 * Removes all outputs.
 * </div>
 */
- (void) removeOutputs;
/*!
 * <div>
 * Removes some outputs.
 * </div>
 * @param outputs The outputs.
 */
- (void) removeOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Sets the input.
 * </div>
 */
- (void) setInput:(NSObject<FMIceLinkIMediaOutput>*)value;
/*!
 * <div>
 * Sets the inputs.
 * </div>
 */
- (void) setInputs:(NSMutableArray*)value;
/*!
 * <div>
 * Sets a value indicating whether this instance is muted.
 * </div>
 */
- (void) setMuted:(bool)value;
/*!
 * <div>
 * Sets the output.
 * </div>
 */
- (void) setOutput:(NSObject<FMIceLinkIMediaInput>*)value;
/*!
 * <div>
 * Sets the outputs.
 * </div>
 */
- (void) setOutputs:(NSMutableArray*)value;
/*!
 * <div>
 * Sets a value indicating whether this instance is persistent.
 * If <code>true</code>, this instance will not be destroyed unless
 * FMIceLinkMediaPipe`9#destroy is called explicitly on this instance.
 * It will survive destruction of any parent elements that are
 * being destroyed.
 * </div>
 */
- (void) setPersistent:(bool)value;
/*!
 * <div>
 * Sets the ProcessFramePolicy for this media input.
 * </div>
 */
- (void) setProcessFramePolicy:(FMIceLinkProcessFramePolicy)value;
/*!
 * <div>
 * Sets an optional tag to identify this instance.
 * </div>
 */
- (void) setTag:(NSString*)value;
/*!
 * <div>
 * Gets the state.
 * </div>
 */
- (FMIceLinkMediaPipeState) state;
/*!
 * <div>
 * Gets an optional tag to identify this instance.
 * </div>
 */
- (NSString*) tag;

@end

/*!
 * <div>
 * An audio pipe.
 * </div>
 */
@interface FMIceLinkAudioPipe : FMIceLinkMediaPipe

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioPipe class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
+ (FMIceLinkAudioPipe*) audioPipeWithInputFormat:(FMIceLinkAudioFormat*)inputFormat outputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioPipe class.
 * </div>
 * @param outputFormat The output format.
 */
+ (FMIceLinkAudioPipe*) audioPipeWithOutputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Gets the output configuration.
 * (Alias for FMIceLinkAudioPipe#outputConfig.)
 * </div>
 */
- (FMIceLinkAudioConfig*) config;
/*!
 * <div>
 * Creates a frame.
 * </div>
 * @param buffer The buffer.
 * @return
 */
- (FMIceLinkAudioFrame*) createFrameWithBuffer:(FMIceLinkAudioBuffer*)buffer;
/*!
 * <div>
 * Creates an input collection.
 * </div>
 * @param output The output.
 */
- (FMIceLinkIAudioInputCollection*) createInputCollectionWithOutput:(NSObject<FMIceLinkIAudioOutput>*)output;
/*!
 * <div>
 * Creates an output collection.
 * </div>
 * @param input The input.
 */
- (FMIceLinkIAudioOutputCollection*) createOutputCollectionWithInput:(NSObject<FMIceLinkIAudioInput>*)input;
/*!
 * <div>
 * Gets a value indicating the gain
 * (input amplification) of this sink.
 * Any value greater than or equal to 0.0
 * is acceptable.
 * </div>
 */
- (double) gain;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioPipe class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkAudioFormat*)inputFormat outputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioPipe class.
 * </div>
 * @param outputFormat The output format.
 */
- (instancetype) initWithOutputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Gets the input configuration.
 * </div>
 */
- (FMIceLinkAudioConfig*) inputConfig;
/*!
 * <div>
 * Gets the output configuration.
 * </div>
 */
- (FMIceLinkAudioConfig*) outputConfig;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @return
 */
- (bool) processFrame:(FMIceLinkAudioFrame*)frame;
/*!
 * <div>
 * Raises a frame.
 * </div>
 * @param frame The frame.
 */
- (void) raiseFrame:(FMIceLinkAudioFrame*)frame;
/*!
 * <div>
 * Sets a value indicating the gain
 * (input amplification) of this sink.
 * Any value greater than or equal to 0.0
 * is acceptable.
 * </div>
 */
- (void) setGain:(double)value;
/*!
 * <div>
 * Sets a value indicating the volume
 * (output resistance) of this source.
 * Valid value range is 0.0 to 1.0, inclusive.
 * </div>
 */
- (void) setVolume:(double)value;
/*!
 * <div>
 * Gets a value indicating the volume
 * (output resistance) of this source.
 * Valid value range is 0.0 to 1.0, inclusive.
 * </div>
 */
- (double) volume;

@end

/*!
 * <div>
 * An acoustic echo cancellation (AEC) pipe.
 * </div>
 */
@interface FMIceLinkAecPipe : FMIceLinkAudioPipe

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAecPipe class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkAecPipe*) aecPipeWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAecPipe class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Processes a speaker frame.
 * </div>
 * @param frame The frame.
 */
- (void) processSpeakerFrame:(FMIceLinkAudioFrame*)frame;
/*!
 * <div>
 * Sets the speaker sink.
 * </div>
 */
- (void) setSpeaker:(NSObject<FMIceLinkIAudioInput>*)value;
/*!
 * <div>
 * Gets the speaker sink.
 * </div>
 */
- (NSObject<FMIceLinkIAudioInput>*) speaker;

@end

/*!
 * <div>
 * A media control frame.
 * </div>
 */
@interface FMIceLinkMediaControlFrame : NSObject

/*!
 * <div>
 * Gets the last 5 bits of the first byte.
 * </div>
 */
- (int) byte1Last5Bits;
/*!
 * <div>
 * Gets the buffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) dataBuffer;
/*!
 * <div>
 * Gets the length of the fixed header.
 * </div>
 */
+ (int) fixedHeaderLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaControlFrame class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaControlFrame class.
 * </div>
 */
+ (FMIceLinkMediaControlFrame*) mediaControlFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkMediaControlFrame*) mediaControlFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Parses a data buffer into an array of control frames.
 * </div>
 * @param dataBuffer The data buffer.
 * @return
 */
+ (NSMutableArray*) parseWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Gets the payload.
 * </div>
 */
- (FMIceLinkDataBuffer*) payload;
/*!
 * <div>
 * Gets the length of the payload, in bytes, with padding.
 * </div>
 */
- (int) payloadLengthWithPadding;
/*!
 * <div>
 * Gets the payload type.
 * </div>
 */
- (int) payloadType;
/*!
 * <div>
 * Sets the last 5 bits of the first byte.
 * </div>
 */
- (void) setByte1Last5Bits:(int)value;
/*!
 * <div>
 * Sets the buffer.
 * </div>
 */
- (void) setDataBuffer:(FMIceLinkDataBuffer*)value;
/*!
 * <div>
 * Sets the length of the payload, in bytes, with padding.
 * </div>
 */
- (void) setPayloadLengthWithPadding:(int)value;
/*!
 * <div>
 * Sets the payload type.
 * </div>
 */
- (void) setPayloadType:(int)value;
/*!
 * <div>
 * Sets the version.
 * </div>
 */
- (void) setVersion:(int)value;
/*!
 * <div>
 * Gets the stream ID.
 * </div>
 */
- (NSString*) streamId;
/*!
 * <div>
 * Gets the version.
 * </div>
 */
- (int) version;

@end

/*!
 * <div>
 * An RTCP Feedback packet.
 * </div>
 */
@interface FMIceLinkFeedbackControlFrame : FMIceLinkMediaControlFrame

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedbackControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param payloadType Type of the payload.
 */
+ (FMIceLinkFeedbackControlFrame*) feedbackControlFrameWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedbackControlFrame class.
 * </div>
 * @param feedbackMessageType The feedback message type.
 * @param payloadType Payload type.
 * @param buffer The backing data buffer.
 */
+ (FMIceLinkFeedbackControlFrame*) feedbackControlFrameWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType buffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedbackControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param payloadType Type of the payload.
 * @param senderSynchronizationSource The sender synchronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 */
+ (FMIceLinkFeedbackControlFrame*) feedbackControlFrameWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedbackControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param payloadType Type of the payload.
 * @param senderSynchronizationSource The sender synchronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 * @param feedbackControlInformation The feedback control information.
 */
+ (FMIceLinkFeedbackControlFrame*) feedbackControlFrameWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMIceLinkDataBuffer*)feedbackControlInformation;
/*!
 * <div>
 * Gets the Feedback Control Information field.
 * </div>
 */
- (FMIceLinkDataBuffer*) feedbackControlInformation;
/*!
 * <div>
 * Gets the feedback control information offset.
 * </div>
 */
- (int) feedbackControlInformationOffset;
/*!
 * <div>
 * Gets the feedback message type.
 * </div>
 */
- (int) feedbackMessageType;
/*!
 * <div>
 * Gets the fixed payload header length of a Feedback Control packet.
 * </div>
 */
+ (int) fixedPayloadHeaderLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedbackControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param payloadType Type of the payload.
 */
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedbackControlFrame class.
 * </div>
 * @param feedbackMessageType The feedback message type.
 * @param payloadType Payload type.
 * @param buffer The backing data buffer.
 */
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType buffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedbackControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param payloadType Type of the payload.
 * @param senderSynchronizationSource The sender synchronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 */
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedbackControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param payloadType Type of the payload.
 * @param senderSynchronizationSource The sender synchronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 * @param feedbackControlInformation The feedback control information.
 */
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMIceLinkDataBuffer*)feedbackControlInformation;
/*!
 * <div>
 * Gets the SSRC of the media source that this
 * piece of feedback information is related to.
 * </div>
 */
- (long long) mediaSourceSynchronizationSource;
/*!
 * <div>
 * Gets the SSRC of the packet sender - the synchronization source
 * identifier for the originator of this packet.
 * </div>
 */
- (long long) packetSenderSynchronizationSource;
/*!
 * <div>
 * Sets the feedback message type.
 * </div>
 */
- (void) setFeedbackMessageType:(int)value;
/*!
 * <div>
 * Sets the SSRC of the media source that this
 * piece of feedback information is related to.
 * </div>
 */
- (void) setMediaSourceSynchronizationSource:(long long)value;
/*!
 * <div>
 * Sets the SSRC of the packet sender - the synchronization source
 * identifier for the originator of this packet.
 * </div>
 */
- (void) setPacketSenderSynchronizationSource:(long long)value;

@end

/*!
 * <div>
 * An RTCP Feedback PS packet.
 * </div>
 */
@interface FMIceLinkPayloadSpecificControlFrame : FMIceLinkFeedbackControlFrame

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPayloadSpecificControlFrame class.
 * </div>
 * @param feedbackMessageType The feedback message type.
 */
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPayloadSpecificControlFrame class.
 * </div>
 * @param buffer The backing data buffer.
 * @param feedbackMessageType The feedback message type.
 */
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType buffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedbackControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param senderSynchronizationSource The sender synchronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 */
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedbackControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param senderSynchronizationSource The sender synchronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 * @param feedbackControlInformation The feedback control information.
 */
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMIceLinkDataBuffer*)feedbackControlInformation;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPayloadSpecificControlFrame class.
 * </div>
 * @param feedbackMessageType The feedback message type.
 */
+ (FMIceLinkPayloadSpecificControlFrame*) payloadSpecificControlFrameWithFeedbackMessageType:(int)feedbackMessageType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPayloadSpecificControlFrame class.
 * </div>
 * @param buffer The backing data buffer.
 * @param feedbackMessageType The feedback message type.
 */
+ (FMIceLinkPayloadSpecificControlFrame*) payloadSpecificControlFrameWithFeedbackMessageType:(int)feedbackMessageType buffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedbackControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param senderSynchronizationSource The sender synchronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 */
+ (FMIceLinkPayloadSpecificControlFrame*) payloadSpecificControlFrameWithFeedbackMessageType:(int)feedbackMessageType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedbackControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param senderSynchronizationSource The sender synchronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 * @param feedbackControlInformation The feedback control information.
 */
+ (FMIceLinkPayloadSpecificControlFrame*) payloadSpecificControlFrameWithFeedbackMessageType:(int)feedbackMessageType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMIceLinkDataBuffer*)feedbackControlInformation;
/*!
 * <div>
 * Gets the payload-specific payload type.
 * </div>
 */
+ (int) registeredPayloadType;

@end

/*!
 * <div>
 * An Application Layer Feedback control (RFC 4585).
 * </div>
 */
@interface FMIceLinkAfbControlFrame : FMIceLinkPayloadSpecificControlFrame

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAfbControlFrame class.
 * 
 * @param buffer The backing data buffer.</div>
 */
+ (FMIceLinkAfbControlFrame*) afbControlFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAfbControlFrame class.
 * </div>
 * @param senderSyncronizationSource The sender syncronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 */
+ (FMIceLinkAfbControlFrame*) afbControlFrameWithSenderSyncronizationSource:(long long)senderSyncronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAfbControlFrame class.
 * </div>
 * @param senderSyncronizationSource The sender syncronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 * @param feedbackControlInformation The feedback control information.
 */
+ (FMIceLinkAfbControlFrame*) afbControlFrameWithSenderSyncronizationSource:(long long)senderSyncronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMIceLinkDataBuffer*)feedbackControlInformation;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAfbControlFrame class.
 * 
 * @param buffer The backing data buffer.</div>
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAfbControlFrame class.
 * </div>
 * @param senderSyncronizationSource The sender syncronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 */
- (instancetype) initWithSenderSyncronizationSource:(long long)senderSyncronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAfbControlFrame class.
 * </div>
 * @param senderSyncronizationSource The sender syncronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 * @param feedbackControlInformation The feedback control information.
 */
- (instancetype) initWithSenderSyncronizationSource:(long long)senderSyncronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMIceLinkDataBuffer*)feedbackControlInformation;
/*!
 * <div>
 * Gets the type of the registered feedback message.
 * </div>
 */
+ (int) registeredFeedbackMessageType;

@end

/*!
 * <div>
 * An RTCP APP packet.
 * </div>
 */
@interface FMIceLinkAppControlFrame : FMIceLinkMediaControlFrame

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAppControlFrame class.
 * </div>
 */
+ (FMIceLinkAppControlFrame*) appControlFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAppControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkAppControlFrame*) appControlFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAppControlFrame class.
 * </div>
 * @param subType Type of the sub.
 * @param synchronizationSource The SSRC.
 * @param name The name.
 * @param data The data.
 */
+ (FMIceLinkAppControlFrame*) appControlFrameWithSubType:(int)subType synchronizationSource:(long long)synchronizationSource name:(NSString*)name data:(FMIceLinkDataBuffer*)data;
/*!
 * <div>
 * Gets optional application-dependent data.
 * </div>
 */
- (FMIceLinkDataBuffer*) data;
/*!
 * <div>
 * Gets the length of the FMIceLinkAppControlFrame#data.
 * </div>
 */
- (int) dataLength;
/*!
 * <div>
 * Gets the offset of the FMIceLinkAppControlFrame#data in the payload.
 * </div>
 */
- (int) dataPayloadOffset;
/*!
 * <div>
 * Gets the length of the fixed payload header.
 * </div>
 */
+ (int) fixedPayloadHeaderLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAppControlFrame class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAppControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAppControlFrame class.
 * </div>
 * @param subType Type of the sub.
 * @param synchronizationSource The SSRC.
 * @param name The name.
 * @param data The data.
 */
- (instancetype) initWithSubType:(int)subType synchronizationSource:(long long)synchronizationSource name:(NSString*)name data:(FMIceLinkDataBuffer*)data;
/*!
 * <div>
 * Gets the name.
 * </div>
 */
- (NSString*) name;
/*!
 * <div>
 * Gets the application-specific payload type.
 * </div>
 */
+ (int) registeredPayloadType;
/*!
 * <div>
 * Sets the name.
 * </div>
 */
- (void) setName:(NSString*)value;
/*!
 * <div>
 * Sets the subtype to allow a set of APP packets to be defined
 * under one unique name, or for any application-dependent data.
 * </div>
 */
- (void) setSubType:(int)value;
/*!
 * <div>
 * Sets the synchronization source.
 * </div>
 */
- (void) setSynchronizationSource:(long long)value;
/*!
 * <div>
 * Gets the subtype to allow a set of APP packets to be defined
 * under one unique name, or for any application-dependent data.
 * </div>
 */
- (int) subType;
/*!
 * <div>
 * Gets the synchronization source.
 * </div>
 */
- (long long) synchronizationSource;

@end

/*!
 * <div>
 * A media branch.
 * </div><typeparam name="TIOutput">The type of the output interface.</typeparam><typeparam name="TIOutputCollection">The type of the output interface collection.</typeparam><typeparam name="TIInput">The type of the input interface.</typeparam><typeparam name="TIInputCollection">The type of the input interface collection.</typeparam><typeparam name="TIElement">The type of the element interface</typeparam><typeparam name="TSource">The type of the source.</typeparam><typeparam name="TSink">The type of the sink.</typeparam><typeparam name="TPipe">The type of the pipe.</typeparam><typeparam name="TTrack">The type of the track.</typeparam><typeparam name="TBranch">The type of the branch.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam>
 */
@interface FMIceLinkMediaBranch : FMIceLinkDynamic

/*!
 * <div>
 * Gets the first active track.
 * </div>
 */
- (FMIceLinkMediaTrack*) activeTrack;
/*!
 * <div>
 * Gets the active tracks.
 * </div>
 */
- (NSMutableArray*) activeTracks;
/*!
 * <div>
 * Creates an array of tracks from a list of tracks.
 * </div>
 * @param tracks The list of tracks.
 */
- (NSMutableArray*) arrayFromTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (bool) destroy;
/*!
 * <div>
 * Gets a value indicating whether this instance is disabled.
 * </div>
 */
- (bool) disabled;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaBranch`14 class.
 * </div>
 */
- (instancetype) initWithTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaBranch`14 class.
 * </div>
 */
+ (FMIceLinkMediaBranch*) mediaBranchWithTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Gets a value indicating whether any
 * of the tracks in this branch are muted.
 * Setting a value will apply to all elements.
 * </div>
 */
- (bool) muted;
/*!
 * <div>
 * Gets a value indicating whether this instance is persistent.
 * If <code>true</code>, this instance will not be destroyed unless
 * FMIceLinkMediaBranch`14#destroy is called explicitly on this instance.
 * It will survive destruction of any parent elements that are
 * being destroyed.
 * </div>
 */
- (bool) persistent;
/*!
 * <div>
 * Gets the pipeline JSON with this as the central point.
 * </div>
 */
- (NSString*) pipelineJson;
/*!
 * <div>
 * Sets the identifier.
 * </div>
 */
- (void) setId:(NSString*)value;
/*!
 * <div>
 * Sets a value indicating whether any
 * of the tracks in this branch are muted.
 * Setting a value will apply to all elements.
 * </div>
 */
- (void) setMuted:(bool)value;
/*!
 * <div>
 * Sets a value indicating whether this instance is persistent.
 * If <code>true</code>, this instance will not be destroyed unless
 * FMIceLinkMediaBranch`14#destroy is called explicitly on this instance.
 * It will survive destruction of any parent elements that are
 * being destroyed.
 * </div>
 */
- (void) setPersistent:(bool)value;
/*!
 * <div>
 * Gets the first track.
 * </div>
 */
- (FMIceLinkMediaTrack*) track;
/*!
 * <div>
 * Gets the tracks.
 * </div>
 */
- (NSMutableArray*) tracks;

@end

/*!
 * <div>
 * An audio branch.
 * </div>
 */
@interface FMIceLinkAudioBranch : FMIceLinkMediaBranch

/*!
 * <div>
 * Creates an array of tracks from a list of tracks.
 * </div>
 * @param tracks The list of tracks.
 */
- (NSMutableArray*) arrayFromTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioBranch class.
 * </div>
 * @param tracks The tracks.
 */
+ (FMIceLinkAudioBranch*) audioBranchWithTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioBranch class.
 * </div>
 * @param tracks The tracks.
 */
- (instancetype) initWithTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A media buffer.
 * </div><typeparam name="TFormat">The type of the format.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam>
 */
@interface FMIceLinkMediaBuffer : FMIceLinkDynamic

/*!
 * <div>
 * Clones this instance.
 * </div>
 */
- (FMIceLinkMediaBuffer*) clone;
/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (FMIceLinkMediaBuffer*) createInstance;
/*!
 * <div>
 * Gets the data buffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) dataBuffer;
/*!
 * <div>
 * Gets the data buffers.
 * </div>
 */
- (NSMutableArray*) dataBuffers;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the approximate footprint of this media buffer
 * by returning the sum of its data buffer lengths.
 * </div>
 */
- (int) footprint;
/*!
 * <div>
 * Gets the format.
 * </div>
 */
- (FMIceLinkMediaFormat*) format;
/*!
 * <div>
 * Frees the data buffers referenced by this instance.
 * </div>
 * @return This instance.
 */
- (FMIceLinkMediaBuffer*) free;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaBuffer`2 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaBuffer`2 class.
 * </div>
 * @param dataBuffer The data buffer.
 * @param format The format.
 */
- (instancetype) initWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer format:(FMIceLinkMediaFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaBuffer`2 class.
 * </div>
 * @param dataBuffers The data buffers.
 * @param format The format.
 */
- (instancetype) initWithDataBuffers:(NSMutableArray*)dataBuffers format:(FMIceLinkMediaFormat*)format;
/*!
 * <div>
 * Gets a value indicating whether this instance has been muted.
 * </div>
 */
- (bool) isMuted;
/*!
 * <div>
 * Keeps the data buffers referenced by this instance.
 * </div>
 * @return This instance.
 */
- (FMIceLinkMediaBuffer*) keep;
/*!
 * <div>
 * Gets the last sequence number.
 * </div>
 */
- (long long) lastSequenceNumber;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaBuffer`2 class.
 * </div>
 */
+ (FMIceLinkMediaBuffer*) mediaBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaBuffer`2 class.
 * </div>
 * @param dataBuffer The data buffer.
 * @param format The format.
 */
+ (FMIceLinkMediaBuffer*) mediaBufferWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer format:(FMIceLinkMediaFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaBuffer`2 class.
 * </div>
 * @param dataBuffers The data buffers.
 * @param format The format.
 */
+ (FMIceLinkMediaBuffer*) mediaBufferWithDataBuffers:(NSMutableArray*)dataBuffers format:(FMIceLinkMediaFormat*)format;
/*!
 * <div>
 * Mutes this instance. This is a one-way operation that clears
 * the underlying data buffer. If the buffer has an unsupported
 * format, this method will return <code>false</code>.
 * </div>
 */
- (bool) mute;
/*!
 * <div>
 * Gets a value indicating whether this buffer contains
 * data recovered by forward error correction (FEC).
 * </div>
 */
- (bool) recoveredByFec;
/*!
 * <div>
 * Gets the Rtp Packet Header for this media buffer.
 * </div>
 */
- (FMIceLinkRtpPacketHeader*) rtpHeader;
/*!
 * <div>
 * Gets the RTP Packet Headers for this media buffer.
 * </div>
 */
- (NSMutableArray*) rtpHeaders;
/*!
 * <div>
 * Gets the RTP sequence number.
 * </div>
 */
- (int) rtpSequenceNumber;
/*!
 * <div>
 * Gets the RTP sequence numbers.
 * </div>
 */
- (NSMutableArray*) rtpSequenceNumbers;
/*!
 * <div>
 * Gets the sequence number.
 * </div>
 */
- (long long) sequenceNumber;
/*!
 * <div>
 * Gets the sequence numbers.
 * </div>
 */
- (NSMutableArray*) sequenceNumbers;
/*!
 * <div>
 * Sets the data buffer.
 * </div>
 */
- (void) setDataBuffer:(FMIceLinkDataBuffer*)value;
/*!
 * <div>
 * Sets the data buffers.
 * </div>
 */
- (void) setDataBuffers:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the format.
 * </div>
 */
- (void) setFormat:(FMIceLinkMediaFormat*)value;
/*!
 * <div>
 * Sets a value indicating whether this buffer contains
 * data recovered by forward error correction (FEC).
 * </div>
 */
- (void) setRecoveredByFec:(bool)value;
/*!
 * <div>
 * Sets the Rtp Packet Header for this media buffer.
 * </div>
 */
- (void) setRtpHeader:(FMIceLinkRtpPacketHeader*)value;
/*!
 * <div>
 * Sets the RTP Packet Headers for this media buffer.
 * </div>
 */
- (void) setRtpHeaders:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the sequence number.
 * </div>
 */
- (void) setSequenceNumber:(long long)value;
/*!
 * <div>
 * Sets the sequence numbers.
 * </div>
 */
- (void) setSequenceNumbers:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the source identifier.
 * </div>
 */
- (void) setSourceId:(NSString*)value;
/*!
 * <div>
 * Gets the source identifier.
 * </div>
 */
- (NSString*) sourceId;

@end

/*!
 * <div>
 * An audio buffer.
 * </div>
 */
@interface FMIceLinkAudioBuffer : FMIceLinkMediaBuffer

/*!
 * <div>
 * Applies gain to this instance.
 * </div>
 * @param gain The gain.
 */
- (void) applyGain:(double)gain;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioBuffer class.
 * </div>
 */
+ (FMIceLinkAudioBuffer*) audioBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioBuffer class.
 * </div>
 * @param dataBuffer The data buffer.
 * @param format The format.
 */
+ (FMIceLinkAudioBuffer*) audioBufferWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer format:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioBuffer class.
 * </div>
 * @param dataBuffers The data buffers.
 * @param format The format.
 */
+ (FMIceLinkAudioBuffer*) audioBufferWithDataBuffers:(NSMutableArray*)dataBuffers format:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Calculates the level of this instance.
 * </div>
 */
- (double) calculateLevel;
/*!
 * <div>
 * Clones this instance.
 * </div>
 */
- (FMIceLinkAudioBuffer*) clone;
/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (FMIceLinkAudioBuffer*) createInstance;
/*!
 * <div>
 * Creates a silent audio buffer with the specified duration, clock rate, and channel count.
 * </div>
 * @param duration The duration in milliseconds.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (FMIceLinkAudioBuffer*) createSilenceWithDuration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Creates a silent audio buffer with the specified duration and configuration.
 * </div>
 * @param duration The duration in milliseconds.
 * @param config The configuration.
 */
+ (FMIceLinkAudioBuffer*) createSilenceWithDuration:(int)duration config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates an audio buffer with the specified duration, clock rate, and channel count, a frequency of 440Hz, and an amplitude of 16,384.
 * </div>
 * @param timestamp The starting time of this buffer relative to the clock rate.
 * @param duration The duration in milliseconds.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (FMIceLinkAudioBuffer*) createSoundWithTimestamp:(long long)timestamp duration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Creates a silent audio buffer with the specified duration, clock rate, channel count, and frequency, and an amplitude of 16,384.
 * </div>
 * @param timestamp The starting time of this buffer relative to the clock rate.
 * @param duration The duration in milliseconds.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 * @param frequency The frequency.
 */
+ (FMIceLinkAudioBuffer*) createSoundWithTimestamp:(long long)timestamp duration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount frequency:(float)frequency;
/*!
 * <div>
 * Creates a silent audio buffer with the specified duration, clock rate, channel count, frequency, and amplitude.
 * </div>
 * @param timestamp The starting time of this buffer relative to the clock rate.
 * @param duration The duration in milliseconds.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 * @param frequency The frequency.
 * @param amplitude The amplitude.
 */
+ (FMIceLinkAudioBuffer*) createSoundWithTimestamp:(long long)timestamp duration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount frequency:(float)frequency amplitude:(int)amplitude;
/*!
 * <div>
 * Creates an audio buffer with the specified duration and configuration, a frequency of 440Hz, and an amplitude of 16,384.
 * </div>
 * @param timestamp The starting time of this buffer relative to the clock rate.
 * @param duration The duration in milliseconds.
 * @param config The configuration.
 */
+ (FMIceLinkAudioBuffer*) createSoundWithTimestamp:(long long)timestamp duration:(int)duration config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a silent audio buffer with the specified duration, configuration, and frequency, and an amplitude of 16,384.
 * </div>
 * @param timestamp The starting time of this buffer relative to the clock rate.
 * @param duration The duration in milliseconds.
 * @param config The configuration.
 * @param frequency The frequency.
 */
+ (FMIceLinkAudioBuffer*) createSoundWithTimestamp:(long long)timestamp duration:(int)duration config:(FMIceLinkAudioConfig*)config frequency:(float)frequency;
/*!
 * <div>
 * Creates a silent audio buffer with the specified duration, configuration, frequency, and amplitude.
 * </div>
 * @param timestamp The starting time of this buffer relative to the clock rate.
 * @param duration The duration in milliseconds.
 * @param config The configuration.
 * @param frequency The frequency.
 * @param amplitude The amplitude.
 */
+ (FMIceLinkAudioBuffer*) createSoundWithTimestamp:(long long)timestamp duration:(int)duration config:(FMIceLinkAudioConfig*)config frequency:(float)frequency amplitude:(int)amplitude;
/*!
 * <div>
 * Deserializes an array of instances from JSON.
 * </div>
 * @param audioBuffersJson The audio buffers JSON.
 * @return
 */
+ (NSMutableArray*) fromJsonArrayWithAudioBuffersJson:(NSString*)audioBuffersJson;
/*!
 * <div>
 * Deserializes an instance from JSON.
 * </div>
 * @param audioBufferJson The audio buffer JSON.
 * @return
 */
+ (FMIceLinkAudioBuffer*) fromJsonWithAudioBufferJson:(NSString*)audioBufferJson;
/*!
 * <div>
 * Gets the gain.
 * </div>
 */
- (double) gain;
/*!
 * <div>
 * Gets a value indicating whether this buffer contains
 * data generated by packet loss concealment (PLC).
 * </div>
 */
- (bool) generatedByPlc;
/*!
 * <div>
 * Gets the minimum data buffer length for a given duration, clock rate, and channel count.
 * </div>
 * @param duration The duration.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (int) getMinimumBufferLengthWithDuration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Gets the minimum data buffer length for a given duration and configuration.
 * </div>
 * @param duration The duration.
 * @param config The configuration.
 */
+ (int) getMinimumBufferLengthWithDuration:(int)duration config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioBuffer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioBuffer class.
 * </div>
 * @param dataBuffer The data buffer.
 * @param format The format.
 */
- (instancetype) initWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer format:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioBuffer class.
 * </div>
 * @param dataBuffers The data buffers.
 * @param format The format.
 */
- (instancetype) initWithDataBuffers:(NSMutableArray*)dataBuffers format:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Gets a value indicating whether this buffer has DTMF data.
 * </div>
 */
- (bool) isDtmf;
/*!
 * <div>
 * Gets a value indicating whether this instance has been muted.
 * </div>
 */
- (bool) isMuted;
/*!
 * <div>
 * Gets a value indicating whether this buffer has Opus audio.
 * </div>
 */
- (bool) isOpus;
/*!
 * <div>
 * Gets a value indicating whether this buffer has raw PCM audio.
 * </div>
 */
- (bool) isPcm;
/*!
 * <div>
 * Gets a value indicating whether this buffer has PCMA audio.
 * </div>
 */
- (bool) isPcma;
/*!
 * <div>
 * Gets a value indicating whether this buffer has PCMU audio.
 * </div>
 */
- (bool) isPcmu;
/*!
 * <div>
 * Mutes this instance. This is a one-way operation that clears
 * the underlying data buffer.
 * </div>
 */
- (bool) mute;
/*!
 * <div>
 * Sets a value indicating whether this buffer contains
 * data generated by packet loss concealment (PLC).
 * </div>
 */
- (void) setGeneratedByPlc:(bool)value;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an array of instances to JSON.
 * </div>
 * @param audioBuffers The audio buffers.
 * @return
 */
+ (NSString*) toJsonArrayWithAudioBuffers:(NSMutableArray*)audioBuffers;
/*!
 * <div>
 * Serializes an instance to JSON.
 * </div>
 * @param audioBuffer The audio buffer.
 * @return
 */
+ (NSString*) toJsonWithAudioBuffer:(FMIceLinkAudioBuffer*)audioBuffer;

@end

/*!
 * <div>
 * A media buffer collection.
 * </div><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection</typeparam><typeparam name="TFormat">The type of the format.</typeparam>
 */
@interface FMIceLinkMediaBufferCollection : FMIceLinkCollection

- (instancetype) init;
+ (FMIceLinkMediaBufferCollection*) mediaBufferCollection;

@end

/*!
 * <div>
 * An audio buffer collection.
 * </div>
 */
@interface FMIceLinkAudioBufferCollection : FMIceLinkMediaBufferCollection

/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
+ (FMIceLinkAudioBufferCollection*) audioBufferCollection;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkAudioBufferCollection*) createCollection;
- (instancetype) init;

@end

/*!
 * <div>
 * A clock used to raise audio data in appropriate intervals.
 * </div>
 */
@interface FMIceLinkAudioClock : NSObject

/*!
 * <div>
 * Creates a new AudioClock.
 * </div>
 * @param clockRate The clock rate to use.
 * @param channelCount How many channels the audio will have.
 * @param blockAlign The block align of the source data.
 * @param raiseCallback The callback that will be invoked when data is needed.
 */
+ (FMIceLinkAudioClock*) audioClockWithClockRate:(int)clockRate channelCount:(int)channelCount blockAlign:(int)blockAlign raiseCallback:(FMIceLinkAction2*)raiseCallback;
/*!
 * <div>
 * Creates a new AudioClock.
 * </div>
 * @param clockRate The clock rate to use.
 * @param channelCount How many channels the audio will have.
 * @param blockAlign The block align of the source data.
 * @param raiseCallbackBlock The callback that will be invoked when data is needed.
 */
+ (FMIceLinkAudioClock*) audioClockWithClockRate:(int)clockRate channelCount:(int)channelCount blockAlign:(int)blockAlign raiseCallbackBlock:(void(^)(int, int))raiseCallbackBlock;
/*!
 * <div>
 * Creates a new AudioClock.
 * </div>
 * @param clockRate The clock rate to use.
 * @param channelCount How many channels the audio will have.
 * @param raiseCallback The callback that will be invoked when data is needed.
 */
+ (FMIceLinkAudioClock*) audioClockWithClockRate:(int)clockRate channelCount:(int)channelCount raiseCallback:(FMIceLinkAction2*)raiseCallback;
/*!
 * <div>
 * Creates a new AudioClock.
 * </div>
 * @param clockRate The clock rate to use.
 * @param channelCount How many channels the audio will have.
 * @param raiseCallbackBlock The callback that will be invoked when data is needed.
 */
+ (FMIceLinkAudioClock*) audioClockWithClockRate:(int)clockRate channelCount:(int)channelCount raiseCallbackBlock:(void(^)(int, int))raiseCallbackBlock;
/*!
 * <div>
 * Gets the BlockAlign.
 * </div>
 */
- (int) blockAlign;
/*!
 * <div>
 * Gets the audio's channel count.
 * </div>
 */
- (int) channelCount;
/*!
 * <div>
 * Gets the audio's clock rate.
 * </div>
 */
- (int) clockRate;
/*!
 * <div>
 * Creates a new AudioClock.
 * </div>
 * @param clockRate The clock rate to use.
 * @param channelCount How many channels the audio will have.
 * @param blockAlign The block align of the source data.
 * @param raiseCallback The callback that will be invoked when data is needed.
 */
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount blockAlign:(int)blockAlign raiseCallback:(FMIceLinkAction2*)raiseCallback;
/*!
 * <div>
 * Creates a new AudioClock.
 * </div>
 * @param clockRate The clock rate to use.
 * @param channelCount How many channels the audio will have.
 * @param blockAlign The block align of the source data.
 * @param raiseCallbackBlock The callback that will be invoked when data is needed.
 */
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount blockAlign:(int)blockAlign raiseCallbackBlock:(void(^)(int, int))raiseCallbackBlock;
/*!
 * <div>
 * Creates a new AudioClock.
 * </div>
 * @param clockRate The clock rate to use.
 * @param channelCount How many channels the audio will have.
 * @param raiseCallback The callback that will be invoked when data is needed.
 */
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount raiseCallback:(FMIceLinkAction2*)raiseCallback;
/*!
 * <div>
 * Creates a new AudioClock.
 * </div>
 * @param clockRate The clock rate to use.
 * @param channelCount How many channels the audio will have.
 * @param raiseCallbackBlock The callback that will be invoked when data is needed.
 */
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount raiseCallbackBlock:(void(^)(int, int))raiseCallbackBlock;
/*!
 * <div>
 * Gets whether the clock is running.
 * </div>
 */
- (bool) running;
/*!
 * <div>
 * Sets the strict duration, in milliseconds.
 * If 0, then variable duration is used. If greater
 * than zero, then the clock will only raise frames
 * of that duration.
 * </div>
 */
- (void) setStrictDuration:(int)value;
/*!
 * <div>
 * Starts the audio clock.
 * </div>
 */
- (void) start;
/*!
 * <div>
 * Stops the audio clock.
 * </div>
 */
- (void) stop;
/*!
 * <div>
 * Gets the strict duration, in milliseconds.
 * If 0, then variable duration is used. If greater
 * than zero, then the clock will only raise frames
 * of that duration.
 * </div>
 */
- (int) strictDuration;

@end

/*!
 * <div>
 * A media configuration.
 * </div>
 */
@interface FMIceLinkMediaConfig : NSObject

/*!
 * <div>
 * Gets the clock rate.
 * </div>
 */
- (int) clockRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaConfig`1 class.
 * </div>
 * @param clockRate The clock rate.
 */
- (instancetype) initWithClockRate:(int)clockRate;
/*!
 * <div>
 * Determines whether the specified configuration is equivalent.
 * </div>
 * @param config The configuration.
 */
- (bool) isEquivalentWithConfig:(FMIceLinkMediaConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaConfig`1 class.
 * </div>
 * @param clockRate The clock rate.
 */
+ (FMIceLinkMediaConfig*) mediaConfigWithClockRate:(int)clockRate;

@end

/*!
 * <div>
 * An audio configuration.
 * </div>
 */
@interface FMIceLinkAudioConfig : FMIceLinkMediaConfig

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioConfig class.
 * </div>
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (FMIceLinkAudioConfig*) audioConfigWithClockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Gets the channel count.
 * </div>
 */
- (int) channelCount;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioConfig class.
 * </div>
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Determines whether the specified configuration is equivalent.
 * </div>
 * @param config The configuration.
 */
- (bool) isEquivalentWithConfig:(FMIceLinkAudioConfig*)config;

@end

/*!
 * <div>
 * An audio decoder.
 * </div>
 */
@interface FMIceLinkAudioDecoder : FMIceLinkAudioPipe

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioDecoder class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
+ (FMIceLinkAudioDecoder*) audioDecoderWithInputFormat:(FMIceLinkAudioFormat*)inputFormat outputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Gets a value indicating whether to disable
 * packet loss concealment (PLC).
 * </div>
 */
- (bool) disablePlc;
/*!
 * <div>
 * Process stats from an input.
 * </div>
 * @param stats The stats.
 */
- (void) doProcessStatsFromInputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Gets the number of decoded frames.
 * </div>
 */
- (long long) framesDecoded;
/*!
 * <div>
 * Generates a PLC buffer. This method
 * uses the FMIceLinkDataBufferPool
 * so the returned value MUST be freed.
 * </div>
 * @param duration
 * @return
 */
- (FMIceLinkAudioBuffer*) generatePlcWithDuration:(int)duration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioDecoder class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkAudioFormat*)inputFormat outputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Gets the number of milliseconds missing in the stream between
 * the last frame processed and the current frame. This value is
 * updated constantly, just before a frame is processed.
 * </div>
 */
- (int) missingDuration;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @return
 */
- (bool) processFrame:(FMIceLinkAudioFrame*)frame;
/*!
 * <div>
 * Raises a frame.
 * </div>
 * @param frame The frame.
 */
- (void) raiseFrame:(FMIceLinkAudioFrame*)frame;
/*!
 * <div>
 * Sets a value indicating whether to disable
 * packet loss concealment (PLC).
 * </div>
 */
- (void) setDisablePlc:(bool)value;
/*!
 * <div>
 * Sets the number of milliseconds missing in the stream between
 * the last frame processed and the current frame. This value is
 * updated constantly, just before a frame is processed.
 * </div>
 */
- (void) setMissingDuration:(int)value;

@end

/*!
 * <div>
 * An audio depacketizer.
 * </div>
 */
@interface FMIceLinkAudioDepacketizer : FMIceLinkAudioPipe

/*!
 * <div>
 * Gets whether this pipe is allowed to be timed.
 * </div>
 */
- (bool) allowDiagnosticTimer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioDepacketizer class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkAudioDepacketizer*) audioDepacketizerWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioDepacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkAudioDepacketizer*) audioDepacketizerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Process stats from an input.
 * </div>
 * @param stats The stats.
 */
- (void) doProcessStatsFromInputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Gets the number of received frames.
 * </div>
 */
- (long long) framesReceived;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioDepacketizer class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioDepacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Raises the frame.
 * </div>
 * @param frame The frame.
 */
- (void) raiseFrame:(FMIceLinkAudioFrame*)frame;

@end

/*!
 * <div>
 * An audio encoder.
 * </div>
 */
@interface FMIceLinkAudioEncoder : FMIceLinkAudioPipe

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioEncoder class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
+ (FMIceLinkAudioEncoder*) audioEncoderWithInputFormat:(FMIceLinkAudioFormat*)inputFormat outputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Processes stats from an output.
 * </div>
 * @param stats The stats.
 */
- (void) doProcessStatsFromOutputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Gets the number of encoded frames.
 * </div>
 */
- (long long) framesEncoded;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioEncoder class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkAudioFormat*)inputFormat outputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Gets -1.
 * </div>
 */
- (int) maxInputBitrate;
/*!
 * <div>
 * Raises the frame.
 * </div>
 * @param frame The frame.
 */
- (void) raiseFrame:(FMIceLinkAudioFrame*)frame;

@end

/*!
 * <div>
 * A media format.
 * </div>
 */
@interface FMIceLinkMediaFormat : NSObject

/*!
 * <div>
 * Gets the clock rate.
 * </div>
 */
- (int) clockRate;
/*!
 * <div>
 * Clones this instance.
 * </div>
 */
- (FMIceLinkMediaFormat*) clone;
/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (FMIceLinkMediaFormat*) createInstance;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the full name, including clock rate and encoding parameters.
 * </div>
 */
- (NSString*) fullName;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaFormat`1 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaFormat`1 class.
 * </div>
 * @param name The name.
 * @param clockRate The clock rate.
 */
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate;
/*!
 * <div>
 * Gets a value indicating that the data is encrypted.
 * </div>
 */
- (bool) isEncrypted;
/*!
 * <div>
 * Determines whether the specified format is equivalent.
 * </div>
 * @param format The format.
 */
- (bool) isEquivalentWithFormat:(FMIceLinkMediaFormat*)format;
/*!
 * <div>
 * Determines whether the specified format is equivalent.
 * </div>
 * @param format The format.
 * @param ignoreIsPacketized Whether to ignore if the two formats differ in whether they are packetized.
 */
- (bool) isEquivalentWithFormat:(FMIceLinkMediaFormat*)format ignoreIsPacketized:(bool)ignoreIsPacketized;
/*!
 * <div>
 * Gets a value indicating whether a format only supports fixed bitrate.
 * </div>
 */
- (bool) isFixedBitrate;
/*!
 * <div>
 * Gets a value indicating that the data is injected
 * into the primary media stream (e.g. DTMF).
 * </div>
 */
- (bool) isInjected;
/*!
 * <div>
 * Gets a value indicating that the data is packetized
 * for network transmission.
 * </div>
 */
- (bool) isPacketized;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaFormat`1 class.
 * </div>
 */
+ (FMIceLinkMediaFormat*) mediaFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaFormat`1 class.
 * </div>
 * @param name The name.
 * @param clockRate The clock rate.
 */
+ (FMIceLinkMediaFormat*) mediaFormatWithName:(NSString*)name clockRate:(int)clockRate;
/*!
 * <div>
 * Gets the name.
 * </div>
 */
- (NSString*) name;
/*!
 * <div>
 * Gets the parameters.
 * </div>
 */
- (NSString*) parameters;
/*!
 * <div>
 * Gets the name of the RED media format.
 * </div>
 */
+ (NSString*) redName;
/*!
 * <div>
 * Sets the clock rate.
 * </div>
 */
- (void) setClockRate:(int)value;
/*!
 * <div>
 * Sets a value indicating that the data is encrypted.
 * </div>
 */
- (void) setIsEncrypted:(bool)value;
/*!
 * <div>
 * Sets a value indicating whether a format only supports fixed bitrate.
 * </div>
 */
- (void) setIsFixedBitrate:(bool)value;
/*!
 * <div>
 * Sets a value indicating that the data is injected
 * into the primary media stream (e.g. DTMF).
 * </div>
 */
- (void) setIsInjected:(bool)value;
/*!
 * <div>
 * Sets a value indicating that the data is packetized
 * for network transmission.
 * </div>
 */
- (void) setIsPacketized:(bool)value;
/*!
 * <div>
 * Sets the name.
 * </div>
 */
- (void) setName:(NSString*)value;
/*!
 * <div>
 * Sets the static payload type, if this format
 * has a static payload type registered with IANA.
 * </div>
 */
- (void) setStaticPayloadType:(int)value;
/*!
 * <div>
 * Gets the static payload type, if this format
 * has a static payload type registered with IANA.
 * </div>
 */
- (int) staticPayloadType;
/*!
 * <div>
 * Gets the name of the ULPFEC media format.
 * </div>
 */
+ (NSString*) ulpFecName;

@end

/*!
 * <div>
 * An audio format.
 * </div>
 */
@interface FMIceLinkAudioFormat : FMIceLinkMediaFormat

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioFormat class.
 * </div>
 */
+ (FMIceLinkAudioFormat*) audioFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioFormat class.
 * </div>
 * @param name The name.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (FMIceLinkAudioFormat*) audioFormatWithName:(NSString*)name clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioFormat class.
 * </div>
 * @param name The name.
 * @param config The configuration.
 */
+ (FMIceLinkAudioFormat*) audioFormatWithName:(NSString*)name config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Gets the channel count.
 * </div>
 */
- (int) channelCount;
/*!
 * <div>
 * Clones this instance.
 * </div>
 */
- (FMIceLinkAudioFormat*) clone;
/*!
 * <div>
 * Gets the clock rate and channel count as a configuration.
 * </div>
 */
- (FMIceLinkAudioConfig*) config;
/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (FMIceLinkAudioFormat*) createInstance;
/*!
 * <div>
 * Gets the name of the DTMF audio format ("telephone-event").
 * </div>
 */
+ (NSString*) dtmfName;
/*!
 * <div>
 * Deserializes an instance from JSON.
 * </div>
 * @param audioFormatJson The audio format JSON.
 * @return
 */
+ (FMIceLinkAudioFormat*) fromJsonWithAudioFormatJson:(NSString*)audioFormatJson;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioFormat class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioFormat class.
 * </div>
 * @param name The name.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioFormat class.
 * </div>
 * @param name The name.
 * @param config The configuration.
 */
- (instancetype) initWithName:(NSString*)name config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Gets a value indicating whether this format is DTMF.
 * </div>
 */
- (bool) isDtmf;
/*!
 * <div>
 * Determines whether the specified format is equivalent.
 * </div>
 * @param format The format.
 * @param ignoreIsPacketized Whether to ignore if the two formats differ in whether they are packetized.
 */
- (bool) isEquivalentWithFormat:(FMIceLinkAudioFormat*)format ignoreIsPacketized:(bool)ignoreIsPacketized;
/*!
 * <div>
 * Gets a value indicating whether this format is Opus.
 * </div>
 */
- (bool) isOpus;
/*!
 * <div>
 * Gets a value indicating whether this format is PCM.
 * </div>
 */
- (bool) isPcm;
/*!
 * <div>
 * Gets a value indicating whether this format is PCMA.
 * </div>
 */
- (bool) isPcma;
/*!
 * <div>
 * Gets a value indicating whether this format is PCMU.
 * </div>
 */
- (bool) isPcmu;
/*!
 * <div>
 * Gets whether the format uses little endian byte order.
 * </div>
 */
- (bool) littleEndian;
/*!
 * <div>
 * Gets the name of the Opus audio format ("opus").
 * </div>
 */
+ (NSString*) opusName;
/*!
 * <div>
 * Gets the parameters.
 * </div>
 */
- (NSString*) parameters;
/*!
 * <div>
 * Gets the name of the PCMA audio format ("PCMA").
 * </div>
 */
+ (NSString*) pcmaName;
/*!
 * <div>
 * Gets the name of the PCM audio format ("PCM").
 * </div>
 */
+ (NSString*) pcmName;
/*!
 * <div>
 * Gets the name of the PCMU audio format ("PCMU").
 * </div>
 */
+ (NSString*) pcmuName;
/*!
 * <div>
 * Sets the channel count.
 * </div>
 */
- (void) setChannelCount:(int)value;
/*!
 * <div>
 * Sets whether the format uses little endian byte order.
 * </div>
 */
- (void) setLittleEndian:(bool)value;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an instance to JSON.
 * </div>
 * @param audioFormat The audio format.
 * @return
 */
+ (NSString*) toJsonWithAudioFormat:(FMIceLinkAudioFormat*)audioFormat;

@end

/*!
 * <div>
 * A media format collection.
 * </div><typeparam name="TFormat">The type of the format.</typeparam><typeparam name="TFormatCollection">The type of the format collection.</typeparam>
 */
@interface FMIceLinkMediaFormatCollection : FMIceLinkCollection

/*!
 * <div>
 * Invoked when an element is added to the collection.
 * </div>
 * @param value The format.
 */
- (void) addSuccess:(FMIceLinkMediaFormat*)value;
/*!
 * <div>
 * Gets a format by equivalence to another format.
 * </div>
 * @param format The format.
 */
- (FMIceLinkMediaFormat*) getEquivalentWithFormat:(FMIceLinkMediaFormat*)format;
/*!
 * <div>
 * Gets a format by equivalence to another format, ignoring whether the format is packetized.
 * </div>
 * @param format The format.
 * @param ignoreIsPacketized if set to true [ignore IsPacketized].
 */
- (FMIceLinkMediaFormat*) getEquivalentWithFormat:(FMIceLinkMediaFormat*)format ignoreIsPacketized:(bool)ignoreIsPacketized;
/*!
 * <div>
 * Determines if the collection has an equivalent format.
 * </div>
 * @param format The format.
 */
- (bool) hasEquivalentWithFormat:(FMIceLinkMediaFormat*)format;
- (instancetype) init;
+ (FMIceLinkMediaFormatCollection*) mediaFormatCollection;
/*!
 * <div>
 * Invoked when an element is removed from the collection.
 * </div>
 * @param value The format.
 */
- (void) removeSuccess:(FMIceLinkMediaFormat*)value;

@end

/*!
 * <div>
 * A collection of audio formats.
 * </div>
 */
@interface FMIceLinkAudioFormatCollection : FMIceLinkMediaFormatCollection

/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
+ (FMIceLinkAudioFormatCollection*) audioFormatCollection;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkAudioFormatCollection*) createCollection;
- (instancetype) init;

@end

/*!
 * <div>
 * A  media frame.
 * </div><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam>
 */
@interface FMIceLinkMediaFrame : FMIceLinkDynamic

/*!
 * <div>
 * Adds a buffer.
 * </div>
 * @param buffer The buffer.
 */
- (void) addBuffer:(FMIceLinkMediaBuffer*)buffer;
/*!
 * <div>
 * Adds some buffers.
 * </div>
 * @param buffers The buffers.
 */
- (void) addBuffers:(NSMutableArray*)buffers;
/*!
 * <div>
 * Gets the buffer.
 * </div>
 */
- (FMIceLinkMediaBuffer*) buffer;
/*!
 * <div>
 * Gets the buffers.
 * </div>
 */
- (NSMutableArray*) buffers;
/*!
 * <div>
 * Calculates a system timestamp given a base system timestamp,
 * the current timestamp, a clock rate, and a base timestamp.
 * </div>
 * @param baseSystemTimestamp The base system timestamp (offset).
 * @param timestamp The current timestamp.
 * @param clockRate The clock rate of the media.
 * @param baseTimestamp The base timestamp (offset).
 * @return
 */
+ (long long) calculateSystemTimestampWithBaseSystemTimestamp:(long long)baseSystemTimestamp timestamp:(long long)timestamp clockRate:(int)clockRate baseTimestamp:(long long)baseTimestamp;
/*!
 * <div>
 * Calculates a timestamp given a base system timestamp,
 * the current system timestamp, and a clock rate. This
 * method assumes the base timestamp is zero.
 * </div>
 * @param baseSystemTimestamp The base system timestamp (offset).
 * @param systemTimestamp The current system timestamp.
 * @param clockRate The clock rate of the media.
 * @return
 */
+ (long long) calculateTimestampWithBaseSystemTimestamp:(long long)baseSystemTimestamp systemTimestamp:(long long)systemTimestamp clockRate:(int)clockRate;
/*!
 * <div>
 * Calculates a timestamp given a base system timestamp,
 * the current system timestamp, a clock rate, and a base
 * timestamp.
 * </div>
 * @param baseSystemTimestamp The base system timestamp (offset).
 * @param systemTimestamp The current system timestamp.
 * @param clockRate The clock rate of the media.
 * @param baseTimestamp The base timestamp (offset).
 * @return
 */
+ (long long) calculateTimestampWithBaseSystemTimestamp:(long long)baseSystemTimestamp systemTimestamp:(long long)systemTimestamp clockRate:(int)clockRate baseTimestamp:(long long)baseTimestamp;
/*!
 * <div>
 * Clones this instance.
 * </div>
 */
- (FMIceLinkMediaFrame*) clone;
/*!
 * <div>
 * Gets the contributing sources.
 * </div>
 */
- (NSMutableArray*) contributingSources;
/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (FMIceLinkMediaFrame*) createInstance;
/*!
 * <div>
 * Creates a media buffer collection.
 * </div>
 */
- (FMIceLinkMediaBufferCollection*) createMediaBufferCollection;
/*!
 * <div>
 * Gets the approximate footprint of this media frame
 * by returning the sum of its media buffer footprints.
 * </div>
 */
- (int) footprint;
/*!
 * <div>
 * Frees the buffers referenced by this instance.
 * </div>
 * @return This instance.
 */
- (FMIceLinkMediaFrame*) free;
/*!
 * <div>
 * Gets the last buffer whose format is equivalent to the specified format.
 * </div>
 * @param format The format.
 */
- (FMIceLinkMediaBuffer*) getBufferWithFormat:(FMIceLinkMediaFormat*)format;
/*!
 * <div>
 * Gets the last buffer whose format is equivalent to the specified format
 * and whose source ID matches the specified source ID.
 * </div>
 * @param format The format.
 * @param sourceId The source identifier.
 */
- (FMIceLinkMediaBuffer*) getBufferWithFormat:(FMIceLinkMediaFormat*)format sourceId:(NSString*)sourceId;
/*!
 * <div>
 * Gets the last buffer whose format name matches the specified format name.
 * </div>
 * @param formatName The format name.
 */
- (FMIceLinkMediaBuffer*) getBufferWithFormatName:(NSString*)formatName;
/*!
 * <div>
 * Gets the last buffer whose format packetization flag matches the specified flag.
 * </div>
 * @param isPacketized Whether the buffer is packetized.
 */
- (FMIceLinkMediaBuffer*) getBufferWithIsPacketized:(bool)isPacketized;
/*!
 * <div>
 * Gets the last buffer whose format packetization and encryption flags
 * matches the specified flags.
 * </div>
 * @param isPacketized Whether the buffer is packetized.
 * @param isEncrypted Whether the buffer is encrypted.
 */
- (FMIceLinkMediaBuffer*) getBufferWithIsPacketized:(bool)isPacketized isEncrypted:(bool)isEncrypted;
/*!
 * <div>
 * Checks if a buffer exists with format equivalence.
 * </div>
 * @param format The format.
 * @return true if the buffer exists; otherwise, false.
 * 
 */
- (bool) hasBufferWithFormat:(FMIceLinkMediaFormat*)format;
/*!
 * <div>
 * Checks if a buffer exists with format equivalence and source ID.
 * </div>
 * @param format The format.
 * @param sourceId The source identifier.
 * @return true if the buffer exists; otherwise, false.
 * 
 */
- (bool) hasBufferWithFormat:(FMIceLinkMediaFormat*)format sourceId:(NSString*)sourceId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaFrame`4 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaFrame`4 class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkMediaBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaFrame`4 class.
 * </div>
 * @param buffers The buffers.
 */
- (instancetype) initWithBuffers:(NSMutableArray*)buffers;
/*!
 * <div>
 * Keeps the buffers referenced by this instance.
 * </div>
 * @return This instance.
 */
- (FMIceLinkMediaFrame*) keep;
/*!
 * <div>
 * Gets the most recent buffer.
 * </div>
 */
- (FMIceLinkMediaBuffer*) lastBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaFrame`4 class.
 * </div>
 */
+ (FMIceLinkMediaFrame*) mediaFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaFrame`4 class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkMediaFrame*) mediaFrameWithBuffer:(FMIceLinkMediaBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaFrame`4 class.
 * </div>
 * @param buffers The buffers.
 */
+ (FMIceLinkMediaFrame*) mediaFrameWithBuffers:(NSMutableArray*)buffers;
/*!
 * <div>
 * Gets the NTP timestamp ticks matching
 * FMIceLinkMediaFrame`4#timestamp, set by RTP receivers
 * for synchronization of inbound media streams.
 * </div>
 */
- (long long) ntpTimestampTicks;
/*!
 * <div>
 * Removes a buffer.
 * </div>
 * @param buffer The buffer.
 */
- (void) removeBuffer:(FMIceLinkMediaBuffer*)buffer;
/*!
 * <div>
 * Removes all buffers.
 * </div>
 */
- (void) removeBuffers;
/*!
 * <div>
 * Removes some buffers.
 * </div>
 * @param buffers The buffers.
 */
- (void) removeBuffers:(NSMutableArray*)buffers;
/*!
 * <div>
 * Gets the RTP sequence number.
 * </div>
 */
- (int) rtpSequenceNumber;
/*!
 * <div>
 * Gets the RTP timestamp.
 * </div>
 */
- (long long) rtpTimestamp;
/*!
 * <div>
 * Gets the sequence number.
 * </div>
 */
- (long long) sequenceNumber;
/*!
 * <div>
 * Sets the buffer.
 * </div>
 */
- (void) setBuffer:(FMIceLinkMediaBuffer*)value;
/*!
 * <div>
 * Sets the buffers.
 * </div>
 */
- (void) setBuffers:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the contributing sources.
 * </div>
 */
- (void) setContributingSources:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the NTP timestamp ticks matching
 * FMIceLinkMediaFrame`4#timestamp, set by RTP receivers
 * for synchronization of inbound media streams.
 * </div>
 */
- (void) setNtpTimestampTicks:(long long)value;
/*!
 * <div>
 * Sets the RTP sequence number.
 * </div>
 */
- (void) setRtpSequenceNumber:(int)value;
/*!
 * <div>
 * Sets the RTP timestamp.
 * </div>
 */
- (void) setRtpTimestamp:(long long)value;
/*!
 * <div>
 * Sets the sequence number.
 * </div>
 */
- (void) setSequenceNumber:(long long)value;
/*!
 * <div>
 * Sets the synchronization source.
 * </div>
 */
- (void) setSynchronizationSource:(long long)value;
/*!
 * <div>
 * Sets whether this frame has a
 * FMIceLinkMediaFrame`4#systemTimestamp that is
 * actively synchronized with other streams.
 * </div>
 */
- (void) setSynchronized:(bool)value;
/*!
 * <div>
 * Sets the system timestamp matching
 * FMIceLinkMediaFrame`4#timestamp, set by media sources
 * for synchronization of outbound media streams.
 * This value is measured in ticks equivalent to
 * FMIceLinkManagedStopwatch timestamps.
 * </div>
 */
- (void) setSystemTimestamp:(long long)value;
/*!
 * <div>
 * Sets the timestamp, measured according
 * to the last buffer format's clock rate.
 * </div>
 */
- (void) setTimestamp:(long long)value;
/*!
 * <div>
 * Gets the synchronization source.
 * </div>
 */
- (long long) synchronizationSource;
/*!
 * <div>
 * Gets whether this frame has a
 * FMIceLinkMediaFrame`4#systemTimestamp that is
 * actively synchronized with other streams.
 * </div>
 */
- (bool) synchronized;
/*!
 * <div>
 * Gets the system timestamp matching
 * FMIceLinkMediaFrame`4#timestamp, set by media sources
 * for synchronization of outbound media streams.
 * This value is measured in ticks equivalent to
 * FMIceLinkManagedStopwatch timestamps.
 * </div>
 */
- (long long) systemTimestamp;
/*!
 * <div>
 * Gets the timestamp, measured according
 * to the last buffer format's clock rate.
 * </div>
 */
- (long long) timestamp;

@end

/*!
 * <div>
 * An audio frame.
 * </div>
 */
@interface FMIceLinkAudioFrame : FMIceLinkMediaFrame

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioFrame class.
 * </div>
 * @param duration The duration.
 */
+ (FMIceLinkAudioFrame*) audioFrameWithDuration:(int)duration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioFrame class.
 * </div>
 * @param duration The duration.
 * @param buffer The buffer.
 */
+ (FMIceLinkAudioFrame*) audioFrameWithDuration:(int)duration buffer:(FMIceLinkAudioBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioFrame class.
 * </div>
 * @param duration The duration.
 * @param buffers The buffers.
 */
+ (FMIceLinkAudioFrame*) audioFrameWithDuration:(int)duration buffers:(NSMutableArray*)buffers;
/*!
 * <div>
 * Calculates a timestamp delta given a duration and clock rate.
 * </div>
 * @param duration The duration in milliseconds.
 * @param clockRate The clock rate.
 * @return
 */
+ (int) calculateTimestampDeltaWithDuration:(int)duration clockRate:(int)clockRate;
/*!
 * <div>
 * Clones this instance.
 * </div>
 */
- (FMIceLinkAudioFrame*) clone;
/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (FMIceLinkAudioFrame*) createInstance;
/*!
 * <div>
 * Creates a media buffer collection.
 * </div>
 */
- (FMIceLinkAudioBufferCollection*) createMediaBufferCollection;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the duration.
 * </div>
 */
- (int) duration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioFrame class.
 * </div>
 * @param duration The duration.
 */
- (instancetype) initWithDuration:(int)duration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioFrame class.
 * </div>
 * @param duration The duration.
 * @param buffer The buffer.
 */
- (instancetype) initWithDuration:(int)duration buffer:(FMIceLinkAudioBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioFrame class.
 * </div>
 * @param duration The duration.
 * @param buffers The buffers.
 */
- (instancetype) initWithDuration:(int)duration buffers:(NSMutableArray*)buffers;
/*!
 * <div>
 * Sets the duration.
 * </div>
 */
- (void) setDuration:(int)value;

@end

/*!
 * <div>
 * A mixer that mixes multiple audio inputs into a single output.
 * </div>
 */
@interface FMIceLinkAudioMixer : FMIceLinkAudioPipe

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkAudioMixer*) audioMixerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param config The configuration.
 * @param latency The latency in milliseconds.
 */
+ (FMIceLinkAudioMixer*) audioMixerWithConfig:(FMIceLinkAudioConfig*)config latency:(int)latency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param config The configuration.
 * @param latency The latency in milliseconds.
 * @param frameDuration The output frame duration in milliseconds.
 */
+ (FMIceLinkAudioMixer*) audioMixerWithConfig:(FMIceLinkAudioConfig*)config latency:(int)latency frameDuration:(int)frameDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkAudioMixer*) audioMixerWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param format The format.
 * @param latency The latency in milliseconds.
 */
+ (FMIceLinkAudioMixer*) audioMixerWithFormat:(FMIceLinkAudioFormat*)format latency:(int)latency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param format The format.
 * @param latency The latency in milliseconds.
 * @param frameDuration The output frame duration in milliseconds.
 */
+ (FMIceLinkAudioMixer*) audioMixerWithFormat:(FMIceLinkAudioFormat*)format latency:(int)latency frameDuration:(int)frameDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkAudioMixer*) audioMixerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param input The input.
 * @param latency The latency in milliseconds.
 */
+ (FMIceLinkAudioMixer*) audioMixerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input latency:(int)latency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param input The input.
 * @param latency The latency in milliseconds.
 * @param frameDuration The output frame duration in milliseconds.
 */
+ (FMIceLinkAudioMixer*) audioMixerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input latency:(int)latency frameDuration:(int)frameDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param inputs The inputs.
 */
+ (FMIceLinkAudioMixer*) audioMixerWithInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param inputs The inputs.
 * @param latency The latency in milliseconds.
 */
+ (FMIceLinkAudioMixer*) audioMixerWithInputs:(NSMutableArray*)inputs latency:(int)latency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param inputs The inputs.
 * @param latency The latency in milliseconds.
 * @param frameDuration The output frame duration in milliseconds.
 */
+ (FMIceLinkAudioMixer*) audioMixerWithInputs:(NSMutableArray*)inputs latency:(int)latency frameDuration:(int)frameDuration;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Gets the frame duration in milliseconds.
 * Defaults to 20.
 * </div>
 */
- (int) frameDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param config The configuration.
 * @param latency The latency in milliseconds.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config latency:(int)latency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param config The configuration.
 * @param latency The latency in milliseconds.
 * @param frameDuration The output frame duration in milliseconds.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config latency:(int)latency frameDuration:(int)frameDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param format The format.
 * @param latency The latency in milliseconds.
 */
- (instancetype) initWithFormat:(FMIceLinkAudioFormat*)format latency:(int)latency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param format The format.
 * @param latency The latency in milliseconds.
 * @param frameDuration The output frame duration in milliseconds.
 */
- (instancetype) initWithFormat:(FMIceLinkAudioFormat*)format latency:(int)latency frameDuration:(int)frameDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param input The input.
 * @param latency The latency in milliseconds.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input latency:(int)latency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param input The input.
 * @param latency The latency in milliseconds.
 * @param frameDuration The output frame duration in milliseconds.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input latency:(int)latency frameDuration:(int)frameDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param inputs The inputs.
 */
- (instancetype) initWithInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param inputs The inputs.
 * @param latency The latency in milliseconds.
 */
- (instancetype) initWithInputs:(NSMutableArray*)inputs latency:(int)latency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioMixer class.
 * </div>
 * @param inputs The inputs.
 * @param latency The latency in milliseconds.
 * @param frameDuration The output frame duration in milliseconds.
 */
- (instancetype) initWithInputs:(NSMutableArray*)inputs latency:(int)latency frameDuration:(int)frameDuration;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the latency.
 * </div>
 */
- (int) latency;
/*!
 * <div>
 * Sets the synchronization source.
 * </div>
 */
- (void) setSynchronizationSource:(long long)value;
/*!
 * <div>
 * Gets the synchronization source.
 * </div>
 */
- (long long) synchronizationSource;

@end

/*!
 * <div>
 * An audio packetizer.
 * </div>
 */
@interface FMIceLinkAudioPacketizer : FMIceLinkAudioPipe

/*!
 * <div>
 * Gets whether this pipe is allowed to be timed.
 * </div>
 */
- (bool) allowDiagnosticTimer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioPacketizer class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkAudioPacketizer*) audioPacketizerWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioPacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkAudioPacketizer*) audioPacketizerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioPacketizer class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
+ (FMIceLinkAudioPacketizer*) audioPacketizerWithInputFormat:(FMIceLinkAudioFormat*)inputFormat outputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Processes stats from an output.
 * </div>
 * @param stats The stats.
 */
- (void) doProcessStatsFromOutputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Gets the number of sent frames.
 * </div>
 */
- (long long) framesSent;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioPacketizer class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioPacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioPacketizer class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkAudioFormat*)inputFormat outputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Processes the frame.
 * </div>
 * @param frame The frame.
 * @return
 */
- (bool) processFrame:(FMIceLinkAudioFrame*)frame;

@end

/*!
 * <div>
 * A recorder.
 * </div>
 */
@interface FMIceLinkMediaRecorder : NSObject

/*!
 * <div>
 * Updates the header and closes the file.
 * </div>
 */
- (void) close;
/*!
 * <div>
 * Updates the file header.
 * </div>
 */
- (void) doUpdateHeader;
/*!
 * <div>
 * Writes the file header.
 * </div>
 */
- (void) doWriteHeader;
/*!
 * <div>
 * Write an encoded video frame.
 * </div>
 * @param buffer The encoded buffer.
 * @param presentationTimestamp The presentation timestamp.
 * @return true if the encoded frame was written successfully; otherwise, false
 */
- (bool) doWriteWithBuffer:(FMIceLinkMediaBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;
/*!
 * <div>
 * Gets the file.
 * </div>
 */
- (FMIceLinkFileStream*) file;
/*!
 * <div>
 * Gets the recorder stream.
 * </div>
 */
- (FMIceLinkFileAssistant*) fileStream;
/*!
 * <div>
 * Gets the format.
 * </div>
 */
- (FMIceLinkMediaFormat*) format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaRecorder`2 class.
 * </div>
 * @param path The path.
 */
- (instancetype) initWithPath:(NSString*)path;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaRecorder`2 class.
 * </div>
 * @param path The path.
 */
+ (FMIceLinkMediaRecorder*) mediaRecorderWithPath:(NSString*)path;
/*!
 * <div>
 * Opens the file and writes the initial header.
 * </div>
 */
- (void) open;
/*!
 * <div>
 * Gets whether the recorder has been opened or not.
 * </div>
 */
- (bool) opened;
/*!
 * <div>
 * Gets the path.
 * </div>
 */
- (NSString*) path;
/*!
 * <div>
 * Sets the file.
 * </div>
 */
- (void) setFile:(FMIceLinkFileStream*)value;
/*!
 * <div>
 * Sets the recorder stream.
 * </div>
 */
- (void) setFileStream:(FMIceLinkFileAssistant*)value;
/*!
 * <div>
 * Sets a value indicating whether the file was opened.
 * </div>
 */
- (void) setWasOpened:(bool)value;
/*!
 * <div>
 * Gets a value indicating whether the file was opened.
 * </div>
 */
- (bool) wasOpened;
/*!
 * <div>
 * Write an encoded video frame using the width
 * and height parameters from the first keyframe.
 * This method will discard non-keyframes until
 * the first keyframe arrives.
 * </div>
 * @param buffer The encoded buffer.
 * @param presentationTimestamp The presentation timestamp.
 * @return true if the encoded frame was written successfully; otherwise, false
 */
- (bool) writeWithBuffer:(FMIceLinkMediaBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;

@end

/*!
 * <div>
 * An audio recorder.
 * </div>
 */
@interface FMIceLinkAudioRecorder : FMIceLinkMediaRecorder

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioRecorder class.
 * </div>
 * @param path The path.
 */
+ (FMIceLinkAudioRecorder*) audioRecorderWithPath:(NSString*)path;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioRecorder class.
 * </div>
 * @param path The path.
 */
- (instancetype) initWithPath:(NSString*)path;

@end

/*!
 * <div>
 * Media sink base properties/methods.
 * </div>
 */
@interface FMIceLinkMediaSinkBase : FMIceLinkDynamic

/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
- (instancetype) init;
+ (FMIceLinkMediaSinkBase*) mediaSinkBase;
/*!
 * <div>
 * Sets an optional tag to identify this instance.
 * </div>
 */
- (void) setTag:(NSString*)value;
/*!
 * <div>
 * Gets an optional tag to identify this instance.
 * </div>
 */
- (NSString*) tag;

@end

/*!
 * <div>
 * A media sink.
 * </div><typeparam name="TIOutput">The type of the output interface.</typeparam><typeparam name="TIOutputCollection">The type of the output interface collection.</typeparam><typeparam name="TIInput">The type of the input interface.</typeparam><typeparam name="TSink">The type of the sink.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam>
 */
@interface FMIceLinkMediaSink : FMIceLinkMediaSinkBase

/*!
 * <div>
 * Adds an input.
 * </div>
 * @param input The input.
 */
- (void) addInput:(NSObject<FMIceLinkIMediaOutput>*)input;
/*!
 * <div>
 * Adds some inputs.
 * </div>
 * @param inputs The inputs.
 */
- (void) addInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Adds a handler that is raised when Disabled is changed.
 * </div>
 */
- (void) addOnDisabledChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been processed.
 * </div>
 */
- (void) addOnProcessedFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been processed.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnProcessedFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been processed.
 * </div>
 */
- (void) addOnProcessedFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being processed.
 * </div>
 */
- (void) addOnProcessFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when an exception is thrown while processing a frame.
 * </div>
 */
- (void) addOnProcessFrameException:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Adds a handler that is raised when an exception is thrown while processing a frame.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*, NSException*))) addOnProcessFrameExceptionWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when an exception is thrown while processing a frame.
 * </div>
 */
- (void) addOnProcessFrameExceptionWithBlock:(void(^)(FMIceLinkMediaFrame*, NSException*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being processed.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnProcessFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being processed.
 * </div>
 */
- (void) addOnProcessFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are raised.
 * </div>
 */
- (void) addOnRaiseControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when control frames are raised.
 * </div>
 */
- (void (^)(void(^)(NSMutableArray*))) addOnRaiseControlFramesWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are raised.
 * </div>
 */
- (void) addOnRaiseControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the state changes.
 * </div>
 */
- (void) addOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the state changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaSink*))) addOnStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the state changes.
 * </div>
 */
- (void) addOnStateChangeWithBlock:(void(^)(FMIceLinkMediaSink*))valueBlock;
/*!
 * <div>
 * Changes the current output.
 * </div>
 * @param output The output.
 */
- (FMIceLinkFuture*) changeOutput:(FMIceLinkSinkOutput*)output;
/*!
 * <div>
 * Creates an output collection.
 * </div>
 * @param input The input.
 */
- (FMIceLinkIMediaOutputCollection*) createOutputCollectionWithInput:(NSObject<FMIceLinkIMediaInput>*)input;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (bool) destroy;
/*!
 * <div>
 * Gets a value indicating whether this sink is disabled.
 * </div>
 */
- (bool) disabled;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkMediaFrame*)frame inputBuffer:(FMIceLinkMediaBuffer*)inputBuffer;
/*!
 * <div>
 * Processes a remote SDP media description.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 */
- (FMIceLinkError*) doProcessSdpMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Processes stats from an input.
 * </div>
 * @param stats The stats.
 */
- (void) doProcessStatsFromInputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Gets the available outputs.
 * </div>
 */
- (FMIceLinkFuture*) getOutputs;
/*!
 * <div>
 * Determines whether this pipe has the specified input.
 * </div>
 * @param input The input.
 */
- (bool) hasInput:(NSObject<FMIceLinkIMediaOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaSink`8 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaSink`8 class.
 * </div>
 * @param inputFormat The input format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkMediaFormat*)inputFormat;
/*!
 * <div>
 * Gets the input.
 * </div>
 */
- (NSObject<FMIceLinkIMediaOutput>*) input;
/*!
 * <div>
 * Gets the input format.
 * </div>
 */
- (FMIceLinkMediaFormat*) inputFormat;
/*!
 * <div>
 * Gets the inputs.
 * </div>
 */
- (NSMutableArray*) inputs;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the bitrate supported by this sink, in Kbps. -1 if unknown.
 * </div>
 */
- (int) maxInputBitrate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaSink`8 class.
 * </div>
 */
+ (FMIceLinkMediaSink*) mediaSink;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaSink`8 class.
 * </div>
 * @param inputFormat The input format.
 */
+ (FMIceLinkMediaSink*) mediaSinkWithInputFormat:(FMIceLinkMediaFormat*)inputFormat;
/*!
 * <div>
 * Gets a value indicating whether this instance is muted.
 * </div>
 */
- (bool) muted;
/*!
 * <div>
 * Gets the current output.
 * </div>
 */
- (FMIceLinkSinkOutput*) output;
/*!
 * <div>
 * Gets a value indicating whether this instance is persistent.
 * If <code>true</code>, this instance will not be destroyed unless
 * FMIceLinkMediaSink`8#destroy is called explicitly on this instance.
 * It will survive destruction of any parent elements that are
 * being destroyed.
 * </div>
 */
- (bool) persistent;
/*!
 * <div>
 * Gets the pipeline JSON with this as the central point.
 * </div>
 */
- (NSString*) pipelineJson;
/*!
 * <div>
 * Gets the pipeline JSON from an input.
 * </div>
 */
- (NSString*) pipelineJsonFromInput;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 */
- (bool) processFrame:(FMIceLinkMediaFrame*)frame;
/*!
 * <div>
 * Gets the ProcessFramePolicy for this media input.
 * </div>
 */
- (FMIceLinkProcessFramePolicy) processFramePolicy;
/*!
 * <div>
 * Processes a remote SDP media description from an output.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 */
- (FMIceLinkError*) processSdpMediaDescriptionFromInputWithMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Processes stats from an input.
 * </div>
 * @param stats The stats.
 */
- (void) processStatsFromInputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Raises a control frame.
 * </div>
 * @param controlFrame The control frame.
 */
- (void) raiseControlFrame:(FMIceLinkMediaControlFrame*)controlFrame;
/*!
 * <div>
 * Raises some control frames.
 * </div>
 * @param controlFrames The control frames.
 */
- (void) raiseControlFrames:(NSMutableArray*)controlFrames;
/*!
 * <div>
 * Removes an input.
 * </div>
 * @param input The input.
 */
- (bool) removeInput:(NSObject<FMIceLinkIMediaOutput>*)input;
/*!
 * <div>
 * Removes all inputs.
 * </div>
 */
- (void) removeInputs;
/*!
 * <div>
 * Removes some inputs.
 * </div>
 * @param inputs The inputs.
 */
- (void) removeInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Removes a handler that is raised when Disabled is changed.
 * </div>
 */
- (void) removeOnDisabledChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame has been processed.
 * </div>
 */
- (void) removeOnProcessedFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame is being processed.
 * </div>
 */
- (void) removeOnProcessFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when an exception is thrown while processing a frame.
 * </div>
 */
- (void) removeOnProcessFrameException:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Removes a handler that is raised when control frames are raised.
 * </div>
 */
- (void) removeOnRaiseControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the state changes.
 * </div>
 */
- (void) removeOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets a value indicating whether this sink is disabled.
 * </div>
 */
- (void) setDisabled:(bool)value;
/*!
 * <div>
 * Sets the input.
 * </div>
 */
- (void) setInput:(NSObject<FMIceLinkIMediaOutput>*)value;
/*!
 * <div>
 * Sets the inputs.
 * </div>
 */
- (void) setInputs:(NSMutableArray*)value;
/*!
 * <div>
 * Sets a value indicating whether this instance is muted.
 * </div>
 */
- (void) setMuted:(bool)value;
/*!
 * <div>
 * Sets the current output.
 * </div>
 */
- (void) setOutput:(FMIceLinkSinkOutput*)value;
/*!
 * <div>
 * Sets a value indicating whether this instance is persistent.
 * If <code>true</code>, this instance will not be destroyed unless
 * FMIceLinkMediaSink`8#destroy is called explicitly on this instance.
 * It will survive destruction of any parent elements that are
 * being destroyed.
 * </div>
 */
- (void) setPersistent:(bool)value;
/*!
 * <div>
 * Sets the ProcessFramePolicy for this media input.
 * </div>
 */
- (void) setProcessFramePolicy:(FMIceLinkProcessFramePolicy)value;
/*!
 * <div>
 * Gets the state.
 * </div>
 */
- (FMIceLinkMediaSinkState) state;

@end

/*!
 * <div>
 * An audio sink.
 * </div>
 */
@interface FMIceLinkAudioSink : FMIceLinkMediaSink

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioSink class.
 * </div>
 */
+ (FMIceLinkAudioSink*) audioSink;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioSink class.
 * </div>
 * @param inputFormat The input format.
 */
+ (FMIceLinkAudioSink*) audioSinkWithInputFormat:(FMIceLinkAudioFormat*)inputFormat;
/*!
 * <div>
 * Gets the input configuration.
 * </div>
 */
- (FMIceLinkAudioConfig*) config;
/*!
 * <div>
 * Creates an output collection.
 * </div>
 * @param input The input.
 */
- (FMIceLinkIAudioOutputCollection*) createOutputCollectionWithInput:(NSObject<FMIceLinkIAudioInput>*)input;
/*!
 * <div>
 * Gets a value indicating the gain
 * (input amplification) of this sink.
 * Any value greater than or equal to 0.0
 * is acceptable.
 * </div>
 */
- (double) gain;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioSink class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioSink class.
 * </div>
 * @param inputFormat The input format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkAudioFormat*)inputFormat;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @return
 */
- (bool) processFrame:(FMIceLinkAudioFrame*)frame;
/*!
 * <div>
 * Sets a value indicating the gain
 * (input amplification) of this sink.
 * Any value greater than or equal to 0.0
 * is acceptable.
 * </div>
 */
- (void) setGain:(double)value;

@end

/*!
 * <div>
 * Media source base properties/methods.
 * </div>
 */
@interface FMIceLinkMediaSourceBase : FMIceLinkDynamic

/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
- (instancetype) init;
+ (FMIceLinkMediaSourceBase*) mediaSourceBase;
/*!
 * <div>
 * Sets an optional tag to identify this instance.
 * </div>
 */
- (void) setTag:(NSString*)value;
/*!
 * <div>
 * Starts this instance.
 * </div>
 */
- (FMIceLinkFuture*) start;
/*!
 * <div>
 * Stops this instance.
 * </div>
 */
- (FMIceLinkFuture*) stop;
/*!
 * <div>
 * Gets an optional tag to identify this instance.
 * </div>
 */
- (NSString*) tag;

@end

/*!
 * <div>
 * A media source.
 * </div><typeparam name="TIOutput">The type of the output interface.</typeparam><typeparam name="TIInput">The type of the input interface.</typeparam><typeparam name="TIInputCollection">The type of the input interface collection.</typeparam><typeparam name="TSource">The type of the source.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam>
 */
@interface FMIceLinkMediaSource : FMIceLinkMediaSourceBase

/*!
 * <div>
 * Adds a handler that is raised when the Disabled property changes state.
 * </div>
 */
- (void) addOnDisabledChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when control frames are processed.
 * </div>
 */
- (void) addOnProcessControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when control frames are processed.
 * </div>
 */
- (void (^)(void(^)(NSMutableArray*))) addOnProcessControlFramesWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are processed.
 * </div>
 */
- (void) addOnProcessControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been raised.
 * </div>
 */
- (void) addOnRaisedFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been raised.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnRaisedFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been raised.
 * </div>
 */
- (void) addOnRaisedFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being raised.
 * </div>
 */
- (void) addOnRaiseFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being raised.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnRaiseFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being raised.
 * </div>
 */
- (void) addOnRaiseFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the state changes.
 * </div>
 */
- (void) addOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the state changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaSource*))) addOnStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the state changes.
 * </div>
 */
- (void) addOnStateChangeWithBlock:(void(^)(FMIceLinkMediaSource*))valueBlock;
/*!
 * <div>
 * Adds an output.
 * </div>
 * @param output The output.
 */
- (void) addOutput:(NSObject<FMIceLinkIMediaInput>*)output;
/*!
 * <div>
 * Adds some outputs.
 * </div>
 * @param outputs The outputs.
 */
- (void) addOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Changes the current input.
 * </div>
 * @param input The input.
 */
- (FMIceLinkFuture*) changeInput:(FMIceLinkSourceInput*)input;
/*!
 * <div>
 * Creates an input collection.
 * </div>
 * @param output The output.
 */
- (FMIceLinkIMediaInputCollection*) createInputCollectionWithOutput:(NSObject<FMIceLinkIMediaOutput>*)output;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (bool) destroy;
/*!
 * <div>
 * Gets a value indicating whether this source is disabled.
 * </div>
 */
- (bool) disabled;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes the control frames.
 * </div>
 * @param controlFrames The control frames.
 */
- (void) doProcessControlFrames:(NSMutableArray*)controlFrames;
/*!
 * <div>
 * Processes a local SDP media description.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 */
- (FMIceLinkError*) doProcessSdpMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Processes stats from an output.
 * </div>
 * @param stats The stats.
 */
- (void) doProcessStatsFromOutputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Starts this instance.
 * </div>
 */
- (FMIceLinkFuture*) doStart;
/*!
 * <div>
 * Stops this instance.
 * </div>
 */
- (FMIceLinkFuture*) doStop;
/*!
 * <div>
 * Gets the FIR sequence number.
 * </div>
 * @return
 */
- (int) getFirSequenceNumber;
/*!
 * <div>
 * Gets the available inputs.
 * </div>
 */
- (FMIceLinkFuture*) getInputs;
/*!
 * <div>
 * Determines whether this source has the specified output.
 * </div>
 * @param output The output.
 */
- (bool) hasOutput:(NSObject<FMIceLinkIMediaInput>*)output;
/*!
 * <div>
 * Increments the FIR sequence number.
 * </div>
 */
- (void) incrementFirSequenceNumber;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaSource`8 class.
 * </div>
 * @param outputFormat The output format.
 */
- (instancetype) initWithOutputFormat:(FMIceLinkMediaFormat*)outputFormat;
/*!
 * <div>
 * Gets the current input.
 * </div>
 */
- (FMIceLinkSourceInput*) input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the maximum supported output bitrate. -1 means infinite.
 * </div>
 */
- (int) maxOutputBitrate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaSource`8 class.
 * </div>
 * @param outputFormat The output format.
 */
+ (FMIceLinkMediaSource*) mediaSourceWithOutputFormat:(FMIceLinkMediaFormat*)outputFormat;
/*!
 * <div>
 * Gets a value indicating whether this instance is muted.
 * </div>
 */
- (bool) muted;
/*!
 * <div>
 * Gets the output.
 * </div>
 */
- (NSObject<FMIceLinkIMediaInput>*) output;
/*!
 * <div>
 * Gets the output format.
 * </div>
 */
- (FMIceLinkMediaFormat*) outputFormat;
/*!
 * <div>
 * Gets the outputs.
 * </div>
 */
- (NSMutableArray*) outputs;
/*!
 * <div>
 * Gets a value indicating whether this instance is persistent.
 * If <code>true</code>, this instance will not be destroyed unless
 * FMIceLinkMediaSource`8#destroy is called explicitly on this instance.
 * It will survive destruction of any parent elements that are
 * being destroyed.
 * </div>
 */
- (bool) persistent;
/*!
 * <div>
 * Gets the pipeline JSON with this as the central point.
 * </div>
 */
- (NSString*) pipelineJson;
/*!
 * <div>
 * Gets the pipeline JSON from an output.
 * </div>
 */
- (NSString*) pipelineJsonFromOutput;
/*!
 * <div>
 * Processes the control frames.
 * </div>
 * @param controlFrames The control frames.
 */
- (void) processControlFrames:(NSMutableArray*)controlFrames;
/*!
 * <div>
 * Gets whether the stream is muted or not.
 * </div>
 */
- (bool) processGetMuteFromStream;
/*!
 * <div>
 * Processes a local SDP media description from an output.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 */
- (FMIceLinkError*) processSdpMediaDescriptionFromOutputWithMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Process a set mute call from a stream.
 * </div>
 * @param mute Whether to mute or not.
 */
- (void) processSetMuteFromStreamWithMute:(bool)mute;
/*!
 * <div>
 * Processes stats from an output.
 * </div>
 * @param stats The stats.
 */
- (void) processStatsFromOutputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Raises a frame.
 * </div>
 * @param frame The frame.
 */
- (void) raiseFrame:(FMIceLinkMediaFrame*)frame;
/*!
 * <div>
 * Removes a handler that is raised when the Disabled property changes state.
 * </div>
 */
- (void) removeOnDisabledChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when control frames are processed.
 * </div>
 */
- (void) removeOnProcessControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame has been raised.
 * </div>
 */
- (void) removeOnRaisedFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame is being raised.
 * </div>
 */
- (void) removeOnRaiseFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the state changes.
 * </div>
 */
- (void) removeOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes an output.
 * </div>
 * @param output The output.
 */
- (bool) removeOutput:(NSObject<FMIceLinkIMediaInput>*)output;
/*!
 * <div>
 * Removes all outputs.
 * </div>
 */
- (void) removeOutputs;
/*!
 * <div>
 * Removes some outputs.
 * </div>
 * @param outputs The outputs.
 */
- (void) removeOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Sets the current input.
 * </div>
 */
- (void) setInput:(FMIceLinkSourceInput*)value;
/*!
 * <div>
 * Sets a value indicating whether this instance is muted.
 * </div>
 */
- (void) setMuted:(bool)value;
/*!
 * <div>
 * Sets the output.
 * </div>
 */
- (void) setOutput:(NSObject<FMIceLinkIMediaInput>*)value;
/*!
 * <div>
 * Sets the outputs.
 * </div>
 */
- (void) setOutputs:(NSMutableArray*)value;
/*!
 * <div>
 * Sets a value indicating whether this instance is persistent.
 * If <code>true</code>, this instance will not be destroyed unless
 * FMIceLinkMediaSource`8#destroy is called explicitly on this instance.
 * It will survive destruction of any parent elements that are
 * being destroyed.
 * </div>
 */
- (void) setPersistent:(bool)value;
/*!
 * <div>
 * Sets the synchronization source.
 * </div>
 */
- (void) setSynchronizationSource:(long long)value;
/*!
 * <div>
 * Starts this instance.
 * </div>
 */
- (FMIceLinkFuture*) start;
/*!
 * <div>
 * Gets the state.
 * </div>
 */
- (FMIceLinkMediaSourceState) state;
/*!
 * <div>
 * Stops this instance.
 * </div>
 */
- (FMIceLinkFuture*) stop;
/*!
 * <div>
 * Gets the synchronization source.
 * </div>
 */
- (long long) synchronizationSource;

@end

/*!
 * <div>
 * An audio source.
 * </div>
 */
@interface FMIceLinkAudioSource : FMIceLinkMediaSource

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioSource class.
 * </div>
 * @param outputFormat The output format.
 */
+ (FMIceLinkAudioSource*) audioSourceWithOutputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioSource class.
 * </div>
 * @param outputFormat The output format.
 * @param frameDuration The frame duration in milliseconds.
 */
+ (FMIceLinkAudioSource*) audioSourceWithOutputFormat:(FMIceLinkAudioFormat*)outputFormat frameDuration:(int)frameDuration;
/*!
 * <div>
 * Calculates the duration of an audio chunk given its data
 * length (the number of bytes) and assuming that the clock
 * rate and channel count match the output format.
 * </div>
 * @param dataLength The length of the audio chunk.
 */
- (int) calculateDurationFloatWithDataLength:(int)dataLength;
/*!
 * <div>
 * Calculates the duration of an audio chunk given its data
 * length (the number of bytes), clock rate, and channel count.
 * </div>
 * @param dataLength The length of the audio chunk.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (int) calculateDurationFloatWithDataLength:(int)dataLength clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Calculates the duration of an audio chunk given its data
 * length (the number of bytes) and assuming that the clock
 * rate and channel count match the output format.
 * </div>
 * @param dataLength The length of the audio chunk.
 */
- (int) calculateDurationWithDataLength:(int)dataLength;
/*!
 * <div>
 * Calculates the duration of an audio chunk given its data
 * length (the number of bytes), clock rate, and channel count.
 * </div>
 * @param dataLength The length of the audio chunk.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (int) calculateDurationWithDataLength:(int)dataLength clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Calculates the duration of an audio chunk given its data
 * length (the number of bytes), clock rate, and channel count.
 * </div>
 * @param dataLength The length of the audio chunk.
 * @param config The configuration.
 * @return
 */
+ (int) calculateDurationWithDataLength:(int)dataLength config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Gets the output configuration.
 * </div>
 */
- (FMIceLinkAudioConfig*) config;
/*!
 * <div>
 * Creates an input collection.
 * </div>
 * @param output The output.
 */
- (FMIceLinkIAudioInputCollection*) createInputCollectionWithOutput:(NSObject<FMIceLinkIAudioOutput>*)output;
/*!
 * <div>
 * Gets whether the timestamp should be reset
 * using the wall clock after FMIceLinkAudioSource#timestampResetInterval
 * milliseconds elapse between frames.
 * </div>
 */
- (bool) disableTimestampReset;
/*!
 * <div>
 * Gets whether the timestamp should be reset
 * before the next frame is processed.
 * </div>
 */
- (bool) forceTimestampReset;
/*!
 * <div>
 * Gets the frame duration in milliseconds.
 * Defaults to 20.
 * </div>
 */
- (int) frameDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioSource class.
 * </div>
 * @param outputFormat The output format.
 */
- (instancetype) initWithOutputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioSource class.
 * </div>
 * @param outputFormat The output format.
 * @param frameDuration The frame duration in milliseconds.
 */
- (instancetype) initWithOutputFormat:(FMIceLinkAudioFormat*)outputFormat frameDuration:(int)frameDuration;
/*!
 * <div>
 * Raises a frame.
 * </div>
 * @param frame The frame.
 */
- (void) raiseFrame:(FMIceLinkAudioFrame*)frame;
/*!
 * <div>
 * Sets whether the timestamp should be reset
 * using the wall clock after FMIceLinkAudioSource#timestampResetInterval
 * milliseconds elapse between frames.
 * </div>
 */
- (void) setDisableTimestampReset:(bool)value;
/*!
 * <div>
 * Sets whether the timestamp should be reset
 * before the next frame is processed.
 * </div>
 */
- (void) setForceTimestampReset:(bool)value;
/*!
 * <div>
 * Sets the amount of time in milliseconds
 * between audio frames that will trigger a reset of
 * the timestamp to the wall clock.
 * </div>
 * Defaults to 1000.
 */
- (void) setTimestampResetInterval:(int)value;
/*!
 * <div>
 * Sets a value indicating the volume
 * (output resistance) of this source.
 * Valid value range is 0.0 to 1.0, inclusive.
 * </div>
 */
- (void) setVolume:(double)value;
/*!
 * <div>
 * Gets the amount of time in milliseconds
 * between audio frames that will trigger a reset of
 * the timestamp to the wall clock.
 * </div>
 * Defaults to 1000.
 */
- (int) timestampResetInterval;
/*!
 * <div>
 * Gets a value indicating the volume
 * (output resistance) of this source.
 * Valid value range is 0.0 to 1.0, inclusive.
 * </div>
 */
- (double) volume;

@end

/*!
 * <div>
 * Stream base properties/methods.
 * </div>
 */
@interface FMIceLinkStreamBase : FMIceLinkDynamic

/*!
 * <div>
 * Adds a handler that is raised when the stream direction change has occurred.
 * </div>
 */
- (void) addOnDirectionChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the stream state changes.
 * </div>
 */
- (void) addOnStateChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Changes this stream's direction.
 * </div>
 */
- (FMIceLinkError*) changeDirectionWithNewDirection:(FMIceLinkStreamDirection)newDirection;
/*!
 * <div>
 * Gets the ManagedStopwatch.GetTimestamp() value representing the ticks that
 * passed when this stream's connection state changed to connected.
 * </div>
 */
- (long long) connectedTimestamp;
/*!
 * <div>
 * Gets the connection identifier.
 * </div>
 */
- (NSString*) connectionId;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the current direction.
 * </div>
 */
- (FMIceLinkStreamDirection) direction;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStreamBase class.
 * </div>
 * @param type The type.
 */
- (instancetype) initWithType:(FMIceLinkStreamType)type;
/*!
 * <div>
 * Gets a value indicating whether the stream is currently closed or failed.
 * </div>
 */
- (bool) isTerminated;
/*!
 * <div>
 * Gets a value indicating whether the stream is currently closing or failing.
 * </div>
 */
- (bool) isTerminating;
/*!
 * <div>
 * Gets a value indicating whether the stream is currently closing, failing, closed, or failed.
 * </div>
 */
- (bool) isTerminatingOrTerminated;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets current direction indicated by the local description.
 * </div>
 */
- (FMIceLinkStreamDirection) localDirection;
/*!
 * <div>
 * Gets a value indicating whether receiving media is supported by the local peer on this stream.
 * </div>
 */
- (bool) localReceive;
/*!
 * <div>
 * Gets a value indicating whether sending media is supported by the local peer on this stream.
 * </div>
 */
- (bool) localSend;
/*!
 * <div>
 * Processes a state change.
 * </div>
 */
- (void) processStateChange;
/*!
 * <div>
 * Processes a state lock change.
 * </div>
 */
- (void) processStateLockChange;
/*!
 * <div>
 * Gets current direction indicated by the remote description.
 * </div>
 */
- (FMIceLinkStreamDirection) remoteDirection;
/*!
 * <div>
 * Gets a value indicating whether receiving media is supported by the local peer on this stream. Returns false if the remote stream direction has not been received.
 * </div>
 */
- (bool) remoteReceive;
/*!
 * <div>
 * Gets a value indicating whether sending media is supported by the remote peer on this stream. Returns false if the remote stream direction has not been received.
 * </div>
 */
- (bool) remoteSend;
/*!
 * <div>
 * Removes a handler that is raised when the stream direction change has occurred.
 * </div>
 */
- (void) removeOnDirectionChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the stream state changes.
 * </div>
 */
- (void) removeOnStateChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Sets current direction indicated by the local description.
 * </div>
 */
- (void) setLocalDirection:(FMIceLinkStreamDirection)value;
/*!
 * <div>
 * Sets a value indicating whether receiving media is supported by the local peer on this stream.
 * </div>
 */
- (void) setLocalReceive:(bool)value;
/*!
 * <div>
 * Sets a value indicating whether sending media is supported by the local peer on this stream.
 * </div>
 */
- (void) setLocalSend:(bool)value;
/*!
 * <div>
 * Sets an optional tag to identify this instance.
 * </div>
 */
- (void) setTag:(NSString*)value;
/*!
 * <div>
 * Gets the state of the stream.
 * </div>
 */
- (FMIceLinkStreamState) state;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStreamBase class.
 * </div>
 * @param type The type.
 */
+ (FMIceLinkStreamBase*) streamBaseWithType:(FMIceLinkStreamType)type;
/*!
 * <div>
 * Gets an optional tag to identify this instance.
 * </div>
 */
- (NSString*) tag;
/*!
 * <div>
 * Gets the type.
 * </div>
 */
- (FMIceLinkStreamType) type;

@end

/*!
 * <div>
 * A peer-to-peer stream.
 * </div>
 */
@interface FMIceLinkStream : FMIceLinkStreamBase

/*!
 * <div>
 * Adds a handler that is raised when the Disabled property changes state.
 * </div>
 */
- (void) addOnDisabledChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Generates SDP media description for stream.
 * </div>
 * @param sdpMessage The SDP message.
 * @param supportSdes if set to true Sdp message will contain SDES crypto attibutes.
 * @param isOffer if set to true Sdp media description is a part of an Sdp offer.
 * @param renegotiation Indicates whether media description generation is a part of the SDP renegotiation attempt.
 */
- (FMIceLinkSdpMediaDescription*) createSdpMediaDescriptionWithSdpMessage:(FMIceLinkSdpMessage*)sdpMessage supportSdes:(bool)supportSdes isOffer:(bool)isOffer renegotiation:(bool)renegotiation;
/*!
 * <div>
 * Gets a value indicating whether this stream is disabled.
 * </div>
 */
- (bool) disabled;
/*!
 * <div>
 * Gets the encryption mode.
 * </div>
 */
- (FMIceLinkEncryptionMode) encryptionMode;
/*!
 * <div>
 * Gets the encryption modes.
 * </div>
 */
- (NSMutableArray*) encryptionModes;
/*!
 * <div>
 * Gets a value indicating Encryption Policy
 * </div>
 */
- (FMIceLinkEncryptionPolicy) encryptionPolicy;
/*!
 * <div>
 * Gets the index.
 * </div>
 */
- (int) index;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStream class.
 * </div>
 * @param type The type.
 */
- (instancetype) initWithType:(FMIceLinkStreamType)type;
/*!
 * <div>
 * Gets the local ICE parameters.
 * </div>
 */
- (FMIceLinkIceParameters*) localIceParameters;
/*!
 * <div>
 * Gets the remote ICE parameters.
 * </div>
 */
- (FMIceLinkIceParameters*) remoteIceParameters;
/*!
 * <div>
 * Removes a handler that is raised when the Disabled property changes state.
 * </div>
 */
- (void) removeOnDisabledChange:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Gets Sdes policy for stream.
 * </div>
 */
- (FMIceLinkSdesPolicy) sdesPolicy;
/*!
 * <div>
 * Sets a value indicating whether this stream is disabled.
 * </div>
 */
- (void) setDisabled:(bool)value;
/*!
 * <div>
 * Sets the encryption mode.
 * </div>
 */
- (void) setEncryptionMode:(FMIceLinkEncryptionMode)value;
/*!
 * <div>
 * Sets the encryption modes.
 * </div>
 */
- (void) setEncryptionModes:(NSMutableArray*)value;
/*!
 * <div>
 * Sets a value indicating Encryption Policy
 * </div>
 */
- (void) setEncryptionPolicy:(FMIceLinkEncryptionPolicy)value;
/*!
 * <div>
 * Sets the local ICE parameters.
 * </div>
 */
- (void) setLocalIceParameters:(FMIceLinkIceParameters*)value;
/*!
 * <div>
 * Sets Sdes policy for stream.
 * </div>
 */
- (void) setSdesPolicy:(FMIceLinkSdesPolicy)value;
/*!
 * <div>
 * Sets a value indicating whether DTLS encryption is in use for this stream.
 * </div>
 */
- (void) setUseDtls:(bool)value;
/*!
 * <div>
 * Sets a value indicating whether SDES encryption is in use for this stream.
 * </div>
 */
- (void) setUseSdes:(bool)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStream class.
 * </div>
 * @param type The type.
 */
+ (FMIceLinkStream*) streamWithType:(FMIceLinkStreamType)type;
/*!
 * <div>
 * Gets a value indicating whether DTLS encryption is in use for this stream.
 * </div>
 */
- (bool) useDtls;
/*!
 * <div>
 * Gets a value indicating whether SDES encryption is in use for this stream.
 * </div>
 */
- (bool) useSdes;

@end

/*!
 * <div>
 * Media stream base properties/methods.
 * </div>
 */
@interface FMIceLinkMediaStreamBase : FMIceLinkStream

/*!
 * <div>
 * Records the pending direction of this stream. The LocalDirection of this stream will be updated when the connection renegotiation commences.
 * </div>
 */
- (FMIceLinkError*) changeDirectionWithNewDirection:(FMIceLinkStreamDirection)newDirection;
/*!
 * <div>
 * Gets the direction.
 * </div>
 */
- (FMIceLinkStreamDirection) direction;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaStreamBase class.
 * </div>
 * @param type The type.
 */
- (instancetype) initWithType:(FMIceLinkStreamType)type;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the local bandwidth in Kbps (Kilobits per second).
 * </div>
 */
- (int) localBandwidth;
/*!
 * <div>
 * Gets current direction indicated by the local description.
 * </div>
 */
- (FMIceLinkStreamDirection) localDirection;
/*!
 * <div>
 * Gets the maximum bitrate that is supported by this stream in Kbps (Kilobits per second).
 * Returns -1 if it is not set.
 * </div>
 */
- (int) maxInputBitrate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaStreamBase class.
 * </div>
 * @param type The type.
 */
+ (FMIceLinkMediaStreamBase*) mediaStreamBaseWithType:(FMIceLinkStreamType)type;
/*!
 * <div>
 * Gets a value indicating whether this instance is muted.
 * </div>
 */
- (bool) muted;
/*!
 * <div>
 * Gets the remote bandwidth in Kbps (Kilobits per second).
 * </div>
 */
- (int) remoteBandwidth;
/*!
 * <div>
 * Gets current direction indicated by the remote description.
 * </div>
 */
- (FMIceLinkStreamDirection) remoteDirection;
/*!
 * <div>
 * Gets whether there exist changes that are pending SDP renegotiation.
 * </div>
 */
- (bool) renegotiationPending;
/*!
 * <div>
 * Sets the local bandwidth in Kbps (Kilobits per second).
 * </div>
 */
- (void) setLocalBandwidth:(int)value;
/*!
 * <div>
 * Sets current direction indicated by the local description.
 * </div>
 */
- (void) setLocalDirection:(FMIceLinkStreamDirection)value;
/*!
 * <div>
 * Sets a value indicating whether this instance is muted.
 * </div>
 */
- (void) setMuted:(bool)value;
/*!
 * <div>
 * Sets the remote bandwidth in Kbps (Kilobits per second).
 * </div>
 */
- (void) setRemoteBandwidth:(int)value;
/*!
 * <div>
 * Sets whether there exist changes that are pending SDP renegotiation.
 * </div>
 */
- (void) setRenegotiationPending:(bool)value;

@end

/*!
 * <div>
 * A media stream.
 * </div><typeparam name="TIOutput">The type of the output interface.</typeparam><typeparam name="TIOutputCollection">The type of the output interface collection.</typeparam><typeparam name="TIInput">The type of the input interface.</typeparam><typeparam name="TIInputCollection">The type of the input interface collection.</typeparam><typeparam name="TIElement">The type of the element interface</typeparam><typeparam name="TSource">The type of the source.</typeparam><typeparam name="TSink">The type of the sink.</typeparam><typeparam name="TPipe">The type of the pipe.</typeparam><typeparam name="TTrack">The type of the track.</typeparam><typeparam name="TBranch">The type of the branch.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam><typeparam name="TFormatCollection">The type of the format collection.</typeparam>
 */
@interface FMIceLinkMediaStream : FMIceLinkMediaStreamBase

/*!
 * <div>
 * Gets the current direction for the RTP Header Extension for Absolute Sender Time. See https://webrtc.org/experiments/rtp-hdrext/abs-send-time/ .
 * If the remote capability has not yet been receieved, only local requirements are taken into consideration.
 * </div>
 */
- (FMIceLinkStreamDirection) absoluteSenderTimeDirection;
/*!
 * <div>
 * Gets the locally requested current direction for the RTP Header Extension for Absolute Sender Time. See https://webrtc.org/experiments/rtp-hdrext/abs-send-time/ .
 * </div>
 */
- (FMIceLinkStreamDirection) absoluteSenderTimeLocalDirection;
/*!
 * <div>
 * Gets the current direction for the RTP Header Extension for Absolute Sender Time as indicated by the remote peer. See https://webrtc.org/experiments/rtp-hdrext/abs-send-time/ .
 * </div>
 */
- (FMIceLinkStreamDirection) absoluteSenderTimeRemoteDirection;
/*!
 * <div>
 * Adds an input.
 * </div>
 * @param input The input.
 */
- (void) addInput:(NSObject<FMIceLinkIMediaOutput>*)input;
/*!
 * <div>
 * Adds some inputs.
 * </div>
 * @param inputs The inputs.
 */
- (void) addInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Adds a handler that is raised by master streams when the synchronize context is ready.
 * </div>
 */
- (void) addOnMasterSynchronizeContextReady:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised by master streams when the synchronize context is ready.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkSynchronizeContext*))) addOnMasterSynchronizeContextReadyWithBlock;
/*!
 * <div>
 * Adds a handler that is raised by master streams when the synchronize context is ready.
 * </div>
 */
- (void) addOnMasterSynchronizeContextReadyWithBlock:(void(^)(FMIceLinkSynchronizeContext*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are processed.
 * </div>
 */
- (void) addOnProcessControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when control frames are processed.
 * </div>
 */
- (void (^)(void(^)(NSMutableArray*))) addOnProcessControlFramesWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are processed.
 * </div>
 */
- (void) addOnProcessControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been processed.
 * </div>
 */
- (void) addOnProcessedFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been processed.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnProcessedFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been processed.
 * </div>
 */
- (void) addOnProcessedFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being processed.
 * </div>
 */
- (void) addOnProcessFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being processed.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnProcessFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being processed.
 * </div>
 */
- (void) addOnProcessFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are raised.
 * </div>
 */
- (void) addOnRaiseControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when control frames are raised.
 * </div>
 */
- (void (^)(void(^)(NSMutableArray*))) addOnRaiseControlFramesWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when control frames are raised.
 * </div>
 */
- (void) addOnRaiseControlFramesWithBlock:(void(^)(NSMutableArray*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been raised.
 * </div>
 */
- (void) addOnRaisedFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been raised.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnRaisedFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame has been raised.
 * </div>
 */
- (void) addOnRaisedFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being raised.
 * </div>
 */
- (void) addOnRaiseFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being raised.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnRaiseFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is being raised.
 * </div>
 */
- (void) addOnRaiseFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is received.
 * </div>
 */
- (void) addOnReceiveFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame is received.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnReceiveFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is received.
 * </div>
 */
- (void) addOnReceiveFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is sent.
 * </div>
 */
- (void) addOnSendFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame is sent.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkMediaFrame*))) addOnSendFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is sent.
 * </div>
 */
- (void) addOnSendFrameWithBlock:(void(^)(FMIceLinkMediaFrame*))valueBlock;
/*!
 * <div>
 * Adds an output.
 * </div>
 * @param output The output.
 */
- (void) addOutput:(NSObject<FMIceLinkIMediaInput>*)output;
/*!
 * <div>
 * Adds some outputs.
 * </div>
 * @param outputs The outputs.
 */
- (void) addOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Gets bandwidth adapation policy for this stream. EXPERIMENTAL FEATURE.
 * </div>
 */
- (FMIceLinkBandwidthAdaptationPolicy) bandwidthAdaptationPolicy;
/*!
 * <div>
 * Gets whether CCM FIRs are allowed.
 * </div>
 */
- (bool) ccmFirEnabled;
/*!
 * <div>
 * Gets the CCM FIR Policy.
 * </div>
 */
- (FMIceLinkCcmFirPolicy) ccmFirPolicy;
/*!
 * <div>
 * Changes the current input format (switches codecs).
 * </div>
 * @param inputFormat The input format.
 * @return
 */
- (FMIceLinkFuture*) changeInputFormat:(FMIceLinkMediaFormat*)inputFormat;
/*!
 * <div>
 * Creates a format.
 * </div>
 * @param attribute The attribute.
 */
- (FMIceLinkMediaFormat*) createFormatWithAttribute:(FMIceLinkSdpRtpMapAttribute*)attribute;
/*!
 * <div>
 * Creates a format.
 * </div>
 * @param name The format name.
 * @param clockRate The clock rate.
 * @param parameters The parameters.
 * @param payloadType The payload type.
 */
- (FMIceLinkMediaFormat*) createFormatWithName:(NSString*)name clockRate:(int)clockRate parameters:(NSString*)parameters payloadType:(int)payloadType;
/*!
 * <div>
 * Creates an input collection.
 * </div>
 * @param output The output.
 */
- (FMIceLinkIMediaInputCollection*) createInputCollectionWithOutput:(NSObject<FMIceLinkIMediaOutput>*)output;
/*!
 * <div>
 * Creates a media format collection.
 * </div>
 */
- (FMIceLinkMediaFormatCollection*) createMediaFormatCollection;
/*!
 * <div>
 * Creates an output collection.
 * </div>
 * @param input The input.
 */
- (FMIceLinkIMediaOutputCollection*) createOutputCollectionWithInput:(NSObject<FMIceLinkIMediaInput>*)input;
/*!
 * <div>
 * Generates SDP media description for stream.
 * </div>
 * @param sdpMessage The SDP message.
 * @param supportSdes if set to true Sdp message will contain SDES crypto attibutes.
 * @param isOffer if set to true Sdp media description is a part of an Sdp offer.
 * @param renegotiation Indicates whether media description generation is a part of the SDP renegotiation attempt.
 */
- (FMIceLinkSdpMediaDescription*) createSdpMediaDescriptionWithSdpMessage:(FMIceLinkSdpMessage*)sdpMessage supportSdes:(bool)supportSdes isOffer:(bool)isOffer renegotiation:(bool)renegotiation;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 * @return
 */
- (bool) destroy;
/*!
 * <div>
 * Gets a value indicating whether to disable automatic RTCP sender/receiver reports.
 * </div>
 */
- (bool) disableAutomaticReports;
/*!
 * <div>
 * Gets the disabled input formats.
 * </div>
 */
- (NSMutableArray*) disabledInputFormats;
/*!
 * <div>
 * Disables an input format. This will trigger a codec
 * switch if disabling the current input format. This
 * may disable the stream
 * </div>
 * @param inputFormat The input format.
 */
- (FMIceLinkFuture*) disableInputFormat:(FMIceLinkMediaFormat*)inputFormat;
/*!
 * <div>
 * Enables an input format. This will NOT trigger a
 * codec switch.
 * </div>
 * @param inputFormat The input format.
 */
- (FMIceLinkFuture*) enableInputFormat:(FMIceLinkMediaFormat*)inputFormat;
/*!
 * <div>
 * Creates a format array from a format list.
 * </div>
 * @param formatList The format list.
 */
- (NSMutableArray*) formatArrayFromListWithFormatList:(NSMutableArray*)formatList;
/*!
 * <div>
 * Gets the FIR sequence number.
 * </div>
 * @return
 */
- (int) getFirSequenceNumber;
/*!
 * <div>
 * Increments the FIR sequence number.
 * </div>
 */
- (void) incrementFirSequenceNumber;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaStream`15 class.
 * </div>
 * @param type The type.
 * @param jitterConfig The jitter configuration.
 */
- (instancetype) initWithType:(FMIceLinkStreamType)type jitterConfig:(FMIceLinkJitterConfig*)jitterConfig;
/*!
 * <div>
 * Gets whether at least one frame has
 * been successfully processed.
 * </div>
 */
- (bool) injectionAllowed;
/*!
 * <div>
 * Gets the input.
 * </div>
 */
- (NSObject<FMIceLinkIMediaOutput>*) input;
/*!
 * <div>
 * Gets the current input format.
 * </div>
 */
- (FMIceLinkMediaFormat*) inputFormat;
/*!
 * <div>
 * Gets the available input formats.
 * </div>
 */
- (NSMutableArray*) inputFormats;
/*!
 * <div>
 * Gets the inputs.
 * </div>
 */
- (NSMutableArray*) inputs;
/*!
 * <div>
 * Gets the jitter configuration.
 * </div>
 */
- (FMIceLinkJitterConfig*) jitterConfig;
/*!
 * <div>
 * Gets the local description media identifier.
 * If not set, defaults to the FMIceLinkMediaStream`15#localMedia
 * identifier, if one exists.
 * </div>
 */
- (NSString*) localDescriptionMediaId;
/*!
 * <div>
 * Gets the local description track identifier.
 * If not set, defaults to the FMIceLinkMediaStream`15#localTrack
 * identifier, if one exists.
 * </div>
 */
- (NSString*) localDescriptionTrackId;
/*!
 * <div>
 * Gets the local media, if one was specified.
 * </div>
 */
- (FMIceLinkLocalMedia*) localMedia;
/*!
 * <div>
 * Gets the local track, if one was specified.
 * </div>
 */
- (FMIceLinkMediaTrack*) localTrack;
/*!
 * <div>
 * Gets the maximum bitrate that is supported by this stream in Kbps (Kilobits per second).
 * Returns -1 if it is not set.
 * </div>
 */
- (int) maxInputBitrate;
/*!
 * <div>
 * Gets the maximum bitrate that all outputs can support.
 * </div>
 */
- (int) maxOutputBitrate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaStream`15 class.
 * </div>
 * @param type The type.
 * @param jitterConfig The jitter configuration.
 */
+ (FMIceLinkMediaStream*) mediaStreamWithType:(FMIceLinkStreamType)type jitterConfig:(FMIceLinkJitterConfig*)jitterConfig;
/*!
 * <div>
 * Gets a value indicating whether Rtp and Rtcp components for this stream are multiplexed on the same port.
 * </div>
 */
- (bool) multiplexed;
/*!
 * <div>
 * Gets a value indicating whether so far negotiation with the peer indicates that Rtp and Rtcp component multiplexing on the same port is supported.
 * </div>
 */
- (bool) multiplexingSupported;
/*!
 * <div>
 * Gets a value indicating whether this instance is muted.
 * </div>
 */
- (bool) muted;
/*!
 * <div>
 * Gets Nack config.
 * </div>
 */
- (FMIceLinkNackConfig*) nackConfig;
/*!
 * <div>
 * Gets whether NACKs are allowed.
 * </div>
 */
- (bool) nackEnabled;
/*!
 * <div>
 * Gets whether NACK PLIs are allowed.
 * </div>
 */
- (bool) nackPliEnabled;
/*!
 * <div>
 * Gets the NACK PLI Policy.
 * </div>
 */
- (FMIceLinkNackPliPolicy) nackPliPolicy;
/*!
 * <div>
 * Gets the NACK Policy.
 * </div>
 */
- (FMIceLinkNackPolicy) nackPolicy;
/*!
 * <div>
 * Gets the output.
 * </div>
 */
- (NSObject<FMIceLinkIMediaInput>*) output;
/*!
 * <div>
 * Gets the output format.
 * </div>
 */
- (FMIceLinkMediaFormat*) outputFormat;
/*!
 * <div>
 * Gets the outputs.
 * </div>
 */
- (NSMutableArray*) outputs;
/*!
 * <div>
 * Gets a value indicating whether this instance is persistent.
 * Always returns <code>false</code>.
 * </div>
 */
- (bool) persistent;
/*!
 * <div>
 * Gets the pipeline JSON with this as the central point.
 * </div>
 */
- (NSString*) pipelineJson;
/*!
 * <div>
 * Gets the pipeline JSON from an input.
 * </div>
 */
- (NSString*) pipelineJsonFromInput;
/*!
 * <div>
 * Gets the pipeline JSON from an output.
 * </div>
 */
- (NSString*) pipelineJsonFromOutput;
/*!
 * <div>
 * Contains logic updating internal policies when bandwidth adapation policy chnages.
 * </div>
 */
- (void) processBandwidthAdapatationPolicyChangeWithPolicy:(FMIceLinkBandwidthAdaptationPolicy)policy;
/*!
 * <div>
 * Processes a control frame.
 * </div>
 * @param controlFrames The control frame.
 */
- (void) processControlFrames:(NSMutableArray*)controlFrames;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 */
- (bool) processFrame:(FMIceLinkMediaFrame*)frame;
/*!
 * <div>
 * Gets the ProcessFramePolicy for this media input.
 * </div>
 */
- (FMIceLinkProcessFramePolicy) processFramePolicy;
/*!
 * <div>
 * Gets whether the stream is muted or not.
 * </div>
 */
- (bool) processGetMuteFromStream;
/*!
 * <div>
 * Processes a local SDP media description from an input.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 * @return
 */
- (FMIceLinkError*) processSdpMediaDescriptionFromInputWithMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Processes a local SDP media description from an output.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 * @return
 */
- (FMIceLinkError*) processSdpMediaDescriptionFromOutputWithMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Process a set mute call from a stream.
 * </div>
 * @param mute Whether to mute or not.
 */
- (void) processSetMuteFromStreamWithMute:(bool)mute;
/*!
 * <div>
 * Processes stats from an input.
 * </div>
 * @param stats The stats.
 */
- (void) processStatsFromInputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Processes stats from an output.
 * </div>
 * @param stats The stats.
 */
- (void) processStatsFromOutputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Raises a frame.
 * </div>
 * @param frame The frame.
 */
- (void) raiseFrame:(FMIceLinkMediaFrame*)frame;
/*!
 * <div>
 * Gets Fec Config.
 * </div>
 */
- (FMIceLinkRedFecConfig*) redFecConfig;
/*!
 * <div>
 * Gets True if Red Fec is negotiated.
 * </div>
 */
- (bool) redFecEnabled;
/*!
 * <div>
 * Gets the Fec Policy.
 * </div>
 */
- (FMIceLinkRedFecPolicy) redFecPolicy;
/*!
 * <div>
 * Gets True if goog-remb is negotiated.
 * </div>
 */
- (bool) rembEnabled;
/*!
 * <div>
 * Gets the goog-remb policy.
 * </div>
 */
- (FMIceLinkRembPolicy) rembPolicy;
/*!
 * <div>
 * Gets the remote description media identifier.
 * </div>
 */
- (NSString*) remoteDescriptionMediaId;
/*!
 * <div>
 * Gets the remote description track identifier.
 * </div>
 */
- (NSString*) remoteDescriptionTrackId;
/*!
 * <div>
 * Gets the remote media, if one was specified.
 * </div>
 */
- (FMIceLinkRemoteMedia*) remoteMedia;
/*!
 * <div>
 * Gets the remote track, if one was specified.
 * </div>
 */
- (FMIceLinkMediaTrack*) remoteTrack;
/*!
 * <div>
 * Removes an input.
 * </div>
 * @param input The input.
 */
- (bool) removeInput:(NSObject<FMIceLinkIMediaOutput>*)input;
/*!
 * <div>
 * Removes all inputs.
 * </div>
 */
- (void) removeInputs;
/*!
 * <div>
 * Removes some inputs.
 * </div>
 * @param inputs The inputs.
 */
- (void) removeInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Removes a handler that is raised by master streams when the synchronize context is ready.
 * </div>
 */
- (void) removeOnMasterSynchronizeContextReady:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when control frames are processed.
 * </div>
 */
- (void) removeOnProcessControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame has been processed.
 * </div>
 */
- (void) removeOnProcessedFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame is being processed.
 * </div>
 */
- (void) removeOnProcessFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when control frames are raised.
 * </div>
 */
- (void) removeOnRaiseControlFrames:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame has been raised.
 * </div>
 */
- (void) removeOnRaisedFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame is being raised.
 * </div>
 */
- (void) removeOnRaiseFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame is received.
 * </div>
 */
- (void) removeOnReceiveFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a frame is sent.
 * </div>
 */
- (void) removeOnSendFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes an output.
 * </div>
 * @param output The output.
 */
- (bool) removeOutput:(NSObject<FMIceLinkIMediaInput>*)output;
/*!
 * <div>
 * Removes all outputs.
 * </div>
 */
- (void) removeOutputs;
/*!
 * <div>
 * Removes some outputs.
 * </div>
 * @param outputs The outputs.
 */
- (void) removeOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Sets bandwidth adapation policy for this stream. EXPERIMENTAL FEATURE.
 * </div>
 */
- (void) setBandwidthAdaptationPolicy:(FMIceLinkBandwidthAdaptationPolicy)value;
/*!
 * <div>
 * Sets the CCM FIR Policy.
 * </div>
 */
- (void) setCcmFirPolicy:(FMIceLinkCcmFirPolicy)value;
/*!
 * <div>
 * Sets a value indicating whether to disable automatic RTCP sender/receiver reports.
 * </div>
 */
- (void) setDisableAutomaticReports:(bool)value;
/*!
 * <div>
 * Sets the local description media identifier.
 * If not set, defaults to the FMIceLinkMediaStream`15#localMedia
 * identifier, if one exists.
 * </div>
 */
- (void) setLocalDescriptionMediaId:(NSString*)value;
/*!
 * <div>
 * Sets the local description track identifier.
 * If not set, defaults to the FMIceLinkMediaStream`15#localTrack
 * identifier, if one exists.
 * </div>
 */
- (void) setLocalDescriptionTrackId:(NSString*)value;
/*!
 * <div>
 * Sets the local media, if one was specified.
 * </div>
 */
- (void) setLocalMedia:(FMIceLinkLocalMedia*)value;
/*!
 * <div>
 * Sets the local track, if one was specified.
 * </div>
 */
- (void) setLocalTrack:(FMIceLinkMediaTrack*)value;
/*!
 * <div>
 * Sets a value indicating whether this instance is muted.
 * </div>
 */
- (void) setMuted:(bool)value;
/*!
 * <div>
 * Sets the NACK PLI Policy.
 * </div>
 */
- (void) setNackPliPolicy:(FMIceLinkNackPliPolicy)value;
/*!
 * <div>
 * Sets the NACK Policy.
 * </div>
 */
- (void) setNackPolicy:(FMIceLinkNackPolicy)value;
/*!
 * <div>
 * Sets the output format.
 * </div>
 */
- (void) setOutputFormat:(FMIceLinkMediaFormat*)value;
/*!
 * <div>
 * Sets the ProcessFramePolicy for this media input.
 * </div>
 */
- (void) setProcessFramePolicy:(FMIceLinkProcessFramePolicy)value;
/*!
 * <div>
 * Sets the Fec Policy.
 * </div>
 */
- (void) setRedFecPolicy:(FMIceLinkRedFecPolicy)value;
/*!
 * <div>
 * Sets the remote media, if one was specified.
 * </div>
 */
- (void) setRemoteMedia:(FMIceLinkRemoteMedia*)value;
/*!
 * <div>
 * Sets the remote track, if one was specified.
 * </div>
 */
- (void) setRemoteTrack:(FMIceLinkMediaTrack*)value;
/*!
 * <div>
 * Sets the synchronize context.
 * </div>
 */
- (void) setSynchronizeContext:(FMIceLinkSynchronizeContext*)value;
/*!
 * <div>
 * Gets the synchronize context.
 * </div>
 */
- (FMIceLinkSynchronizeContext*) synchronizeContext;
/*!
 * <div>
 * Gets all synchronizers in the stream output tracks.
 * </div>
 */
- (NSMutableArray*) synchronizers;
/*!
 * <div>
 * Initializes synchronization.
 * </div>
 * @param master Whether this is a master stream.
 */
- (void) synchronizeWithMaster:(bool)master;

@end

/*!
 * <div>
 * An audio stream.
 * </div>
 */
@interface FMIceLinkAudioStream : FMIceLinkMediaStream

/*!
 * <div>
 * Adds a handler that is raised when a DTMF packet is received.
 * </div>
 */
- (void) addOnReceiveDtmfTone:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the received DTMF tone changes.
 * </div>
 */
- (void) addOnReceiveDtmfToneChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the received DTMF tone changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDtmfTone*))) addOnReceiveDtmfToneChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the received DTMF tone changes.
 * </div>
 */
- (void) addOnReceiveDtmfToneChangeWithBlock:(void(^)(FMIceLinkDtmfTone*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a DTMF packet is received.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDtmfTone*))) addOnReceiveDtmfToneWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a DTMF packet is received.
 * </div>
 */
- (void) addOnReceiveDtmfToneWithBlock:(void(^)(FMIceLinkDtmfTone*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a DTMF packet is sent.
 * </div>
 */
- (void) addOnSendDtmfTone:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the sent DTMF tone changes.
 * </div>
 */
- (void) addOnSendDtmfToneChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the sent DTMF tone changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDtmfTone*))) addOnSendDtmfToneChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the sent DTMF tone changes.
 * </div>
 */
- (void) addOnSendDtmfToneChangeWithBlock:(void(^)(FMIceLinkDtmfTone*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a DTMF packet is sent.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDtmfTone*))) addOnSendDtmfToneWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a DTMF packet is sent.
 * </div>
 */
- (void) addOnSendDtmfToneWithBlock:(void(^)(FMIceLinkDtmfTone*))valueBlock;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 */
+ (FMIceLinkAudioStream*) audioStream;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkAudioStream*) audioStreamWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param input The input.
 * @param output The output.
 */
+ (FMIceLinkAudioStream*) audioStreamWithInput:(NSObject<FMIceLinkIAudioOutput>*)input output:(NSObject<FMIceLinkIAudioInput>*)output;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param inputs The inputs.
 */
+ (FMIceLinkAudioStream*) audioStreamWithInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param inputs The inputs.
 * @param outputs The outputs.
 */
+ (FMIceLinkAudioStream*) audioStreamWithInputs:(NSMutableArray*)inputs outputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param localMedia The local media.
 */
+ (FMIceLinkAudioStream*) audioStreamWithLocalMedia:(FMIceLinkLocalMedia*)localMedia;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param localMedia The local media.
 * @param remoteMedia The remote media.
 */
+ (FMIceLinkAudioStream*) audioStreamWithLocalMedia:(FMIceLinkLocalMedia*)localMedia remoteMedia:(FMIceLinkRemoteMedia*)remoteMedia;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param localTrack The local track.
 */
+ (FMIceLinkAudioStream*) audioStreamWithLocalTrack:(FMIceLinkAudioTrack*)localTrack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param localTrack The local track.
 * @param remoteTrack The remote track.
 */
+ (FMIceLinkAudioStream*) audioStreamWithLocalTrack:(FMIceLinkAudioTrack*)localTrack remoteTrack:(FMIceLinkAudioTrack*)remoteTrack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param output The output.
 */
+ (FMIceLinkAudioStream*) audioStreamWithOutput:(NSObject<FMIceLinkIAudioInput>*)output;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param outputs The outputs.
 */
+ (FMIceLinkAudioStream*) audioStreamWithOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param remoteMedia The remote media.
 */
+ (FMIceLinkAudioStream*) audioStreamWithRemoteMedia:(FMIceLinkRemoteMedia*)remoteMedia;
/*!
 * <div>
 * Gets the output configuration.
 * (Alias for FMIceLinkAudioStream#outputConfig.)
 * </div>
 */
- (FMIceLinkAudioConfig*) config;
/*!
 * <div>
 * Creates a format.
 * </div>
 * @param attribute The attribute.
 */
- (FMIceLinkAudioFormat*) createFormatWithAttribute:(FMIceLinkSdpRtpMapAttribute*)attribute;
/*!
 * <div>
 * Creates a format.
 * </div>
 * @param name The format name.
 * @param clockRate The clock rate.
 * @param parameters The parameters.
 * @param payloadType The payload type.
 */
- (FMIceLinkAudioFormat*) createFormatWithName:(NSString*)name clockRate:(int)clockRate parameters:(NSString*)parameters payloadType:(int)payloadType;
/*!
 * <div>
 * Creates an input collection.
 * </div>
 * @param output The output.
 */
- (FMIceLinkIAudioInputCollection*) createInputCollectionWithOutput:(NSObject<FMIceLinkIAudioOutput>*)output;
/*!
 * <div>
 * Creates a media format collection.
 * </div>
 */
- (FMIceLinkAudioFormatCollection*) createMediaFormatCollection;
/*!
 * <div>
 * Creates an output collection.
 * </div>
 * @param input The input.
 */
- (FMIceLinkIAudioOutputCollection*) createOutputCollectionWithInput:(NSObject<FMIceLinkIAudioInput>*)input;
/*!
 * <div>
 * Creates a format array from a format list.
 * </div>
 * @param formatList The format list.
 */
- (NSMutableArray*) formatArrayFromListWithFormatList:(NSMutableArray*)formatList;
/*!
 * <div>
 * Gets a value indicating the gain
 * (input amplification) of this sink.
 * Any value greater than or equal to 0.0
 * is acceptable.
 * Currently, this value is not used since audio streams require
 * packetized input/output formats.
 * </div>
 */
- (double) gain;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param input The input.
 * @param output The output.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input output:(NSObject<FMIceLinkIAudioInput>*)output;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param inputs The inputs.
 */
- (instancetype) initWithInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param inputs The inputs.
 * @param outputs The outputs.
 */
- (instancetype) initWithInputs:(NSMutableArray*)inputs outputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param localMedia The local media.
 */
- (instancetype) initWithLocalMedia:(FMIceLinkLocalMedia*)localMedia;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param localMedia The local media.
 * @param remoteMedia The remote media.
 */
- (instancetype) initWithLocalMedia:(FMIceLinkLocalMedia*)localMedia remoteMedia:(FMIceLinkRemoteMedia*)remoteMedia;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param localTrack The local track.
 */
- (instancetype) initWithLocalTrack:(FMIceLinkAudioTrack*)localTrack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param localTrack The local track.
 * @param remoteTrack The remote track.
 */
- (instancetype) initWithLocalTrack:(FMIceLinkAudioTrack*)localTrack remoteTrack:(FMIceLinkAudioTrack*)remoteTrack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param output The output.
 */
- (instancetype) initWithOutput:(NSObject<FMIceLinkIAudioInput>*)output;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param outputs The outputs.
 */
- (instancetype) initWithOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioStream class.
 * </div>
 * @param remoteMedia The remote media.
 */
- (instancetype) initWithRemoteMedia:(FMIceLinkRemoteMedia*)remoteMedia;
/*!
 * <div>
 * Gets the input configuration.
 * </div>
 */
- (FMIceLinkAudioConfig*) inputConfig;
/*!
 * <div>
 * Inserts a DTMF tone.
 * </div>
 * @param dtmfTone The DTMF tone.
 */
- (bool) insertDtmfTone:(FMIceLinkDtmfTone*)dtmfTone;
/*!
 * <div>
 * Inserts DTMF tones.
 * </div>
 * @param dtmfTones The DTMF tones.
 */
- (bool) insertDtmfTones:(NSMutableArray*)dtmfTones;
/*!
 * <div>
 * Gets the output configuration.
 * </div>
 */
- (FMIceLinkAudioConfig*) outputConfig;
/*!
 * <div>
 * Contains logic updating internal policies when bandwidth adapation policy chnages.
 * </div>
 */
- (void) processBandwidthAdapatationPolicyChangeWithPolicy:(FMIceLinkBandwidthAdaptationPolicy)policy;
/*!
 * <div>
 * Removes a handler that is raised when a DTMF packet is received.
 * </div>
 */
- (void) removeOnReceiveDtmfTone:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the received DTMF tone changes.
 * </div>
 */
- (void) removeOnReceiveDtmfToneChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a DTMF packet is sent.
 * </div>
 */
- (void) removeOnSendDtmfTone:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the sent DTMF tone changes.
 * </div>
 */
- (void) removeOnSendDtmfToneChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets a value indicating the gain
 * (input amplification) of this sink.
 * Any value greater than or equal to 0.0
 * is acceptable.
 * Currently, this value is not used since audio streams require
 * packetized input/output formats.
 * </div>
 */
- (void) setGain:(double)value;
/*!
 * <div>
 * Sets a value indicating the volume
 * (output resistance) of this source.
 * Valid value range is 0.0 to 1.0, inclusive.
 * Currently, this value is not used since audio streams require
 * packetized input/output formats.
 * </div>
 */
- (void) setVolume:(double)value;
/*!
 * <div>
 * Gets a value indicating the volume
 * (output resistance) of this source.
 * Valid value range is 0.0 to 1.0, inclusive.
 * Currently, this value is not used since audio streams require
 * packetized input/output formats.
 * </div>
 */
- (double) volume;

@end

@interface FMIceLinkCcmFirPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkCcmFirPolicy)value;

@end

@interface FMIceLinkNackPliPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkNackPliPolicy)value;

@end

/*!
 * <div>
 * An SDP attribute.
 * </div>
 */
@interface FMIceLinkSdpAttribute : NSObject

+ (FMIceLinkSdpAttribute*) attribute;
/*!
 * <div>
 * Gets this Attribute's Type.
 * </div>
 */
- (FMIceLinkSdpAttributeType) attributeType;
/*!
 * <div>
 * Creates an attribute.
 * </div>
 * @param name The name.
 * @param value The value.
 */
+ (FMIceLinkSdpAttribute*) createAttributeWithName:(NSString*)name value:(NSString*)value;
/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Gets the name of the attribute type.
 * </div>
 * @param type The attribute type.
 */
+ (NSString*) getTypeNameWithType:(Class)type;
- (instancetype) init;
/*!
 * <div>
 * Determines whether the type applies to media streams.
 * </div>
 * @param type The type.
 */
+ (bool) isMediaLevelWithType:(Class)type;
/*!
 * <div>
 * Determines whether the type applies to sessions.
 * </div>
 * @param type The type.
 */
+ (bool) isSessionLevelWithType:(Class)type;
/*!
 * <div>
 * Creates an FMIceLinkSdpConnectionData instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpAttribute*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Sets this Attribute's Type.
 * </div>
 */
- (void) setAttributeType:(FMIceLinkSdpAttributeType)value;

@end

/*!
 * <div>
 * Defined in RFC 3388. Attribute is used for grouping together different media streams.
 * Its formatting in SDP is described by the following BNF:
 * group-attribute    = "a=group:" semantics
 * * (space identification-tag)
 * semantics          = "LS" | "FID" | "BUNDLE"
 * </div>
 */
@interface FMIceLinkSdpGroupAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpGroupAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpGroupAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpGroupAttribute class.
 * </div>
 * @param type The semantics type.
 * @param ids Group identification ID tags.
 */
+ (FMIceLinkSdpGroupAttribute*) groupAttributeWithType:(FMIceLinkSdpGroupSemanticsType)type ids:(NSMutableArray*)ids;
/*!
 * <div>
 * Gets the group identification tags.
 * </div>
 */
- (NSMutableArray*) ids;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpGroupAttribute class.
 * </div>
 * @param type The semantics type.
 * @param ids Group identification ID tags.
 */
- (instancetype) initWithType:(FMIceLinkSdpGroupSemanticsType)type ids:(NSMutableArray*)ids;
/*!
 * <div>
 * Gets the semantics.
 * </div>
 */
- (FMIceLinkSdpGroupSemanticsType) semantics;

@end

@interface FMIceLinkSdpGroupSemanticsTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkSdpGroupSemanticsType)value;

@end

/*!
 * <div>
 * Media track base properties/methods.
 * </div>
 */
@interface FMIceLinkMediaTrackBase : FMIceLinkDynamic

/*!
 * <div>
 * Adds a handler that is raised when the track is destroyed.
 * </div>
 */
- (void) addOnDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the track is started.
 * Only applicable for local media tracks.
 * </div>
 */
- (void) addOnStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the track is stopped.
 * Only applicable for local media tracks.
 * </div>
 */
- (void) addOnStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Changes the sink output while the media track is active.
 * </div>
 * @param sinkOutput The sink output.
 * @return
 */
- (FMIceLinkFuture*) changeSinkOutput:(FMIceLinkSinkOutput*)sinkOutput;
/*!
 * <div>
 * Changes the source input while the media track is active.
 * </div>
 * @param sourceInput The source input.
 * @return
 */
- (FMIceLinkFuture*) changeSourceInput:(FMIceLinkSourceInput*)sourceInput;
/*!
 * <div>
 * Destroys this media track.
 * </div>
 */
- (bool) destroy;
/*!
 * <div>
 * Gets the available sink outputs.
 * </div>
 * @return
 * A future with an array of sink outputs.
 * 
 */
- (FMIceLinkFuture*) getSinkOutputs;
/*!
 * <div>
 * Gets the available source inputs.
 * </div>
 * @return
 * A future with an array of source inputs.
 * 
 */
- (FMIceLinkFuture*) getSourceInputs;
- (instancetype) init;
+ (FMIceLinkMediaTrackBase*) mediaTrackBase;
/*!
 * <div>
 * Gets a value indicating whether this
 * track is muted.
 * </div>
 */
- (bool) muted;
/*!
 * <div>
 * Removes a handler that is raised when the track is destroyed.
 * </div>
 */
- (void) removeOnDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the track is started.
 * Only applicable for local media tracks.
 * </div>
 */
- (void) removeOnStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the track is stopped.
 * Only applicable for local media tracks.
 * </div>
 */
- (void) removeOnStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Sets a value indicating whether this
 * track is muted.
 * </div>
 */
- (void) setMuted:(bool)value;
/*!
 * <div>
 * Sets the current sink output.
 * </div>
 */
- (void) setSinkOutput:(FMIceLinkSinkOutput*)value;
/*!
 * <div>
 * Sets the current source input.
 * </div>
 */
- (void) setSourceInput:(FMIceLinkSourceInput*)value;
/*!
 * <div>
 * Gets the current sink output.
 * </div>
 */
- (FMIceLinkSinkOutput*) sinkOutput;
/*!
 * <div>
 * Gets the current source input.
 * </div>
 */
- (FMIceLinkSourceInput*) sourceInput;

@end

/*!
 * <div>
 * A media track.
 * </div><typeparam name="TIOutput">The type of the output interface.</typeparam><typeparam name="TIOutputCollection">The type of the source collection.</typeparam><typeparam name="TIInput">The type of the input interface.</typeparam><typeparam name="TIInputCollection">The type of the sink collection.</typeparam><typeparam name="TIElement">The type of the element interface</typeparam><typeparam name="TSource">The type of the source.</typeparam><typeparam name="TSink">The type of the sink.</typeparam><typeparam name="TPipe">The type of the pipe.</typeparam><typeparam name="TTrack">The type of the track.</typeparam><typeparam name="TBranch">The type of the branch.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam>
 */
@interface FMIceLinkMediaTrack : FMIceLinkMediaTrackBase

/*!
 * <div>
 * Gets the active sink. This will return FMIceLinkMediaTrack`14#sink
 * if FMIceLinkMediaTrack`14#sink is not <code>null</code> and not disabled.
 * Otherwise, if this track branches, it will iterate recursively
 * over the active tracks until it finds an FMIceLinkMediaTrack`14#activeSink.
 * Otherwise, it will return <code>null</code>.
 * </div>
 */
- (FMIceLinkMediaSink*) activeSink;
/*!
 * <div>
 * Adds an element.
 * </div>
 */
- (void) addElement:(NSObject<FMIceLinkIMediaElement>*)element;
/*!
 * <div>
 * Adds a handler that is raised when the track is destroyed.
 * </div>
 */
- (void) addOnDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the track is started.
 * Only applicable for local media tracks.
 * </div>
 */
- (void) addOnStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the track is stopped.
 * Only applicable for local media tracks.
 * </div>
 */
- (void) addOnStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Creates an array of inputs from a list of inputs.
 * </div>
 * @param inputs The list of inputs.
 */
- (NSMutableArray*) arrayFromInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Creates an array of outputs from a list of outputs.
 * </div>
 * @param outputs The list of outputs.
 */
- (NSMutableArray*) arrayFromOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Creates an array of sinks from a list of sinks.
 * </div>
 * @param sinks The list of sinks.
 */
- (NSMutableArray*) arrayFromSinks:(NSMutableArray*)sinks;
/*!
 * <div>
 * Creates a branch from an array of tracks.
 * </div>
 * @param tracks The tracks.
 */
- (FMIceLinkMediaBranch*) branchFromTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Changes the sink output while the media track is active.
 * </div>
 * @param sinkOutput The sink output.
 * @return
 */
- (FMIceLinkFuture*) changeSinkOutput:(FMIceLinkSinkOutput*)sinkOutput;
/*!
 * <div>
 * Changes the source input while the media track is active.
 * </div>
 * @param sourceInput The source input.
 * @return
 */
- (FMIceLinkFuture*) changeSourceInput:(FMIceLinkSourceInput*)sourceInput;
/*!
 * <div>
 * Destroys this media track.
 * </div>
 */
- (bool) destroy;
/*!
 * <div>
 * Gets a value indicating whether this instance is disabled.
 * </div>
 */
- (bool) disabled;
/*!
 * <div>
 * Gets the elements.
 * </div>
 */
- (NSMutableArray*) elements;
/*!
 * <div>
 * Finds elements in the track. This method will recursively
 * call into any branched tracks.
 * </div>
 * @return A list of elements found matching the given type,
 * or null if no elements exist for that type.
 */
- (NSMutableArray*) findElementsWithWhere:(FMIceLinkFunction1*)where;
/*!
 * <div>
 * Finds elements in this track. If the recurse flag is set,
 * then this method will recursively call into any branched tracks.
 * </div>
 * @return A list of elements found matching the given type,
 * or null if no elements exist for that type.
 */
- (NSMutableArray*) findElementsWithWhere:(FMIceLinkFunction1*)where recurse:(bool)recurse;
/*!
 * <div>
 * Finds elements in the track. This method will recursively
 * call into any branched tracks.
 * </div>
 * @return A list of elements found matching the given type,
 * or null if no elements exist for that type.
 */
- (NSMutableArray* (^)(bool(^)(NSObject<FMIceLinkIMediaElement>*))) findElementsWithWhereBlock;
/*!
 * <div>
 * Finds elements in the track. This method will recursively
 * call into any branched tracks.
 * </div>
 * @return A list of elements found matching the given type,
 * or null if no elements exist for that type.
 */
- (NSMutableArray*) findElementsWithWhereBlock:(bool(^)(NSObject<FMIceLinkIMediaElement>*))whereBlock;
/*!
 * <div>
 * Finds elements in this track. If the recurse flag is set,
 * then this method will recursively call into any branched tracks.
 * </div>
 * @return A list of elements found matching the given type,
 * or null if no elements exist for that type.
 */
- (NSMutableArray*) findElementsWithWhereBlock:(bool(^)(NSObject<FMIceLinkIMediaElement>*))whereBlock recurse:(bool)recurse;
/*!
 * <div>
 * Finds elements in this track. If the recurse flag is set,
 * then this method will recursively call into any branched tracks.
 * </div>
 * @return A list of elements found matching the given type,
 * or null if no elements exist for that type.
 */
- (NSMutableArray* (^)(bool(^)(NSObject<FMIceLinkIMediaElement>*), bool)) findElementsWithWhereBlockAndRecurse;
/*!
 * <div>
 * Finds an element in the track. This method will recursively
 * call into any branched tracks.
 * </div>
 * @return The first element found matching the given type,
 * or null if no elements exist for that type.
 */
- (NSObject<FMIceLinkIMediaElement>*) findElementWithWhere:(FMIceLinkFunction1*)where;
/*!
 * <div>
 * Finds an element in this track. If the recurse flag is set,
 * then this method will recursively call into any branched tracks.
 * </div>
 * @return The first element found matching the given type,
 * or null if no elements exist for that type.
 */
- (NSObject<FMIceLinkIMediaElement>*) findElementWithWhere:(FMIceLinkFunction1*)where recurse:(bool)recurse;
/*!
 * <div>
 * Finds an element in the track. This method will recursively
 * call into any branched tracks.
 * </div>
 * @return The first element found matching the given type,
 * or null if no elements exist for that type.
 */
- (NSObject<FMIceLinkIMediaElement>* (^)(bool(^)(NSObject<FMIceLinkIMediaElement>*))) findElementWithWhereBlock;
/*!
 * <div>
 * Finds an element in the track. This method will recursively
 * call into any branched tracks.
 * </div>
 * @return The first element found matching the given type,
 * or null if no elements exist for that type.
 */
- (NSObject<FMIceLinkIMediaElement>*) findElementWithWhereBlock:(bool(^)(NSObject<FMIceLinkIMediaElement>*))whereBlock;
/*!
 * <div>
 * Finds an element in this track. If the recurse flag is set,
 * then this method will recursively call into any branched tracks.
 * </div>
 * @return The first element found matching the given type,
 * or null if no elements exist for that type.
 */
- (NSObject<FMIceLinkIMediaElement>*) findElementWithWhereBlock:(bool(^)(NSObject<FMIceLinkIMediaElement>*))whereBlock recurse:(bool)recurse;
/*!
 * <div>
 * Finds an element in this track. If the recurse flag is set,
 * then this method will recursively call into any branched tracks.
 * </div>
 * @return The first element found matching the given type,
 * or null if no elements exist for that type.
 */
- (NSObject<FMIceLinkIMediaElement>* (^)(bool(^)(NSObject<FMIceLinkIMediaElement>*), bool)) findElementWithWhereBlockAndRecurse;
/*!
 * <div>
 * Gets the first element.
 * </div>
 */
- (NSObject<FMIceLinkIMediaElement>*) firstElement;
/*!
 * <div>
 * Gets the available sink outputs.
 * </div>
 * @return
 * A future with an array of sink outputs.
 * 
 */
- (FMIceLinkFuture*) getSinkOutputs;
/*!
 * <div>
 * Gets the available source inputs.
 * </div>
 * @return
 * A future with an array of source inputs.
 * 
 */
- (FMIceLinkFuture*) getSourceInputs;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
- (instancetype) init;
/*!
 * <div>
 * Gets the first input, if this track
 * has inputs. Otherwise, returns <code>null</code>.
 * </div>
 */
- (NSObject<FMIceLinkIMediaInput>*) input;
/*!
 * <div>
 * Gets the input format.
 * </div>
 */
- (FMIceLinkMediaFormat*) inputFormat;
/*!
 * <div>
 * Gets the track inputs.
 * </div>
 */
- (NSMutableArray*) inputs;
/*!
 * <div>
 * Gets a value indicating whether this track's
 * last element is a branch.
 * </div>
 */
- (bool) isBranched;
/*!
 * <div>
 * Determines whether the specified element is a branch.
 * </div>
 * @param element The element.
 */
- (bool) isBranchWithElement:(NSObject<FMIceLinkIMediaElement>*)element;
/*!
 * <div>
 * Gets a value indicating whether this instance is empty.
 * </div>
 */
- (bool) isEmpty;
/*!
 * <div>
 * Determines whether the specified element is an input.
 * </div>
 * @param element The element.
 * @return
 */
- (bool) isInputWithElement:(NSObject<FMIceLinkIMediaElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is an output.
 * </div>
 * @param element The element.
 * @return
 */
- (bool) isOutputWithElement:(NSObject<FMIceLinkIMediaElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is a pipe.
 * </div>
 * @param element The element.
 */
- (bool) isPipeWithElement:(NSObject<FMIceLinkIMediaElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is a sink.
 * </div>
 * @param element The element.
 */
- (bool) isSinkWithElement:(NSObject<FMIceLinkIMediaElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is a source.
 * </div>
 * @param element The element.
 */
- (bool) isSourceWithElement:(NSObject<FMIceLinkIMediaElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is a stream.
 * </div>
 * @param element The element.
 */
- (bool) isStreamWithElement:(NSObject<FMIceLinkIMediaElement>*)element;
/*!
 * <div>
 * Gets a value indicating whether this track's
 * last element is a sink.
 * </div>
 */
- (bool) isTerminated;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the last element.
 * </div>
 */
- (NSObject<FMIceLinkIMediaElement>*) lastElement;
+ (FMIceLinkMediaTrack*) mediaTrack;
/*!
 * <div>
 * Gets a value indicating whether any
 * of the elements in this track are muted.
 * Setting a value will apply to all elements.
 * </div>
 */
- (bool) muted;
/*!
 * <div>
 * Adds an element to this track.
 * </div>
 * @param next The next element.
 */
- (FMIceLinkMediaTrack*) next:(NSObject<FMIceLinkIMediaInput>*)next;
/*!
 * <div>
 * Branches out to several tracks.
 * </div>
 * @param branch The tracks.
 */
- (FMIceLinkMediaTrack*) nextWithBranch:(FMIceLinkMediaBranch*)branch;
/*!
 * <div>
 * Branches out to several tracks.
 * </div>
 * @param tracks The tracks.
 */
- (FMIceLinkMediaTrack*) nextWithTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Gets the first output, if this track
 * has outputs. Otherwise, returns <code>null</code>.
 * </div>
 */
- (NSObject<FMIceLinkIMediaOutput>*) output;
/*!
 * <div>
 * Gets the output format.
 * </div>
 */
- (FMIceLinkMediaFormat*) outputFormat;
/*!
 * <div>
 * Gets the track outputs.
 * </div>
 */
- (NSMutableArray*) outputs;
/*!
 * <div>
 * Gets a value indicating whether this instance is persistent.
 * If <code>true</code>, this instance will not be destroyed unless
 * FMIceLinkMediaTrack`14#destroy is called explicitly on this instance.
 * It will survive destruction of any parent elements that are
 * being destroyed.
 * </div>
 */
- (bool) persistent;
/*!
 * <div>
 * Gets the pipeline JSON using the first element
 * as a starting point.
 * </div>
 */
- (NSString*) pipelineJson;
/*!
 * <div>
 * Raises the FMIceLinkMediaTrack`14#addOnStarted: event.
 * </div>
 */
- (void) raiseOnStarted;
/*!
 * <div>
 * Raises the FMIceLinkMediaTrack`14#addOnStopped: event.
 * </div>
 */
- (void) raiseOnStopped;
/*!
 * <div>
 * Removes a handler that is raised when the track is destroyed.
 * </div>
 */
- (void) removeOnDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the track is started.
 * Only applicable for local media tracks.
 * </div>
 */
- (void) removeOnStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the track is stopped.
 * Only applicable for local media tracks.
 * </div>
 */
- (void) removeOnStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Sets a value indicating whether any
 * of the elements in this track are muted.
 * Setting a value will apply to all elements.
 * </div>
 */
- (void) setMuted:(bool)value;
/*!
 * <div>
 * Sets a value indicating whether this instance is persistent.
 * If <code>true</code>, this instance will not be destroyed unless
 * FMIceLinkMediaTrack`14#destroy is called explicitly on this instance.
 * It will survive destruction of any parent elements that are
 * being destroyed.
 * </div>
 */
- (void) setPersistent:(bool)value;
/*!
 * <div>
 * Sets the current sink output.
 * </div>
 */
- (void) setSinkOutput:(FMIceLinkSinkOutput*)value;
/*!
 * <div>
 * Sets the current source input.
 * </div>
 */
- (void) setSourceInput:(FMIceLinkSourceInput*)value;
/*!
 * <div>
 * Gets the sink, if the last element
 * is a sink. Otherwise, returns <code>null</code>.
 * </div>
 */
- (FMIceLinkMediaSink*) sink;
/*!
 * <div>
 * Gets the current sink output.
 * </div>
 */
- (FMIceLinkSinkOutput*) sinkOutput;
/*!
 * <div>
 * Gets the sinks.
 * </div>
 */
- (NSMutableArray*) sinks;
/*!
 * <div>
 * Gets the source, if the first element
 * is a source. Otherwise, returns <code>null</code>.
 * </div>
 */
- (FMIceLinkMediaSource*) source;
/*!
 * <div>
 * Gets the current source input.
 * </div>
 */
- (FMIceLinkSourceInput*) sourceInput;

@end

/*!
 * <div>
 * An audio chain.
 * </div>
 */
@interface FMIceLinkAudioTrack : FMIceLinkMediaTrack

/*!
 * <div>
 * Adds an element.
 * </div>
 * @param element
 */
- (void) addElement:(NSObject<FMIceLinkIAudioElement>*)element;
/*!
 * <div>
 * Adds a handler that is raised whenever the level is calculated.
 * </div>
 */
- (void) addOnLevel:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the level is calculated.
 * </div>
 */
- (void (^)(void(^)(double))) addOnLevelWithBlock;
/*!
 * <div>
 * Adds a handler that is raised whenever the level is calculated.
 * </div>
 */
- (void) addOnLevelWithBlock:(void(^)(double))valueBlock;
/*!
 * <div>
 * Creates an array of inputs from a list of inputs.
 * </div>
 * @param inputs The list of inputs.
 */
- (NSMutableArray*) arrayFromInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Creates an array of outputs from a list of outputs.
 * </div>
 * @param outputs The list of outputs.
 */
- (NSMutableArray*) arrayFromOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Creates an array of sinks from a list of sinks.
 * </div>
 * @param sinks The list of sinks.
 */
- (NSMutableArray*) arrayFromSinks:(NSMutableArray*)sinks;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioTrack class.
 * </div>
 */
+ (FMIceLinkAudioTrack*) audioTrack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioTrack class.
 * </div>
 * @param element The element.
 */
+ (FMIceLinkAudioTrack*) audioTrackWithElement:(NSObject<FMIceLinkIAudioElement>*)element;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioTrack class.
 * </div>
 * @param tracks The branch of tracks.
 */
+ (FMIceLinkAudioTrack*) audioTrackWithTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Creates a branch from an array of tracks.
 * </div>
 * @param tracks The tracks.
 */
- (FMIceLinkAudioBranch*) branchFromTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Gets the configuration.
 * </div>
 */
- (FMIceLinkAudioConfig*) config;
/*!
 * <div>
 * Gets the elements.
 * </div>
 */
- (NSMutableArray*) elements;
/*!
 * <div>
 * Gets a value indicating the gain
 * (input amplification) of this track.
 * Any value greater than or equal to 0.0
 * is acceptable.
 * </div>
 */
- (double) gain;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioTrack class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioTrack class.
 * </div>
 * @param element The element.
 */
- (instancetype) initWithElement:(NSObject<FMIceLinkIAudioElement>*)element;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioTrack class.
 * </div>
 * @param tracks The branch of tracks.
 */
- (instancetype) initWithTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Determines whether the specified element is a branch.
 * </div>
 * @param element The element.
 */
- (bool) isBranchWithElement:(NSObject<FMIceLinkIAudioElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is an input.
 * </div>
 * @param element The element.
 * @return
 */
- (bool) isInputWithElement:(NSObject<FMIceLinkIAudioElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is an output.
 * </div>
 * @param element The element.
 * @return
 */
- (bool) isOutputWithElement:(NSObject<FMIceLinkIAudioElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is a pipe.
 * </div>
 * @param element The element.
 */
- (bool) isPipeWithElement:(NSObject<FMIceLinkIAudioElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is a sink.
 * </div>
 * @param element The element.
 */
- (bool) isSinkWithElement:(NSObject<FMIceLinkIAudioElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is a source.
 * </div>
 * @param element The element.
 */
- (bool) isSourceWithElement:(NSObject<FMIceLinkIAudioElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is a stream.
 * </div>
 * @param element The element.
 */
- (bool) isStreamWithElement:(NSObject<FMIceLinkIAudioElement>*)element;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Removes a handler that is raised whenever the level is calculated.
 * </div>
 */
- (void) removeOnLevel:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets a value indicating the gain
 * (input amplification) of this track.
 * Any value greater than or equal to 0.0
 * is acceptable.
 * </div>
 */
- (void) setGain:(double)value;
/*!
 * <div>
 * Sets a value indicating the volume
 * (output resistance) of this track.
 * Valid value range is 0.0 to 1.0, inclusive.
 * </div>
 */
- (void) setVolume:(double)value;
/*!
 * <div>
 * Gets a value indicating the volume
 * (output resistance) of this track.
 * Valid value range is 0.0 to 1.0, inclusive.
 * </div>
 */
- (double) volume;

@end

/*!
 * <div>
 * A WebRTC/ORTC-compatible audio track configuration.
 * </div>
 */
@interface FMIceLinkRtcAudioTrackConfig : NSObject

- (instancetype) init;
/*!
 * <div>
 * Gets whether the Opus codec should be disabled.
 * Defaults to <code>false</code>.
 * </div>
 */
- (bool) opusDisabled;
/*!
 * <div>
 * Gets whether the PCMA codec should be disabled.
 * Defaults to <code>false</code>.
 * </div>
 */
- (bool) pcmaDisabled;
/*!
 * <div>
 * Gets whether the PCMU codec should be disabled.
 * Defaults to <code>false</code>.
 * </div>
 */
- (bool) pcmuDisabled;
+ (FMIceLinkRtcAudioTrackConfig*) rtcAudioTrackConfig;
/*!
 * <div>
 * Sets whether the Opus codec should be disabled.
 * Defaults to <code>false</code>.
 * </div>
 */
- (void) setOpusDisabled:(bool)value;
/*!
 * <div>
 * Sets whether the PCMA codec should be disabled.
 * Defaults to <code>false</code>.
 * </div>
 */
- (void) setPcmaDisabled:(bool)value;
/*!
 * <div>
 * Sets whether the PCMU codec should be disabled.
 * Defaults to <code>false</code>.
 * </div>
 */
- (void) setPcmuDisabled:(bool)value;

@end

/*!
 * <div>
 * A basic audio depacketizer.
 * </div>
 */
@interface FMIceLinkBasicAudioDepacketizer : FMIceLinkAudioDepacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicAudioDepacketizer class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkBasicAudioDepacketizer*) basicAudioDepacketizerWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicAudioDepacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkBasicAudioDepacketizer*) basicAudioDepacketizerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicAudioDepacketizer class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicAudioDepacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A basic audio packetizer.
 * </div>
 */
@interface FMIceLinkBasicAudioPacketizer : FMIceLinkAudioPacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicAudioPacketizer class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkBasicAudioPacketizer*) basicAudioPacketizerWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicAudioPacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkBasicAudioPacketizer*) basicAudioPacketizerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicAudioPacketizer class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
+ (FMIceLinkBasicAudioPacketizer*) basicAudioPacketizerWithInputFormat:(FMIceLinkAudioFormat*)inputFormat outputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicAudioPacketizer class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicAudioPacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicAudioPacketizer class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkAudioFormat*)inputFormat outputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A video pipe.
 * </div>
 */
@interface FMIceLinkVideoPipe : FMIceLinkMediaPipe

/*!
 * <div>
 * Creates a frame.
 * </div>
 * @param buffer The buffer.
 * @return
 */
- (FMIceLinkVideoFrame*) createFrameWithBuffer:(FMIceLinkVideoBuffer*)buffer;
/*!
 * <div>
 * Creates an input collection.
 * </div>
 * @param output The output.
 */
- (FMIceLinkIVideoInputCollection*) createInputCollectionWithOutput:(NSObject<FMIceLinkIVideoOutput>*)output;
/*!
 * <div>
 * Creates an output collection.
 * </div>
 * @param input The input.
 */
- (FMIceLinkIVideoOutputCollection*) createOutputCollectionWithInput:(NSObject<FMIceLinkIVideoInput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoPipe class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkVideoFormat*)inputFormat outputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoPipe class.
 * </div>
 * @param outputFormat The output format.
 */
- (instancetype) initWithOutputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoPipe class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
+ (FMIceLinkVideoPipe*) videoPipeWithInputFormat:(FMIceLinkVideoFormat*)inputFormat outputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoPipe class.
 * </div>
 * @param outputFormat The output format.
 */
+ (FMIceLinkVideoPipe*) videoPipeWithOutputFormat:(FMIceLinkVideoFormat*)outputFormat;

@end

/*!
 * <div>
 * A video depacketizer.
 * </div>
 */
@interface FMIceLinkVideoDepacketizer : FMIceLinkVideoPipe

/*!
 * <div>
 * Gets whether this pipe is allowed to be timed.
 * </div>
 */
- (bool) allowDiagnosticTimer;
/*!
 * <div>
 * Gets a value indicating whether depacketizing should be delayed.
 * </div>
 */
- (bool) delayDepacketize;
/*!
 * <div>
 * Gets a flag indicating whether depacketizing should be bypassed for
 * incoming media packets when a key frame request has been made via
 * a PLI message. Default is true.
 * </div>
 */
- (bool) delayDepacketizeOnPendingKeyFrame;
/*!
 * <div>
 * Creates a fragment from a data buffer.
 * </div>
 * @param header The rtp header for this packet.
 * @param dataBuffer The data buffer.
 * @return
 */
- (FMIceLinkVideoFragment*) doCreateFragmentWithHeader:(FMIceLinkRtpPacketHeader*)header dataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Process stats from an input.
 * </div>
 * @param stats The stats.
 */
- (void) doProcessStatsFromInputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Gets the number of corrupted frames.
 * </div>
 */
- (long long) framesCorrupted;
/*!
 * <div>
 * Gets the number of dropped frames.
 * </div>
 */
- (long long) framesDropped;
/*!
 * <div>
 * Gets the number of received frames.
 * </div>
 */
- (long long) framesReceived;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoDepacketizer`1 class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoDepacketizer`1 class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Checks if the databuffer contains a keyframe.
 * </div>
 * @param inputBuffer VideoBuffer containing video data.
 */
- (bool) isKeyFrameWithInputBuffer:(FMIceLinkDataBuffer*)inputBuffer;
/*!
 * <div>
 * Sends a key-frame request.
 * </div>
 */
- (void) sendKeyFrameRequestWithReason:(NSString*)reason;
/*!
 * <div>
 * Sets a flag indicating whether depacketizing should be bypassed for
 * incoming media packets when a key frame request has been made via
 * a PLI message. Default is true.
 * </div>
 */
- (void) setDelayDepacketizeOnPendingKeyFrame:(bool)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoDepacketizer`1 class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkVideoDepacketizer*) videoDepacketizerWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoDepacketizer`1 class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkVideoDepacketizer*) videoDepacketizerWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;

@end

/*!
 * <div>
 * A basic video depacketizer.
 * </div>
 */
@interface FMIceLinkBasicVideoDepacketizer : FMIceLinkVideoDepacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicVideoDepacketizer class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkBasicVideoDepacketizer*) basicVideoDepacketizerWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicVideoDepacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkBasicVideoDepacketizer*) basicVideoDepacketizerWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Creates a fragment from a data buffer.
 * </div>
 * @param header The rtp header for this packet.
 * @param dataBuffer The data buffer.
 */
- (FMIceLinkVideoFragment*) doCreateFragmentWithHeader:(FMIceLinkRtpPacketHeader*)header dataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicVideoDepacketizer class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicVideoDepacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Checks if the databuffer contains a keyframe.
 * </div>
 * @param inputBuffer VideoBuffer containing video data.
 */
- (bool) isKeyFrameWithInputBuffer:(FMIceLinkDataBuffer*)inputBuffer;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A video packetizer.
 * </div>
 */
@interface FMIceLinkVideoPacketizer : FMIceLinkVideoPipe

/*!
 * <div>
 * Gets whether this pipe is allowed to be timed.
 * </div>
 */
- (bool) allowDiagnosticTimer;
/*!
 * <div>
 * Processes stats from an output.
 * </div>
 * @param stats The stats.
 */
- (void) doProcessStatsFromOutputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Gets the number of sent frames.
 * </div>
 */
- (long long) framesSent;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoPacketizer class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoPacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoPacketizer class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkVideoFormat*)inputFormat outputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Processes the frame.
 * </div>
 * @param frame The frame.
 * @return
 */
- (bool) processFrame:(FMIceLinkVideoFrame*)frame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoPacketizer class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkVideoPacketizer*) videoPacketizerWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoPacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkVideoPacketizer*) videoPacketizerWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoPacketizer class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
+ (FMIceLinkVideoPacketizer*) videoPacketizerWithInputFormat:(FMIceLinkVideoFormat*)inputFormat outputFormat:(FMIceLinkVideoFormat*)outputFormat;

@end

/*!
 * <div>
 * A basic video packetizer.
 * </div>
 */
@interface FMIceLinkBasicVideoPacketizer : FMIceLinkVideoPacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicVideoPacketizer class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkBasicVideoPacketizer*) basicVideoPacketizerWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicVideoPacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkBasicVideoPacketizer*) basicVideoPacketizerWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicVideoPacketizer class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
+ (FMIceLinkBasicVideoPacketizer*) basicVideoPacketizerWithInputFormat:(FMIceLinkVideoFormat*)inputFormat outputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicVideoPacketizer class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicVideoPacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkBasicVideoPacketizer class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkVideoFormat*)inputFormat outputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

@interface FMIceLinkBundlePolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkBundlePolicy)value;

@end

/*!
 * <div>
 * An RTCP BYE packet.
 * </div>
 */
@interface FMIceLinkByeControlFrame : FMIceLinkMediaControlFrame

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 */
+ (FMIceLinkByeControlFrame*) byeControlFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param buffer The packet.
 */
+ (FMIceLinkByeControlFrame*) byeControlFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 */
+ (FMIceLinkByeControlFrame*) byeControlFrameWithSynchronizationSource:(long long)synchronizationSource;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param reasonForLeaving The reason for leaving.
 */
+ (FMIceLinkByeControlFrame*) byeControlFrameWithSynchronizationSource:(long long)synchronizationSource reasonForLeaving:(NSString*)reasonForLeaving;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param synchronizationSources The synchronization sources.
 */
+ (FMIceLinkByeControlFrame*) byeControlFrameWithSynchronizationSources:(NSMutableArray*)synchronizationSources;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param synchronizationSources The synchronization sources.
 * @param contributingSources The contributing sources.
 */
+ (FMIceLinkByeControlFrame*) byeControlFrameWithSynchronizationSources:(NSMutableArray*)synchronizationSources contributingSources:(NSMutableArray*)contributingSources;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param synchronizationSources The synchronization sources.
 * @param contributingSources The contributing sources.
 * @param reasonForLeaving The reason for leaving.
 */
+ (FMIceLinkByeControlFrame*) byeControlFrameWithSynchronizationSources:(NSMutableArray*)synchronizationSources contributingSources:(NSMutableArray*)contributingSources reasonForLeaving:(NSString*)reasonForLeaving;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param synchronizationSources The synchronization sources.
 * @param reasonForLeaving The reason for leaving.
 */
+ (FMIceLinkByeControlFrame*) byeControlFrameWithSynchronizationSources:(NSMutableArray*)synchronizationSources reasonForLeaving:(NSString*)reasonForLeaving;
/*!
 * <div>
 * Gets the length of the fixed payload header.
 * </div>
 */
+ (int) fixedPayloadHeaderLength;
/*!
 * <div>
 * Gets the length of the fixed reason for leaving header.
 * </div>
 */
+ (int) fixedReasonForLeavingPayloadHeaderLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param buffer The packet.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 */
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param reasonForLeaving The reason for leaving.
 */
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource reasonForLeaving:(NSString*)reasonForLeaving;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param synchronizationSources The synchronization sources.
 */
- (instancetype) initWithSynchronizationSources:(NSMutableArray*)synchronizationSources;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param synchronizationSources The synchronization sources.
 * @param contributingSources The contributing sources.
 */
- (instancetype) initWithSynchronizationSources:(NSMutableArray*)synchronizationSources contributingSources:(NSMutableArray*)contributingSources;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param synchronizationSources The synchronization sources.
 * @param contributingSources The contributing sources.
 * @param reasonForLeaving The reason for leaving.
 */
- (instancetype) initWithSynchronizationSources:(NSMutableArray*)synchronizationSources contributingSources:(NSMutableArray*)contributingSources reasonForLeaving:(NSString*)reasonForLeaving;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkByeControlFrame class.
 * </div>
 * @param synchronizationSources The synchronization sources.
 * @param reasonForLeaving The reason for leaving.
 */
- (instancetype) initWithSynchronizationSources:(NSMutableArray*)synchronizationSources reasonForLeaving:(NSString*)reasonForLeaving;
/*!
 * <div>
 * Gets a value indicating whether this instance has a reason for leaving.
 * </div>
 */
- (bool) reason;
/*!
 * <div>
 * Gets the reason for leaving as a string.
 * </div>
 */
- (NSString*) reasonForLeaving;
/*!
 * <div>
 * Gets the length of the reason for leaving.
 * </div>
 */
- (int) reasonForLeavingLength;
/*!
 * <div>
 * Gets the offset of the FMIceLinkByeControlFrame#reasonForLeaving in the payload.
 * </div>
 */
- (int) reasonForLeavingOffset;
/*!
 * <div>
 * Gets the reason for leaving.
 * </div>
 */
- (FMIceLinkDataBuffer*) reasonForLeavingPayload;
/*!
 * <div>
 * Gets the goodbye payload type.
 * </div>
 */
+ (int) registeredPayloadType;
/*!
 * <div>
 * Sets the synchronization and contributing sources.
 * </div>
 */
- (void) setSources:(NSMutableArray*)value;
/*!
 * <div>
 * Gets the number of FMIceLinkByeControlFrame#sources.
 * </div>
 */
- (int) sourceCount;
/*!
 * <div>
 * Gets the synchronization and contributing sources.
 * </div>
 */
- (NSMutableArray*) sources;
/*!
 * <div>
 * Gets the length of the FMIceLinkByeControlFrame#sources in bytes.
 * </div>
 */
- (int) sourcesLength;
/*!
 * <div>
 * Gets the offset of the FMIceLinkByeControlFrame#sources array in the payload.
 * </div>
 */
- (int) sourcesPayloadOffset;

@end

/*!
 * <div>
 * A candidate.
 * </div>
 */
@interface FMIceLinkCandidate : NSObject

+ (FMIceLinkCandidate*) candidate;
/*!
 * <div>
 * Gets a value indicating whether this candidate has been
 * already been dispatched as a part of a session description.
 * </div>
 */
- (bool) dispatched;
/*!
 * <div>
 * Deserializes an instance from JSON.
 * </div>
 * @param candidateJson The JSON to deserialize.
 * @return
 * The deserialized candidate.
 * 
 */
+ (FMIceLinkCandidate*) fromJsonWithCandidateJson:(NSString*)candidateJson;
- (instancetype) init;
/*!
 * <div>
 * Gets the SDP candidate attribute.
 * </div>
 */
- (FMIceLinkSdpIceCandidateAttribute*) sdpCandidateAttribute;
/*!
 * <div>
 * Gets the media index.
 * </div>
 */
- (int) sdpMediaIndex;
/*!
 * <div>
 * Sets a value indicating whether this candidate has been
 * already been dispatched as a part of a session description.
 * </div>
 */
- (void) setDispatched:(bool)value;
/*!
 * <div>
 * Sets the SDP candidate attribute.
 * </div>
 */
- (void) setSdpCandidateAttribute:(FMIceLinkSdpIceCandidateAttribute*)value;
/*!
 * <div>
 * Sets the media index.
 * </div>
 */
- (void) setSdpMediaIndex:(int)value;
/*!
 * <div>
 * Sets the protocol used by this candidate when communicating with the TURN (relay) server.
 * </div>
 */
- (void) setTurnTransportProtocol:(FMIceLinkProtocolType)value;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an instance to JSON.
 * </div>
 * @param candidate The candidate to serialize.
 * @return
 * The serialized JSON.
 * 
 */
+ (NSString*) toJsonWithCandidate:(FMIceLinkCandidate*)candidate;
/*!
 * <div>
 * Gets the protocol used by this candidate when communicating with the TURN (relay) server.
 * </div>
 */
- (FMIceLinkProtocolType) turnTransportProtocol;

@end

@interface FMIceLinkCandidatePairStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkCandidatePairState)value;

@end

@interface FMIceLinkCandidateTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkCandidateType)value;

@end

@interface FMIceLinkCodecTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkCodecType)value;

@end

/*!
 * <div>
 * A color.
 * </div>
 */
@interface FMIceLinkColor : NSObject

/*!
 * <div>
 * Gets the blue value (0-255).
 * </div>
 */
- (int) b;
/*!
 * <div>
 * Gets a black color.
 * </div>
 */
+ (FMIceLinkColor*) black;
/*!
 * <div>
 * Gets a blue color.
 * </div>
 */
+ (FMIceLinkColor*) blue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkColor class.
 * </div>
 * @param r The red value (0-255).
 * @param g The green value (0-255).
 * @param b The blue value (0-255).
 */
+ (FMIceLinkColor*) colorWithR:(int)r g:(int)g b:(int)b;
/*!
 * <div>
 * Gets a cyan color.
 * </div>
 */
+ (FMIceLinkColor*) cyan;
/*!
 * <div>
 * Gets a dark-blue color.
 * </div>
 */
+ (FMIceLinkColor*) darkBlue;
/*!
 * <div>
 * Gets a dark-green color.
 * </div>
 */
+ (FMIceLinkColor*) darkGreen;
/*!
 * <div>
 * Gets a dark-red color.
 * </div>
 */
+ (FMIceLinkColor*) darkRed;
/*!
 * <div>
 * Creates a FMIceLinkColor using hue, saturation, and brightness.
 * </div>
 * @param hue The hue value (0-359).
 * @param saturation The saturation value (0.0-1.0).
 * @param brightness The brightness value (0.0-1.0).
 * @return
 */
+ (FMIceLinkColor*) fromHsbWithHue:(double)hue saturation:(double)saturation brightness:(double)brightness;
/*!
 * <div>
 * Gets the green value (0-255).
 * </div>
 */
- (int) g;
/*!
 * <div>
 * Gets a gray color.
 * </div>
 */
+ (FMIceLinkColor*) gray;
/*!
 * <div>
 * Gets a green color.
 * </div>
 */
+ (FMIceLinkColor*) green;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkColor class.
 * </div>
 * @param r The red value (0-255).
 * @param g The green value (0-255).
 * @param b The blue value (0-255).
 */
- (instancetype) initWithR:(int)r g:(int)g b:(int)b;
/*!
 * <div>
 * Gets a magenta color.
 * </div>
 */
+ (FMIceLinkColor*) magenta;
/*!
 * <div>
 * Gets an olive color.
 * </div>
 */
+ (FMIceLinkColor*) olive;
/*!
 * <div>
 * Gets a purple color.
 * </div>
 */
+ (FMIceLinkColor*) purple;
/*!
 * <div>
 * Gets the red value (0-255).
 * </div>
 */
- (int) r;
/*!
 * <div>
 * Gets a red color.
 * </div>
 */
+ (FMIceLinkColor*) red;
/*!
 * <div>
 * Gets a teal color.
 * </div>
 */
+ (FMIceLinkColor*) teal;
/*!
 * <div>
 * Gets a white color.
 * </div>
 */
+ (FMIceLinkColor*) white;
/*!
 * <div>
 * Gets a yellow color.
 * </div>
 */
+ (FMIceLinkColor*) yellow;

@end

/*!
 * <div>
 * Connection base properties/methods.
 * </div>
 */
@interface FMIceLinkConnectionBase : FMIceLinkDynamic

/*!
 * <div>
 * Adds an ICE server.
 * </div>
 * @param iceServer The ICE server.
 */
- (void) addIceServer:(FMIceLinkIceServer*)iceServer;
/*!
 * <div>
 * Adds some ICE servers.
 * </div>
 * @param iceServers The ICE servers.
 */
- (void) addIceServers:(NSMutableArray*)iceServers;
/*!
 * <div>
 * Adds a handler that is raised when external Id of this connection changes. Old external Id as well as internal Id are raised.
 * </div>
 */
- (void) addOnExternalIdChange:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Adds a handler that is raised when external Id of this connection changes. Old external Id as well as internal Id are raised.
 * </div>
 */
- (void (^)(void(^)(NSString*, NSString*))) addOnExternalIdChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when external Id of this connection changes. Old external Id as well as internal Id are raised.
 * </div>
 */
- (void) addOnExternalIdChangeWithBlock:(void(^)(NSString*, NSString*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the gathering state changes.
 * </div>
 */
- (void) addOnGatheringStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the gathering state changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkConnectionBase*))) addOnGatheringStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the gathering state changes.
 * </div>
 */
- (void) addOnGatheringStateChangeWithBlock:(void(^)(FMIceLinkConnectionBase*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the ice connection state changes.
 * </div>
 */
- (void) addOnIceConnectionStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the ice connection state changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkConnectionBase*))) addOnIceConnectionStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the ice connection state changes.
 * </div>
 */
- (void) addOnIceConnectionStateChangeWithBlock:(void(^)(FMIceLinkConnectionBase*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a local candidate is added.
 * </div>
 */
- (void) addOnLocalCandidate:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Adds a handler that is raised when a local candidate is added.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkConnectionBase*, FMIceLinkCandidate*))) addOnLocalCandidateWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a local candidate is added.
 * </div>
 */
- (void) addOnLocalCandidateWithBlock:(void(^)(FMIceLinkConnectionBase*, FMIceLinkCandidate*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a local description is set.
 * </div>
 */
- (void) addOnLocalDescription:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Adds a handler that is raised when a local description is set.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkConnectionBase*, FMIceLinkSessionDescription*))) addOnLocalDescriptionWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a local description is set.
 * </div>
 */
- (void) addOnLocalDescriptionWithBlock:(void(^)(FMIceLinkConnectionBase*, FMIceLinkSessionDescription*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a remote description is added.
 * </div>
 */
- (void) addOnRemoteCandidate:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Adds a handler that is raised when a remote description is added.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkConnectionBase*, FMIceLinkCandidate*))) addOnRemoteCandidateWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a remote description is added.
 * </div>
 */
- (void) addOnRemoteCandidateWithBlock:(void(^)(FMIceLinkConnectionBase*, FMIceLinkCandidate*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a remote description is set.
 * </div>
 */
- (void) addOnRemoteDescription:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Adds a handler that is raised when a remote description is set.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkConnectionBase*, FMIceLinkSessionDescription*))) addOnRemoteDescriptionWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a remote description is set.
 * </div>
 */
- (void) addOnRemoteDescriptionWithBlock:(void(^)(FMIceLinkConnectionBase*, FMIceLinkSessionDescription*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the signalling state changes.
 * </div>
 */
- (void) addOnSignallingStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the signalling state changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkConnectionBase*))) addOnSignallingStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the signalling state changes.
 * </div>
 */
- (void) addOnSignallingStateChangeWithBlock:(void(^)(FMIceLinkConnectionBase*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the connection state changes.
 * </div>
 */
- (void) addOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the connection state changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkConnectionBase*))) addOnStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the connection state changes.
 * </div>
 */
- (void) addOnStateChangeWithBlock:(void(^)(FMIceLinkConnectionBase*))valueBlock;
/*!
 * <div>
 * Adds the remote candidate.
 * </div>
 * @param remoteCandidate The remote candidate.
 */
- (FMIceLinkFuture*) addRemoteCandidate:(FMIceLinkCandidate*)remoteCandidate;
/*!
 * <div>
 * Gets the first audio stream.
 * </div>
 */
- (NSObject<FMIceLinkIAudioStream>*) audioStream;
/*!
 * <div>
 * Gets the audio streams.
 * </div>
 */
- (NSMutableArray*) audioStreams;
/*!
 * <div>
 * Closes this instance.
 * </div>
 */
- (void) close;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkConnectionBase`6 class.
 * </div>
 */
+ (FMIceLinkConnectionBase*) connectionBaseWithSharedLock:(id)sharedLock;
/*!
 * <div>
 * Creates an answer.
 * </div>
 */
- (FMIceLinkFuture*) createAnswer;
/*!
 * <div>
 * Creates an offer.
 * </div>
 */
- (FMIceLinkFuture*) createOffer;
/*!
 * <div>
 * Gets the first data stream.
 * </div>
 */
- (NSObject<FMIceLinkIDataStream>*) dataStream;
/*!
 * <div>
 * Gets the data streams.
 * </div>
 */
- (NSMutableArray*) dataStreams;
/*!
 * <div>
 * Gets the amount of time (in milliseconds)
 * to wait for connectivity checks to re-establish
 * after they start to fail on a live connection.
 * Defaults to 15,000.
 * </div>
 */
- (int) deadStreamTimeout;
/*!
 * <div>
 * Adds the remote candidate.
 * </div>
 * @param promise The promise.
 * @param remoteCandidate The remote candidate.
 */
- (void) doAddRemoteCandidateWithPromise:(FMIceLinkPromise*)promise remoteCandidate:(FMIceLinkCandidate*)remoteCandidate;
/*!
 * <div>
 * Creates an answer.
 * </div>
 */
- (void) doCreateAnswerWithPromise:(FMIceLinkPromise*)promise;
/*!
 * <div>
 * Creates an offer.
 * </div>
 */
- (bool) doCreateOfferWithPromise:(FMIceLinkPromise*)promise;
/*!
 * <div>
 * Processes a session description.
 * </div>
 * @param description The session description.
 * @param isLocalDescription Whether this is a local session description.
 */
- (FMIceLinkError*) doProcessDescription:(FMIceLinkSessionDescription*)description isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Dispatches cached local candidates that were gathered while Connection generated session description.
 * </div>
 */
- (void) doSendCachedLocalCandidates;
/*!
 * <div>
 * Sets the local description.
 * </div>
 * @param promise The promise.
 * @param localDescription The local description.
 */
- (void) doSetLocalDescriptionWithPromise:(FMIceLinkPromise*)promise localDescription:(FMIceLinkSessionDescription*)localDescription;
/*!
 * <div>
 * Sets the remote description.
 * </div>
 * @param promise The promise.
 * @param remoteDescription The remote description.
 */
- (void) doSetRemoteDescriptionWithPromise:(FMIceLinkPromise*)promise remoteDescription:(FMIceLinkSessionDescription*)remoteDescription;
/*!
 * <div>
 * Gets the error.
 * </div>
 */
- (FMIceLinkError*) error;
/*!
 * <div>
 * Gets the external identifier.
 * </div>
 */
- (NSString*) externalId;
/*!
 * <div>
 * Gets the ICE gathering state.
 * </div>
 */
- (FMIceLinkIceGatheringState) gatheringState;
/*!
 * <div>
 * Gets the current connection stats.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) getStats;
/*!
 * <div>
 * Gets whether this connection has an audio stream.
 * </div>
 */
- (bool) hasAudio;
/*!
 * <div>
 * Gets whether this connection has a data stream.
 * </div>
 */
- (bool) hasData;
/*!
 * <div>
 * Gets whether this connection has a video stream.
 * </div>
 */
- (bool) hasVideo;
/*!
 * <div>
 * Gets the ICE connection state.
 * </div>
 */
- (FMIceLinkIceConnectionState) iceConnectionState;
/*!
 * <div>
 * Gets the ICE gather policy.
 * </div>
 */
- (FMIceLinkIceGatherPolicy) iceGatherPolicy;
/*!
 * <div>
 * Gets the ICE server.
 * </div>
 */
- (FMIceLinkIceServer*) iceServer;
/*!
 * <div>
 * Gets the ICE servers.
 * </div>
 */
- (NSMutableArray*) iceServers;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkConnectionBase`6 class.
 * </div>
 */
- (instancetype) initWithSharedLock:(id)sharedLock;
/*!
 * <div>
 * Gets the current instance.
 * </div>
 */
- (FMIceLinkConnectionBase*) instance;
/*!
 * <div>
 * Gets a value indicating whether the connection is currently closed or failed.
 * </div>
 */
- (bool) isTerminated;
/*!
 * <div>
 * Gets a value indicating whether the connection is currently closing or failing.
 * </div>
 */
- (bool) isTerminating;
/*!
 * <div>
 * Gets a value indicating whether the connection is currently closing, failing, closed, or failed.
 * </div>
 */
- (bool) isTerminatingOrTerminated;
/*!
 * <div>
 * Gets a value indicating whether legacy Connection.Timeout should be used.
 * When disabled, Connection.Timeout only accounts for the time spent trying to establish
 * connectivity (i.e. time it takes to transition from the Connecting to the Connected state;
 * from the time point when both offer and answer had been set to the connection
 * being fully established).
 * When enabled, Connection.Timeout accounts for the time spent from receiving an offer (or creating an
 * offer) to establishing connectivity (i.e. time it takes to transition from Initializing to Connected
 * state).
 * By default, LegacyTimeout is set to true, so that existing behavior is preserved. However, in the future
 * default will be updated to false. This means that IL will not account for any signalling delays that may
 * occur while establishing connectivity. This option will be later deprecated.
 * </div>
 */
- (bool) legacyTimeout;
/*!
 * <div>
 * Gets the local description.
 * </div>
 */
- (FMIceLinkSessionDescription*) localDescription;
/*!
 * <div>
 * Processes a session description.
 * </div>
 * @param description The session description.
 * @param isLocalDescription Whether this is a local session description.
 */
- (FMIceLinkError*) processDescription:(FMIceLinkSessionDescription*)description isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Processes a media description.
 * </div>
 * @param stream The stream.
 * @param sdpMediaDescription The SDP media description.
 * @param sdpMediaIndex The SDP media index.
 * @param isLocalDescription Flag indicating if this is a local Sdp description.
 * @param isRenegotiation Flag indicating whether SDP renegotiation is currently in progress.
 */
- (FMIceLinkError*) processSdpMediaDescriptionWithStream:(FMIceLinkStreamBase*)stream sdpMediaDescription:(FMIceLinkSdpMediaDescription*)sdpMediaDescription sdpMediaIndex:(int)sdpMediaIndex isLocalDescription:(bool)isLocalDescription isRenegotiation:(bool)isRenegotiation;
/*!
 * <div>
 * Processes a state change.
 * </div>
 */
- (void) processStateChange;
/*!
 * <div>
 * Raises gathering state change.
 * </div>
 */
- (void) raiseGatheringStateChangeWithConnection:(FMIceLinkConnectionBase*)connection;
/*!
 * <div>
 * Raises ICE connection state change.
 * </div>
 */
- (void) raiseIceConnectionStateChangeWithConnection:(FMIceLinkConnectionBase*)connection;
/*!
 * <div>
 * Raises a local candidate but only if it has not been already raised.
 * </div>
 * @param localCandidate The local candidate.
 */
- (void) raiseLocalCandidate:(FMIceLinkCandidate*)localCandidate;
/*!
 * <div>
 * Gets the remote description.
 * </div>
 */
- (FMIceLinkSessionDescription*) remoteDescription;
/*!
 * <div>
 * Removes an ICE server.
 * </div>
 * @param iceServer The ICE server.
 */
- (void) removeIceServer:(FMIceLinkIceServer*)iceServer;
/*!
 * <div>
 * Removes some ICE servers.
 * </div>
 * @param iceServers The ICE servers.
 */
- (void) removeIceServers:(NSMutableArray*)iceServers;
/*!
 * <div>
 * Removes a handler that is raised when external Id of this connection changes. Old external Id as well as internal Id are raised.
 * </div>
 */
- (void) removeOnExternalIdChange:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Removes a handler that is raised when the gathering state changes.
 * </div>
 */
- (void) removeOnGatheringStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the ice connection state changes.
 * </div>
 */
- (void) removeOnIceConnectionStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when a local candidate is added.
 * </div>
 */
- (void) removeOnLocalCandidate:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Removes a handler that is raised when a local description is set.
 * </div>
 */
- (void) removeOnLocalDescription:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Removes a handler that is raised when a remote description is added.
 * </div>
 */
- (void) removeOnRemoteCandidate:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Removes a handler that is raised when a remote description is set.
 * </div>
 */
- (void) removeOnRemoteDescription:(FMIceLinkAction2*)value;
/*!
 * <div>
 * Removes a handler that is raised when the signalling state changes.
 * </div>
 */
- (void) removeOnSignallingStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the connection state changes.
 * </div>
 */
- (void) removeOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the amount of time (in milliseconds)
 * to wait for connectivity checks to re-establish
 * after they start to fail on a live connection.
 * Defaults to 15,000.
 * </div>
 */
- (void) setDeadStreamTimeout:(int)value;
/*!
 * <div>
 * Sets the external identifier.
 * </div>
 */
- (void) setExternalId:(NSString*)value;
/*!
 * <div>
 * Sets the ICE gathering state.
 * </div>
 */
- (void) setGatheringState:(FMIceLinkIceGatheringState)value;
/*!
 * <div>
 * Sets the ICE connection state.
 * </div>
 */
- (void) setIceConnectionState:(FMIceLinkIceConnectionState)value;
/*!
 * <div>
 * Sets the ICE gather policy.
 * </div>
 */
- (void) setIceGatherPolicy:(FMIceLinkIceGatherPolicy)value;
/*!
 * <div>
 * Sets the ICE server.
 * </div>
 */
- (void) setIceServer:(FMIceLinkIceServer*)value;
/*!
 * <div>
 * Sets the ICE servers.
 * </div>
 */
- (void) setIceServers:(NSMutableArray*)value;
/*!
 * <div>
 * Sets a value indicating whether legacy Connection.Timeout should be used.
 * When disabled, Connection.Timeout only accounts for the time spent trying to establish
 * connectivity (i.e. time it takes to transition from the Connecting to the Connected state;
 * from the time point when both offer and answer had been set to the connection
 * being fully established).
 * When enabled, Connection.Timeout accounts for the time spent from receiving an offer (or creating an
 * offer) to establishing connectivity (i.e. time it takes to transition from Initializing to Connected
 * state).
 * By default, LegacyTimeout is set to true, so that existing behavior is preserved. However, in the future
 * default will be updated to false. This means that IL will not account for any signalling delays that may
 * occur while establishing connectivity. This option will be later deprecated.
 * </div>
 */
- (void) setLegacyTimeout:(bool)value;
/*!
 * <div>
 * Sets the local description.
 * </div>
 * @param localDescription The local description.
 */
- (FMIceLinkFuture*) setLocalDescription:(FMIceLinkSessionDescription*)localDescription;
/*!
 * <div>
 * Sets the remote description.
 * </div>
 * @param remoteDescription The remote description.
 */
- (FMIceLinkFuture*) setRemoteDescription:(FMIceLinkSessionDescription*)remoteDescription;
/*!
 * <div>
 * Sets the state of the signalling.
 * </div>
 */
- (void) setSignallingState:(FMIceLinkSignallingState)value;
/*!
 * <div>
 * Sets the tie breaker.
 * </div>
 */
- (void) setTieBreaker:(NSString*)value;
/*!
 * <div>
 * Sets the amount of time (in milliseconds)
 * to wait for a connection to establish before
 * giving up and closing it. Defaults to 30,000.
 * </div>
 */
- (void) setTimeout:(int)value;
/*!
 * <div>
 * Sets Trickle Ice Support Policy. Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-05
 * </div>
 */
- (void) setTrickleIcePolicy:(FMIceLinkTrickleIcePolicy)value;
/*!
 * <div>
 * Gets the state of the signalling.
 * </div>
 */
- (FMIceLinkSignallingState) signallingState;
/*!
 * <div>
 * Gets the state of the connection.
 * </div>
 */
- (FMIceLinkConnectionState) state;
/*!
 * <div>
 * Gets the first stream.
 * </div>
 */
- (FMIceLinkStreamBase*) stream;
/*!
 * <div>
 * Gets the streams.
 * </div>
 */
- (NSMutableArray*) streams;
/*!
 * <div>
 * Gets the tie breaker.
 * </div>
 */
- (NSString*) tieBreaker;
/*!
 * <div>
 * Gets the amount of time (in milliseconds)
 * to wait for a connection to establish before
 * giving up and closing it. Defaults to 30,000.
 * </div>
 */
- (int) timeout;
/*!
 * <div>
 * Gets Trickle Ice Support Policy. Cf. https://tools.ietf.org/html/draft-ietf-ice-trickle-05
 * </div>
 */
- (FMIceLinkTrickleIcePolicy) trickleIcePolicy;
/*!
 * <div>
 * Gets the first video stream.
 * </div>
 */
- (NSObject<FMIceLinkIVideoStream>*) videoStream;
/*!
 * <div>
 * Gets the video streams.
 * </div>
 */
- (NSMutableArray*) videoStreams;

@end

/*!
 * <div>
 * A peer-to-peer connection.
 * </div>
 */
@interface FMIceLinkConnection : FMIceLinkConnectionBase

/*!
 * <div>
 * Gets the audio streams.
 * </div>
 */
- (NSMutableArray*) audioStreams;
/*!
 * <div>
 * Closes this instance.
 * </div>
 */
- (void) close;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkConnection class.
 * </div>
 * @param stream The stream.
 */
+ (FMIceLinkConnection*) connectionWithStream:(FMIceLinkStream*)stream;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkConnection class.
 * </div>
 * @param streams The streams.
 */
+ (FMIceLinkConnection*) connectionWithStreams:(NSMutableArray*)streams;
/*!
 * <div>
 * Gets a method that creates Datagram sockets. Optional. If not set, default OS UDP socket is used.
 * </div>
 */
- (FMIceLinkFunction1*) createDatagramSocket;
/*!
 * <div>
 * Gets a method that creates Stream sockets. Optional. If not set, default OS TCP socket is used.
 * </div>
 */
- (FMIceLinkFunction1*) createStreamSocket;
/*!
 * <div>
 * Gets the data streams.
 * </div>
 */
- (NSMutableArray*) dataStreams;
/*!
 * <div>
 * Gets the default local DTLS certificate.
 * </div>
 */
+ (FMIceLinkDtlsCertificate*) defaultLocalDtlsCertificate;
/*!
 * <div>
 * Gets the default local DTLS certificates.
 * </div>
 */
+ (NSMutableArray*) defaultLocalDtlsCertificates;
/*!
 * <div>
 * Adds the remote candidate.
 * </div>
 * @param promise The promise.
 * @param remoteCandidate The remote candidate.
 */
- (void) doAddRemoteCandidateWithPromise:(FMIceLinkPromise*)promise remoteCandidate:(FMIceLinkCandidate*)remoteCandidate;
/*!
 * <div>
 * Creates an answer.
 * </div>
 * @param promise The promise.
 */
- (void) doCreateAnswerWithPromise:(FMIceLinkPromise*)promise;
/*!
 * <div>
 * Creates an offer.
 * </div>
 * @param promise The promise.
 */
- (bool) doCreateOfferWithPromise:(FMIceLinkPromise*)promise;
/*!
 * <div>
 * Processes a session description.
 * </div>
 * @param description The session description.
 * @param isLocalDescription Whether this is a local session description.
 */
- (FMIceLinkError*) doProcessDescription:(FMIceLinkSessionDescription*)description isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Dispatches cached local candidates that were gathered while Connection generated session description.
 * </div>
 */
- (void) doSendCachedLocalCandidates;
/*!
 * <div>
 * Sets the local description.
 * </div>
 * @param promise The promise.
 * @param localDescription The local description.
 */
- (void) doSetLocalDescriptionWithPromise:(FMIceLinkPromise*)promise localDescription:(FMIceLinkSessionDescription*)localDescription;
/*!
 * <div>
 * Sets the remote description.
 * </div>
 * @param promise The promise.
 * @param remoteDescription The remote description.
 */
- (void) doSetRemoteDescriptionWithPromise:(FMIceLinkPromise*)promise remoteDescription:(FMIceLinkSessionDescription*)remoteDescription;
/*!
 * <div>
 * Gets the DTLS cipher suites to use.
 * Defaults to:
 * DtlsCipherSuite.EcdheEcdsaAes128Sha,
 * DtlsCipherSuite.EcdheEcdsaAes128GcmSha256,
 * DtlsCipherSuite.EcdheEcdsaAes128CbcSha256,
 * DtlsCipherSuite.EcdheRsaAes128Sha,
 * DtlsCipherSuite.EcdheRsaAes128GcmSha256,
 * DtlsCipherSuite.EcdheRsaAes128CbcSha256,
 * DtlsCipherSuite.RsaAes128Sha,
 * DtlsCipherSuite.RsaAes128GcmSha256,
 * DtlsCipherSuite.RsaAes128CbcSha256,
 * </div>
 */
- (NSMutableArray*) dtlsCipherSuites;
/*!
 * <div>
 * Gets the protocol version to use
 * when in the DTLS client role. Defaults
 * to FMIceLinkDtlsProtocolVersionDtls10.
 * </div>
 */
- (FMIceLinkDtlsProtocolVersion) dtlsClientVersion;
/*!
 * <div>
 * Gets the maximum protocol version to
 * allow when in the DTLS server role. Defaults
 * to FMIceLinkDtlsProtocolVersionDtls12.
 * </div>
 */
- (FMIceLinkDtlsProtocolVersion) dtlsServerMaxVersion;
/*!
 * <div>
 * Gets the minimum protocol version to
 * allow when in the DTLS server role. Defaults
 * to FMIceLinkDtlsProtocolVersionDtls10.
 * </div>
 */
- (FMIceLinkDtlsProtocolVersion) dtlsServerMinVersion;
/*!
 * <div>
 * Gets the ICE gathering state.
 * </div>
 */
- (FMIceLinkIceGatheringState) gatheringState;
/*!
 * <div>
 * Gets the current connection stats.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) getStats;
/*!
 * <div>
 * Gets the type of the stream by.
 * </div>
 * @param type The type of the stream.
 */
- (FMIceLinkStream*) getStreamByType:(FMIceLinkStreamType)type;
/*!
 * <div>
 * Gets the streams by type.
 * </div>
 * @param type The type of the stream.
 */
- (NSMutableArray*) getStreamsByType:(FMIceLinkStreamType)type;
/*!
 * <div>
 * Gets the ICE address types.
 * </div>
 */
- (NSMutableArray*) iceAddressTypes;
/*!
 * <div>
 * Gets the ICE connection state.
 * </div>
 */
- (FMIceLinkIceConnectionState) iceConnectionState;
/*!
 * <div>
 * Gets policy indicating whether ICE is required (and enabled) or disabled (and not required for this connection).
 * </div>
 */
- (FMIceLinkIcePolicy) icePolicy;
/*!
 * <div>
 * Gets the ICE port range.
 * </div>
 */
- (FMIceLinkIcePortRange*) icePortRange;
/*!
 * <div>
 * Gets the ICE role.
 * </div>
 */
- (FMIceLinkIceRole) iceRole;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkConnection class.
 * </div>
 * @param stream The stream.
 */
- (instancetype) initWithStream:(FMIceLinkStream*)stream;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkConnection class.
 * </div>
 * @param streams The streams.
 */
- (instancetype) initWithStreams:(NSMutableArray*)streams;
/*!
 * <div>
 * Gets the current instance.
 * </div>
 */
- (FMIceLinkConnection*) instance;
/*!
 * <div>
 * Gets a value indicating how many
 * milliseconds must elapse between STUN
 * keep-alive binding requests.
 * Defaults to 1000.
 * </div>
 */
- (int) keepAliveInterval;
/*!
 * <div>
 * Gets the local description.
 * </div>
 */
- (FMIceLinkSessionDescription*) localDescription;
/*!
 * <div>
 * Gets the local DTLS certificate.
 * </div>
 */
- (FMIceLinkDtlsCertificate*) localDtlsCertificate;
/*!
 * <div>
 * Gets the local DTLS certificates.
 * </div>
 */
- (NSMutableArray*) localDtlsCertificates;
/*!
 * <div>
 * Gets the multiplex policy.
 * </div>
 */
- (FMIceLinkMultiplexPolicy) multiplexPolicy;
/*!
 * <div>
 * Gets the private IP address of this
 * device. If set, this will bypass the local
 * network discovery and use this as the sole
 * host candidate.
 * </div>
 */
- (NSString*) privateIPAddress;
/*!
 * <div>
 * Gets the private IP address of this
 * device. If set, this will bypass the local
 * network discovery and use this as the sole
 * host candidate.
 * </div>
 */
- (NSMutableArray*) privateIPAddresses;
/*!
 * <div>
 * Processes a media description.
 * </div>
 * @param stream The stream.
 * @param sdpMediaDescription The SDP media description.
 * @param sdpMediaIndex The SDP media index.
 * @param isLocalDescription Flag indicating if this is a local Sdp description.
 * @param isRenegotiation Flag indicating if SDP renegotiation is currently in progress.
 */
- (FMIceLinkError*) processSdpMediaDescriptionWithStream:(FMIceLinkStream*)stream sdpMediaDescription:(FMIceLinkSdpMediaDescription*)sdpMediaDescription sdpMediaIndex:(int)sdpMediaIndex isLocalDescription:(bool)isLocalDescription isRenegotiation:(bool)isRenegotiation;
/*!
 * <div>
 * Processes a state change.
 * </div>
 */
- (void) processStateChange;
/*!
 * <div>
 * Gets the public IP address of this
 * device, if the NAT is known to be 1:1 and
 * the IP address is known in advance. This
 * should only be used in controlled server
 * environments as an alternative to using
 * an external STUN server.
 * </div>
 */
- (NSString*) publicIPAddress;
/*!
 * <div>
 * Gets the public IP address of this
 * device, if the NAT is known to be 1:1 and
 * the IP address is known in advance. This
 * should only be used in controlled server
 * environments as an alternative to using
 * an external STUN server.
 * </div>
 */
- (NSMutableArray*) publicIPAddresses;
/*!
 * <div>
 * Gets the remote description.
 * </div>
 */
- (FMIceLinkSessionDescription*) remoteDescription;
/*!
 * <div>
 * Sets a method that creates Datagram sockets. Optional. If not set, default OS UDP socket is used.
 * </div>
 */
- (void) setCreateDatagramSocket:(FMIceLinkFunction1*)value;
/*!
 * <div>
 * Sets a method that creates Datagram sockets. Optional. If not set, default OS UDP socket is used.
 * </div>
 */
- (void (^)(FMIceLinkDatagramSocket*(^)(FMIceLinkDatagramSocketCreateArgs*))) setCreateDatagramSocketBlock;
/*!
 * <div>
 * Sets a method that creates Datagram sockets. Optional. If not set, default OS UDP socket is used.
 * </div>
 */
- (void) setCreateDatagramSocketBlock:(FMIceLinkDatagramSocket*(^)(FMIceLinkDatagramSocketCreateArgs*))valueBlock;
/*!
 * <div>
 * Sets a method that creates Stream sockets. Optional. If not set, default OS TCP socket is used.
 * </div>
 */
- (void) setCreateStreamSocket:(FMIceLinkFunction1*)value;
/*!
 * <div>
 * Sets a method that creates Stream sockets. Optional. If not set, default OS TCP socket is used.
 * </div>
 */
- (void (^)(FMIceLinkStreamSocket*(^)(FMIceLinkStreamSocketCreateArgs*))) setCreateStreamSocketBlock;
/*!
 * <div>
 * Sets a method that creates Stream sockets. Optional. If not set, default OS TCP socket is used.
 * </div>
 */
- (void) setCreateStreamSocketBlock:(FMIceLinkStreamSocket*(^)(FMIceLinkStreamSocketCreateArgs*))valueBlock;
/*!
 * <div>
 * Sets the default local DTLS certificate.
 * </div>
 */
+ (void) setDefaultLocalDtlsCertificate:(FMIceLinkDtlsCertificate*)value;
/*!
 * <div>
 * Sets the default local DTLS certificates.
 * </div>
 */
+ (void) setDefaultLocalDtlsCertificates:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the DTLS cipher suites to use.
 * Defaults to:
 * DtlsCipherSuite.EcdheEcdsaAes128Sha,
 * DtlsCipherSuite.EcdheEcdsaAes128GcmSha256,
 * DtlsCipherSuite.EcdheEcdsaAes128CbcSha256,
 * DtlsCipherSuite.EcdheRsaAes128Sha,
 * DtlsCipherSuite.EcdheRsaAes128GcmSha256,
 * DtlsCipherSuite.EcdheRsaAes128CbcSha256,
 * DtlsCipherSuite.RsaAes128Sha,
 * DtlsCipherSuite.RsaAes128GcmSha256,
 * DtlsCipherSuite.RsaAes128CbcSha256,
 * </div>
 */
- (void) setDtlsCipherSuites:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the protocol version to use
 * when in the DTLS client role. Defaults
 * to FMIceLinkDtlsProtocolVersionDtls10.
 * </div>
 */
- (void) setDtlsClientVersion:(FMIceLinkDtlsProtocolVersion)value;
/*!
 * <div>
 * Sets the maximum protocol version to
 * allow when in the DTLS server role. Defaults
 * to FMIceLinkDtlsProtocolVersionDtls12.
 * </div>
 */
- (void) setDtlsServerMaxVersion:(FMIceLinkDtlsProtocolVersion)value;
/*!
 * <div>
 * Sets the minimum protocol version to
 * allow when in the DTLS server role. Defaults
 * to FMIceLinkDtlsProtocolVersionDtls10.
 * </div>
 */
- (void) setDtlsServerMinVersion:(FMIceLinkDtlsProtocolVersion)value;
/*!
 * <div>
 * Sets the ICE gathering state.
 * </div>
 */
- (void) setGatheringState:(FMIceLinkIceGatheringState)value;
/*!
 * <div>
 * Sets the ICE address types.
 * </div>
 */
- (void) setIceAddressTypes:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the ICE connection state.
 * </div>
 */
- (void) setIceConnectionState:(FMIceLinkIceConnectionState)value;
/*!
 * <div>
 * Sets policy indicating whether ICE is required (and enabled) or disabled (and not required for this connection).
 * </div>
 */
- (void) setIcePolicy:(FMIceLinkIcePolicy)value;
/*!
 * <div>
 * Sets the ICE port range.
 * </div>
 */
- (void) setIcePortRange:(FMIceLinkIcePortRange*)value;
/*!
 * <div>
 * Sets a value indicating how many
 * milliseconds must elapse between STUN
 * keep-alive binding requests.
 * Defaults to 1000.
 * </div>
 */
- (void) setKeepAliveInterval:(int)value;
/*!
 * <div>
 * Sets the local DTLS certificate.
 * </div>
 */
- (void) setLocalDtlsCertificate:(FMIceLinkDtlsCertificate*)value;
/*!
 * <div>
 * Sets the local DTLS certificates.
 * </div>
 */
- (void) setLocalDtlsCertificates:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the multiplex policy.
 * </div>
 */
- (void) setMultiplexPolicy:(FMIceLinkMultiplexPolicy)value;
/*!
 * <div>
 * Sets the private IP address of this
 * device. If set, this will bypass the local
 * network discovery and use this as the sole
 * host candidate.
 * </div>
 */
- (void) setPrivateIPAddress:(NSString*)value;
/*!
 * <div>
 * Sets the private IP address of this
 * device. If set, this will bypass the local
 * network discovery and use this as the sole
 * host candidate.
 * </div>
 */
- (void) setPrivateIPAddresses:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the public IP address of this
 * device, if the NAT is known to be 1:1 and
 * the IP address is known in advance. This
 * should only be used in controlled server
 * environments as an alternative to using
 * an external STUN server.
 * </div>
 */
- (void) setPublicIPAddress:(NSString*)value;
/*!
 * <div>
 * Sets the public IP address of this
 * device, if the NAT is known to be 1:1 and
 * the IP address is known in advance. This
 * should only be used in controlled server
 * environments as an alternative to using
 * an external STUN server.
 * </div>
 */
- (void) setPublicIPAddresses:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the limit on the the number of Turn Allocate request messages when trying to establish allocation on a Turn server.
 * </div>
 */
- (void) setStunBindingRequestLimit:(int)value;
/*!
 * <div>
 * Sets the timeout for individual Stun (and Turn) request messages in ms.
 * </div>
 */
- (void) setStunRequestTimeout:(int)value;
/*!
 * <div>
 * Sets a value indicating whether media streams on this connection are synchronized (i.e. support lipsync).
 * EXPERIMENTAL. Disabled by default.
 * </div>
 */
- (void) setSynchronizeMediaStreams:(bool)value;
/*!
 * <div>
 * Sets connection timeout for stream sockets in ms.
 * </div>
 */
- (void) setTcpConnectTimeout:(int)value;
/*!
 * <div>
 * Sets a method that can be used to test and optionally modify inbound RTP buffers.
 * FOR TESTING PURPOSES ONLY. Returning <code>null</code> will cause the buffer to be discarded.
 * </div>
 */
- (void) setTestReceivedRtpBuffer:(FMIceLinkFunction1*)value;
/*!
 * <div>
 * Sets a method that can be used to test and optionally modify inbound RTP buffers.
 * FOR TESTING PURPOSES ONLY. Returning <code>null</code> will cause the buffer to be discarded.
 * </div>
 */
- (void (^)(FMIceLinkDataBuffer*(^)(FMIceLinkDataBuffer*))) setTestReceivedRtpBufferBlock;
/*!
 * <div>
 * Sets a method that can be used to test and optionally modify inbound RTP buffers.
 * FOR TESTING PURPOSES ONLY. Returning <code>null</code> will cause the buffer to be discarded.
 * </div>
 */
- (void) setTestReceivedRtpBufferBlock:(FMIceLinkDataBuffer*(^)(FMIceLinkDataBuffer*))valueBlock;
/*!
 * <div>
 * Sets a fixed round-trip time (in milliseconds) to use in the network transport.
 * FOR TESTING PURPOSES ONLY. Defaults to -1, which indicates that normal round-trip time
 * calculations should be used.
 * </div>
 */
- (void) setTestRoundTripTime:(int)value;
/*!
 * <div>
 * Sets a method that can be used to test and optionally modify outbound RTP buffers.
 * FOR TESTING PURPOSES ONLY. Returning <code>null</code> will cause the buffer to be discarded.
 * </div>
 */
- (void) setTestSendingRtpBuffer:(FMIceLinkFunction1*)value;
/*!
 * <div>
 * Sets a method that can be used to test and optionally modify outbound RTP buffers.
 * FOR TESTING PURPOSES ONLY. Returning <code>null</code> will cause the buffer to be discarded.
 * </div>
 */
- (void (^)(FMIceLinkDataBuffer*(^)(FMIceLinkDataBuffer*))) setTestSendingRtpBufferBlock;
/*!
 * <div>
 * Sets a method that can be used to test and optionally modify outbound RTP buffers.
 * FOR TESTING PURPOSES ONLY. Returning <code>null</code> will cause the buffer to be discarded.
 * </div>
 */
- (void) setTestSendingRtpBufferBlock:(FMIceLinkDataBuffer*(^)(FMIceLinkDataBuffer*))valueBlock;
/*!
 * <div>
 * Sets the limit on the the number of Turn Allocate request messages when trying to establish allocation on a Turn server.
 * </div>
 */
- (void) setTurnAllocateRequestLimit:(int)value;
/*!
 * <div>
 * Gets the streams.
 * </div>
 */
- (NSMutableArray*) streams;
/*!
 * <div>
 * Gets the limit on the the number of Turn Allocate request messages when trying to establish allocation on a Turn server.
 * </div>
 */
- (int) stunBindingRequestLimit;
/*!
 * <div>
 * Gets the timeout for individual Stun (and Turn) request messages in ms.
 * </div>
 */
- (int) stunRequestTimeout;
/*!
 * <div>
 * Gets a value indicating whether media streams on this connection are synchronized (i.e. support lipsync).
 * EXPERIMENTAL. Disabled by default.
 * </div>
 */
- (bool) synchronizeMediaStreams;
/*!
 * <div>
 * Gets connection timeout for stream sockets in ms.
 * </div>
 */
- (int) tcpConnectTimeout;
/*!
 * <div>
 * Gets a method that can be used to test and optionally modify inbound RTP buffers.
 * FOR TESTING PURPOSES ONLY. Returning <code>null</code> will cause the buffer to be discarded.
 * </div>
 */
- (FMIceLinkFunction1*) testReceivedRtpBuffer;
/*!
 * <div>
 * Gets a fixed round-trip time (in milliseconds) to use in the network transport.
 * FOR TESTING PURPOSES ONLY. Defaults to -1, which indicates that normal round-trip time
 * calculations should be used.
 * </div>
 */
- (int) testRoundTripTime;
/*!
 * <div>
 * Gets a method that can be used to test and optionally modify outbound RTP buffers.
 * FOR TESTING PURPOSES ONLY. Returning <code>null</code> will cause the buffer to be discarded.
 * </div>
 */
- (FMIceLinkFunction1*) testSendingRtpBuffer;
/*!
 * <div>
 * Gets the limit on the the number of Turn Allocate request messages when trying to establish allocation on a Turn server.
 * </div>
 */
- (int) turnAllocateRequestLimit;
/*!
 * <div>
 * Gets the video streams.
 * </div>
 */
- (NSMutableArray*) videoStreams;

@end

/*!
 * <div>
 * A collection of connections.
 * </div>
 */
@interface FMIceLinkConnectionCollection : FMIceLinkCollection

/*!
 * <div>
 * Invoked when an element is added to the collection.
 * </div>
 * @param value The value.
 */
- (void) addSuccess:(FMIceLinkConnection*)value;
/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
+ (FMIceLinkConnectionCollection*) connectionCollection;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkConnectionCollection*) createCollection;
/*!
 * <div>
 * Gets a connection by extenral connection ID.
 * </div>
 * @param idValue The external connection identifier.
 * @return The connection, or null if the connection does not exist.
 */
- (FMIceLinkConnection*) getByExternalId:(NSString*)idValue;
/*!
 * <div>
 * Gets a connection by internal connection ID.
 * </div>
 * @param idValue The internal connection identifier.
 * @return The connection, or null if the connection does not exist.
 */
- (FMIceLinkConnection*) getById:(NSString*)idValue;
- (instancetype) init;
/*!
 * <div>
 * Invoked when an element is removed from the collection.
 * </div>
 * @param value The value.
 */
- (void) removeSuccess:(FMIceLinkConnection*)value;
/*!
 * <div>
 * Tries to get a connection by external connection ID.
 * </div>
 * @param idValue The internal Connection identifier.
 * @param connection The connection.
 * @return The connection, or null if the connection does not exist.
 */
- (bool) tryGetByExternalId:(NSString*)idValue connection:(FMIceLinkConnection**)connection;
/*!
 * <div>
 * Tries to get a connection by internal connection ID.
 * </div>
 * @param idValue The internal Connection identifier.
 * @param connection The connection.
 * @return The connection, or null if the connection does not exist.
 */
- (bool) tryGetById:(NSString*)idValue connection:(FMIceLinkConnection**)connection;

@end

/*!
 * <div>
 * A state machine for data channel states.
 * </div>
 */
@interface FMIceLinkDataChannelStateMachine : FMIceLinkStateMachine

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataChannelStateMachine class.
 * </div>
 */
+ (FMIceLinkDataChannelStateMachine*) dataChannelStateMachine;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataChannelStateMachine class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Converts a state to an integer value.
 * </div>
 * @param state The state.
 * @return
 */
- (int) stateToValueWithState:(FMIceLinkDataChannelState)state;
/*!
 * <div>
 * Converts an integer value to a state.
 * </div>
 * @param value The integer value.
 * @return
 */
- (FMIceLinkDataChannelState) valueToState:(int)value;

@end

/*!
 * <div>
 * An audio pipe whose output matches its input.
 * </div>
 */
@interface FMIceLinkIdentityAudioPipe : FMIceLinkAudioPipe

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new FMIceLinkIdentityAudioPipe.
 * </div>
 * @param format The input/output format.
 */
+ (FMIceLinkIdentityAudioPipe*) identityAudioPipeWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new FMIceLinkIdentityAudioPipe.
 * </div>
 * @param format The input/output format.
 */
- (instancetype) initWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A video pipe whose output matches its input.
 * </div>
 */
@interface FMIceLinkIdentityVideoPipe : FMIceLinkVideoPipe

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new FMIceLinkIdentityVideoPipe.
 * </div>
 * @param format The input/output format.
 */
+ (FMIceLinkIdentityVideoPipe*) identityVideoPipeWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new FMIceLinkIdentityVideoPipe.
 * </div>
 * @param format The input/output format.
 */
- (instancetype) initWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A video sink.
 * </div>
 */
@interface FMIceLinkVideoSink : FMIceLinkMediaSink

/*!
 * <div>
 * Creates an output collection.
 * </div>
 * @param input The input.
 */
- (FMIceLinkIVideoOutputCollection*) createOutputCollectionWithInput:(NSObject<FMIceLinkIVideoInput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoSink class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoSink class.
 * </div>
 * @param inputFormat The input format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkVideoFormat*)inputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoSink class.
 * </div>
 */
+ (FMIceLinkVideoSink*) videoSink;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoSink class.
 * </div>
 * @param inputFormat The input format.
 */
+ (FMIceLinkVideoSink*) videoSinkWithInputFormat:(FMIceLinkVideoFormat*)inputFormat;

@end

/*!
 * <div>
 * A video view sink.
 * </div><typeparam name="T"></typeparam>
 */
@interface FMIceLinkViewSink : FMIceLinkVideoSink

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkViewSink`1 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkViewSink`1 class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkViewSink`1 class.
 * </div>
 * @param inputFormat The input format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkVideoFormat*)inputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkViewSink`1 class.
 * </div>
 * @param inputs The inputs.
 */
- (instancetype) initWithInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Gets a value indicating whether a recording icon should be displayed.
 * </div>
 */
- (bool) isRecording;
/*!
 * <div>
 * Renders the buffer.
 * </div>
 * @param inputBuffer The input buffer.
 */
- (void) renderBufferWithInputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Sets a value indicating whether a recording icon should be displayed.
 * </div>
 */
- (void) setIsRecording:(bool)value;
/*!
 * <div>
 * Sets a value indicating whether the view is mirrored.
 * </div>
 */
- (void) setViewMirror:(bool)value;
/*!
 * <div>
 * Sets the view scale.
 * </div>
 */
- (void) setViewScale:(FMIceLinkLayoutScale)value;
/*!
 * <div>
 * Gets the view.
 * </div>
 */
- (id) view;
/*!
 * <div>
 * Gets a value indicating whether the view is mirrored.
 * </div>
 */
- (bool) viewMirror;
/*!
 * <div>
 * Gets the view scale.
 * </div>
 */
- (FMIceLinkLayoutScale) viewScale;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkViewSink`1 class.
 * </div>
 */
+ (FMIceLinkViewSink*) viewSink;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkViewSink`1 class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkViewSink*) viewSinkWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkViewSink`1 class.
 * </div>
 * @param inputFormat The input format.
 */
+ (FMIceLinkViewSink*) viewSinkWithInputFormat:(FMIceLinkVideoFormat*)inputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkViewSink`1 class.
 * </div>
 * @param inputs The inputs.
 */
+ (FMIceLinkViewSink*) viewSinkWithInputs:(NSMutableArray*)inputs;

@end

/*!
 * <div>
 * A video view sink that does nothing.
 * </div><typeparam name="T"></typeparam>
 */
@interface FMIceLinkNullViewSink : FMIceLinkViewSink

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkNullViewSink`1 class.
 * </div>
 * @param inputFormat The input format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkVideoFormat*)inputFormat;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkNullViewSink`1 class.
 * </div>
 * @param inputFormat The input format.
 */
+ (FMIceLinkNullViewSink*) nullViewSinkWithInputFormat:(FMIceLinkVideoFormat*)inputFormat;
/*!
 * <div>
 * Renders a video buffer.
 * </div>
 * @param inputBuffer The input buffer.
 */
- (void) renderBufferWithInputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Sets a value indicating whether the view is mirrored.
 * </div>
 */
- (void) setViewMirror:(bool)value;
/*!
 * <div>
 * Sets the view scale.
 * </div>
 */
- (void) setViewScale:(FMIceLinkLayoutScale)value;
/*!
 * <div>
 * Gets the view.
 * </div>
 */
- (id) view;
/*!
 * <div>
 * Gets a value indicating whether the view is mirrored.
 * </div>
 */
- (bool) viewMirror;
/*!
 * <div>
 * Gets the view scale.
 * </div>
 */
- (FMIceLinkLayoutScale) viewScale;

@end

/*!
 * <div>
 * A state machine for stream states.
 * </div>
 */
@interface FMIceLinkStreamStateMachine : FMIceLinkStateMachine

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStreamStateMachine class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Converts a state to an integer value.
 * </div>
 * @param state The state.
 * @return
 */
- (int) stateToValueWithState:(FMIceLinkStreamState)state;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkStreamStateMachine class.
 * </div>
 */
+ (FMIceLinkStreamStateMachine*) streamStateMachine;
/*!
 * <div>
 * Converts an integer value to a state.
 * </div>
 * @param value The integer value.
 * @return
 */
- (FMIceLinkStreamState) valueToState:(int)value;

@end

/*!
 * <div>
 * A state machine for connection states.
 * </div>
 */
@interface FMIceLinkConnectionStateMachine : FMIceLinkStateMachine

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkConnectionStateMachine class.
 * </div>
 */
+ (FMIceLinkConnectionStateMachine*) connectionStateMachine;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkConnectionStateMachine class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Converts a state to an integer value.
 * </div>
 * @param state The state.
 * @return
 */
- (int) stateToValueWithState:(FMIceLinkConnectionState)state;
/*!
 * <div>
 * Converts an integer value to a state.
 * </div>
 * @param value The integer value.
 * @return
 */
- (FMIceLinkConnectionState) valueToState:(int)value;

@end

@interface FMIceLinkConnectionStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkConnectionState)value;

@end

/*!
 * <div>
 * Data channel base properties/methods.
 * </div>
 */
@interface FMIceLinkDataChannelBase : FMIceLinkDynamic

/*!
 * <div>
 * Adds a handler that is raised when the data channel state changes.
 * </div>
 */
- (void) addOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the data channel state changes.
 * </div>
 */
- (void (^)(void(^)(id))) addOnStateChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the data channel state changes.
 * </div>
 */
- (void) addOnStateChangeWithBlock:(void(^)(id))valueBlock;
/*!
 * <div>
 * Gets the connection identifier.
 * </div>
 */
- (NSString*) connectionId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataChannelBase`1 class.
 * </div>
 * @param label The label.
 * @param ordered Whether messages will be delivered in the order they are sent.
 * @param subprotocol The subprotocol.
 */
+ (FMIceLinkDataChannelBase*) dataChannelBaseWithLabel:(NSString*)label ordered:(bool)ordered subprotocol:(NSString*)subprotocol;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataChannelBase`1 class.
 * </div>
 * @param label The label.
 * @param ordered Whether messages will be delivered in the order they are sent.
 * @param subprotocol The subprotocol.
 */
- (instancetype) initWithLabel:(NSString*)label ordered:(bool)ordered subprotocol:(NSString*)subprotocol;
/*!
 * <div>
 * Gets the current instance.
 * </div>
 */
- (id) instance;
/*!
 * <div>
 * Gets a value indicating whether the data channel is currently closed or failed.
 * </div>
 */
- (bool) isTerminated;
/*!
 * <div>
 * Gets a value indicating whether the data channel is currently closing.
 * </div>
 */
- (bool) isTerminating;
/*!
 * <div>
 * Gets a value indicating whether the data channel is currently closing, closed, or failed.
 * </div>
 */
- (bool) isTerminatingOrTerminated;
/*!
 * <div>
 * Gets the label.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the callback to execute when a message is received.
 * </div>
 */
- (FMIceLinkAction1*) onReceive;
/*!
 * <div>
 * Gets a value indicating whether messages will be delivered in the order they are sent.
 * </div>
 */
- (bool) ordered;
/*!
 * <div>
 * Processes a state change.
 * </div>
 */
- (void) processStateChange;
/*!
 * <div>
 * Processes a state lock change.
 * </div>
 */
- (void) processStateLockChange;
/*!
 * <div>
 * Raises the OnReceive callback with data bytes.
 * </div>
 * @param dataBytes The data bytes.
 */
- (void) raiseDataBytes:(FMIceLinkDataBuffer*)dataBytes;
/*!
 * <div>
 * Raises the OnReceive callback with a data string.
 * </div>
 * @param dataString The data string.
 */
- (void) raiseDataString:(NSString*)dataString;
/*!
 * <div>
 * Removes a handler that is raised when the data channel state changes.
 * </div>
 */
- (void) removeOnStateChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sends some bytes.
 * </div>
 * @param dataBytes The data bytes.
 */
- (FMIceLinkFuture*) sendDataBytes:(FMIceLinkDataBuffer*)dataBytes;
/*!
 * <div>
 * Sends a string.
 * </div>
 * @param dataString The data string.
 */
- (FMIceLinkFuture*) sendDataString:(NSString*)dataString;
/*!
 * <div>
 * Sets the callback to execute when a message is received.
 * </div>
 */
- (void) setOnReceive:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets the callback to execute when a message is received.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDataChannelReceiveArgs*))) setOnReceiveBlock;
/*!
 * <div>
 * Sets the callback to execute when a message is received.
 * </div>
 */
- (void) setOnReceiveBlock:(void(^)(FMIceLinkDataChannelReceiveArgs*))valueBlock;
/*!
 * <div>
 * Gets the state.
 * </div>
 */
- (FMIceLinkDataChannelState) state;
/*!
 * <div>
 * Gets the stream identifier.
 * </div>
 */
- (NSString*) streamId;
/*!
 * <div>
 * Gets the subprotocol.
 * </div>
 */
- (NSString*) subprotocol;

@end

/*!
 * <div>
 * A data channel.
 * </div>
 */
@interface FMIceLinkDataChannel : FMIceLinkDataChannelBase

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataChannel class.
 * </div>
 * @param label The label.
 */
+ (FMIceLinkDataChannel*) dataChannelWithLabel:(NSString*)label;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataChannel class.
 * </div>
 * @param label The label.
 * @param ordered if set to true [ordered].
 */
+ (FMIceLinkDataChannel*) dataChannelWithLabel:(NSString*)label ordered:(bool)ordered;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataChannel class.
 * </div>
 * @param label The label.
 * @param ordered Whether messages will be delivered in the order they are sent.
 * @param subprotocol The subprotocol.
 */
+ (FMIceLinkDataChannel*) dataChannelWithLabel:(NSString*)label ordered:(bool)ordered subprotocol:(NSString*)subprotocol;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataChannel class.
 * </div>
 * @param label The label.
 */
- (instancetype) initWithLabel:(NSString*)label;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataChannel class.
 * </div>
 * @param label The label.
 * @param ordered if set to true [ordered].
 */
- (instancetype) initWithLabel:(NSString*)label ordered:(bool)ordered;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataChannel class.
 * </div>
 * @param label The label.
 * @param ordered Whether messages will be delivered in the order they are sent.
 * @param subprotocol The subprotocol.
 */
- (instancetype) initWithLabel:(NSString*)label ordered:(bool)ordered subprotocol:(NSString*)subprotocol;
/*!
 * <div>
 * Gets the current instance.
 * </div>
 */
- (FMIceLinkDataChannel*) instance;
/*!
 * <div>
 * Processes a state lock change.
 * </div>
 */
- (void) processStateLockChange;
/*!
 * <div>
 * Sends bytes.
 * </div>
 * @param dataBytes The data bytes.
 */
- (FMIceLinkFuture*) sendDataBytes:(FMIceLinkDataBuffer*)dataBytes;
/*!
 * <div>
 * Sends a string.
 * </div>
 * @param dataString The data string.
 */
- (FMIceLinkFuture*) sendDataString:(NSString*)dataString;

@end

/*!
 * <div>
 * A collection of data channels.
 * </div>
 */
@interface FMIceLinkDataChannelCollection : FMIceLinkCollection

/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkDataChannelCollection*) createCollection;
+ (FMIceLinkDataChannelCollection*) dataChannelCollection;
- (instancetype) init;

@end

/*!
 * <div>
 * Arguments for the data channel receive event.
 * </div>
 */
@interface FMIceLinkDataChannelReceiveArgs : NSObject

/*!
 * <div>
 * Gets the data buffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) dataBytes;
+ (FMIceLinkDataChannelReceiveArgs*) dataChannelReceiveArgs;
/*!
 * <div>
 * Gets the data string.
 * </div>
 */
- (NSString*) dataString;
- (instancetype) init;
/*!
 * <div>
 * Sets the data buffer.
 * </div>
 */
- (void) setDataBytes:(FMIceLinkDataBuffer*)value;
/*!
 * <div>
 * Sets the data string.
 * </div>
 */
- (void) setDataString:(NSString*)value;

@end

@interface FMIceLinkDataChannelStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkDataChannelState)value;

@end

/*!
 * <div>
 * Data stream base properties/methods.
 * </div>
 */
@interface FMIceLinkDataStreamBase : FMIceLinkStream

/*!
 * <div>
 * Changes this stream's direction
 * </div>
 */
- (FMIceLinkError*) changeDirectionWithNewDirection:(FMIceLinkStreamDirection)newDirection;
/*!
 * <div>
 * Gets the channels.
 * </div>
 */
- (NSMutableArray*) channels;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataStreamBase`1 class.
 * </div>
 */
+ (FMIceLinkDataStreamBase*) dataStreamBase;
/*!
 * <div>
 * Gets the current direction.
 * </div>
 */
- (FMIceLinkStreamDirection) direction;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataStreamBase`1 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the current direction.
 * </div>
 */
- (FMIceLinkStreamDirection) localDirection;
/*!
 * <div>
 * Processes a state change.
 * </div>
 */
- (void) processStateChange;
/*!
 * <div>
 * Processes a state lock change.
 * </div>
 */
- (void) processStateLockChange;
/*!
 * <div>
 * Gets the current direction.
 * </div>
 */
- (FMIceLinkStreamDirection) remoteDirection;
/*!
 * <div>
 * Sets the current direction.
 * </div>
 */
- (void) setLocalDirection:(FMIceLinkStreamDirection)value;

@end

/*!
 * <div>
 * A data stream.
 * </div>
 */
@interface FMIceLinkDataStream : FMIceLinkDataStreamBase

/*!
 * <div>
 * Gets the channels.
 * </div>
 */
- (NSMutableArray*) channels;
/*!
 * <div>
 * Generates SDP media description for data stream.
 * </div>
 * @param sdpMessage The SDP message.
 * @param supportSdes if set to true Sdp message will contain SDES crypto attibutes.
 * @param isOffer if set to true Sdp media description is a part of an Sdp offer.
 * @param renegotiation Indicates whether media description generation is a part of the SDP renegotiation attempt.
 */
- (FMIceLinkSdpMediaDescription*) createSdpMediaDescriptionWithSdpMessage:(FMIceLinkSdpMessage*)sdpMessage supportSdes:(bool)supportSdes isOffer:(bool)isOffer renegotiation:(bool)renegotiation;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataStream class.
 * </div>
 * @param channel The channel.
 */
+ (FMIceLinkDataStream*) dataStreamWithChannel:(FMIceLinkDataChannel*)channel;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataStream class.
 * </div>
 * @param channels The channels.
 */
+ (FMIceLinkDataStream*) dataStreamWithChannels:(NSMutableArray*)channels;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataStream class.
 * </div>
 * @param channel The channel.
 */
- (instancetype) initWithChannel:(FMIceLinkDataChannel*)channel;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDataStream class.
 * </div>
 * @param channels The channels.
 */
- (instancetype) initWithChannels:(NSMutableArray*)channels;
/*!
 * <div>
 * Gets a value indicating how FMIceLinkDataChannels are being matched between local and remote peer.
 * If enabled, legacy way is being used, where channels are being matched using order in which they were supplied
 * the FMIceLinkDataStream constructor.
 * If disbled (default), channels are being matched usingDataChannel.Label, which uniquely identifies a channel
 * </div>
 */
- (bool) legacyChannelMatching;
/*!
 * <div>
 * Gets maximum message size that this client is willing to receive over this stream in bytes.
 * </div>
 */
- (long long) maxMessageSize;
/*!
 * <div>
 * Gets the SCTP port.
 * </div>
 */
- (int) sctpPort;
/*!
 * <div>
 * Sets a value indicating how FMIceLinkDataChannels are being matched between local and remote peer.
 * If enabled, legacy way is being used, where channels are being matched using order in which they were supplied
 * the FMIceLinkDataStream constructor.
 * If disbled (default), channels are being matched usingDataChannel.Label, which uniquely identifies a channel
 * </div>
 */
- (void) setLegacyChannelMatching:(bool)value;
/*!
 * <div>
 * Sets maximum message size that this client is willing to receive over this stream in bytes.
 * </div>
 */
- (void) setMaxMessageSize:(long long)value;
/*!
 * <div>
 * Sets the SCTP port.
 * </div>
 */
- (void) setSctpPort:(int)value;
/*!
 * <div>
 * Sets a value indicating whether SDES encryption is in use for this stream.
 * </div>
 */
- (void) setUseSdes:(bool)value;
/*!
 * <div>
 * Gets a value indicating whether SDES encryption is in use for this stream.
 * </div>
 */
- (bool) useSdes;

@end

/*!
 * <div>
 * The base class for the diagnostic timers.
 * </div>
 */
@interface FMIceLinkDiagnosticsTimer : NSObject

/*!
 * <div>
 * Destroys this timer and its data.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Gets a string containing the stats from this timer.
 * </div>
 */
- (NSString*) getStats;
/*!
 * <div>
 * Gets if this Timer has data or not.
 * </div>
 */
- (bool) hasData;
/*!
 * <div>
 * Gets the tag for this diagnostic timer.
 * </div>
 */
- (NSString*) tag;
/*!
 * <div>
 * Gets the stop watch used in this timer.
 * </div>
 */
- (FMIceLinkManagedStopwatch*) watch;

@end

/*!
 * <div>
 * A duration timer for calculating how long a process takes.
 * </div>
 */
@interface FMIceLinkDiagnosticsDurationTimer : FMIceLinkDiagnosticsTimer

/*!
 * <div>
 * Adds beginning timestamp to the sample queue.
 * </div>
 */
- (void) beginSample;
/*!
 * <div>
 * Adds an end timestamp to the sample queue.
 * </div>
 */
- (void) endSample;
/*!
 * <div>
 * Matches up the beginning and end samples and calculates instant while keeping track of the total the min, max, and average.
 * </div>
 */
- (NSString*) getStats;
/*!
 * <div>
 * Gets whether this timer has data or not.
 * </div>
 */
- (bool) hasData;

@end

/*!
 * <div>
 * A rate timer for calculating the frequency of something.
 * </div>
 */
@interface FMIceLinkDiagnosticsRateTimer : FMIceLinkDiagnosticsTimer

/*!
 * <div>
 * Adds a sample.
 * </div>
 */
- (void) addTick;
/*!
 * <div>
 * Gets the current stats for this timer.
 * </div>
 */
- (NSString*) getStats;
/*!
 * <div>
 * Gets whether this timer has data or not.
 * </div>
 */
- (bool) hasData;

@end

/*!
 * <div>
 * The management class for all diagnostic timers.
 * </div>
 */
@interface FMIceLinkDiagnosticsTimers : NSObject

/*!
 * <div>
 * Gets whether the timings diagnostics are enabled or not.
 * </div>
 */
+ (bool) enabled;
/*!
 * <div>
 * Gets a duration timer with a specific tag.
 * </div>
 * @param tag The tag.
 */
+ (FMIceLinkDiagnosticsDurationTimer*) getDurationTimerWithTag:(NSString*)tag;
/*!
 * <div>
 * Gets a duration timer with a tag corresponding to a type name.
 * </div>
 * @param type The type.
 */
+ (FMIceLinkDiagnosticsDurationTimer*) getDurationTimerWithType:(Class)type;
/*!
 * <div>
 * Gets a rate timer with a specific tag.
 * </div>
 * @param tag The tag.
 */
+ (FMIceLinkDiagnosticsRateTimer*) getRateTimerWithTag:(NSString*)tag;
/*!
 * <div>
 * Gets a rate timer with a tag corresponding to a type name.
 * </div>
 * @param type The type.
 */
+ (FMIceLinkDiagnosticsRateTimer*) getRateTimerWithType:(Class)type;
/*!
 * <div>
 * Gets the output interval (in seconds) for diagnostic timings. Setting to 0 disables.
 * </div>
 */
+ (int) outputInterval;
/*!
 * <div>
 * Gets the log level to use when outputting the timings.
 * </div>
 */
+ (FMIceLinkLogLevel) outputLogLevel;
/*!
 * <div>
 * Sets the output interval (in seconds) for diagnostic timings. Setting to 0 disables.
 * </div>
 */
+ (void) setOutputInterval:(int)value;
/*!
 * <div>
 * Sets the log level to use when outputting the timings.
 * </div>
 */
+ (void) setOutputLogLevel:(FMIceLinkLogLevel)value;

@end

@interface FMIceLinkDtlsCipherSuiteWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkDtlsCipherSuite)value;

@end

/*!
 * <div>
 * A set of DTLS parameters.
 * </div>
 */
@interface FMIceLinkDtlsParameters : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtlsParameters class.
 * </div>
 * @param role The role.
 * @param fingerprints The fingerprints.
 */
+ (FMIceLinkDtlsParameters*) dtlsParametersWithRole:(FMIceLinkDtlsRole)role fingerprints:(NSMutableArray*)fingerprints;
/*!
 * <div>
 * Gets the fingerprint.
 * </div>
 */
- (FMIceLinkDtlsFingerprint*) fingerprint;
/*!
 * <div>
 * Gets the fingerprints.
 * </div>
 */
- (NSMutableArray*) fingerprints;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtlsParameters class.
 * </div>
 * @param role The role.
 * @param fingerprints The fingerprints.
 */
- (instancetype) initWithRole:(FMIceLinkDtlsRole)role fingerprints:(NSMutableArray*)fingerprints;
/*!
 * <div>
 * Gets the role.
 * </div>
 */
- (FMIceLinkDtlsRole) role;
/*!
 * <div>
 * Sets the fingerprint.
 * </div>
 */
- (void) setFingerprint:(FMIceLinkDtlsFingerprint*)value;
/*!
 * <div>
 * Sets the fingerprints.
 * </div>
 */
- (void) setFingerprints:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the role.
 * </div>
 */
- (void) setRole:(FMIceLinkDtlsRole)value;

@end

@interface FMIceLinkDtlsProtocolVersionWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkDtlsProtocolVersion)value;

@end

@interface FMIceLinkDtlsRoleWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkDtlsRole)value;

@end

/*!
 * <div>
 * A transport.
 * </div>
 */
@interface FMIceLinkTransport : FMIceLinkDynamic

/*!
 * <div>
 * Adds a handler that is raised when data is received.
 * </div>
 */
- (void) addOnReceive:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when data is received.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDataBuffer*))) addOnReceiveWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when data is received.
 * </div>
 */
- (void) addOnReceiveWithBlock:(void(^)(FMIceLinkDataBuffer*))valueBlock;
- (instancetype) init;
/*!
 * <div>
 * Gets a value indicating whether this instance is closed.
 * </div><value>
 * <code>true</code> if this instance is closed; otherwise, <code>false</code>.
 * </value>
 */
- (bool) isClosed;
/*!
 * <div>
 * Removes a handler that is raised when data is received.
 * </div>
 */
- (void) removeOnReceive:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sends the specified buffer.
 * </div>
 * @param buffer The buffer.
 */
- (void) sendWithBuffer:(FMIceLinkDataBuffer*)buffer;
+ (FMIceLinkTransport*) transport;

@end

/*!
 * <div>
 * A DTMF (telephone-event) sender.
 * </div>
 */
@interface FMIceLinkDtmfSender : FMIceLinkAudioPipe

/*!
 * <div>
 * Adds a handler that is raised when a tone is sent.
 * </div>
 */
- (void) addOnTone:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the tone changes. An empty string indicates
 * the end of a tone.
 * </div>
 */
- (void) addOnToneChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the tone changes. An empty string indicates
 * the end of a tone.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDtmfTone*))) addOnToneChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the tone changes. An empty string indicates
 * the end of a tone.
 * </div>
 */
- (void) addOnToneChangeWithBlock:(void(^)(FMIceLinkDtmfTone*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a tone is sent.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDtmfTone*))) addOnToneWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a tone is sent.
 * </div>
 */
- (void) addOnToneWithBlock:(void(^)(FMIceLinkDtmfTone*))valueBlock;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Determines whether any tones are queued for delivery.
 * </div>
 */
- (bool) hasTone;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfSender class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfSender class.
 * </div>
 * @param clockRate The clock rate.
 */
- (instancetype) initWithClockRate:(int)clockRate;
/*!
 * <div>
 * Inserts tones into the DTMF stream.
 * </div>
 * @param tones The tones.
 */
- (void) insertTones:(NSMutableArray*)tones;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Adds the next tone to the frame.
 * </div>
 * @param duration The duration.
 * @param timestamp The timestamp.
 * @param synchronizationSource The synchronization source.
 * @return
 */
- (bool) raiseToneWithDuration:(int)duration timestamp:(long long)timestamp synchronizationSource:(long long)synchronizationSource;
/*!
 * <div>
 * Removes a handler that is raised when a tone is sent.
 * </div>
 */
- (void) removeOnTone:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the tone changes. An empty string indicates
 * the end of a tone.
 * </div>
 */
- (void) removeOnToneChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfSender class.
 * </div>
 */
+ (FMIceLinkDtmfSender*) sender;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfSender class.
 * </div>
 * @param clockRate The clock rate.
 */
+ (FMIceLinkDtmfSender*) senderWithClockRate:(int)clockRate;
/*!
 * <div>
 * Gets the current tone.
 * </div>
 */
- (FMIceLinkDtmfTone*) tone;

@end

/*!
 * <div>
 * A DTMF (telephone-event) receiver.
 * </div>
 */
@interface FMIceLinkDtmfReceiver : FMIceLinkAudioPipe

/*!
 * <div>
 * Adds a handler that is raised when a tone is received.
 * </div>
 */
- (void) addOnTone:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the tone changes. An empty string indicates
 * the end of a tone.
 * </div>
 */
- (void) addOnToneChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the tone changes. An empty string indicates
 * the end of a tone.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDtmfTone*))) addOnToneChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the tone changes. An empty string indicates
 * the end of a tone.
 * </div>
 */
- (void) addOnToneChangeWithBlock:(void(^)(FMIceLinkDtmfTone*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when a tone is received.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkDtmfTone*))) addOnToneWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a tone is received.
 * </div>
 */
- (void) addOnToneWithBlock:(void(^)(FMIceLinkDtmfTone*))valueBlock;
/*!
 * <div>
 * Gets a value indicating whether this FMIceLinkDtmfReceiver is disabled.
 * </div>
 */
- (bool) disabled;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfReceiver class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfReceiver class.
 * </div>
 * @param clockRate The clock rate.
 */
- (instancetype) initWithClockRate:(int)clockRate;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfReceiver class.
 * </div>
 */
+ (FMIceLinkDtmfReceiver*) receiver;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfReceiver class.
 * </div>
 * @param clockRate The clock rate.
 */
+ (FMIceLinkDtmfReceiver*) receiverWithClockRate:(int)clockRate;
/*!
 * <div>
 * Removes a handler that is raised when a tone is received.
 * </div>
 */
- (void) removeOnTone:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the tone changes. An empty string indicates
 * the end of a tone.
 * </div>
 */
- (void) removeOnToneChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Gets the current tone.
 * </div>
 */
- (FMIceLinkDtmfTone*) tone;

@end

/*!
 * <div>
 * A DTMF (telephone-event) format.
 * </div>
 */
@interface FMIceLinkDtmfFormat : FMIceLinkAudioFormat

/*!
 * <div>
 * Gets the default clock rate (8000).
 * </div>
 */
+ (int) defaultClockRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfFormat class.
 * </div>
 */
+ (FMIceLinkDtmfFormat*) format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfFormat class.
 * </div>
 * @param clockRate The clock rate.
 */
+ (FMIceLinkDtmfFormat*) formatWithClockRate:(int)clockRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfFormat class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfFormat class.
 * </div>
 * @param clockRate The clock rate.
 */
- (instancetype) initWithClockRate:(int)clockRate;

@end

/*!
 * <div>
 * A DTMF (telephone-event) packet.
 * </div>
 */
@interface FMIceLinkDtmfPacket : NSObject

/*!
 * <div>
 * Gets the duration in timestamp units (based on the negotiated clock rate).
 * </div>
 */
- (int) duration;
/*!
 * <div>
 * Gets the end-bit.
 * </div>
 */
- (bool) end;
/*!
 * <div>
 * Gets the event code.
 * </div>
 */
- (int) eventCode;
/*!
 * <div>
 * Gets the length.
 * </div>
 * @return
 */
- (int) getLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfPacket class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfPacket class.
 * </div>
 */
+ (FMIceLinkDtmfPacket*) packet;
/*!
 * <div>
 * Reads from a data buffer.
 * </div>
 * @param dataBuffer The data buffer.
 * @return
 */
+ (FMIceLinkDtmfPacket*) readFromWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Sets the duration in timestamp units (based on the negotiated clock rate).
 * </div>
 */
- (void) setDuration:(int)value;
/*!
 * <div>
 * Sets the end-bit.
 * </div>
 */
- (void) setEnd:(bool)value;
/*!
 * <div>
 * Sets the event code.
 * </div>
 */
- (void) setEventCode:(int)value;
/*!
 * <div>
 * Sets the volume in dBm0 with the sign removed. Power levels range from 0 to -63 dBm0,
 * so the value of this field ranges from 0-63, with higher values indicating lower volume.
 * </div>
 */
- (void) setVolume:(int)value;
/*!
 * <div>
 * Gets the volume in dBm0 with the sign removed. Power levels range from 0 to -63 dBm0,
 * so the value of this field ranges from 0-63, with higher values indicating lower volume.
 * </div>
 */
- (int) volume;
/*!
 * <div>
 * Writes to a data buffer.
 * </div>
 * @param dataBuffer The data buffer.
 */
- (void) writeToWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer;

@end

/*!
 * <div>
 * A DTMF (telephone-event) tone.
 * </div>
 */
@interface FMIceLinkDtmfTone : NSObject

/*!
 * <div>
 * Gets A tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) a;
/*!
 * <div>
 * Gets the A value ("A").
 * </div>
 */
+ (NSString*) aValue;
/*!
 * <div>
 * Gets the B tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) b;
/*!
 * <div>
 * Gets the B value ("B").
 * </div>
 */
+ (NSString*) bValue;
/*!
 * <div>
 * Gets the C tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) c;
/*!
 * <div>
 * Clones this instance.
 * </div>
 */
- (FMIceLinkDtmfTone*) clone;
/*!
 * <div>
 * Clones this instance.
 * </div>
 * @param duration The new duration.
 */
- (FMIceLinkDtmfTone*) cloneWithDuration:(int)duration;
/*!
 * <div>
 * Gets the C value ("C").
 * </div>
 */
+ (NSString*) cValue;
/*!
 * <div>
 * Gets the D tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) d;
/*!
 * <div>
 * Serializes to a string.
 * </div>
 * @return
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the duration in milliseconds.
 * </div>
 */
- (int) duration;
/*!
 * <div>
 * Gets the D value ("D").
 * </div>
 */
+ (NSString*) dValue;
/*!
 * <div>
 * Gets the eight tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) eight;
/*!
 * <div>
 * Gets the eight value ("8").
 * </div>
 */
+ (NSString*) eightValue;
/*!
 * <div>
 * Gets the empty tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) empty;
/*!
 * <div>
 * Gets the empty value ("").
 * </div>
 */
+ (NSString*) emptyValue;
/*!
 * <div>
 * Gets the five tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) five;
/*!
 * <div>
 * Gets the five value ("5").
 * </div>
 */
+ (NSString*) fiveValue;
/*!
 * <div>
 * Gets the four tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) four;
/*!
 * <div>
 * Gets the four value ("4").
 * </div>
 */
+ (NSString*) fourValue;
/*!
 * <div>
 * Deserializes an array from JSON.
 * </div>
 * @param tonesJson The JSON.
 * @return
 */
+ (NSMutableArray*) fromJsonArrayWithTonesJson:(NSString*)tonesJson;
/*!
 * <div>
 * Deserializes from JSON.
 * </div>
 * @param toneJson The JSON.
 * @return
 */
+ (FMIceLinkDtmfTone*) fromJsonWithToneJson:(NSString*)toneJson;
/*!
 * <div>
 * Deserializes from a packet.
 * </div>
 * @param packet The packet.
 * @param clockRate The clock rate.
 * @return
 */
+ (FMIceLinkDtmfTone*) fromPacket:(FMIceLinkDtmfPacket*)packet clockRate:(int)clockRate;
/*!
 * <div>
 * Converts a DTMF tone string into an array of tones.
 * Each tone will have a duration of 100ms and an inter-tone gap of 100ms.
 * </div>
 * @param toneString The tone string.
 * @return
 */
+ (NSMutableArray*) fromToneString:(NSString*)toneString;
/*!
 * <div>
 * Converts a DTMF tone string into an array of tones.
 * Each tone will have an inter-tone gap of 100ms.
 * </div>
 * @param toneString The tone string.
 * @param duration The duration, in milliseconds (minimum of 40, maximum of 2,000).
 * @return
 */
+ (NSMutableArray*) fromToneString:(NSString*)toneString duration:(int)duration;
/*!
 * <div>
 * Converts a DTMF tone string into an array of tones.
 * </div>
 * @param toneString The tone string.
 * @param duration The duration, in milliseconds (minimum of 40, maximum of 2,000).
 * @param interToneGap The time between tones, in milliseconds (minimum of 40).
 * @return
 */
+ (NSMutableArray*) fromToneString:(NSString*)toneString duration:(int)duration interToneGap:(int)interToneGap;
/*!
 * <div>
 * Gets the hash tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) hash;
/*!
 * <div>
 * Gets the hash value ("#").
 * </div>
 */
+ (NSString*) hashValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfTone class.
 * </div>
 * @param value The value.
 */
- (instancetype) initWithValue:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfTone class.
 * </div>
 * @param value The value.
 * @param duration The duration.
 */
- (instancetype) initWithValue:(NSString*)value duration:(int)duration;
/*!
 * <div>
 * Gets the nine tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) nine;
/*!
 * <div>
 * Gets the nine value ("9").
 * </div>
 */
+ (NSString*) nineValue;
/*!
 * <div>
 * Gets the one tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) one;
/*!
 * <div>
 * Gets the one value ("1").
 * </div>
 */
+ (NSString*) oneValue;
/*!
 * <div>
 * Gets the pause tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) pause;
/*!
 * <div>
 * Gets the pause duration in milliseconds (2000).
 * </div>
 */
+ (int) pauseDuration;
/*!
 * <div>
 * Gets the pause value (",").
 * </div>
 */
+ (NSString*) pauseValue;
/*!
 * <div>
 * Gets the seven tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) seven;
/*!
 * <div>
 * Gets the seven value ("7").
 * </div>
 */
+ (NSString*) sevenValue;
/*!
 * <div>
 * Gets the six tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) six;
/*!
 * <div>
 * Gets the six value ("6").
 * </div>
 */
+ (NSString*) sixValue;
/*!
 * <div>
 * Gets the star tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) star;
/*!
 * <div>
 * Gets the star value ("*").
 * </div>
 */
+ (NSString*) starValue;
/*!
 * <div>
 * Gets the three tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) three;
/*!
 * <div>
 * Gets the three value ("3").
 * </div>
 */
+ (NSString*) threeValue;
/*!
 * <div>
 * Serializes to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an array to JSON.
 * </div>
 * @param tones The array.
 * @return
 */
+ (NSString*) toJsonArrayWithTones:(NSMutableArray*)tones;
/*!
 * <div>
 * Serializes to JSON.
 * </div>
 * @return
 */
+ (NSString*) toJsonWithTone:(FMIceLinkDtmfTone*)tone;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfTone class.
 * </div>
 * @param value The value.
 */
+ (FMIceLinkDtmfTone*) tone:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkDtmfTone class.
 * </div>
 * @param value The value.
 * @param duration The duration.
 */
+ (FMIceLinkDtmfTone*) tone:(NSString*)value duration:(int)duration;
/*!
 * <div>
 * Serializes to a packet.
 * </div>
 * @param clockRate The clock rate.
 * @return
 */
- (FMIceLinkDtmfPacket*) toPacketWithClockRate:(int)clockRate;
/*!
 * <div>
 * Converts an array of DTMF tones into a tone string.
 * This discards duration and inter-tone gap data.
 * </div>
 * @param tones The tones.
 * @return
 */
+ (NSString*) toToneStringWithTones:(NSMutableArray*)tones;
/*!
 * <div>
 * Gets the two tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) two;
/*!
 * <div>
 * Gets the two value ("2").
 * </div>
 */
+ (NSString*) twoValue;
/*!
 * <div>
 * Gets the value.
 * </div>
 */
- (NSString*) value;
/*!
 * <div>
 * Gets the zero tone.
 * </div>
 */
+ (FMIceLinkDtmfTone*) zero;
/*!
 * <div>
 * Gets the zero value ("0").
 * </div>
 */
+ (NSString*) zeroValue;

@end

@interface FMIceLinkEncryptionModeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkEncryptionMode)value;

@end

@interface FMIceLinkEncryptionPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkEncryptionPolicy)value;

@end

/*!
 * <div>
 * A fake audio source.
 * </div>
 */
@interface FMIceLinkFakeAudioSource : FMIceLinkAudioSource

/*!
 * <div>
 * Gets the output amplitude.
 * </div>
 */
- (int) amplitude;
/*!
 * <div>
 * Starts this instance.
 * </div>
 */
- (FMIceLinkFuture*) doStart;
/*!
 * <div>
 * Stops this instance.
 * </div>
 */
- (FMIceLinkFuture*) doStop;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFakeAudioSource class.
 * </div>
 * @param config The output configuration.
 */
+ (FMIceLinkFakeAudioSource*) fakeAudioSourceWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFakeAudioSource class.
 * </div>
 * @param config The output configuration.
 * @param frequency The output frequency.
 */
+ (FMIceLinkFakeAudioSource*) fakeAudioSourceWithConfig:(FMIceLinkAudioConfig*)config frequency:(float)frequency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFakeAudioSource class.
 * </div>
 * @param config The output configuration.
 * @param frequency The output frequency.
 * @param amplitude The output amplitude
 */
+ (FMIceLinkFakeAudioSource*) fakeAudioSourceWithConfig:(FMIceLinkAudioConfig*)config frequency:(float)frequency amplitude:(int)amplitude;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFakeAudioSource class.
 * </div>
 * @param config The output configuration.
 * @param frequency The output frequency.
 * @param amplitude The output amplitude.
 * @param latency The initial latency.
 */
+ (FMIceLinkFakeAudioSource*) fakeAudioSourceWithConfig:(FMIceLinkAudioConfig*)config frequency:(float)frequency amplitude:(int)amplitude latency:(int)latency;
/*!
 * <div>
 * Gets the output frequency.
 * </div>
 */
- (float) frequency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFakeAudioSource class.
 * </div>
 * @param config The output configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFakeAudioSource class.
 * </div>
 * @param config The output configuration.
 * @param frequency The output frequency.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config frequency:(float)frequency;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFakeAudioSource class.
 * </div>
 * @param config The output configuration.
 * @param frequency The output frequency.
 * @param amplitude The output amplitude
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config frequency:(float)frequency amplitude:(int)amplitude;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFakeAudioSource class.
 * </div>
 * @param config The output configuration.
 * @param frequency The output frequency.
 * @param amplitude The output amplitude.
 * @param latency The initial latency.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config frequency:(float)frequency amplitude:(int)amplitude latency:(int)latency;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the initial latency.
 * </div>
 */
- (int) latency;

@end

/*!
 * <div>
 * A video source.
 * </div>
 */
@interface FMIceLinkVideoSource : FMIceLinkMediaSource

/*!
 * <div>
 * Gets the average frame rate.
 * </div>
 */
- (int) averageFrameRate;
/*!
 * <div>
 * Creates an input collection.
 * </div>
 * @param output The source.
 */
- (FMIceLinkIVideoInputCollection*) createInputCollectionWithOutput:(NSObject<FMIceLinkIVideoOutput>*)output;
/*!
 * <div>
 * Gets the frame count.
 * </div>
 */
- (long long) frameCount;
/*!
 * <div>
 * Gets the distance between two frame rates.
 * </div>
 * @param frameRate1 The first frame rate.
 * @param frameRate2 The second frame rate.
 * @return The positive distance between the two frame rates.
 */
- (int) getFrameRateDistanceWithFrameRate1:(int)frameRate1 frameRate2:(int)frameRate2;
/*!
 * <div>
 * Gets the distance between two sizes.
 * </div>
 * @param width1 The first width.
 * @param height1 The first height.
 * @param width2 The second width.
 * @param height2 The second height.
 * @return The positive linear distance between the two sizes.
 */
- (int) getSizeDistanceWithWidth1:(int)width1 height1:(int)height1 width2:(int)width2 height2:(int)height2;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoSource class.
 * </div>
 * @param outputFormat The output format.
 */
- (instancetype) initWithOutputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Raises a frame.
 * </div>
 * @param frame The frame.
 */
- (void) raiseFrame:(FMIceLinkVideoFrame*)frame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoSource class.
 * </div>
 * @param outputFormat The output format.
 */
+ (FMIceLinkVideoSource*) videoSourceWithOutputFormat:(FMIceLinkVideoFormat*)outputFormat;

@end

/*!
 * <div>
 * A fake video source.
 * </div>
 */
@interface FMIceLinkFakeVideoSource : FMIceLinkVideoSource

/*!
 * <div>
 * Gets the output configuration.
 * </div>
 */
- (FMIceLinkVideoConfig*) config;
/*!
 * <div>
 * Starts this instance.
 * </div>
 */
- (FMIceLinkFuture*) doStart;
/*!
 * <div>
 * Stops this instance.
 * </div>
 */
- (FMIceLinkFuture*) doStop;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFakeAudioSource class.
 * </div>
 * @param config The output configuration.
 */
+ (FMIceLinkFakeVideoSource*) fakeVideoSourceWithConfig:(FMIceLinkVideoConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFakeAudioSource class.
 * </div>
 * @param config The output configuration.
 * @param format The output format.
 */
+ (FMIceLinkFakeVideoSource*) fakeVideoSourceWithConfig:(FMIceLinkVideoConfig*)config format:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFakeAudioSource class.
 * </div>
 * @param config The output configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkVideoConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFakeAudioSource class.
 * </div>
 * @param config The output configuration.
 * @param format The output format.
 */
- (instancetype) initWithConfig:(FMIceLinkVideoConfig*)config format:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Sets the output configuration.
 * </div>
 */
- (void) setConfig:(FMIceLinkVideoConfig*)value;

@end

/*!
 * <div>
 * Control frame feedback.
 * </div>
 */
@interface FMIceLinkFeedback : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedback class.
 * </div>
 * @param type The type.
 * @param parameter The parameter.
 */
+ (FMIceLinkFeedback*) feedbackWithType:(NSString*)type parameter:(NSString*)parameter;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFeedback class.
 * </div>
 * @param type The type.
 * @param parameter The parameter.
 */
- (instancetype) initWithType:(NSString*)type parameter:(NSString*)parameter;
/*!
 * <div>
 * Gets the parameter.
 * </div>
 */
- (NSString*) parameter;
/*!
 * <div>
 * Gets the type.
 * </div>
 */
- (NSString*) type;

@end

/*!
 * <div>
 * An RTCP full intra request (FIR) packet entry.
 * </div>
 */
@interface FMIceLinkFirEntry : NSObject

/*!
 * <div>
 * Gets the backing data buffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) dataBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirEntry class.
 * </div>
 * @param dataBuffer The data buffer.
 */
+ (FMIceLinkFirEntry*) firEntryWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirEntry class.
 * </div>
 * @param sequenceNumber The sequence number.
 */
+ (FMIceLinkFirEntry*) firEntryWithSequenceNumber:(int)sequenceNumber;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirEntry class.
 * </div>
 * @param sequenceNumber The sequence number.
 * @param synchronizationSource The synchronization source.
 */
+ (FMIceLinkFirEntry*) firEntryWithSequenceNumber:(int)sequenceNumber synchronizationSource:(long long)synchronizationSource;
/*!
 * <div>
 * Gets the fixed length of an FIR entry.
 * </div>
 */
+ (int) fixedPayloadLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirEntry class.
 * </div>
 * @param dataBuffer The data buffer.
 */
- (instancetype) initWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirEntry class.
 * </div>
 * @param sequenceNumber The sequence number.
 */
- (instancetype) initWithSequenceNumber:(int)sequenceNumber;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirEntry class.
 * </div>
 * @param sequenceNumber The sequence number.
 * @param synchronizationSource The synchronization source.
 */
- (instancetype) initWithSequenceNumber:(int)sequenceNumber synchronizationSource:(long long)synchronizationSource;
/*!
 * <div>
 * Gets the sequence number.
 * </div>
 */
- (int) sequenceNumber;
/*!
 * <div>
 * Sets the backing data buffer.
 * </div>
 */
- (void) setDataBuffer:(FMIceLinkDataBuffer*)value;
/*!
 * <div>
 * Sets the sequence number.
 * </div>
 */
- (void) setSequenceNumber:(int)value;
/*!
 * <div>
 * Sets the synchronization source.
 * </div>
 */
- (void) setSynchronizationSource:(long long)value;
/*!
 * <div>
 * Gets the synchronization source.
 * </div>
 */
- (long long) synchronizationSource;

@end

/*!
 * <div>
 * An RTCP full intra request (FIR) packet.
 * </div>
 */
@interface FMIceLinkFirControlFrame : FMIceLinkPayloadSpecificControlFrame

/*!
 * <div>
 * Gets the entries.
 * </div>
 */
- (NSMutableArray*) entries;
/*!
 * <div>
 * Gets the entry.
 * </div>
 */
- (FMIceLinkFirEntry*) entry;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkFirControlFrame*) firControlFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirControlFrame class.
 * </div>
 * @param entries The entries.
 */
+ (FMIceLinkFirControlFrame*) firControlFrameWithEntries:(NSMutableArray*)entries;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirControlFrame class.
 * </div>
 * @param entry The entry.
 */
+ (FMIceLinkFirControlFrame*) firControlFrameWithEntry:(FMIceLinkFirEntry*)entry;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirControlFrame class.
 * </div>
 * @param sequenceNumber The sequence number.
 */
+ (FMIceLinkFirControlFrame*) firControlFrameWithSequenceNumber:(int)sequenceNumber;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirControlFrame class.
 * </div>
 * @param entries The entries.
 */
- (instancetype) initWithEntries:(NSMutableArray*)entries;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirControlFrame class.
 * </div>
 * @param entry The entry.
 */
- (instancetype) initWithEntry:(FMIceLinkFirEntry*)entry;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkFirControlFrame class.
 * </div>
 * @param sequenceNumber The sequence number.
 */
- (instancetype) initWithSequenceNumber:(int)sequenceNumber;
/*!
 * <div>
 * Gets the type of the registered feedback message.
 * </div>
 */
+ (int) registeredFeedbackMessageType;
/*!
 * <div>
 * Sets the entries.
 * </div>
 */
- (void) setEntries:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the entry.
 * </div>
 */
- (void) setEntry:(FMIceLinkFirEntry*)value;

@end

/*!
 * <div>
 * A G.711 format.
 * </div>
 */
@interface FMIceLinkG711Format : FMIceLinkAudioFormat

/*!
 * <div>
 * Gets the default clock rate (1).
 * </div>
 */
+ (int) defaultChannelCount;
/*!
 * <div>
 * Gets the default clock rate (8000).
 * </div>
 */
+ (int) defaultClockRate;
/*!
 * <div>
 * Gets the default configuration (8000/1).
 * </div>
 */
+ (FMIceLinkAudioConfig*) defaultConfig;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkG711Format class.
 * </div>
 * @param name The name.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (FMIceLinkG711Format*) formatWithName:(NSString*)name clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkG711Format class.
 * </div>
 * @param name The name.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate channelCount:(int)channelCount;

@end

/*!
 * <div>
 * A Generic NACK feedback message.
 * </div>
 */
@interface FMIceLinkGenericNack : NSObject

/*!
 * <div>
 * Gets the bitmask of lost packets.
 * </div>
 */
- (int) bitmaskOfLostPackets;
/*!
 * <div>
 * Gets the data buffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) dataBuffer;
/*!
 * <div>
 * Gets the length of the registered fixed payload.
 * </div>
 */
+ (int) fixedPayloadLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkGenericNack class.
 * </div>
 */
+ (FMIceLinkGenericNack*) genericNack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkGenericNack class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkGenericNack*) genericNackWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Gets whether the packet with ID FMIceLinkGenericNack#packetId + value was lost.
 * </div>
 * @param value The value.
 * @return Whether the packet was lost.
 */
- (bool) getLostPacketIdPlus:(int)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkGenericNack class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkGenericNack class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Gets the length of the lost packet identifier plus.
 * </div>
 */
- (int) lostPacketIdPlusLength;
/*!
 * <div>
 * Gets the RTP sequence number of the lost packet.
 * </div>
 */
- (int) packetId;
/*!
 * <div>
 * Sets the bitmask of lost packets.
 * </div>
 */
- (void) setBitmaskOfLostPackets:(int)value;
/*!
 * <div>
 * Sets whether the packet with ID FMIceLinkGenericNack#packetId + value was lost.
 * </div>
 * @param value The value.
 * @param lost Whether the packet was lost.
 */
- (void) setLostPacketIdPlus:(int)value lost:(bool)lost;
/*!
 * <div>
 * Sets the RTP sequence number of the lost packet.
 * </div>
 */
- (void) setPacketId:(int)value;

@end

/*!
 * <div>
 * An RTCP Feedback RTP control frame.
 * </div>
 */
@interface FMIceLinkRtpControlFrame : FMIceLinkFeedbackControlFrame

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpControlFrame class.
 * </div>
 * @param feedbackMessageType The feedback message type.
 */
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpControlFrame class.
 * </div>
 * @param feedbackMessageType The feedback message type.
 * @param buffer The backing data buffer.
 */
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType buffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param payloadType Type of the payload.
 * @param senderSynchronizationSource The sender synchronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 */
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param payloadType Type of the payload.
 * @param senderSynchronizationSource The sender synchronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 * @param feedbackControlInformation The feedback control information.
 */
- (instancetype) initWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMIceLinkDataBuffer*)feedbackControlInformation;
/*!
 * <div>
 * Gets the RTP payload type.
 * </div>
 */
+ (int) registeredPayloadType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpControlFrame class.
 * </div>
 * @param feedbackMessageType The feedback message type.
 */
+ (FMIceLinkRtpControlFrame*) rtpControlFrameWithFeedbackMessageType:(int)feedbackMessageType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpControlFrame class.
 * </div>
 * @param feedbackMessageType The feedback message type.
 * @param buffer The backing data buffer.
 */
+ (FMIceLinkRtpControlFrame*) rtpControlFrameWithFeedbackMessageType:(int)feedbackMessageType buffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param payloadType Type of the payload.
 * @param senderSynchronizationSource The sender synchronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 */
+ (FMIceLinkRtpControlFrame*) rtpControlFrameWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpControlFrame class.
 * </div>
 * @param feedbackMessageType Type of the feedback message.
 * @param payloadType Type of the payload.
 * @param senderSynchronizationSource The sender synchronization source.
 * @param mediaSynchronizationSource The media synchronization source.
 * @param feedbackControlInformation The feedback control information.
 */
+ (FMIceLinkRtpControlFrame*) rtpControlFrameWithFeedbackMessageType:(int)feedbackMessageType payloadType:(int)payloadType senderSynchronizationSource:(long long)senderSynchronizationSource mediaSynchronizationSource:(long long)mediaSynchronizationSource feedbackControlInformation:(FMIceLinkDataBuffer*)feedbackControlInformation;

@end

/*!
 * <div>
 * An RTCP Feedback RTP-Generic NACK packet.
 * </div>
 */
@interface FMIceLinkGenericNackControlFrame : FMIceLinkRtpControlFrame

/*!
 * <div>
 * Gets the generic nack.
 * </div>
 */
- (FMIceLinkGenericNack*) genericNack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpControlFrame class.
 * </div>
 */
+ (FMIceLinkGenericNackControlFrame*) genericNackControlFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkGenericNackControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkGenericNackControlFrame*) genericNackControlFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkGenericNackControlFrame class.
 * </div>
 * @param nack The nack.
 */
+ (FMIceLinkGenericNackControlFrame*) genericNackControlFrameWithNack:(FMIceLinkGenericNack*)nack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkGenericNackControlFrame class.
 * </div>
 * @param nacks The nacks.
 */
+ (FMIceLinkGenericNackControlFrame*) genericNackControlFrameWithNacks:(NSMutableArray*)nacks;
/*!
 * <div>
 * Gets the set of generic NACKs.
 * </div>
 */
- (NSMutableArray*) genericNacks;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpControlFrame class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkGenericNackControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkGenericNackControlFrame class.
 * </div>
 * @param nack The nack.
 */
- (instancetype) initWithNack:(FMIceLinkGenericNack*)nack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkGenericNackControlFrame class.
 * </div>
 * @param nacks The nacks.
 */
- (instancetype) initWithNacks:(NSMutableArray*)nacks;
/*!
 * <div>
 * Gets the type of the registered feedback message.
 * </div>
 */
+ (int) registeredFeedbackMessageType;

@end

/*!
 * <div>
 * An H.264 depacketizer.
 * </div>
 */
@interface FMIceLinkH264Depacketizer : FMIceLinkVideoDepacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Depacketizer class.
 * </div>
 */
+ (FMIceLinkH264Depacketizer*) depacketizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Depacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkH264Depacketizer*) depacketizerWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Creates a fragment from a data buffer.
 * </div>
 * @param header The rtp header for this packet.
 * @param dataBuffer The data buffer.
 */
- (FMIceLinkH264Fragment*) doCreateFragmentWithHeader:(FMIceLinkRtpPacketHeader*)header dataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes an SDP media description.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 */
- (FMIceLinkError*) doProcessSdpMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Depacketizer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Depacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Checks if the databuffer contains a keyframe.
 * </div>
 * @param inputBuffer VideoBuffer containing video data.
 */
- (bool) isKeyFrameWithInputBuffer:(FMIceLinkDataBuffer*)inputBuffer;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the packetization mode.
 * </div>
 */
- (int) packetizationMode;

@end

/*!
 * <div>
 * A video format.
 * </div>
 */
@interface FMIceLinkVideoFormat : FMIceLinkMediaFormat

/*!
 * <div>
 * Gets an ABGR video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) abgr;
/*!
 * <div>
 * Gets the name of the ABGR video format ("ABGR").
 * Indicates that each pixel occupies 32 bits (8 bits for alpha, then 8 bits for blue, then8 bits for green, then 8 bits for red).
 * </div>
 */
+ (NSString*) abgrName;
/*!
 * <div>
 * Gets an ARGB video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) argb;
/*!
 * <div>
 * Gets the name of the ARGB video format ("ARGB").
 * Indicates that each pixel occupies 32 bits (8 bits for alpha, then 8 bits for red, then 8 bits for green, then 8 bits for blue).
 * </div>
 */
+ (NSString*) argbName;
/*!
 * <div>
 * Gets a BGR video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) bgr;
/*!
 * <div>
 * Gets an BGRA video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) bgra;
/*!
 * <div>
 * Gets the name of the BGRA video format ("BGRA").
 * Indicates that each pixel occupies 32 bits (8 bits for blue, then8 bits for green, then 8 bits for red, then 8 bits for alpha).
 * </div>
 */
+ (NSString*) bgraName;
/*!
 * <div>
 * Gets the name of the BGR video format ("BGR").
 * Indicates that each pixel occupies 24 bits (8 bits for blue, then8 bits for green, then 8 bits for red).
 * </div>
 */
+ (NSString*) bgrName;
/*!
 * <div>
 * Clones this instance.
 * </div>
 */
- (FMIceLinkVideoFormat*) clone;
/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (FMIceLinkVideoFormat*) createInstance;
/*!
 * <div>
 * Converts a format name to its FourCC value.
 * </div>
 * @param formatName The format name.
 * @return The FourCC value, or 0 if the format name is not recognized.
 */
+ (int) formatNameToFourCCWithFormatName:(NSString*)formatName;
/*!
 * <div>
 * Gets the FourCC value for this format.
 * </div>
 */
- (int) fourCC;
/*!
 * <div>
 * Converts a FourCC value to its format name.
 * </div>
 * @param fourcc The FourCC value.
 * @return The format name, or an empty string if the FourCC value is not recognized.
 */
- (NSString*) fourCCToFormatNameWithFourcc:(int)fourcc;
/*!
 * <div>
 * Deserializes an instance from JSON.
 * </div>
 * @param videoFormatJson The video format JSON.
 * @return
 */
+ (FMIceLinkVideoFormat*) fromJsonWithVideoFormatJson:(NSString*)videoFormatJson;
/*!
 * <div>
 * Gets an H.264 video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) h264;
/*!
 * <div>
 * Gets the name of the H.264 video format ("H264").
 * </div>
 */
+ (NSString*) h264Name;
/*!
 * <div>
 * Gets an I420 video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) i420;
/*!
 * <div>
 * Gets the name of the I420 video format ("I420").
 * Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
 * Y plane is followed by U plane and then V plane.
 * </div>
 */
+ (NSString*) i420Name;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoFormat class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoFormat class.
 * </div>
 * @param name The name.
 */
- (instancetype) initWithName:(NSString*)name;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoFormat class.
 * </div>
 * @param name The name.
 * @param clockRate The clock rate.
 */
- (instancetype) initWithName:(NSString*)name clockRate:(int)clockRate;
/*!
 * <div>
 * Gets a value indicating whether this format is ABGR.
 * </div>
 */
- (bool) isAbgr;
/*!
 * <div>
 * Gets a value indicating whether this format is ARGB.
 * </div>
 */
- (bool) isArgb;
/*!
 * <div>
 * Gets a value indicating whether this format is BGR.
 * </div>
 */
- (bool) isBgr;
/*!
 * <div>
 * Gets a value indicating whether this format is BGRA.
 * </div>
 */
- (bool) isBgra;
/*!
 * <div>
 * Gets a value indicating whether this format is H.264.
 * </div>
 */
- (bool) isH264;
/*!
 * <div>
 * Gets a value indicating whether this format is I420.
 * </div>
 */
- (bool) isI420;
/*!
 * <div>
 * Gets a value indicating whether this format is NV12.
 * </div>
 */
- (bool) isNv12;
/*!
 * <div>
 * Gets a value indicating whether this format is NV21.
 * </div>
 */
- (bool) isNv21;
/*!
 * <div>
 * Gets a value indicating whether this format is RGB, BGR,
 * I420, YV12, NV12, NV21, RGBA, BGRA, ARGB, or ABGR.
 * </div>
 */
- (bool) isRaw;
/*!
 * <div>
 * Gets a value indicating whether this format is RGB.
 * </div>
 */
- (bool) isRgb;
/*!
 * <div>
 * Gets a value indicating whether this format is RGBA.
 * </div>
 */
- (bool) isRgba;
/*!
 * <div>
 * Gets a value indicating whether this format is
 * RGBA, BGRA, ARGB, or ABGR.
 * </div>
 */
- (bool) isRgbaType;
/*!
 * <div>
 * Gets a value indicating whether this format is RGB or BGR.
 * </div>
 */
- (bool) isRgbType;
/*!
 * <div>
 * Gets a value indicating whether this format is VP8.
 * </div>
 */
- (bool) isVp8;
/*!
 * <div>
 * Gets a value indicating whether this format is VP9.
 * </div>
 */
- (bool) isVp9;
/*!
 * <div>
 * Gets a value indicating whether this format is
 * I420, YV12, NV12, or NV21.
 * </div>
 */
- (bool) isYuvType;
/*!
 * <div>
 * Gets a value indicating whether this format is YV12.
 * </div>
 */
- (bool) isYv12;
/*!
 * <div>
 * Gets an NV12 video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) nv12;
/*!
 * <div>
 * Gets the name of the NV12 video format ("NV12").
 * Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
 * Y plane is followed by interleaved U/V plane.
 * </div>
 */
+ (NSString*) nv12Name;
/*!
 * <div>
 * Gets an NV21 video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) nv21;
/*!
 * <div>
 * Gets the name of the NV21 video format ("NV21").
 * Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
 * Y plane is followed by interleaved V/U plane.
 * </div>
 */
+ (NSString*) nv21Name;
/*!
 * <div>
 * Gets the parameters.
 * </div>
 */
- (NSString*) parameters;
/*!
 * <div>
 * Gets an RGB video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) rgb;
/*!
 * <div>
 * Gets an RGBA video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) rgba;
/*!
 * <div>
 * Gets the name of the RGBA video format ("RGBA").
 * Indicates that each pixel occupies 32 bits (8 bits for red, then 8 bits for green, then 8 bits for blue, then 8 bits for alpha).
 * </div>
 */
+ (NSString*) rgbaName;
/*!
 * <div>
 * Gets the name of the RGB video format ("RGB").
 * Indicates that each pixel occupies 24 bits (8 bits for red, then 8 bits for green, then 8 bits for blue).
 * </div>
 */
+ (NSString*) rgbName;
/*!
 * <div>
 * Sets the FourCC value for this format.
 * </div>
 */
- (void) setFourCC:(int)value;
/*!
 * <div>
 * Converts 4 FourCC characters to an int.
 * </div>
 */
+ (int) toFourCCWithA:(unichar)a b:(unichar)b c:(unichar)c d:(unichar)d;
/*!
 * <div>
 * Converts a FourCC string to a int.
 * </div>
 * @param fourcc The fourcc.
 */
+ (int) toFourCCWithFourcc:(NSString*)fourcc;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an instance to JSON.
 * </div>
 * @param videoFormat The video format.
 * @return
 */
+ (NSString*) toJsonWithVideoFormat:(FMIceLinkVideoFormat*)videoFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoFormat class.
 * </div>
 */
+ (FMIceLinkVideoFormat*) videoFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoFormat class.
 * </div>
 * @param name The name.
 */
+ (FMIceLinkVideoFormat*) videoFormatWithName:(NSString*)name;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoFormat class.
 * </div>
 * @param name The name.
 * @param clockRate The clock rate.
 */
+ (FMIceLinkVideoFormat*) videoFormatWithName:(NSString*)name clockRate:(int)clockRate;
/*!
 * <div>
 * Gets a VP8 video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) vp8;
/*!
 * <div>
 * Gets the name of the VP8 video format ("VP8").
 * </div>
 */
+ (NSString*) vp8Name;
/*!
 * <div>
 * Gets a VP9 video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) vp9;
/*!
 * <div>
 * Gets the name of the VP9 video format ("VP9").
 * </div>
 */
+ (NSString*) vp9Name;
/*!
 * <div>
 * Gets a YV12 video format.
 * </div>
 */
+ (FMIceLinkVideoFormat*) yv12;
/*!
 * <div>
 * Gets the name of the YV12 video format ("YV12").
 * Indicates that each pixel occupies 12 bits (8 bits for Y, 2 bits for U, and 2 bits for V).
 * Y plane is followed by V plane and then U plane.
 * </div>
 */
+ (NSString*) yv12Name;

@end

/*!
 * <div>
 * An H.264 format.
 * </div>
 */
@interface FMIceLinkH264Format : FMIceLinkVideoFormat

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Format class.
 * </div>
 */
+ (FMIceLinkH264Format*) format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Format class.
 * </div>
 * @param clockRate The clock rate.
 */
+ (FMIceLinkH264Format*) formatWithClockRate:(int)clockRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Format class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Format class.
 * </div>
 * @param clockRate The clock rate.
 */
- (instancetype) initWithClockRate:(int)clockRate;

@end

/*!
 * <div>
 * A fragment of a video frame.
 * </div>
 */
@interface FMIceLinkVideoFragment : NSObject

/*!
 * <div>
 * Gets the data.
 * </div>
 */
- (FMIceLinkDataBuffer*) buffer;
/*!
 * <div>
 * Destroys this fragment.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Gets whether this is the first packet.
 * </div>
 */
- (bool) first;
- (instancetype) init;
/*!
 * <div>
 * Gets whether this is the last packet.
 * </div>
 */
- (bool) last;
/*!
 * <div>
 * Sets the data.
 * </div>
 */
- (void) setBuffer:(FMIceLinkDataBuffer*)value;
/*!
 * <div>
 * Sets whether this is the first packet.
 * </div>
 */
- (void) setFirst:(bool)value;
/*!
 * <div>
 * Sets whether this is the last packet.
 * </div>
 */
- (void) setLast:(bool)value;
+ (FMIceLinkVideoFragment*) videoFragment;

@end

/*!
 * <div>
 * An H.264 packet fragment.
 * </div>
 */
@interface FMIceLinkH264Fragment : FMIceLinkVideoFragment

/*!
 * <div>
 * Destroys this fragment.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Fragment class.
 * </div>
 * @param header The rtp packet header.
 * @param dataBuffer The data buffer.
 */
+ (FMIceLinkH264Fragment*) fragmentWithHeader:(FMIceLinkRtpPacketHeader*)header dataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Fragment class.
 * </div>
 * @param header The rtp packet header.
 * @param dataBuffer The data buffer.
 */
- (instancetype) initWithHeader:(FMIceLinkRtpPacketHeader*)header dataBuffer:(FMIceLinkDataBuffer*)dataBuffer;

@end

/*!
 * <div>
 * An H264 Network Abstraction Layer Unit.
 * </div>
 */
@interface FMIceLinkH264Nalu : NSObject

/*!
 * <div>
 * Gets the bottom_field_flag.
 * </div>
 */
- (int) bottomFieldFlag;
/*!
 * <div>
 * Gets the backing DataBuffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) buffer;
/*!
 * <div>
 * Gets the pic_order_cnt_lsb
 * </div>
 */
- (NSMutableArray*) deltaPicOrderCnt;
/*!
 * <div>
 * Gets the forbidden Zero Bit. The H.264 specification declares a
 * value of 1 as a syntax violation.
 * </div>
 */
- (bool) fBit;
/*!
 * <div>
 * Gets the forbidden zero bit mask.
 * </div>
 */
+ (int) fBitMask;
/*!
 * <div>
 * Gets the field_pic_flag.
 * </div>
 */
- (int) fieldPicFlag;
/*!
 * <div>
 * Scans for the index of the first NAL Unit after start.
 * </div>
 * @param encodedData The stream to search.
 */
+ (int) findNaluWithEncodedData:(FMIceLinkDataBuffer*)encodedData;
/*!
 * <div>
 * Scans for the index of the first NAL Unit after start.
 * </div>
 * @param encodedData The stream to search.
 * @param start The index to start searching from.
 */
+ (int) findNextNaluWithEncodedData:(FMIceLinkDataBuffer*)encodedData start:(int)start;
/*!
 * <div>
 * Gets the first_mb_in_slice specifies the address of the first macroblock in the slice. When
 * arbitrary slice order is not allowed as specified in Annex A, the value of first_mb_in_slice
 * is constrained as follows:
 * – If separate_colour_plane_flag is equal to 0, the value of first_mb_in_slice shall not
 * be less than the value of first_mb_in_slice for any other slice of the current picture
 * that precedes the current slice in decoding order.
 * – Otherwise (separate_colour_plane_flag is equal to 1), the value of first_mb_in_slice
 * shall not be less than the value of first_mb_in_slice for any other slice of the current
 * picture that precedes the current slice in decoding order and has the same value of
 * colour_plane_id.
 * </div>
 */
- (int) firstMbInSlice;
/*!
 * <div>
 * Gets the frame_num: The Frame Number is used as an identifier for pictures and shall be represented
 * by log2_max_frame_num_minus4 + 4 bits in the bitstream.
 * </div>
 */
- (int) frameNum;
/*!
 * <div>
 * Gets the NAL Unit as a byte array that can be passed
 * to an encoder (includes Start Code).
 * </div>
 */
- (FMIceLinkDataBuffer*) getBytes;
/*!
 * <div>
 * Returns the first NAL unit after nalStart.
 * </div>
 * @param encodedData The byte array to search.
 */
+ (FMIceLinkH264Nalu*) getNaluWithEncodedData:(FMIceLinkDataBuffer*)encodedData;
/*!
 * <div>
 * Returns the first NAL unit after nalStart.
 * </div>
 * @param encodedData The byte array to search.
 * @param nalStart The start index of the NAL.
 * ///
 * @param nextStartCodeLength OUT The length of the next the NAL startcode.
 */
+ (FMIceLinkH264Nalu*) getNaluWithEncodedData:(FMIceLinkDataBuffer*)encodedData nalStart:(int)nalStart nextStartCodeLength:(int*)nextStartCodeLength;
/*!
 * <div>
 * Gets the NAL header.
 * </div>
 */
- (int) header;
/*!
 * <div>
 * Gets the idr_pic_flag.
 * </div>
 */
- (int) idrPicFlag;
/*!
 * <div>
 * Gets the idr_pic_id: The values of idr_pic_id in all the slices
 * of an IDR picture shall remain unchanged. When two consecutive access units in
 * decoding order are both IDR access units, the value of idr_pic_id in the slices of
 * the first such IDR access unit shall differ from the idr_pic_id in the second such
 * IDR access unit. The value of idr_pic_id shall be in the range of 0 to 65535, inclusive.
 * </div>
 */
- (int) idrPicId;
/*!
 * <div>
 * Creates an empty NAL Unit.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Creates a NAL Unit from a byte array.
 * </div>
 * @param naluBytes The NALU bytes.
 */
- (instancetype) initWithNaluBytes:(FMIceLinkDataBuffer*)naluBytes;
/*!
 * <div>
 * Gets the NRI: 2bits otherwise known as nal_ref_idc.
 * </div>
 */
- (int) nalRefIdc;
/*!
 * <div>
 * Creates an empty NAL Unit.
 * </div>
 */
+ (FMIceLinkH264Nalu*) nalu;
/*!
 * <div>
 * Creates a NAL Unit from a byte array.
 * </div>
 * @param naluBytes The NALU bytes.
 */
+ (FMIceLinkH264Nalu*) naluWithNaluBytes:(FMIceLinkDataBuffer*)naluBytes;
/*!
 * <div>
 * Gets the nal_ref_idc mask.
 * </div>
 */
+ (int) nriMask;
/*!
 * <div>
 * Gets the NAL payload.
 * </div>
 */
- (FMIceLinkDataBuffer*) payload;
/*!
 * <div>
 * Gets the pic_order_cnt_lsb.
 * </div>
 */
- (int) picOrderCntLsb;
/*!
 * <div>
 * Gets the pic_order_cnt_type.
 * </div>
 */
- (int) picOrderCntType;
/*!
 * <div>
 * Gets the Picture Parameter Set specifies the picture parameter set in use. The
 * value of pic_parameter_set_id shall be in the range of 0 to 255, inclusive.
 * </div>
 */
- (int) ppsId;
/*!
 * <div>
 * Gets the size of the NAL Unit (including NAL header) in two octets stored in
 * the returned byte array. Useful for creating certain types of H264 such as STAP.
 * </div>
 */
- (FMIceLinkDataBuffer*) shortLength;
/*!
 * <div>
 * Gets the type of Slice contained in this NAL.
 * </div>
 */
- (int) sliceType;
/*!
 * <div>
 * Gets the Sequence Parameter Set this NAL references.
 * </div>
 */
- (int) spsId;
/*!
 * <div>
 * Gets the 4-byte NALU start code.
 * </div>
 */
+ (FMIceLinkDataBuffer*) startCode;
/*!
 * <div>
 * Gets the NAL Unit Type.
 * </div>
 */
- (int) type;
/*!
 * <div>
 * Gets the NAL Unit Type mask.
 * </div>
 */
+ (int) typeMask;

@end

/*!
 * <div>
 * An H.264 packet for RTP.
 * </div>
 */
@interface FMIceLinkH264Packet : NSObject

/*!
 * <div>
 * Gets the Packet as a DataBuffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) buffer;
/*!
 * <div>
 * Depacketizes multiple H264Packets into a single encoded frame.
 * Uses packetization mode 0.
 * </div>
 * @param packets The packets.
 */
+ (FMIceLinkDataBuffer*) depacketizeWithPackets:(NSMutableArray*)packets;
/*!
 * <div>
 * Depacketizes multiple H264Packets into a single encoded frame.
 * </div>
 * @param packets The packets.
 * @param packetizationMode The packetizationMode.
 */
+ (FMIceLinkDataBuffer*) depacketizeWithPackets:(NSMutableArray*)packets packetizationMode:(int)packetizationMode;
/*!
 * <div>
 * Gets if this is the end of a Fragmented Unit.
 * </div>
 */
- (bool) fragmentEnd;
/*!
 * <div>
 * Gets if this is the start of a Fragmented Unit.
 * </div>
 */
- (bool) fragmentStart;
/*!
 * <div>
 * Gets the end bit.
 * </div>
 */
+ (int) fuEBitMask;
/*!
 * <div>
 * Gets the reserved bit.
 * </div>
 */
+ (int) fuRBitMask;
/*!
 * <div>
 * Gets the start bit.
 * </div>
 */
+ (int) fuSBitMask;
/*!
 * <div>
 * Default constuctor.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Single NAL Unit Mode constructor.
 * </div>
 * @param nalu The nalu.
 */
- (instancetype) initWithNalu:(FMIceLinkH264Nalu*)nalu;
/*!
 * <div>
 * Gets whether this is the last nalu in the sequence (i.e. RTP Marker).
 * </div>
 */
- (bool) last;
/*!
 * <div>
 * Gets the maximum packet size (affects packetization).
 * </div>
 */
+ (int) maxPacketSize;
/*!
 * <div>
 * Gets the NAL Units.
 * </div>
 */
- (NSMutableArray*) nalus;
/*!
 * <div>
 * Gets the type of Payload that is in this packet.
 * </div>
 */
- (int) naluType;
/*!
 * <div>
 * Default constuctor.
 * </div>
 */
+ (FMIceLinkH264Packet*) packet;
/*!
 * <div>
 * Packetizes a single encoded data frame into multiple H264 packets.
 * Note: Only STAP-A and Single NALU are supported right now.
 * Uses packetization mode 0.
 * </div>
 * @param encodedData The encoded data.
 */
+ (NSMutableArray*) packetizeWithEncodedData:(FMIceLinkDataBuffer*)encodedData;
/*!
 * <div>
 * Packetizes a single encoded data frame into multiple H264 packets.
 * Note: Only STAP-A and Single NALU are supported right now.
 * </div>
 * @param encodedData The encoded data.
 * @param packetizationMode The packetizationMode.
 */
+ (NSMutableArray*) packetizeWithEncodedData:(FMIceLinkDataBuffer*)encodedData packetizationMode:(int)packetizationMode;
/*!
 * <div>
 * Single NAL Unit Mode constructor.
 * </div>
 * @param nalu The nalu.
 */
+ (FMIceLinkH264Packet*) packetWithNalu:(FMIceLinkH264Nalu*)nalu;
/*!
 * <div>
 * Gets the RTP sequence number.
 * </div>
 */
- (long long) sequenceNumber;
/*!
 * <div>
 * Sets whether this is the last nalu in the sequence (i.e. RTP Marker).
 * </div>
 */
- (void) setLast:(bool)value;
/*!
 * <div>
 * Sets the NAL Units.
 * </div>
 */
- (void) setNalus:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the RTP sequence number.
 * </div>
 */
- (void) setSequenceNumber:(long long)value;
/*!
 * <div>
 * Parses the specified packet bytes.
 * </div>
 * @param buffer The packet bytes.
 */
+ (FMIceLinkH264Packet*) wrapWithBuffer:(FMIceLinkDataBuffer*)buffer;

@end

/*!
 * <div>
 * H.264 packetization modes.
 * </div>
 */
@interface FMIceLinkH264PacketizationMode : NSObject

/*!
 * <div>
 * Gets non-interleaved mode.
 * </div>
 */
+ (int) default;
- (instancetype) init;
/*!
 * <div>
 * Gets interleaved mode.
 * </div>
 */
+ (int) interleaved;
/*!
 * <div>
 * Gets non-interleaved mode.
 * </div>
 */
+ (int) nonInterleaved;
+ (FMIceLinkH264PacketizationMode*) packetizationMode;
/*!
 * <div>
 * Gets single NAL mode.
 * </div>
 */
+ (int) singleNal;

@end

/*!
 * <div>
 * An H.264 packetizer.
 * </div>
 */
@interface FMIceLinkH264Packetizer : FMIceLinkVideoPacketizer

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Processes an SDP media description.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer if set to true [is offer].
 * @param isLocalDescription if set to true [is local description].
 */
- (FMIceLinkError*) doProcessSdpMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Packetizer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Packetizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the maximum packet size (affects packetization).
 * </div>
 */
+ (int) maxPacketSize;
/*!
 * <div>
 * Gets the packetization mode.
 * </div>
 */
- (int) packetizationMode;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Packetizer class.
 * </div>
 */
+ (FMIceLinkH264Packetizer*) packetizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264Packetizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkH264Packetizer*) packetizerWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;

@end

/*!
 * <div>
 * Profile IDs.
 * </div>
 */
@interface FMIceLinkH264ProfileIdc : NSObject

/*!
 * <div>
 * Gets the value indicating baseline.
 * </div>
 */
+ (int) baseline;
/*!
 * <div>
 * Gets the value indicating CAVLV 4:4:4.
 * </div>
 */
+ (int) cavlc444;
/*!
 * <div>
 * Gets the value indicating extended.
 * </div>
 */
+ (int) extended;
/*!
 * <div>
 * Gets the value indicating high.
 * </div>
 */
+ (int) high;
/*!
 * <div>
 * Gets the value indicating high 10.
 * </div>
 */
+ (int) high10;
/*!
 * <div>
 * Gets the value indicating high 4:2:2.
 * </div>
 */
+ (int) high422;
/*!
 * <div>
 * Gets the value indicating high 4:4:4.
 * </div>
 */
+ (int) high444;
- (instancetype) init;
/*!
 * <div>
 * Gets the value indicating main.
 * </div>
 */
+ (int) main;
+ (FMIceLinkH264ProfileIdc*) profileIdc;
/*!
 * <div>
 * Gets the value indicating scalable baseline.
 * </div>
 */
+ (int) scalableBaseline;
/*!
 * <div>
 * Gets the value indicating scalable high.
 * </div>
 */
+ (int) scalableHigh;

@end

/*!
 * <div>
 * An h.264 Profile IOP.
 * </div>
 */
@interface FMIceLinkH264ProfileIop : NSObject

/*!
 * <div>
 * Gets a value indicating whether [constraint set0].
 * </div><value>
 * <code>true</code> if [constraint set0]; otherwise, <code>false</code>.
 * </value>
 */
- (bool) constraintSet0;
/*!
 * <div>
 * Gets a value indicating whether [constraint set1].
 * </div><value>
 * <code>true</code> if [constraint set1]; otherwise, <code>false</code>.
 * </value>
 */
- (bool) constraintSet1;
/*!
 * <div>
 * Gets a value indicating whether [constraint set2].
 * </div><value>
 * <code>true</code> if [constraint set2]; otherwise, <code>false</code>.
 * </value>
 */
- (bool) constraintSet2;
/*!
 * <div>
 * Gets the IOP byte.
 * </div><value>
 * The iop.
 * </value>
 */
- (FMIceLinkDataBuffer*) dataBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264ProfileIop class.
 * </div>
 * @param profileIop The profile IOP.
 */
- (instancetype) initWithProfileIop:(uint8_t)profileIop;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264ProfileIop class.
 * </div>
 * @param profileIop The profile IOP.
 */
+ (FMIceLinkH264ProfileIop*) profileIop:(uint8_t)profileIop;
/*!
 * <div>
 * Sets a value indicating whether [constraint set0].
 * </div><value>
 * <code>true</code> if [constraint set0]; otherwise, <code>false</code>.
 * </value>
 */
- (void) setConstraintSet0:(bool)value;
/*!
 * <div>
 * Sets a value indicating whether [constraint set1].
 * </div><value>
 * <code>true</code> if [constraint set1]; otherwise, <code>false</code>.
 * </value>
 */
- (void) setConstraintSet1:(bool)value;
/*!
 * <div>
 * Sets a value indicating whether [constraint set2].
 * </div><value>
 * <code>true</code> if [constraint set2]; otherwise, <code>false</code>.
 * </value>
 */
- (void) setConstraintSet2:(bool)value;

@end

/*!
 * <div>
 * An H.264 Profile Level ID.
 * </div>
 */
@interface FMIceLinkH264ProfileLevelId : NSObject

/*!
 * <div>
 * Gets constrained baseline level 3.1.
 * </div>
 */
+ (FMIceLinkH264ProfileLevelId*) constrainedBaselineLevel31;
/*!
 * <div>
 * Gets constrained baseline level 3.1.
 * </div>
 */
+ (FMIceLinkH264ProfileLevelId*) default;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264ProfileLevelId class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264ProfileLevelId class.
 * </div>
 * @param profileIdc The profile ID code.
 * @param profileIop The profile constraints.
 * @param levelIdc The level ID code.
 */
- (instancetype) initWithProfileIdc:(int)profileIdc profileIop:(int)profileIop levelIdc:(int)levelIdc;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264ProfileLevelId class.
 * </div>
 * @param profileLevelId The profile level identifier.
 */
- (instancetype) initWithProfileLevelId:(NSString*)profileLevelId;
/*!
 * <div>
 * Gets the level ID code.
 * </div>
 */
- (int) levelIdc;
/*!
 * <div>
 * Gets the profile ID Code.
 * </div>
 */
- (int) profileIdc;
/*!
 * <div>
 * Gets the profile constraints.
 * </div>
 */
- (FMIceLinkH264ProfileIop*) profileIop;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264ProfileLevelId class.
 * </div>
 */
+ (FMIceLinkH264ProfileLevelId*) profileLevelId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264ProfileLevelId class.
 * </div>
 * @param profileLevelId The profile level identifier.
 */
+ (FMIceLinkH264ProfileLevelId*) profileLevelId:(NSString*)profileLevelId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkH264ProfileLevelId class.
 * </div>
 * @param profileIdc The profile ID code.
 * @param profileIop The profile constraints.
 * @param levelIdc The level ID code.
 */
+ (FMIceLinkH264ProfileLevelId*) profileLevelIdWithProfileIdc:(int)profileIdc profileIop:(int)profileIop levelIdc:(int)levelIdc;
/*!
 * <div>
 * Sets the level ID code.
 * </div>
 */
- (void) setLevelIdc:(int)value;
/*!
 * <div>
 * Sets the profile ID Code.
 * </div>
 */
- (void) setProfileIdc:(int)value;
/*!
 * <div>
 * Sets the profile constraints.
 * </div>
 */
- (void) setProfileIop:(FMIceLinkH264ProfileIop*)value;

@end

/*!
 * <div>
 * Utility methods.
 * </div>
 */
@interface FMIceLinkH264Utility : NSObject

/*!
 * <div>
 * Gets the NALU length at the specified offset.
 * </div>
 * @param encodedFrame The encoded frame.
 * @param offset The offset into the encoded frame.
 */
+ (int) getNaluLengthWithEncodedFrame:(FMIceLinkDataBuffer*)encodedFrame offset:(int)offset;
/*!
 * <div>
 * Gets the start code length at the specified offset.
 * </div>
 * @param encodedFrame The encoded frame.
 * @param offset The offset into the encoded frame.
 */
+ (int) getStartCodeLengthWithEncodedFrame:(FMIceLinkDataBuffer*)encodedFrame offset:(int)offset;
- (instancetype) init;
/*!
 * <div>
 * Determines whether the encoded frame starts with an AUD NALU.
 * </div>
 * @param encodedFrame The encoded frame.
 */
+ (bool) isAudWithEncodedFrame:(FMIceLinkDataBuffer*)encodedFrame;
/*!
 * <div>
 * Determines whether the encoded frame starts with an AUD NALU.
 * </div>
 * @param encodedFrame The encoded frame.
 * @param offset The offset into the encoded frame.
 */
+ (bool) isAudWithEncodedFrame:(FMIceLinkDataBuffer*)encodedFrame offset:(int)offset;
/*!
 * <div>
 * Determines whether the encoded frame starts with an IDR NALU.
 * </div>
 * @param encodedFrame The encoded frame.
 */
+ (bool) isIdrWithEncodedFrame:(FMIceLinkDataBuffer*)encodedFrame;
/*!
 * <div>
 * Determines whether the encoded frame starts with an IDR NALU.
 * </div>
 * @param encodedFrame The encoded frame.
 * @param offset The offset into the encoded frame.
 */
+ (bool) isIdrWithEncodedFrame:(FMIceLinkDataBuffer*)encodedFrame offset:(int)offset;
/*!
 * <div>
 * Determines whether the encoded frame starts with a keyframe (IDR, PPS, or SPS).
 * </div>
 * @param encodedFrame The encoded frame.
 */
+ (bool) isKeyFrameWithEncodedFrame:(FMIceLinkDataBuffer*)encodedFrame;
/*!
 * <div>
 * Determines whether the encoded frame starts with a given NALU type.
 * </div>
 * @param naluType The NALU type.
 * @param encodedFrame The encoded frame.
 * @param offset The offset into the encoded frame.
 */
+ (bool) isNaluType:(int)naluType encodedFrame:(FMIceLinkDataBuffer*)encodedFrame offset:(int)offset;
/*!
 * <div>
 * Determines whether the encoded frame starts with a PPS NALU.
 * </div>
 * @param encodedFrame The encoded frame.
 */
+ (bool) isPpsWithEncodedFrame:(FMIceLinkDataBuffer*)encodedFrame;
/*!
 * <div>
 * Determines whether the encoded frame starts with a PPS NALU.
 * </div>
 * @param encodedFrame The encoded frame.
 * @param offset The offset into the encoded frame.
 */
+ (bool) isPpsWithEncodedFrame:(FMIceLinkDataBuffer*)encodedFrame offset:(int)offset;
/*!
 * <div>
 * Determines whether the encoded frame starts with an SPS NALU.
 * </div>
 * @param encodedFrame The encoded frame.
 */
+ (bool) isSpsWithEncodedFrame:(FMIceLinkDataBuffer*)encodedFrame;
/*!
 * <div>
 * Determines whether the encoded frame starts with an SPS NALU.
 * </div>
 * @param encodedFrame The encoded frame.
 * @param offset The offset into the encoded frame.
 */
+ (bool) isSpsWithEncodedFrame:(FMIceLinkDataBuffer*)encodedFrame offset:(int)offset;
/*!
 * <div>
 * Negotiates the 'packetization-mode' format parameter.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer Whether this media description is from an offer.
 * @param isLocalDescription Whether this media description is local.
 * @param format The media format.
 * @param currentValue The current value.
 * @param newValue The new value to use.
 * @return
 */
+ (FMIceLinkError*) negotiatePacketizationModeWithMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription format:(FMIceLinkVideoFormat*)format currentValue:(int)currentValue newValue:(int*)newValue;
/*!
 * <div>
 * Negotiates the 'profile-level-id' format parameter.
 * </div>
 * @param mediaDescription The media description.
 * @param isOffer Whether this media description is from an offer.
 * @param isLocalDescription Whether this media description is local.
 * @param format The media format.
 * @param currentValue The current value.
 * @param newValue The new value to use.
 * @return
 */
+ (FMIceLinkError*) negotiateProfileLevelIdWithMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription isOffer:(bool)isOffer isLocalDescription:(bool)isLocalDescription format:(FMIceLinkVideoFormat*)format currentValue:(FMIceLinkH264ProfileLevelId*)currentValue newValue:(FMIceLinkH264ProfileLevelId**)newValue;
/*!
 * <div>
 * Gets the supported packetization modes.
 * </div>
 */
+ (NSMutableArray*) supportedPacketizationModes;
/*!
 * <div>
 * Gets the supported profile ID codes.
 * </div>
 */
+ (NSMutableArray*) supportedProfileIdcs;
/*!
 * <div>
 * Trims an AUD NALU from the start of the encoded frame, if one exists.
 * </div>
 * @param encodedFrame The encoded frame.
 * @return
 */
+ (FMIceLinkDataBuffer*) trimAudWithEncodedFrame:(FMIceLinkDataBuffer*)encodedFrame;
+ (FMIceLinkH264Utility*) utility;

@end

/*!
 * <div>
 * A media input collection.
 * </div><typeparam name="TIOutput">The type of the output interface.</typeparam><typeparam name="TIInput">The type of the input interface.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam><typeparam name="TMediaInputCollection">The type of the media input collection.</typeparam>
 */
@interface FMIceLinkIMediaInputCollection : FMIceLinkCollection

/*!
 * <div>
 * Invoked after an element is added to the collection.
 * </div>
 * @param value The value.
 */
- (void) addSuccessNoLock:(NSObject<FMIceLinkIMediaInput>*)value;
/*!
 * <div>
 * Removes all items and sets the FMIceLinkIMediaInputCollection`7#output to null.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIMediaInputCollection`7 class.
 * </div>
 * @param output The output.
 */
+ (FMIceLinkIMediaInputCollection*) iMediaInputCollectionWithOutput:(NSObject<FMIceLinkIMediaOutput>*)output;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIMediaInputCollection`7 class.
 * </div>
 * @param output The output.
 */
- (instancetype) initWithOutput:(NSObject<FMIceLinkIMediaOutput>*)output;
/*!
 * <div>
 * Gets the output.
 * </div>
 */
- (NSObject<FMIceLinkIMediaOutput>*) output;
/*!
 * <div>
 * Invoked after an element is removed from the collection.
 * </div>
 * @param value The value.
 */
- (void) removeSuccessNoLock:(NSObject<FMIceLinkIMediaInput>*)value;
/*!
 * <div>
 * Sets the output.
 * </div>
 */
- (void) setOutput:(NSObject<FMIceLinkIMediaOutput>*)value;

@end

/*!
 * <div>
 * A collection of audio inputs.
 * </div>
 */
@interface FMIceLinkIAudioInputCollection : FMIceLinkIMediaInputCollection

/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkIAudioInputCollection*) createCollection;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIAudioInputCollection class.
 * </div>
 * @param output The output.
 */
+ (FMIceLinkIAudioInputCollection*) iAudioInputCollectionWithOutput:(NSObject<FMIceLinkIAudioOutput>*)output;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIAudioInputCollection class.
 * </div>
 * @param output The output.
 */
- (instancetype) initWithOutput:(NSObject<FMIceLinkIAudioOutput>*)output;

@end

/*!
 * <div>
 * A media output collection.
 * </div><typeparam name="TIOutput">The type of the output interface.</typeparam><typeparam name="TIInput">The type of the input interface.</typeparam><typeparam name="TFrame">The type of the frame.</typeparam><typeparam name="TBuffer">The type of the buffer.</typeparam><typeparam name="TBufferCollection">The type of the buffer collection.</typeparam><typeparam name="TFormat">The type of the format.</typeparam><typeparam name="TMediaOutputCollection">The type of the media output collection.</typeparam>
 */
@interface FMIceLinkIMediaOutputCollection : FMIceLinkCollection

/*!
 * <div>
 * Invoked after an element is added to the collection.
 * </div>
 * @param value The value.
 */
- (void) addSuccessNoLock:(NSObject<FMIceLinkIMediaOutput>*)value;
/*!
 * <div>
 * Removes all items and sets the FMIceLinkIMediaOutputCollection`7#input to null.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIMediaInputCollection`7 class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkIMediaOutputCollection*) iMediaOutputCollectionWithInput:(NSObject<FMIceLinkIMediaInput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIMediaInputCollection`7 class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIMediaInput>*)input;
/*!
 * <div>
 * Gets the input.
 * </div>
 */
- (NSObject<FMIceLinkIMediaInput>*) input;
/*!
 * <div>
 * Invoked after an element is removed from the collection.
 * </div>
 * @param value The value.
 */
- (void) removeSuccessNoLock:(NSObject<FMIceLinkIMediaOutput>*)value;
/*!
 * <div>
 * Sets the input.
 * </div>
 */
- (void) setInput:(NSObject<FMIceLinkIMediaInput>*)value;

@end

/*!
 * <div>
 * A collection of audio outputs.
 * </div>
 */
@interface FMIceLinkIAudioOutputCollection : FMIceLinkIMediaOutputCollection

/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkIAudioOutputCollection*) createCollection;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIAudioOutputCollection class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkIAudioOutputCollection*) iAudioOutputCollectionWithInput:(NSObject<FMIceLinkIAudioInput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIAudioOutputCollection class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioInput>*)input;

@end

@interface FMIceLinkIceConnectionStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkIceConnectionState)value;

@end

@interface FMIceLinkIceGatheringStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkIceGatheringState)value;

@end

@interface FMIceLinkIceGatherPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkIceGatherPolicy)value;

@end

/*!
 * <div>
 * A set of ICE parameters.
 * </div>
 */
@interface FMIceLinkIceParameters : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceParameters class.
 * </div>
 * @param usernameFragment The username fragment.
 * @param password The password.
 */
+ (FMIceLinkIceParameters*) iceParametersWithUsernameFragment:(NSString*)usernameFragment password:(NSString*)password;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceParameters class.
 * </div>
 * @param usernameFragment The username fragment.
 * @param password The password.
 */
- (instancetype) initWithUsernameFragment:(NSString*)usernameFragment password:(NSString*)password;
/*!
 * <div>
 * Gets the password.
 * </div>
 */
- (NSString*) password;
/*!
 * <div>
 * Sets the password.
 * </div>
 */
- (void) setPassword:(NSString*)value;
/*!
 * <div>
 * Sets the username fragment.
 * </div>
 */
- (void) setUsernameFragment:(NSString*)value;
/*!
 * <div>
 * Gets the username fragment.
 * </div>
 */
- (NSString*) usernameFragment;

@end

@interface FMIceLinkIcePolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkIcePolicy)value;

@end

/*!
 * <div>
 * An ICE port range.
 * </div>
 */
@interface FMIceLinkIcePortRange : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIcePortRange class.
 * </div>
 */
+ (FMIceLinkIcePortRange*) icePortRange;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIcePortRange class.
 * </div>
 * @param minimum The minimum port value.
 */
+ (FMIceLinkIcePortRange*) icePortRangeWithMinimum:(int)minimum;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIcePortRange class.
 * </div>
 * @param minimum The minimum port value.
 * @param maximum The maximum port value.
 */
+ (FMIceLinkIcePortRange*) icePortRangeWithMinimum:(int)minimum maximum:(int)maximum;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIcePortRange class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIcePortRange class.
 * </div>
 * @param minimum The minimum port value.
 */
- (instancetype) initWithMinimum:(int)minimum;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIcePortRange class.
 * </div>
 * @param minimum The minimum port value.
 * @param maximum The maximum port value.
 */
- (instancetype) initWithMinimum:(int)minimum maximum:(int)maximum;
/*!
 * <div>
 * Gets the maximum port value.
 * Defaults to 65535.
 * </div>
 */
- (int) maximum;
/*!
 * <div>
 * Gets the minimum port value.
 * Defaults to 49152.
 * </div>
 */
- (int) minimum;

@end

@interface FMIceLinkIceRoleWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkIceRole)value;

@end

/*!
 * <div>
 * An ICE server.
 * </div>
 */
@interface FMIceLinkIceServer : NSObject

/*!
 * <div>
 * Gets the default port.
 * </div>
 */
+ (int) defaultPort;
/*!
 * <div>
 * Deserializes an array of instances from JSON.
 * </div>
 * @param iceServersJson The JSON to deserialize.
 * @return The deserialized ICE server array.
 */
+ (NSMutableArray*) fromJsonArrayWithIceServersJson:(NSString*)iceServersJson;
/*!
 * <div>
 * Deserializes an instance from JSON.
 * </div>
 * @param iceServerJson The JSON to deserialize.
 * @return The deserialized ICE server.
 */
+ (FMIceLinkIceServer*) fromJsonWithIceServerJson:(NSString*)iceServerJson;
/*!
 * <div>
 * Gets the host.
 * </div>
 */
- (NSString*) host;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceServer class.
 * </div>
 * @param url The URL.
 */
+ (FMIceLinkIceServer*) iceServerWithUrl:(NSString*)url;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceServer class.
 * </div>
 * @param url The URL.
 * @param username The username.
 * @param password The password.
 */
+ (FMIceLinkIceServer*) iceServerWithUrl:(NSString*)url username:(NSString*)username password:(NSString*)password;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceServer class.
 * </div>
 * @param url The URL.
 */
- (instancetype) initWithUrl:(NSString*)url;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceServer class.
 * </div>
 * @param url The URL.
 * @param username The username.
 * @param password The password.
 */
- (instancetype) initWithUrl:(NSString*)url username:(NSString*)username password:(NSString*)password;
/*!
 * <div>
 * Gets a value indicating whether this represents a secure STUN or TURN server.
 * </div>
 */
- (bool) isSecure;
/*!
 * <div>
 * Gets a value indicating whether this represents a STUN server.
 * </div>
 */
- (bool) isStun;
/*!
 * <div>
 * Gets a value indicating whether this represents a TCP server.
 * </div>
 */
- (bool) isTcp;
/*!
 * <div>
 * Gets a value indicating whether this represents a TURN server.
 * </div>
 */
- (bool) isTurn;
/*!
 * <div>
 * Gets a value indicating whether this represents a UDP server.
 * </div>
 */
- (bool) isUdp;
/*!
 * <div>
 * Gets the password.
 * </div>
 */
- (NSString*) password;
/*!
 * <div>
 * Gets the port.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 * @return
 * The serialized JSON.
 * 
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an array of instances to JSON.
 * </div>
 * @param iceServers The ICE servers.
 * @return
 * The serialized JSON.
 * 
 */
+ (NSString*) toJsonArrayWithIceServers:(NSMutableArray*)iceServers;
/*!
 * <div>
 * Serializes an instance to JSON.
 * </div>
 * @param iceServer The ICE server.
 * @return
 * The serialized JSON.
 * 
 */
+ (NSString*) toJsonWithIceServer:(FMIceLinkIceServer*)iceServer;
/*!
 * <div>
 * Gets the URL.
 * </div>
 */
- (NSString*) url;
/*!
 * <div>
 * Gets the username.
 * </div>
 */
- (NSString*) username;

@end

/*!
 * <div>
 * An ICE server collection.
 * </div>
 */
@interface FMIceLinkIceServerCollection : FMIceLinkCollection

/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkIceServerCollection*) createCollection;
+ (FMIceLinkIceServerCollection*) iceServerCollection;
- (instancetype) init;

@end

/*!
 * <div>
 * An ICE server test.
 * </div>
 */
@interface FMIceLinkIceServerTest : NSObject

/*!
 * <div>
 * Gets the ICE address types.
 * </div>
 */
- (NSMutableArray*) iceAddressTypes;
/*!
 * <div>
 * Gets the ICE port range.
 * </div>
 */
- (FMIceLinkIcePortRange*) icePortRange;
/*!
 * <div>
 * Gets the ICE server.
 * </div>
 */
- (FMIceLinkIceServer*) iceServer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceServerTest class.
 * </div>
 * @param iceServer The ICE server.
 */
+ (FMIceLinkIceServerTest*) iceServerTestWithIceServer:(FMIceLinkIceServer*)iceServer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceServerTest class.
 * </div>
 * @param iceServer The ICE server.
 * @param icePortRange The ICE port range.
 */
+ (FMIceLinkIceServerTest*) iceServerTestWithIceServer:(FMIceLinkIceServer*)iceServer icePortRange:(FMIceLinkIcePortRange*)icePortRange;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceServerTest class.
 * </div>
 * @param iceServer The ICE server.
 * @param icePortRange The ICE port range.
 * @param iceAddressTypes The ICE address types.
 */
+ (FMIceLinkIceServerTest*) iceServerTestWithIceServer:(FMIceLinkIceServer*)iceServer icePortRange:(FMIceLinkIcePortRange*)icePortRange iceAddressTypes:(NSMutableArray*)iceAddressTypes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceServerTest class.
 * </div>
 * @param iceServer The ICE server.
 */
- (instancetype) initWithIceServer:(FMIceLinkIceServer*)iceServer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceServerTest class.
 * </div>
 * @param iceServer The ICE server.
 * @param icePortRange The ICE port range.
 */
- (instancetype) initWithIceServer:(FMIceLinkIceServer*)iceServer icePortRange:(FMIceLinkIcePortRange*)icePortRange;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceServerTest class.
 * </div>
 * @param iceServer The ICE server.
 * @param icePortRange The ICE port range.
 * @param iceAddressTypes The ICE address types.
 */
- (instancetype) initWithIceServer:(FMIceLinkIceServer*)iceServer icePortRange:(FMIceLinkIcePortRange*)icePortRange iceAddressTypes:(NSMutableArray*)iceAddressTypes;
/*!
 * <div>
 * Runs the test.
 * </div>
 */
- (FMIceLinkFuture*) run;

@end

/*!
 * <div>
 * An ICE server test result.
 * </div>
 */
@interface FMIceLinkIceServerTestResult : NSObject

/*!
 * <div>
 * Gets the candidates.
 * </div>
 */
- (NSMutableArray*) candidates;
/*!
 * <div>
 * Gets the server addresses from the FMIceLinkIceServerTestResult#candidates and a
 * given port. The IP addresses will be taken from the server-reflexive
 * candidates, if available.
 * </div>
 * @param port The port.
 */
- (NSMutableArray*) getServerAddressesWithPort:(int)port;
/*!
 * <div>
 * Gets the server addresses from the FMIceLinkIceServerTestResult#candidates and a
 * given port. The IP addresses will be taken from the server-reflexive
 * candidates, if available, or the host candidates, if a public IP
 * address is supplied.
 * </div>
 * @param port The port.
 * @param publicIPAddress The public IP address, if known.
 */
- (NSMutableArray*) getServerAddressesWithPort:(int)port publicIPAddress:(NSString*)publicIPAddress;
/*!
 * <div>
 * Gets the host candidates.
 * </div>
 */
- (NSMutableArray*) hostCandidates;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceServerTestResult class.
 * </div>
 * @param candidates The candidates.
 */
+ (FMIceLinkIceServerTestResult*) iceServerTestResultWithCandidates:(NSMutableArray*)candidates;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIceServerTestResult class.
 * </div>
 * @param candidates The candidates.
 */
- (instancetype) initWithCandidates:(NSMutableArray*)candidates;
/*!
 * <div>
 * Gets the peer reflexive candidates.
 * </div>
 */
- (NSMutableArray*) peerReflexiveCandidates;
/*!
 * <div>
 * Gets the relayed candidates.
 * </div>
 */
- (NSMutableArray*) relayedCandidates;
/*!
 * <div>
 * Gets the server reflexive candidates.
 * </div>
 */
- (NSMutableArray*) serverReflexiveCandidates;

@end

/*!
 * <div>
 * An video recorder.
 * </div>
 */
@interface FMIceLinkVideoRecorder : FMIceLinkMediaRecorder

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoRecorder class.
 * </div>
 * @param path The path.
 */
- (instancetype) initWithPath:(NSString*)path;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoRecorder class.
 * </div>
 * @param path The path.
 */
+ (FMIceLinkVideoRecorder*) videoRecorderWithPath:(NSString*)path;

@end

/*!
 * <div>
 * An IVF video recorder.
 * </div>
 */
@interface FMIceLinkIvfVideoRecorder : FMIceLinkVideoRecorder

/*!
 * <div>
 * Updates the file header.
 * </div>
 */
- (void) doUpdateHeader;
/*!
 * <div>
 * Writes the file header.
 * </div>
 */
- (void) doWriteHeader;
/*!
 * <div>
 * Write an encoded video frame.
 * </div>
 * @param buffer The encoded buffer.
 * @param presentationTimestamp The presentation timestamp.
 * @return true if the encoded frame was written successfully; otherwise, false
 */
- (bool) doWriteWithBuffer:(FMIceLinkVideoBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIvfVideoRecorder class.
 * </div>
 * @param path The path.
 */
- (instancetype) initWithPath:(NSString*)path;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIvfVideoRecorder class.
 * </div>
 * @param path The path.
 */
+ (FMIceLinkIvfVideoRecorder*) videoRecorderWithPath:(NSString*)path;

@end

/*!
 * <div>
 * An IVF-file-based video sink.
 * </div>
 */
@interface FMIceLinkIvfVideoSink : FMIceLinkVideoSink

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIvfVideoSink class.
 * </div>
 * @param path The path.
 */
- (instancetype) initWithPath:(NSString*)path;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIvfVideoSink class.
 * </div>
 * @param path The path.
 * @param input The input.
 */
- (instancetype) initWithPath:(NSString*)path input:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the path.
 * </div>
 */
- (NSString*) path;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIvfVideoSink class.
 * </div>
 * @param path The path.
 */
+ (FMIceLinkIvfVideoSink*) videoSinkWithPath:(NSString*)path;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIvfVideoSink class.
 * </div>
 * @param path The path.
 * @param input The input.
 */
+ (FMIceLinkIvfVideoSink*) videoSinkWithPath:(NSString*)path input:(NSObject<FMIceLinkIVideoOutput>*)input;

@end

/*!
 * <div>
 * A collection of video inputs.
 * </div>
 */
@interface FMIceLinkIVideoInputCollection : FMIceLinkIMediaInputCollection

/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkIVideoInputCollection*) createCollection;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIVideoInputCollection class.
 * </div>
 * @param output The output.
 */
- (instancetype) initWithOutput:(NSObject<FMIceLinkIVideoOutput>*)output;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIVideoInputCollection class.
 * </div>
 * @param output The output.
 */
+ (FMIceLinkIVideoInputCollection*) iVideoInputCollectionWithOutput:(NSObject<FMIceLinkIVideoOutput>*)output;

@end

/*!
 * <div>
 * A collection of video outputs.
 * </div>
 */
@interface FMIceLinkIVideoOutputCollection : FMIceLinkIMediaOutputCollection

/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkIVideoOutputCollection*) createCollection;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIVideoOutputCollection class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoInput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkIVideoOutputCollection class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkIVideoOutputCollection*) iVideoOutputCollectionWithInput:(NSObject<FMIceLinkIVideoInput>*)input;

@end

/*!
 * <div>
 * A Jitter config.
 * 
 * JitterConfig is for configuring the jitter buffer.
 * The jitter buffer helps to eliminate the effects of varying network delay and
 * delivery times by holding packets for a brief period of time before releasing them to the playout track.
 * The jitter buffer holds on to the packets so that any out of order arriving packets can be released in the correct order.
 * You can modify the buffer size, but it will increase latency, and should generally be left with default values.
 * The option to set these values will most likely be removed in a future release as our adaptive algorithms improve.
 * </div>
 */
@interface FMIceLinkJitterConfig : NSObject

/*!
 * <div>
 * Gets the initial jitter buffer length in milliseconds.
 * Defaults to 100 (ms).
 * </div>
 */
- (int) bufferLength;
/*!
 * <div>
 * Gets a value indicating whether
 * the jitter buffer should be disabled.
 * </div>
 */
- (bool) disableBuffering;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkJitterConfig class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkJitterConfig class.
 * </div>
 * @param bufferLength Length of the buffer.
 */
- (instancetype) initWithBufferLength:(int)bufferLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkJitterConfig class.
 * </div>
 */
+ (FMIceLinkJitterConfig*) jitterConfig;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkJitterConfig class.
 * </div>
 * @param bufferLength Length of the buffer.
 */
+ (FMIceLinkJitterConfig*) jitterConfigWithBufferLength:(int)bufferLength;
/*!
 * <div>
 * Sets the initial jitter buffer length in milliseconds.
 * Defaults to 100 (ms).
 * </div>
 */
- (void) setBufferLength:(int)value;
/*!
 * <div>
 * Sets a value indicating whether
 * the jitter buffer should be disabled.
 * </div>
 */
- (void) setDisableBuffering:(bool)value;

@end

/*!
 * <div>
 * An audio pipe that wraps a jitter buffer.
 * </div>
 */
@interface FMIceLinkJitterAudioPipe : FMIceLinkAudioPipe

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Pushes the frame to the jitter buffer and raises any frames that are ready.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkJitterAudioPipe class
 * with a 100ms length.
 * </div>
 * @param format The input/output format.
 */
- (instancetype) initWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkJitterAudioPipe class.
 * </div>
 * @param format The input/output format.
 * @param length The length of the jitter buffer, in milliseconds.
 */
- (instancetype) initWithFormat:(FMIceLinkAudioFormat*)format length:(int)length;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkJitterAudioPipe class
 * with a 100ms length.
 * </div>
 * @param format The input/output format.
 */
+ (FMIceLinkJitterAudioPipe*) jitterAudioPipeWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkJitterAudioPipe class.
 * </div>
 * @param format The input/output format.
 * @param length The length of the jitter buffer, in milliseconds.
 */
+ (FMIceLinkJitterAudioPipe*) jitterAudioPipeWithFormat:(FMIceLinkAudioFormat*)format length:(int)length;
/*!
 * <div>
 * Gets the label of the pipe.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A video pipe that wraps a jitter buffer.
 * </div>
 */
@interface FMIceLinkJitterVideoPipe : FMIceLinkVideoPipe

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Pushes the frame to the jitter buffer and raises any frames that are ready.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkJitterVideoPipe class
 * with a 100ms length.
 * </div>
 * @param format The input/output format.
 */
- (instancetype) initWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkJitterVideoPipe class.
 * </div>
 * @param format The input/output format.
 * @param length The length of the jitter buffer, in milliseconds.
 */
- (instancetype) initWithFormat:(FMIceLinkVideoFormat*)format length:(int)length;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkJitterVideoPipe class
 * with a 100ms length.
 * </div>
 * @param format The input/output format.
 */
+ (FMIceLinkJitterVideoPipe*) jitterVideoPipeWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkJitterVideoPipe class.
 * </div>
 * @param format The input/output format.
 * @param length The length of the jitter buffer, in milliseconds.
 */
+ (FMIceLinkJitterVideoPipe*) jitterVideoPipeWithFormat:(FMIceLinkVideoFormat*)format length:(int)length;
/*!
 * <div>
 * Gets the label of the pipe.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A layout definition, including local
 * and remote frame definitions.
 * </div>
 */
@interface FMIceLinkLayout : NSObject

/*!
 * <div>
 * Gets all frames (local and remote).
 * </div>
 */
- (NSMutableArray*) allFrames;
/*!
 * <div>
 * Gets the layout height.
 * </div>
 */
- (int) height;
- (instancetype) init;
+ (FMIceLinkLayout*) layout;
/*!
 * <div>
 * Gets the local frame.
 * </div>
 */
- (FMIceLinkLayoutFrame*) localFrame;
/*!
 * <div>
 * Gets the layout origin.
 * </div>
 */
- (FMIceLinkLayoutOrigin) origin;
/*!
 * <div>
 * Gets the remote frames.
 * </div>
 */
- (NSMutableArray*) remoteFrames;
/*!
 * <div>
 * Sets the layout height.
 * </div>
 */
- (void) setHeight:(int)value;
/*!
 * <div>
 * Sets the local frame.
 * </div>
 */
- (void) setLocalFrame:(FMIceLinkLayoutFrame*)value;
/*!
 * <div>
 * Sets the layout origin.
 * </div>
 */
- (void) setOrigin:(FMIceLinkLayoutOrigin)value;
/*!
 * <div>
 * Sets the remote frames.
 * </div>
 */
- (void) setRemoteFrames:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the layout width.
 * </div>
 */
- (void) setWidth:(int)value;
/*!
 * <div>
 * Swaps the properties of two frames.
 * </div>
 * @param frame1 The first frame.
 * @param frame2 The second frame.
 */
- (void) swapFramesWithFrame1:(FMIceLinkLayoutFrame*)frame1 frame2:(FMIceLinkLayoutFrame*)frame2;
/*!
 * <div>
 * Swaps the local frame with a remote frame.
 * </div>
 * @param remoteFrameIndex The index of the remote frame.
 */
- (void) swapLocalFrameWithRemoteFrameIndex:(int)remoteFrameIndex;
/*!
 * <div>
 * Swaps two remote frames.
 * </div>
 * @param remoteFrameIndex1 The index of the first remote frame.
 * @param remoteFrameIndex2 The index of the second remote frame.
 */
- (void) swapRemoteFramesWithRemoteFrameIndex1:(int)remoteFrameIndex1 remoteFrameIndex2:(int)remoteFrameIndex2;
/*!
 * <div>
 * Gets the layout width.
 * </div>
 */
- (int) width;

@end

@interface FMIceLinkLayoutAlignmentWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkLayoutAlignment)value;

@end

@interface FMIceLinkLayoutDirectionWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkLayoutDirection)value;

@end

/*!
 * <div>
 * A layout frame definition, including X/Y coordinates and width/height values.
 * </div>
 */
@interface FMIceLinkLayoutFrame : NSObject

/*!
 * <div>
 * Deserializes a layout frame from JSON.
 * </div>
 * @param layoutFrameJson The layout frame JSON.
 */
+ (FMIceLinkLayoutFrame*) fromJsonWithLayoutFrameJson:(NSString*)layoutFrameJson;
/*!
 * <div>
 * Gets a scaled frame.
 * </div>
 * @param scale The scaling algorithm to use.
 * @param outerWidth The width of the outer container.
 * @param outerHeight The height of the outer container.
 * @param innerWidth The width of the inner element.
 * @param innerHeight The height of the inner element.
 */
+ (FMIceLinkLayoutFrame*) getScaledFrameWithScale:(FMIceLinkLayoutScale)scale outerWidth:(int)outerWidth outerHeight:(int)outerHeight innerWidth:(int)innerWidth innerHeight:(int)innerHeight;
/*!
 * <div>
 * Gets the height value.
 * </div>
 */
- (int) height;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLayoutFrame class.
 * </div>
 * @param x The X coordinate.
 * @param y The Y coordinate.
 * @param width The width value.
 * @param height The height value.
 */
- (instancetype) initWithX:(int)x y:(int)y width:(int)width height:(int)height;
/*!
 * <div>
 * Determines whether the specified layout frame is equivalent.
 * </div>
 * @param layoutFrame The layout frame.
 */
- (bool) isEquivalentWithLayoutFrame:(FMIceLinkLayoutFrame*)layoutFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLayoutFrame class.
 * </div>
 * @param x The X coordinate.
 * @param y The Y coordinate.
 * @param width The width value.
 * @param height The height value.
 */
+ (FMIceLinkLayoutFrame*) layoutFrameWithX:(int)x y:(int)y width:(int)width height:(int)height;
/*!
 * <div>
 * Sets the height value.
 * </div>
 */
- (void) setHeight:(int)value;
/*!
 * <div>
 * Sets the view ID.
 * </div>
 */
- (void) setViewId:(NSString*)value;
/*!
 * <div>
 * Sets the width value.
 * </div>
 */
- (void) setWidth:(int)value;
/*!
 * <div>
 * Sets the X coordinate.
 * </div>
 */
- (void) setX:(int)value;
/*!
 * <div>
 * Sets the Y coordinate.
 * </div>
 */
- (void) setY:(int)value;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes a layout frame to JSON.
 * </div>
 * @param layoutFrame The layout frame.
 */
+ (NSString*) toJsonWithLayoutFrame:(FMIceLinkLayoutFrame*)layoutFrame;
/*!
 * <div>
 * Gets the view ID.
 * </div>
 */
- (NSString*) viewId;
/*!
 * <div>
 * Gets the width value.
 * </div>
 */
- (int) width;
/*!
 * <div>
 * Gets the X coordinate.
 * </div>
 */
- (int) x;
/*!
 * <div>
 * Gets the Y coordinate.
 * </div>
 */
- (int) y;

@end

/*!
 * <div>
 * A layout preset.
 * </div>
 */
@interface FMIceLinkLayoutPreset : FMIceLinkDynamic

/*!
 * <div>
 * Gets the alignment of the layout.
 * Defaults to FMIceLinkLayoutAlignmentBottomRight.
 * </div>
 */
- (FMIceLinkLayoutAlignment) alignment;
/*!
 * <div>
 * Applies a preset.
 * </div>
 * @param preset The preset to apply.
 */
- (void) applyPreset:(FMIceLinkLayoutPreset*)preset;
/*!
 * <div>
 * Gets the height of block elements in pixels.
 * Overrides FMIceLinkLayoutPreset#blockHeightPercent.
 * </div>
 */
- (int) blockHeight;
/*!
 * <div>
 * Gets the height of block elements as a percent
 * of the container height between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#blockHeight.
 * </div>
 */
- (double) blockHeightPercent;
/*!
 * <div>
 * Gets the X-margin between block elements and the layout
 * edge in pixels.
 * Overrides FMIceLinkLayoutPreset#blockMarginXPercent.
 * </div>
 */
- (int) blockMarginX;
/*!
 * <div>
 * Gets the X-margin between block elements and the layout
 * edge as a percent of the container width between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#blockMarginX.
 * </div>
 */
- (double) blockMarginXPercent;
/*!
 * <div>
 * Gets the Y-margin between block elements and the layout
 * edge in pixels.
 * Overrides FMIceLinkLayoutPreset#blockMarginYPercent.
 * </div>
 */
- (int) blockMarginY;
/*!
 * <div>
 * Gets the Y-margin between block elements and the layout
 * edge as a percent of the container height between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#blockMarginY.
 * </div>
 */
- (double) blockMarginYPercent;
/*!
 * <div>
 * Gets the width of block elements in pixels.
 * Overrides FMIceLinkLayoutPreset#blockWidthPercent.
 * </div>
 */
- (int) blockWidth;
/*!
 * <div>
 * Gets the width of block elements as a percent
 * of the container width between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#blockWidth.
 * </div>
 */
- (double) blockWidthPercent;
/*!
 * <div>
 * Gets a video frame layout.
 * </div>
 * @param layoutWidth The total width of the layout.
 * @param layoutHeight The total height of the layout.
 * @param remoteCount The number of remote frames.
 * @param origin The layout origin
 * @return The video frame layout.
 */
- (FMIceLinkLayout*) calculateLayoutWithLayoutWidth:(int)layoutWidth layoutHeight:(int)layoutHeight remoteCount:(int)remoteCount origin:(FMIceLinkLayoutOrigin)origin;
/*!
 * <div>
 * Copies this preset's properties to another preset.
 * </div>
 * @param preset The target preset.
 */
- (void) copyToPreset:(FMIceLinkLayoutPreset*)preset;
/*!
 * <div>
 * Gets the direction of the layout flow.
 * Defaults to FMIceLinkLayoutDirectionHorizontal.
 * </div>
 */
- (FMIceLinkLayoutDirection) direction;
/*!
 * <div>
 * Gets a Facetime-style layout preset.
 * </div>
 */
+ (FMIceLinkLayoutPreset*) facetime;
/*!
 * <div>
 * Gets the height of floating elements in pixels.
 * Overrides FMIceLinkLayoutPreset#floatHeightPercent.
 * </div>
 */
- (int) floatHeight;
/*!
 * <div>
 * Gets the height of floating elements as a percent
 * of the container height between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#floatHeight.
 * </div>
 */
- (double) floatHeightPercent;
/*!
 * <div>
 * Gets the X-margin between floating elements and the layout
 * edge in pixels.
 * Overrides FMIceLinkLayoutPreset#floatMarginXPercent.
 * </div>
 */
- (int) floatMarginX;
/*!
 * <div>
 * Gets the X-margin between floating elements and the layout
 * edge as a percent of the container width between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#floatMarginX.
 * </div>
 */
- (double) floatMarginXPercent;
/*!
 * <div>
 * Gets the Y-margin between floating elements and the layout
 * edge in pixels.
 * Overrides FMIceLinkLayoutPreset#floatMarginYPercent.
 * </div>
 */
- (int) floatMarginY;
/*!
 * <div>
 * Gets the Y-margin between floating elements and the layout
 * edge as a percent of the container height between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#floatMarginY.
 * </div>
 */
- (double) floatMarginYPercent;
/*!
 * <div>
 * Gets the width of floating elements in pixels.
 * Overrides FMIceLinkLayoutPreset#floatWidthPercent.
 * </div>
 */
- (int) floatWidth;
/*!
 * <div>
 * Gets the width of floating elements as a percent
 * of the container width between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#floatWidth.
 * </div>
 */
- (double) floatWidthPercent;
/*!
 * <div>
 * Gets a Google Hangouts-style layout preset.
 * Note that this will present differently
 * on mobile devices.
 * </div>
 */
+ (FMIceLinkLayoutPreset*) googleHangouts;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLayoutPreset class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets the size of the margin in pixels to use
 * between inline elements.
 * </div>
 */
- (int) inlineMargin;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLayoutPreset class.
 * </div>
 */
+ (FMIceLinkLayoutPreset*) layoutPreset;
/*!
 * <div>
 * Gets the mode used by the layout engine.
 * Defaults to FMIceLinkLayoutModeFloatLocal.
 * </div>
 */
- (FMIceLinkLayoutMode) mode;
/*!
 * <div>
 * Sets the alignment of the layout.
 * Defaults to FMIceLinkLayoutAlignmentBottomRight.
 * </div>
 */
- (void) setAlignment:(FMIceLinkLayoutAlignment)value;
/*!
 * <div>
 * Sets the height of block elements in pixels.
 * Overrides FMIceLinkLayoutPreset#blockHeightPercent.
 * </div>
 */
- (void) setBlockHeight:(int)value;
/*!
 * <div>
 * Sets the height of block elements as a percent
 * of the container height between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#blockHeight.
 * </div>
 */
- (void) setBlockHeightPercent:(double)value;
/*!
 * <div>
 * Sets the X-margin between block elements and the layout
 * edge in pixels.
 * Overrides FMIceLinkLayoutPreset#blockMarginXPercent.
 * </div>
 */
- (void) setBlockMarginX:(int)value;
/*!
 * <div>
 * Sets the X-margin between block elements and the layout
 * edge as a percent of the container width between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#blockMarginX.
 * </div>
 */
- (void) setBlockMarginXPercent:(double)value;
/*!
 * <div>
 * Sets the Y-margin between block elements and the layout
 * edge in pixels.
 * Overrides FMIceLinkLayoutPreset#blockMarginYPercent.
 * </div>
 */
- (void) setBlockMarginY:(int)value;
/*!
 * <div>
 * Sets the Y-margin between block elements and the layout
 * edge as a percent of the container height between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#blockMarginY.
 * </div>
 */
- (void) setBlockMarginYPercent:(double)value;
/*!
 * <div>
 * Sets the width of block elements in pixels.
 * Overrides FMIceLinkLayoutPreset#blockWidthPercent.
 * </div>
 */
- (void) setBlockWidth:(int)value;
/*!
 * <div>
 * Sets the width of block elements as a percent
 * of the container width between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#blockWidth.
 * </div>
 */
- (void) setBlockWidthPercent:(double)value;
/*!
 * <div>
 * Sets the direction of the layout flow.
 * Defaults to FMIceLinkLayoutDirectionHorizontal.
 * </div>
 */
- (void) setDirection:(FMIceLinkLayoutDirection)value;
/*!
 * <div>
 * Sets the height of floating elements in pixels.
 * Overrides FMIceLinkLayoutPreset#floatHeightPercent.
 * </div>
 */
- (void) setFloatHeight:(int)value;
/*!
 * <div>
 * Sets the height of floating elements as a percent
 * of the container height between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#floatHeight.
 * </div>
 */
- (void) setFloatHeightPercent:(double)value;
/*!
 * <div>
 * Sets the X-margin between floating elements and the layout
 * edge in pixels.
 * Overrides FMIceLinkLayoutPreset#floatMarginXPercent.
 * </div>
 */
- (void) setFloatMarginX:(int)value;
/*!
 * <div>
 * Sets the X-margin between floating elements and the layout
 * edge as a percent of the container width between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#floatMarginX.
 * </div>
 */
- (void) setFloatMarginXPercent:(double)value;
/*!
 * <div>
 * Sets the Y-margin between floating elements and the layout
 * edge in pixels.
 * Overrides FMIceLinkLayoutPreset#floatMarginYPercent.
 * </div>
 */
- (void) setFloatMarginY:(int)value;
/*!
 * <div>
 * Sets the Y-margin between floating elements and the layout
 * edge as a percent of the container height between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#floatMarginY.
 * </div>
 */
- (void) setFloatMarginYPercent:(double)value;
/*!
 * <div>
 * Sets the width of floating elements in pixels.
 * Overrides FMIceLinkLayoutPreset#floatWidthPercent.
 * </div>
 */
- (void) setFloatWidth:(int)value;
/*!
 * <div>
 * Sets the width of floating elements as a percent
 * of the container width between 0.0 and 1.0.
 * Overrides FMIceLinkLayoutPreset#floatWidth.
 * </div>
 */
- (void) setFloatWidthPercent:(double)value;
/*!
 * <div>
 * Sets the size of the margin in pixels to use
 * between inline elements.
 * </div>
 */
- (void) setInlineMargin:(int)value;
/*!
 * <div>
 * Sets the mode used by the layout engine.
 * Defaults to FMIceLinkLayoutModeFloatLocal.
 * </div>
 */
- (void) setMode:(FMIceLinkLayoutMode)value;
/*!
 * <div>
 * Gets a Skype-style layout preset.
 * Note that this will present differently
 * on mobile devices.
 * </div>
 */
+ (FMIceLinkLayoutPreset*) skype;

@end

/*!
 * <div>
 * A class that supplies simple video frame layout management.
 * </div>
 */
@interface FMIceLinkLayoutManager : FMIceLinkLayoutPreset

/*!
 * <div>
 * Adds a handler that is raised when a layout is calculated.
 * </div>
 */
- (void) addOnLayout:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a layout is calculated.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkLayout*))) addOnLayoutWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a layout is calculated.
 * </div>
 */
- (void) addOnLayoutWithBlock:(void(^)(FMIceLinkLayout*))valueBlock;
/*!
 * <div>
 * Adds remote media to the layout.
 * </div>
 * @param remoteMedia The remote media.
 * @return true if successful; otherwise, false.
 * 
 */
- (bool) addRemoteMedia:(NSObject<FMIceLinkIViewableMedia>*)remoteMedia;
/*!
 * <div>
 * Adds remote views to the layout.
 * </div>
 * @param ids The remote view IDs.
 * @param views The remote views.
 * @return true if successful; otherwise, false. Check the logs for additional information.
 */
- (bool) addRemoteViewsWithIds:(NSMutableArray*)ids views:(NSMutableArray*)views;
/*!
 * <div>
 * Adds a remote view to the layout.
 * </div>
 * @param idValue The remote view ID.
 * @param view The remote view.
 * @return true if successful; otherwise, false. Check the logs for additional information.
 */
- (bool) addRemoteViewWithId:(NSString*)idValue view:(id)view;
/*!
 * <div>
 * Adds a view to the container.
 * </div>
 * @param view The view to add.
 */
- (void) addView:(id)view;
/*!
 * <div>
 * Dispatches an action to the main thread.
 * </div>
 * @param action The action to invoke.
 * @param arg1 The first argument.
 * @param arg2 The second argument.
 */
- (void) dispatchToMainThreadWithAction:(FMIceLinkAction2*)action arg1:(id)arg1 arg2:(id)arg2;
/*!
 * <div>
 * Dispatches an action to the main thread.
 * </div>
 * @param actionBlock The action to invoke.
 * @param arg1 The first argument.
 * @param arg2 The second argument.
 */
- (void) dispatchToMainThreadWithActionBlock:(void(^)(id, id))actionBlock arg1:(id)arg1 arg2:(id)arg2;
/*!
 * <div>
 * Dispatches an action to the main thread.
 * </div>
 * @inlineparam actionBlock The action to invoke.
 * @inlineparam arg1 The first argument.
 * @inlineparam arg2 The second argument.
 */
- (void (^)(void(^)(id, id), id, id)) dispatchToMainThreadWithActionBlockAndArg1AndArg2;
/*!
 * <div>
 * Gets a video frame layout.
 * </div>
 * @param layoutWidth The total width of the layout.
 * @param layoutHeight The total height of the layout.
 * @param remoteCount The number of remote frames.
 * @return The video frame layout.
 */
- (FMIceLinkLayout*) getLayoutWithLayoutWidth:(int)layoutWidth layoutHeight:(int)layoutHeight remoteCount:(int)remoteCount;
/*!
 * <div>
 * Gets a video frame layout.
 * </div>
 * @param layoutWidth The total width of the layout.
 * @param layoutHeight The total height of the layout.
 * @param remoteCount The number of remote frames.
 * @param remoteViewIds The array of remote view ids.
 * @return The video frame layout.
 */
- (FMIceLinkLayout*) getLayoutWithLayoutWidth:(int)layoutWidth layoutHeight:(int)layoutHeight remoteCount:(int)remoteCount remoteViewIds:(NSMutableArray*)remoteViewIds;
/*!
 * <div>
 * Gets the local view from the layout.
 * </div>
 * @return The local view.
 */
- (id) getLocalView;
/*!
 * <div>
 * Gets the IDs of the remote views in the layout.
 * </div>
 * @return The remote view IDs.
 */
- (NSMutableArray*) getRemoteViewIds;
/*!
 * <div>
 * Gets all remote views from the layout.
 * </div>
 * @return The remote views.
 */
- (NSMutableArray*) getRemoteViews;
/*!
 * <div>
 * Gets remote views from the layout.
 * </div>
 * @param ids The remote view IDs.
 * @return The remote views.
 */
- (NSMutableArray*) getRemoteViewsWithIds:(NSMutableArray*)ids;
/*!
 * <div>
 * Gets a remote view from the layout.
 * </div>
 * @param idValue The remote view ID.
 * @return The remote view.
 */
- (id) getRemoteViewWithId:(NSString*)idValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLayoutManager`1 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLayoutManager`1 class.
 * </div>
 */
- (instancetype) initWithPreset:(FMIceLinkLayoutPreset*)preset;
/*!
 * <div>
 * Positions the local and remote views within the layout.
 * </div>
 */
- (void) layout;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLayoutManager`1 class.
 * </div>
 */
+ (FMIceLinkLayoutManager*) layoutManager;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLayoutManager`1 class.
 * </div>
 */
+ (FMIceLinkLayoutManager*) layoutManagerWithPreset:(FMIceLinkLayoutPreset*)preset;
/*!
 * <div>
 * Positions the local and remote views within the layout
 * after dispatching to the main thread.
 * </div>
 */
- (void) layoutOnMainThread;
/*!
 * <div>
 * Gets the layout origin.
 * Defaults to TopLeft.
 * </div>
 */
- (FMIceLinkLayoutOrigin) layoutOrigin;
/*!
 * <div>
 * Removes a handler that is raised when a layout is calculated.
 * </div>
 */
- (void) removeOnLayout:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes remote media from the layout.
 * </div>
 * @param remoteMedia The remote media.
 * @return true if successful; otherwise, false.
 * 
 */
- (bool) removeRemoteMedia:(NSObject<FMIceLinkIViewableMedia>*)remoteMedia;
/*!
 * <div>
 * Removes all remote views from the layout.
 * </div>
 */
- (void) removeRemoteViews;
/*!
 * <div>
 * Removes remote views from the layout.
 * </div>
 * @param ids The remote view IDs.
 * @return true if successful; otherwise, false. Check the logs for additional information.
 */
- (bool) removeRemoteViewsWithIds:(NSMutableArray*)ids;
/*!
 * <div>
 * Removes a remote view from the layout.
 * </div>
 * @param idValue The remote view ID.
 * @return true if successful; otherwise, false. Check the logs for additional information.
 */
- (bool) removeRemoteViewWithId:(NSString*)idValue;
/*!
 * <div>
 * Removes a view from the container.
 * </div>
 * @param view The view to remove.
 */
- (void) removeView:(id)view;
/*!
 * <div>
 * Removes all remote views from the layout,
 * then removes the local view from the layout.
 * </div>
 */
- (void) reset;
/*!
 * <div>
 * Sets the layout origin.
 * Defaults to TopLeft.
 * </div>
 */
- (void) setLayoutOrigin:(FMIceLinkLayoutOrigin)value;
/*!
 * <div>
 * Adds the local media to the layout.
 * </div>
 * @param localMedia The local media.
 * @return true if successful; otherwise, false.
 */
- (bool) setLocalMedia:(NSObject<FMIceLinkIViewableMedia>*)localMedia;
/*!
 * <div>
 * Adds the local view to the layout.
 * </div>
 * @param view The local view.
 * @return true if successful; otherwise, false. Check the logs for additional information.
 */
- (bool) setLocalView:(id)view;
/*!
 * <div>
 * Swaps remote media in the layout.
 * </div>
 * @param remoteMediaToRemove The remote media to remove.
 * @param remoteMediaToAdd The remote media to add.
 * @return
 */
- (bool) swapRemoteMediaWithRemoteMediaToRemove:(NSObject<FMIceLinkIViewableMedia>*)remoteMediaToRemove remoteMediaToAdd:(NSObject<FMIceLinkIViewableMedia>*)remoteMediaToAdd;
/*!
 * <div>
 * Swaps remote views in the layout.
 * </div>
 * @param idsToRemove The remote view IDs to remove.
 * @param idsToAdd The remote view IDs to add.
 * @param viewsToAdd The remote views to add.
 * @return true if successful; otherwise, false. Check the logs for additional information.
 */
- (bool) swapRemoteViewsWithIdsToRemove:(NSMutableArray*)idsToRemove idsToAdd:(NSMutableArray*)idsToAdd viewsToAdd:(NSMutableArray*)viewsToAdd;
/*!
 * <div>
 * Swaps a remote view in the layout.
 * </div>
 * @param idToRemove The remote view ID to remove.
 * @param idToAdd The remote view ID to add.
 * @param viewToAdd The remote view to add.
 * @return
 */
- (bool) swapRemoteViewWithIdToRemove:(NSString*)idToRemove idToAdd:(NSString*)idToAdd viewToAdd:(id)viewToAdd;
/*!
 * <div>
 * Removes the local view from the layout.
 * </div>
 * @return true if successful; otherwise, false. Check the logs for additional information.
 */
- (bool) unsetLocalView;

@end

@interface FMIceLinkLayoutModeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkLayoutMode)value;

@end

@interface FMIceLinkLayoutOriginWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkLayoutOrigin)value;

@end

@interface FMIceLinkLayoutScaleWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkLayoutScale)value;

@end

/*!
 * <div>
 * Defines the results of a layout calculation.
 * </div>
 */
@interface FMIceLinkLayoutTable : NSObject

/*!
 * <div>
 * Gets the height of each cell.
 * </div>
 */
- (int) cellHeight;
/*!
 * <div>
 * Gets the width of each cell.
 * </div>
 */
- (int) cellWidth;
/*!
 * <div>
 * Gets the column count.
 * </div>
 */
- (int) columnCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLayoutTable class.
 * </div>
 * @param columnCount The column count.
 * @param rowCount The row count.
 * @param cellWidth The width of each cell.
 * @param cellHeight The height of each cell.
 */
- (instancetype) initWithColumnCount:(int)columnCount rowCount:(int)rowCount cellWidth:(int)cellWidth cellHeight:(int)cellHeight;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLayoutTable class.
 * </div>
 * @param columnCount The column count.
 * @param rowCount The row count.
 * @param cellWidth The width of each cell.
 * @param cellHeight The height of each cell.
 */
+ (FMIceLinkLayoutTable*) layoutTableWithColumnCount:(int)columnCount rowCount:(int)rowCount cellWidth:(int)cellWidth cellHeight:(int)cellHeight;
/*!
 * <div>
 * Gets the row count.
 * </div>
 */
- (int) rowCount;
/*!
 * <div>
 * Sets the height of each cell.
 * </div>
 */
- (void) setCellHeight:(int)value;
/*!
 * <div>
 * Sets the width of each cell.
 * </div>
 */
- (void) setCellWidth:(int)value;
/*!
 * <div>
 * Sets the column count.
 * </div>
 */
- (void) setColumnCount:(int)value;
/*!
 * <div>
 * Sets the row count.
 * </div>
 */
- (void) setRowCount:(int)value;

@end

/*!
 * <div>
 * A collection of audio/video track base methods/properties.
 * </div>
 */
@interface FMIceLinkMediaBase : FMIceLinkDynamic

/*!
 * <div>
 * Adds a handler that is raised when the first audio track is destroyed.
 * </div>
 */
- (void) addOnAudioDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the level of
 * the first audio track is calculated.
 * </div>
 */
- (void) addOnAudioLevel:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the level of
 * the first audio track is calculated.
 * </div>
 */
- (void (^)(void(^)(double))) addOnAudioLevelWithBlock;
/*!
 * <div>
 * Adds a handler that is raised whenever the level of
 * the first audio track is calculated.
 * </div>
 */
- (void) addOnAudioLevelWithBlock:(void(^)(double))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the first video track is destroyed.
 * </div>
 */
- (void) addOnVideoDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the size of
 * the first video track is calculated.
 * </div>
 */
- (void) addOnVideoSize:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the size of
 * the first video track is calculated.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkSize*))) addOnVideoSizeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised whenever the size of
 * the first video track is calculated.
 * </div>
 */
- (void) addOnVideoSizeWithBlock:(void(^)(FMIceLinkSize*))valueBlock;
/*!
 * <div>
 * Gets a value indicating the gain
 * (input amplification) of the first audio track.
 * </div>
 */
- (double) audioGain;
/*!
 * <div>
 * Gets a value indicating whether the
 * first audio track is muted.
 * </div>
 */
- (bool) audioMuted;
/*!
 * <div>
 * Gets the first audio track.
 * </div>
 */
- (NSObject<FMIceLinkIAudioTrack>*) audioTrack;
/*!
 * <div>
 * Gets the audio tracks.
 * </div>
 */
- (NSMutableArray*) audioTracks;
/*!
 * <div>
 * Gets a value indicating the volume
 * (output resistance) of the first audio track.
 * </div>
 */
- (double) audioVolume;
/*!
 * <div>
 * Destroys this media.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Grabs a frame from the first video track.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) grabVideoFrame;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaBase`2 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMediaBase`2 class.
 * </div>
 */
+ (FMIceLinkMediaBase*) mediaBase;
/*!
 * <div>
 * Removes a handler that is raised when the first audio track is destroyed.
 * </div>
 */
- (void) removeOnAudioDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised whenever the level of
 * the first audio track is calculated.
 * </div>
 */
- (void) removeOnAudioLevel:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the first video track is destroyed.
 * </div>
 */
- (void) removeOnVideoDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised whenever the size of
 * the first video track is calculated.
 * </div>
 */
- (void) removeOnVideoSize:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets a value indicating the gain
 * (input amplification) of the first audio track.
 * </div>
 */
- (void) setAudioGain:(double)value;
/*!
 * <div>
 * Sets a value indicating whether the
 * first audio track is muted.
 * </div>
 */
- (void) setAudioMuted:(bool)value;
/*!
 * <div>
 * Sets a value indicating the volume
 * (output resistance) of the first audio track.
 * </div>
 */
- (void) setAudioVolume:(double)value;
/*!
 * <div>
 * Sets the identifier.
 * </div>
 */
- (void) setId:(NSString*)value;
/*!
 * <div>
 * Sets a value indicating whether the
 * first video track is muted.
 * </div>
 */
- (void) setVideoMuted:(bool)value;
/*!
 * <div>
 * Gets a value indicating whether the
 * first video track is muted.
 * </div>
 */
- (bool) videoMuted;
/*!
 * <div>
 * Gets the size of the first video track.
 * </div>
 */
- (FMIceLinkSize*) videoSize;
/*!
 * <div>
 * Gets the first video track.
 * </div>
 */
- (NSObject<FMIceLinkIVideoTrack>*) videoTrack;
/*!
 * <div>
 * Gets the video tracks.
 * </div>
 */
- (NSMutableArray*) videoTracks;

@end

/*!
 * <div>
 * A collection of audio/video tracks.
 * </div>
 */
@interface FMIceLinkMedia : FMIceLinkMediaBase

/*!
 * <div>
 * Adds an audio track.
 * </div>
 * @param audioTrack The audio track.
 */
- (void) addAudioTrack:(FMIceLinkAudioTrack*)audioTrack;
/*!
 * <div>
 * Adds a handler that is raised when the first audio track is destroyed.
 * </div>
 */
- (void) addOnAudioDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the level of
 * the first audio track is calculated.
 * </div>
 */
- (void) addOnAudioLevel:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the level of
 * the first audio track is calculated.
 * </div>
 */
- (void (^)(void(^)(double))) addOnAudioLevelWithBlock;
/*!
 * <div>
 * Adds a handler that is raised whenever the level of
 * the first audio track is calculated.
 * </div>
 */
- (void) addOnAudioLevelWithBlock:(void(^)(double))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the first video track is destroyed.
 * </div>
 */
- (void) addOnVideoDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the size of
 * the first video track is calculated.
 * </div>
 */
- (void) addOnVideoSize:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the size of
 * the first video track is calculated.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkSize*))) addOnVideoSizeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised whenever the size of
 * the first video track is calculated.
 * </div>
 */
- (void) addOnVideoSizeWithBlock:(void(^)(FMIceLinkSize*))valueBlock;
/*!
 * <div>
 * Adds a video track.
 * </div>
 * @param videoTrack The video track.
 */
- (void) addVideoTrack:(FMIceLinkVideoTrack*)videoTrack;
/*!
 * <div>
 * Creates an array of tracks from a list of audio tracks.
 * </div>
 * @param tracks The list of tracks.
 */
- (NSMutableArray*) arrayFromAudioTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Creates an array of tracks from a list of video tracks.
 * </div>
 * @param tracks The list of tracks.
 */
- (NSMutableArray*) arrayFromVideoTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Gets the audio tracks.
 * </div>
 */
- (NSMutableArray*) audioTracks;
/*!
 * <div>
 * Creates an audio track collection.
 * </div>
 * @return
 */
- (NSMutableArray*) createAudioTrackCollection;
/*!
 * <div>
 * Creates a video track collection.
 * </div>
 * @return
 */
- (NSMutableArray*) createVideoTrackCollection;
/*!
 * <div>
 * Destroys this media.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Grabs the next frame from the first video track, once it's rendered.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) grabVideoFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMedia`2 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets a value indicating whether audio is being recorded.
 * </div>
 */
- (bool) isRecordingAudio;
/*!
 * <div>
 * Gets a value indicating whether video is being recorded.
 * </div>
 */
- (bool) isRecordingVideo;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMedia`2 class.
 * </div>
 */
+ (FMIceLinkMedia*) media;
/*!
 * <div>
 * Removes an audio track.
 * </div>
 * @param audioTrack The audio track.
 */
- (bool) removeAudioTrack:(FMIceLinkAudioTrack*)audioTrack;
/*!
 * <div>
 * Removes a handler that is raised when the first audio track is destroyed.
 * </div>
 */
- (void) removeOnAudioDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised whenever the level of
 * the first audio track is calculated.
 * </div>
 */
- (void) removeOnAudioLevel:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the first video track is destroyed.
 * </div>
 */
- (void) removeOnVideoDestroyed:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised whenever the size of
 * the first video track is calculated.
 * </div>
 */
- (void) removeOnVideoSize:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a video track.
 * </div>
 * @param videoTrack The video track.
 */
- (bool) removeVideoTrack:(FMIceLinkVideoTrack*)videoTrack;
/*!
 * <div>
 * Sets a value indicating whether audio is being recorded.
 * </div>
 */
- (void) setIsRecordingAudio:(bool)value;
/*!
 * <div>
 * Sets a value indicating whether video is being recorded.
 * </div>
 */
- (void) setIsRecordingVideo:(bool)value;
/*!
 * <div>
 * Gets the size of the first video track.
 * </div>
 */
- (FMIceLinkSize*) videoSize;
/*!
 * <div>
 * Gets the video tracks.
 * </div>
 */
- (NSMutableArray*) videoTracks;

@end

/*!
 * <div>
 * A collection of local audio/video track base methods.
 * </div>
 */
@interface FMIceLinkLocalMediaBase : FMIceLinkMedia

/*!
 * <div>
 * Aborts the start.
 * </div>
 * @param promise The promise.
 * @param exception The exception.
 */
- (void) abortStartWithPromise:(FMIceLinkPromise*)promise exception:(NSException*)exception;
/*!
 * <div>
 * Starts the local media.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) doStart;
/*!
 * <div>
 * Stops the local media.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) doStop;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLocalMediaBase`3 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkLocalMediaBase`3 class.
 * </div>
 */
+ (FMIceLinkLocalMediaBase*) localMediaBase;
/*!
 * <div>
 * Starts the media track sources.
 * </div>
 */
- (FMIceLinkFuture*) start;
/*!
 * <div>
 * Gets the state.
 * </div>
 */
- (FMIceLinkLocalMediaState) state;
/*!
 * <div>
 * Stops the media track sources.
 * </div>
 */
- (FMIceLinkFuture*) stop;

@end

/*!
 * <div>
 * A collection of local audio/video tracks.
 * </div>
 */
@interface FMIceLinkLocalMedia : FMIceLinkLocalMediaBase

/*!
 * <div>
 * Adds the audio track.
 * </div>
 * @param audioTrack The audio track.
 */
- (void) addAudioTrack:(FMIceLinkAudioTrack*)audioTrack;
/*!
 * <div>
 * Adds a handler that is raised when the first audio track is started.
 * </div>
 */
- (void) addOnAudioStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the first audio track is stopped.
 * </div>
 */
- (void) addOnAudioStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the first video track is started.
 * </div>
 */
- (void) addOnVideoStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds a handler that is raised when the first video track is stopped.
 * </div>
 */
- (void) addOnVideoStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Adds the video track.
 * </div>
 * @param videoTrack The video track.
 */
- (void) addVideoTrack:(FMIceLinkVideoTrack*)videoTrack;
/*!
 * <div>
 * Creates an array of tracks from a list of audio tracks.
 * </div>
 * @param tracks The list of tracks.
 */
- (NSMutableArray*) arrayFromAudioTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Creates an array of tracks from a list of video tracks.
 * </div>
 * @param tracks The list of tracks.
 */
- (NSMutableArray*) arrayFromVideoTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Gets the audio source.
 * </div>
 */
- (FMIceLinkAudioSource*) audioSource;
/*!
 * <div>
 * Gets the current audio source input
 * of the first audio track.
 * </div>
 */
- (FMIceLinkSourceInput*) audioSourceInput;
/*!
 * <div>
 * Gets the audio sources.
 * </div>
 */
- (NSMutableArray*) audioSources;
/*!
 * <div>
 * Changes the audio source input of the first
 * audio track while the media is active.
 * </div>
 * @param audioSourceInput The audio source input.
 * @return
 */
- (FMIceLinkFuture*) changeAudioSourceInput:(FMIceLinkSourceInput*)audioSourceInput;
/*!
 * <div>
 * Changes the video source input of the first
 * video track while the media is active.
 * </div>
 * @param videoSourceInput The video source input.
 * @return
 */
- (FMIceLinkFuture*) changeVideoSourceInput:(FMIceLinkSourceInput*)videoSourceInput;
/*!
 * <div>
 * Creates an audio track collection.
 * </div>
 * @return
 */
- (NSMutableArray*) createAudioTrackCollection;
/*!
 * <div>
 * Creates a video track collection.
 * </div>
 * @return
 */
- (NSMutableArray*) createVideoTrackCollection;
/*!
 * <div>
 * Starts the local media.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) doStart;
/*!
 * <div>
 * Stops the local media.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) doStop;
/*!
 * <div>
 * Gets the available audio source inputs
 * of the first audio track.
 * </div>
 * @return
 * A future with an array of audio source inputs.
 * 
 */
- (FMIceLinkFuture*) getAudioSourceInputs;
/*!
 * <div>
 * Gets the available video source inputs
 * of the first video track.
 * </div>
 * @return
 * A future with an array of video source inputs.
 * 
 */
- (FMIceLinkFuture*) getVideoSourceInputs;
- (instancetype) init;
+ (FMIceLinkLocalMedia*) localMedia;
/*!
 * <div>
 * Gets the audio/video sources.
 * </div>
 */
- (NSMutableArray*) mediaSources;
/*!
 * <div>
 * Removes the audio track.
 * </div>
 * @param audioTrack The audio track.
 * @return
 */
- (bool) removeAudioTrack:(FMIceLinkAudioTrack*)audioTrack;
/*!
 * <div>
 * Removes a handler that is raised when the first audio track is started.
 * </div>
 */
- (void) removeOnAudioStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the first audio track is stopped.
 * </div>
 */
- (void) removeOnAudioStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the first video track is started.
 * </div>
 */
- (void) removeOnVideoStarted:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes a handler that is raised when the first video track is stopped.
 * </div>
 */
- (void) removeOnVideoStopped:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Removes the video track.
 * </div>
 * @param videoTrack The video track.
 * @return
 */
- (bool) removeVideoTrack:(FMIceLinkVideoTrack*)videoTrack;
/*!
 * <div>
 * Sets the current audio source input
 * of the first audio track.
 * </div>
 */
- (void) setAudioSourceInput:(FMIceLinkSourceInput*)value;
/*!
 * <div>
 * Sets the current video source input
 * of the first video track.
 * </div>
 */
- (void) setVideoSourceInput:(FMIceLinkSourceInput*)value;
/*!
 * <div>
 * Gets the video source.
 * </div>
 */
- (FMIceLinkVideoSource*) videoSource;
/*!
 * <div>
 * Gets the current video source input
 * of the first video track.
 * </div>
 */
- (FMIceLinkSourceInput*) videoSourceInput;
/*!
 * <div>
 * Gets the video sources.
 * </div>
 */
- (NSMutableArray*) videoSources;

@end

@interface FMIceLinkLocalMediaStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkLocalMediaState)value;

@end

/*!
 * <div>
 * A Matroska element.
 * </div>
 */
@interface FMIceLinkMatroskaElement : NSObject

/*!
 * <div>
 * Compares two byte arrays for equality.
 * </div>
 * @param bytes1 The first byte array.
 * @param bytes2 The second byte array.
 */
+ (bool) compareWithBytes1:(NSMutableData*)bytes1 bytes2:(NSMutableData*)bytes2;
+ (FMIceLinkMatroskaElement*) element;
/*!
 * <div>
 * Serializes to a byte array.
 * </div>
 */
- (NSMutableData*) getBytes;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
- (instancetype) init;
/*!
 * <div>
 * Gets the total length of the element (including ID/size field), set after calling FMIceLinkMatroskaElement#getBytes.
 * </div>
 */
- (int) length;
/*!
 * <div>
 * Reads a boolean element from the stream.
 * </div>
 * @param value The value.
 */
+ (bool) readBool:(NSMutableData*)value;
/*!
 * <div>
 * Reads a date string element from the stream.
 * </div>
 * @param value The value.
 */
+ (NSDate*) readDate:(NSMutableData*)value;
/*!
 * <div>
 * Reads a double element from the stream.
 * </div>
 * @param value The value.
 */
+ (double) readDouble:(NSMutableData*)value;
/*!
 * <div>
 * Reads a float element from the stream.
 * </div>
 * @param value The value.
 */
+ (float) readFloat:(NSMutableData*)value;
/*!
 * <div>
 * Reads a GUID element from the stream.
 * </div>
 * @param value The value.
 */
+ (FMIceLinkGuid*) readGuid:(NSMutableData*)value;
/*!
 * <div>
 * Reads a binary ID from the stream.
 * </div>
 * @param bytes The byte array.
 * @param offset The offset into the byte array.
 * @param offsetPlus The offset plus the amount read.
 */
+ (NSMutableData*) readIdWithBytes:(NSMutableData*)bytes offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a signed integer element from the byte array.
 * </div>
 * @param value The value.
 */
+ (long long) readSignedInteger:(NSMutableData*)value;
/*!
 * <div>
 * Reads an ASCII string element from the stream.
 * </div>
 * @param value The value.
 */
+ (NSString*) readString:(NSMutableData*)value;
/*!
 * <div>
 * Reads an unsigned integer element from the byte array.
 * </div>
 * @param value The value.
 */
+ (long long) readUnsignedInteger:(NSMutableData*)value;
/*!
 * <div>
 * Reads a UTF-8 string element from the stream.
 * </div>
 * @param value The value.
 */
+ (NSString*) readUtf8:(NSMutableData*)value;
/*!
 * <div>
 * Reads a binary value from the stream.
 * </div>
 * @param bytes The byte array.
 * @param offset The offset into the byte array.
 * @param offsetPlus The offset plus the amount read.
 */
+ (NSMutableData*) readValueWithBytes:(NSMutableData*)bytes offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Reads a variable integer ("vint") from the byte array.
 * </div>
 * @param bytes The byte array.
 * @param offset The offset into the byte array.
 * @param offsetPlus The offset plus the amount read.
 */
+ (long long) readVariableIntegerWithBytes:(NSMutableData*)bytes offset:(int)offset offsetPlus:(int*)offsetPlus;
/*!
 * <div>
 * Serializes a variable integer.
 * </div>
 * @param value The value.
 */
+ (NSMutableData*) serializeVariableInteger:(long long)value;
/*!
 * <div>
 * Serializes a variable integer using a fixed length.
 * </div>
 * @param value The value.
 * @param length The length to use.
 */
+ (NSMutableData*) serializeVariableInteger:(long long)value length:(int)length;
/*!
 * <div>
 * Sets the length of the size field, in bytes.
 * Defaults to zero (variable size).
 * </div>
 */
- (void) setSizeLength:(int)value;
/*!
 * <div>
 * Sets whether to include default values
 * when serializing.
 * </div>
 */
- (void) setWriteDefaultValues:(bool)value;
/*!
 * <div>
 * Gets the size of the element (excluding ID/size field), set after calling FMIceLinkMatroskaElement#getBytes.
 * </div>
 */
- (int) size;
/*!
 * <div>
 * Gets the length of the size field, in bytes.
 * Defaults to zero (variable size).
 * </div>
 */
- (int) sizeLength;
/*!
 * <div>
 * Writes a binary element to the stream.
 * </div>
 * @param value The value to write.
 * @param idValue The ID of the value.
 * @param stream The stream to write.
 */
- (void) write:(NSMutableData*)value id:(NSMutableData*)idValue stream:(FMIceLinkByteOutputStream*)stream;
/*!
 * <div>
 * Writes a boolean element to the stream.
 * </div>
 * @param value The value to write.
 * @param idValue The ID of the value.
 * @param stream The stream to write.
 */
- (void) writeBool:(bool)value id:(NSMutableData*)idValue stream:(FMIceLinkByteOutputStream*)stream;
/*!
 * <div>
 * Writes a date element to the stream.
 * </div>
 * @param value The value to write.
 * @param idValue The ID of the value.
 * @param stream The stream to write.
 */
- (void) writeDate:(NSDate*)value id:(NSMutableData*)idValue stream:(FMIceLinkByteOutputStream*)stream;
/*!
 * <div>
 * Gets whether to include default values
 * when serializing.
 * </div>
 */
- (bool) writeDefaultValues;
/*!
 * <div>
 * Writes a double element to the stream.
 * </div>
 * @param value The value to write.
 * @param idValue The ID of the value.
 * @param stream The stream to write.
 */
- (void) writeDouble:(double)value id:(NSMutableData*)idValue stream:(FMIceLinkByteOutputStream*)stream;
/*!
 * <div>
 * Writes a float element to the stream.
 * </div>
 * @param value The value to write.
 * @param idValue The ID of the value.
 * @param stream The stream to write.
 */
- (void) writeFloat:(float)value id:(NSMutableData*)idValue stream:(FMIceLinkByteOutputStream*)stream;
/*!
 * <div>
 * Writes a GUID element to the stream.
 * </div>
 * @param value The value to write.
 * @param idValue The ID of the value.
 * @param stream The stream to write.
 */
- (void) writeGuid:(FMIceLinkGuid*)value id:(NSMutableData*)idValue stream:(FMIceLinkByteOutputStream*)stream;
/*!
 * <div>
 * Writes an signed integer element to the stream.
 * </div>
 * @param value The value to write.
 * @param idValue The ID of the value.
 * @param stream The stream to write.
 */
- (void) writeSignedInteger:(long long)value id:(NSMutableData*)idValue stream:(FMIceLinkByteOutputStream*)stream;
/*!
 * <div>
 * Writes an ASCII string element to the stream.
 * </div>
 * @param value The value to write.
 * @param idValue The ID of the value.
 * @param stream The stream to write.
 */
- (void) writeString:(NSString*)value id:(NSMutableData*)idValue stream:(FMIceLinkByteOutputStream*)stream;
/*!
 * <div>
 * Writes an unsigned integer element to the stream.
 * </div>
 * @param value The value to write.
 * @param idValue The ID of the value.
 * @param stream The stream to write.
 */
- (void) writeUnsignedInteger:(long long)value id:(NSMutableData*)idValue stream:(FMIceLinkByteOutputStream*)stream;
/*!
 * <div>
 * Writes a UTF-8 string element to the stream.
 * </div>
 * @param value The value to write.
 * @param idValue The ID of the value.
 * @param stream The stream to write.
 */
- (void) writeUtf8:(NSString*)value id:(NSMutableData*)idValue stream:(FMIceLinkByteOutputStream*)stream;
/*!
 * <div>
 * Writes a variable integer ("vint") to the stream.
 * </div>
 * @param value The value to write.
 * @param stream The stream to write.
 */
- (void) writeVariableInteger:(long long)value stream:(FMIceLinkByteOutputStream*)stream;
/*!
 * <div>
 * Writes a variable integer ("vint") to the stream using a fixed length.
 * </div>
 * @param value The value to write.
 * @param stream The stream to write.
 * @param length The length to use.
 */
- (void) writeVariableInteger:(long long)value stream:(FMIceLinkByteOutputStream*)stream length:(int)length;

@end

/*!
 * <div>
 * A Matroska audio element.
 * </div>
 */
@interface FMIceLinkMatroskaAudio : FMIceLinkMatroskaElement

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudio class.
 * </div>
 */
+ (FMIceLinkMatroskaAudio*) audio;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudio class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaAudio*) audioWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the bit depth.
 * </div>
 */
- (FMIceLinkNullableLong*) bitDepth;
/*!
 * <div>
 * Gets the channels.
 * Defaults to 1.
 * </div>
 */
- (long long) channels;
/*!
 * <div>
 * Gets the default channels.
 * </div>
 */
+ (long long) defaultChannels;
/*!
 * <div>
 * Gets the default sampling frequency.
 * </div>
 */
+ (long long) defaultSamplingFrequency;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudio class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudio class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the output sampling frequency.
 * </div>
 */
- (FMIceLinkNullableLong*) outputSamplingFrequency;
/*!
 * <div>
 * Gets the sampling frequency.
 * Defaults to 8000.
 * </div>
 */
- (long long) samplingFrequency;
/*!
 * <div>
 * Sets the bit depth.
 * </div>
 */
- (void) setBitDepth:(FMIceLinkNullableLong*)value;
/*!
 * <div>
 * Sets the channels.
 * Defaults to 1.
 * </div>
 */
- (void) setChannels:(long long)value;
/*!
 * <div>
 * Sets the output sampling frequency.
 * </div>
 */
- (void) setOutputSamplingFrequency:(FMIceLinkNullableLong*)value;
/*!
 * <div>
 * Sets the sampling frequency.
 * Defaults to 8000.
 * </div>
 */
- (void) setSamplingFrequency:(long long)value;

@end

/*!
 * <div>
 * A Matroska audio recorder.
 * </div>
 */
@interface FMIceLinkMatroskaAudioRecorder : FMIceLinkAudioRecorder

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudioRecorder class.
 * </div>
 * @param path The path.
 * @param inputFormat The input format.
 */
+ (FMIceLinkMatroskaAudioRecorder*) audioRecorderWithPath:(NSString*)path inputFormat:(FMIceLinkAudioFormat*)inputFormat;
/*!
 * <div>
 * Updates the file header.
 * </div>
 */
- (void) doUpdateHeader;
/*!
 * <div>
 * Writes the file header.
 * </div>
 */
- (void) doWriteHeader;
/*!
 * <div>
 * Write an encoded video frame.
 * </div>
 * @param buffer The encoded buffer.
 * @param presentationTimestamp The presentation timestamp.
 * @return true if the encoded frame was written successfully; otherwise, false
 */
- (bool) doWriteWithBuffer:(FMIceLinkAudioBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudioRecorder class.
 * </div>
 * @param path The path.
 * @param inputFormat The input format.
 */
- (instancetype) initWithPath:(NSString*)path inputFormat:(FMIceLinkAudioFormat*)inputFormat;

@end

/*!
 * <div>
 * A Matroska-file-based audio sink.
 * </div>
 */
@interface FMIceLinkMatroskaAudioSink : FMIceLinkAudioSink

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudioSink class.
 * </div>
 * @param path The path.
 */
+ (FMIceLinkMatroskaAudioSink*) audioSinkWithPath:(NSString*)path;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudioSink class.
 * </div>
 * @param path The path.
 * @param format The format.
 */
+ (FMIceLinkMatroskaAudioSink*) audioSinkWithPath:(NSString*)path format:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudioSink class.
 * </div>
 * @param path The path.
 * @param input The input.
 */
+ (FMIceLinkMatroskaAudioSink*) audioSinkWithPath:(NSString*)path input:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudioSink class.
 * </div>
 * @param path The path.
 */
- (instancetype) initWithPath:(NSString*)path;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudioSink class.
 * </div>
 * @param path The path.
 * @param format The format.
 */
- (instancetype) initWithPath:(NSString*)path format:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudioSink class.
 * </div>
 * @param path The path.
 * @param input The input.
 */
- (instancetype) initWithPath:(NSString*)path input:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the path.
 * </div>
 */
- (NSString*) path;

@end

/*!
 * <div>
 * A Matroska block element.
 * </div>
 */
@interface FMIceLinkMatroskaBlock : FMIceLinkMatroskaElement

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaBlock class.
 * </div>
 */
+ (FMIceLinkMatroskaBlock*) block;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaBlock class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaBlock*) blockWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the data.
 * </div>
 */
- (NSMutableData*) data;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the flags.
 * </div>
 */
- (uint8_t) flags;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaBlock class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaBlock class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Sets the data.
 * </div>
 */
- (void) setData:(NSMutableData*)value;
/*!
 * <div>
 * Sets the flags.
 * </div>
 */
- (void) setFlags:(uint8_t)value;
/*!
 * <div>
 * Sets the timecode.
 * </div>
 */
- (void) setTimecode:(int)value;
/*!
 * <div>
 * Sets the track number.
 * </div>
 */
- (void) setTrackNumber:(long long)value;
/*!
 * <div>
 * Gets the timecode.
 * </div>
 */
- (int) timecode;
/*!
 * <div>
 * Gets the track number.
 * </div>
 */
- (long long) trackNumber;

@end

/*!
 * <div>
 * Valid Matroska block element flags.
 * </div>
 */
@interface FMIceLinkMatroskaBlockFlags : NSObject

+ (FMIceLinkMatroskaBlockFlags*) blockFlags;
/*!
 * <div>
 * Gets a value indicating EBML lacing.
 * </div>
 */
+ (uint8_t) ebmlLacing;
/*!
 * <div>
 * Gets a value indicating fixed size lacing.
 * </div>
 */
+ (uint8_t) fixedSizeLacing;
- (instancetype) init;
/*!
 * <div>
 * Gets a value indicating invisible.
 * </div>
 */
+ (uint8_t) invisible;
/*!
 * <div>
 * Gets a value indicating no lacing.
 * </div>
 */
+ (uint8_t) noLacing;
/*!
 * <div>
 * Gets a value indicating Xiph lacing.
 * </div>
 */
+ (uint8_t) xiphLacing;

@end

/*!
 * <div>
 * A Matroska block group element.
 * </div>
 */
@interface FMIceLinkMatroskaBlockGroup : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the block element.
 * </div>
 */
- (FMIceLinkMatroskaBlock*) block;
/*!
 * <div>
 * Gets the duration of the block.
 * </div>
 */
- (FMIceLinkNullableLong*) blockDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaBlockGroup class.
 * </div>
 */
+ (FMIceLinkMatroskaBlockGroup*) blockGroup;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaBlockGroup class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaBlockGroup*) blockGroupWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaBlockGroup class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaBlockGroup class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the reference blocks.
 * </div>
 */
- (NSMutableArray*) referenceBlocks;
/*!
 * <div>
 * Sets the block element.
 * </div>
 */
- (void) setBlock:(FMIceLinkMatroskaBlock*)value;
/*!
 * <div>
 * Sets the duration of the block.
 * </div>
 */
- (void) setBlockDuration:(FMIceLinkNullableLong*)value;
/*!
 * <div>
 * Sets the reference blocks.
 * </div>
 */
- (void) setReferenceBlocks:(NSMutableArray*)value;

@end

/*!
 * <div>
 * A Matroska cluster element.
 * </div>
 */
@interface FMIceLinkMatroskaCluster : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the block group elements.
 * </div>
 */
- (NSMutableArray*) blockGroups;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaCluster class.
 * </div>
 */
+ (FMIceLinkMatroskaCluster*) cluster;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaCluster class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaCluster*) clusterWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the default timecode.
 * </div>
 */
+ (long long) defaultTimecode;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaCluster class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaCluster class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Merges another FMIceLinkMatroskaCluster into this one.
 * </div>
 * @param cluster The FMIceLinkMatroskaCluster.
 */
- (void) mergeWithCluster:(FMIceLinkMatroskaCluster*)cluster;
/*!
 * <div>
 * Gets the position.
 * </div>
 */
- (FMIceLinkNullableLong*) position;
/*!
 * <div>
 * Gets the previous size.
 * </div>
 */
- (FMIceLinkNullableLong*) prevSize;
/*!
 * <div>
 * Sets the block group elements.
 * </div>
 */
- (void) setBlockGroups:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the position.
 * </div>
 */
- (void) setPosition:(FMIceLinkNullableLong*)value;
/*!
 * <div>
 * Sets the previous size.
 * </div>
 */
- (void) setPrevSize:(FMIceLinkNullableLong*)value;
/*!
 * <div>
 * Sets the simple block elements.
 * </div>
 */
- (void) setSimpleBlocks:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the timecode.
 * </div>
 */
- (void) setTimecode:(long long)value;
/*!
 * <div>
 * Gets the simple block elements.
 * </div>
 */
- (NSMutableArray*) simpleBlocks;
/*!
 * <div>
 * Gets the timecode.
 * </div>
 */
- (long long) timecode;

@end

/*!
 * <div>
 * Valid Matroska content compression element algorithms.
 * </div>
 */
@interface FMIceLinkMatroskaContentCompAlgo : NSObject

/*!
 * <div>
 * Gets a value indicating bzlib.
 * </div>
 */
+ (long long) bzlib;
+ (FMIceLinkMatroskaContentCompAlgo*) contentCompAlgo;
/*!
 * <div>
 * Gets a value indicating header striping.
 * </div>
 */
+ (long long) headerStriping;
- (instancetype) init;
/*!
 * <div>
 * Gets a value indicating lzo1x.
 * </div>
 */
+ (long long) lzo1x;
/*!
 * <div>
 * Gets a value indicating zlib.
 * </div>
 */
+ (long long) zlib;

@end

/*!
 * <div>
 * A Matroska content compression element.
 * </div>
 */
@interface FMIceLinkMatroskaContentCompression : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the content compression algorithm.
 * </div>
 */
- (long long) contentCompAlgo;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaContentCompression class.
 * </div>
 */
+ (FMIceLinkMatroskaContentCompression*) contentCompression;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaContentCompression class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaContentCompression*) contentCompressionWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the content compression settings.
 * </div>
 */
- (NSMutableData*) contentCompSettings;
/*!
 * <div>
 * Gets the default content compression algorithm.
 * </div>
 */
+ (long long) defaultContentCompAlgo;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaContentCompression class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaContentCompression class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Sets the content compression algorithm.
 * </div>
 */
- (void) setContentCompAlgo:(long long)value;
/*!
 * <div>
 * Sets the content compression settings.
 * </div>
 */
- (void) setContentCompSettings:(NSMutableData*)value;

@end

/*!
 * <div>
 * A Matroska content encoding element.
 * </div>
 */
@interface FMIceLinkMatroskaContentEncoding : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the content compression element.
 * </div>
 */
- (FMIceLinkMatroskaContentCompression*) contentCompression;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaContentEncoding class.
 * </div>
 */
+ (FMIceLinkMatroskaContentEncoding*) contentEncoding;
/*!
 * <div>
 * Gets the content encoding order.
 * </div>
 */
- (long long) contentEncodingOrder;
/*!
 * <div>
 * Gets the content encoding scope.
 * </div>
 */
- (long long) contentEncodingScope;
/*!
 * <div>
 * Gets the content encoding type.
 * </div>
 */
- (long long) contentEncodingType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaContentEncoding class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaContentEncoding*) contentEncodingWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the default content encoding order.
 * </div>
 */
+ (long long) defaultContentEncodingOrder;
/*!
 * <div>
 * Gets the default content encoding scope.
 * </div>
 */
+ (long long) defaultContentEncodingScope;
/*!
 * <div>
 * Gets the default content encoding type.
 * </div>
 */
+ (long long) defaultContentEncodingType;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaContentEncoding class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaContentEncoding class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Sets the content compression element.
 * </div>
 */
- (void) setContentCompression:(FMIceLinkMatroskaContentCompression*)value;
/*!
 * <div>
 * Sets the content encoding order.
 * </div>
 */
- (void) setContentEncodingOrder:(long long)value;
/*!
 * <div>
 * Sets the content encoding scope.
 * </div>
 */
- (void) setContentEncodingScope:(long long)value;
/*!
 * <div>
 * Sets the content encoding type.
 * </div>
 */
- (void) setContentEncodingType:(long long)value;

@end

/*!
 * <div>
 * A Matroska content encodings element.
 * </div>
 */
@interface FMIceLinkMatroskaContentEncodings : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the content encoding elements.
 * </div>
 */
- (NSMutableArray*) contentEncodingElements;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaContentEncodings class.
 * </div>
 */
+ (FMIceLinkMatroskaContentEncodings*) contentEncodings;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaContentEncodings class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaContentEncodings*) contentEncodingsWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaContentEncodings class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaContentEncodings class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Sets the content encoding elements.
 * </div>
 */
- (void) setContentEncodingElements:(NSMutableArray*)value;

@end

/*!
 * <div>
 * Valid Matroska content encoding element scopes.
 * </div>
 */
@interface FMIceLinkMatroskaContentEncodingScope : NSObject

/*!
 * <div>
 * Gets a value indicating all.
 * </div>
 */
+ (long long) all;
/*!
 * <div>
 * Gets a value indicating codec private.
 * </div>
 */
+ (long long) codecPrivate;
/*!
 * <div>
 * Gets a value indicating content compression in next content encoding.
 * </div>
 */
+ (long long) contentCompressionInNextContentEncoding;
+ (FMIceLinkMatroskaContentEncodingScope*) contentEncodingScope;
- (instancetype) init;

@end

/*!
 * <div>
 * A Matroska EBML element.
 * </div>
 */
@interface FMIceLinkMatroskaEbml : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the default document type.
 * </div>
 */
+ (NSString*) defaultDocType;
/*!
 * <div>
 * Gets the default document type read version.
 * </div>
 */
+ (long long) defaultDocTypeReadVersion;
/*!
 * <div>
 * Gets the default document type version.
 * </div>
 */
+ (long long) defaultDocTypeVersion;
/*!
 * <div>
 * Gets the default EBML maximum identifier length.
 * </div>
 */
+ (long long) defaultEbmlMaxIdLength;
/*!
 * <div>
 * Gets the default EBML maximum size length.
 * </div>
 */
+ (long long) defaultEbmlMaxSizeLength;
/*!
 * <div>
 * Gets the default EBML read version.
 * </div>
 */
+ (long long) defaultEbmlReadVersion;
/*!
 * <div>
 * Gets the default EBML version.
 * </div>
 */
+ (long long) defaultEbmlVersion;
/*!
 * <div>
 * Gets the document type.
 * </div>
 */
- (NSString*) docType;
/*!
 * <div>
 * Gets the document type read version.
 * </div>
 */
- (long long) docTypeReadVersion;
/*!
 * <div>
 * Gets the document type version.
 * </div>
 */
- (long long) docTypeVersion;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaEbml class.
 * </div>
 */
+ (FMIceLinkMatroskaEbml*) ebml;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the EBML maximum identifier length.
 * </div>
 */
- (long long) ebmlMaxIdLength;
/*!
 * <div>
 * Gets the EBML maximum size length.
 * </div>
 */
- (long long) ebmlMaxSizeLength;
/*!
 * <div>
 * Gets the EBML read version.
 * </div>
 */
- (long long) ebmlReadVersion;
/*!
 * <div>
 * Gets the EBML version.
 * </div>
 */
- (long long) ebmlVersion;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaEbml class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaEbml*) ebmlWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaEbml class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaEbml class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Merges another FMIceLinkMatroskaEbml into this one.
 * </div>
 * @param ebml The FMIceLinkMatroskaEbml.
 */
- (void) mergeWithEbml:(FMIceLinkMatroskaEbml*)ebml;
/*!
 * <div>
 * Sets the document type.
 * </div>
 */
- (void) setDocType:(NSString*)value;
/*!
 * <div>
 * Sets the document type read version.
 * </div>
 */
- (void) setDocTypeReadVersion:(long long)value;
/*!
 * <div>
 * Sets the document type version.
 * </div>
 */
- (void) setDocTypeVersion:(long long)value;
/*!
 * <div>
 * Sets the EBML maximum identifier length.
 * </div>
 */
- (void) setEbmlMaxIdLength:(long long)value;
/*!
 * <div>
 * Sets the EBML maximum size length.
 * </div>
 */
- (void) setEbmlMaxSizeLength:(long long)value;
/*!
 * <div>
 * Sets the EBML read version.
 * </div>
 */
- (void) setEbmlReadVersion:(long long)value;
/*!
 * <div>
 * Sets the EBML version.
 * </div>
 */
- (void) setEbmlVersion:(long long)value;

@end

/*!
 * <div>
 * A Matroska file.
 * </div>
 */
@interface FMIceLinkMatroskaFile : NSObject

/*!
 * <div>
 * Gets the EBML element.
 * </div>
 */
- (FMIceLinkMatroskaEbml*) ebml;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaFile class.
 * </div>
 */
+ (FMIceLinkMatroskaFile*) file;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaFile class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaFile*) fileWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Serializes to a byte array.
 * </div>
 */
- (NSMutableData*) getBytes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaFile class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaFile class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Merges another FMIceLinkMatroskaFile into this one.
 * </div>
 * @param file The FMIceLinkMatroskaFile.
 */
- (void) mergeWithFile:(FMIceLinkMatroskaFile*)file;
/*!
 * <div>
 * Gets the segment element.
 * </div>
 */
- (FMIceLinkMatroskaSegment*) segment;
/*!
 * <div>
 * Sets the EBML element.
 * </div>
 */
- (void) setEbml:(FMIceLinkMatroskaEbml*)value;
/*!
 * <div>
 * Sets the segment element.
 * </div>
 */
- (void) setSegment:(FMIceLinkMatroskaSegment*)value;

@end

/*!
 * <div>
 * A Matroska-file-based audio source.
 * </div>
 */
@interface FMIceLinkMatroskaAudioSource : FMIceLinkAudioSource

/*!
 * <div>
 * Adds a handler that is raised when the file ends.
 * </div>
 */
- (void) addOnEnded:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudioSource class.
 * </div>
 * @param path The path.
 */
+ (FMIceLinkMatroskaAudioSource*) audioSourceWithPath:(NSString*)path;
/*!
 * <div>
 * Creates an Opus decoder.
 * </div>
 * @return
 */
- (FMIceLinkAudioDecoder*) createOpusDecoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a PCMA decoder.
 * </div>
 * @return
 */
- (FMIceLinkAudioDecoder*) createPcmaDecoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a PCMU decoder.
 * </div>
 * @return
 */
- (FMIceLinkAudioDecoder*) createPcmuDecoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Starts the source.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) doStart;
/*!
 * <div>
 * Stops the source.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) doStop;
/*!
 * <div>
 * Gets the source inputs (tracks).
 * </div>
 * @return
 */
- (FMIceLinkFuture*) getInputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaAudioSource class.
 * </div>
 * @param path The path.
 */
- (instancetype) initWithPath:(NSString*)path;
/*!
 * <div>
 * Gets the label.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the path.
 * </div>
 */
- (NSString*) path;
/*!
 * <div>
 * Removes a handler that is raised when the file ends.
 * </div>
 */
- (void) removeOnEnded:(FMIceLinkAction0*)value;

@end

/*!
 * <div>
 * A Matroska-file-based video source.
 * </div>
 */
@interface FMIceLinkMatroskaVideoSource : FMIceLinkVideoSource

/*!
 * <div>
 * Adds a handler that is raised when the file ends.
 * </div>
 */
- (void) addOnEnded:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Creates an H.264 decoder.
 * </div>
 * @return
 */
- (FMIceLinkVideoDecoder*) createH264Decoder;
/*!
 * <div>
 * Creates a VP8 decoder.
 * </div>
 * @return
 */
- (FMIceLinkVideoDecoder*) createVp8Decoder;
/*!
 * <div>
 * Creates a VP9 decoder.
 * </div>
 * @return
 */
- (FMIceLinkVideoDecoder*) createVp9Decoder;
/*!
 * <div>
 * Starts the source.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) doStart;
/*!
 * <div>
 * Stops the source.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) doStop;
/*!
 * <div>
 * Gets the source inputs (tracks).
 * </div>
 * @return
 */
- (FMIceLinkFuture*) getInputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideoSource class.
 * </div>
 * @param path The path.
 */
- (instancetype) initWithPath:(NSString*)path;
/*!
 * <div>
 * Gets the label.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the path.
 * </div>
 */
- (NSString*) path;
/*!
 * <div>
 * Removes a handler that is raised when the file ends.
 * </div>
 */
- (void) removeOnEnded:(FMIceLinkAction0*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideoSource class.
 * </div>
 * @param path The path.
 */
+ (FMIceLinkMatroskaVideoSource*) videoSourceWithPath:(NSString*)path;

@end

/*!
 * <div>
 * A Matroska seek element.
 * </div>
 */
@interface FMIceLinkMatroskaSeek : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSeek class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSeek class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSeek class.
 * </div>
 */
+ (FMIceLinkMatroskaSeek*) seek;
/*!
 * <div>
 * Gets the seek identifier.
 * </div>
 */
- (long long) seekId;
/*!
 * <div>
 * Gets the seek position.
 * </div>
 */
- (long long) seekPosition;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSeek class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaSeek*) seekWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Sets the seek identifier.
 * </div>
 */
- (void) setSeekId:(long long)value;
/*!
 * <div>
 * Sets the seek position.
 * </div>
 */
- (void) setSeekPosition:(long long)value;

@end

/*!
 * <div>
 * A Matroska seek head element.
 * </div>
 */
@interface FMIceLinkMatroskaSeekHead : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSeekHead class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSeekHead class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSeekHead class.
 * </div>
 */
+ (FMIceLinkMatroskaSeekHead*) seekHead;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSeekHead class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaSeekHead*) seekHeadWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the seek elements.
 * </div>
 */
- (NSMutableArray*) seeks;
/*!
 * <div>
 * Sets the seek elements.
 * </div>
 */
- (void) setSeeks:(NSMutableArray*)value;

@end

/*!
 * <div>
 * A Matroska segment element.
 * </div>
 */
@interface FMIceLinkMatroskaSegment : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the cluster elements.
 * </div>
 */
- (NSMutableArray*) clusters;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSegment class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSegment class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Merges another FMIceLinkMatroskaSegment into this one.
 * </div>
 * @param segment The FMIceLinkMatroskaSegment.
 */
- (void) mergeWithSegment:(FMIceLinkMatroskaSegment*)segment;
/*!
 * <div>
 * Gets the seek head elements.
 * </div>
 */
- (NSMutableArray*) seekHeads;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSegment class.
 * </div>
 */
+ (FMIceLinkMatroskaSegment*) segment;
/*!
 * <div>
 * Gets the segment info element.
 * </div>
 */
- (FMIceLinkMatroskaSegmentInfo*) segmentInfo;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSegment class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaSegment*) segmentWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Sets the cluster elements.
 * </div>
 */
- (void) setClusters:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the seek head elements.
 * </div>
 */
- (void) setSeekHeads:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the segment info element.
 * </div>
 */
- (void) setSegmentInfo:(FMIceLinkMatroskaSegmentInfo*)value;
/*!
 * <div>
 * Sets the track elements.
 * </div>
 */
- (void) setTracks:(NSMutableArray*)value;
/*!
 * <div>
 * Gets the track elements.
 * </div>
 */
- (NSMutableArray*) tracks;

@end

/*!
 * <div>
 * A Matroska segment info element.
 * </div>
 */
@interface FMIceLinkMatroskaSegmentInfo : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the date in UTC time.
 * </div>
 */
- (FMIceLinkNullableDate*) dateUtc;
/*!
 * <div>
 * Gets the default timecode scale.
 * </div>
 */
+ (long long) defaultTimecodeScale;
/*!
 * <div>
 * Gets the duration.
 * </div>
 */
- (FMIceLinkNullableFloat*) duration;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSegmentInfo class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSegmentInfo class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Merges another FMIceLinkMatroskaSegmentInfo into this one.
 * </div>
 * @param segmentInfo The FMIceLinkMatroskaSegmentInfo.
 */
- (void) mergeWithSegmentInfo:(FMIceLinkMatroskaSegmentInfo*)segmentInfo;
/*!
 * <div>
 * Gets the muxing application.
 * </div>
 */
- (NSString*) muxingApp;
/*!
 * <div>
 * Gets the next filename.
 * </div>
 */
- (NSString*) nextFilename;
/*!
 * <div>
 * Gets the next UID.
 * </div>
 */
- (FMIceLinkNullableGuid*) nextUid;
/*!
 * <div>
 * Gets the previous filename.
 * </div>
 */
- (NSString*) prevFilename;
/*!
 * <div>
 * Gets the previous UID.
 * </div>
 */
- (FMIceLinkNullableGuid*) prevUid;
/*!
 * <div>
 * Gets the segment filename.
 * </div>
 */
- (NSString*) segmentFilename;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSegmentInfo class.
 * </div>
 */
+ (FMIceLinkMatroskaSegmentInfo*) segmentInfo;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSegmentInfo class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaSegmentInfo*) segmentInfoWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the segment UID.
 * </div>
 */
- (FMIceLinkNullableGuid*) segmentUid;
/*!
 * <div>
 * Sets the date in UTC time.
 * </div>
 */
- (void) setDateUtc:(FMIceLinkNullableDate*)value;
/*!
 * <div>
 * Sets the duration.
 * </div>
 */
- (void) setDuration:(FMIceLinkNullableFloat*)value;
/*!
 * <div>
 * Sets the muxing application.
 * </div>
 */
- (void) setMuxingApp:(NSString*)value;
/*!
 * <div>
 * Sets the next filename.
 * </div>
 */
- (void) setNextFilename:(NSString*)value;
/*!
 * <div>
 * Sets the next UID.
 * </div>
 */
- (void) setNextUid:(FMIceLinkNullableGuid*)value;
/*!
 * <div>
 * Sets the previous filename.
 * </div>
 */
- (void) setPrevFilename:(NSString*)value;
/*!
 * <div>
 * Sets the previous UID.
 * </div>
 */
- (void) setPrevUid:(FMIceLinkNullableGuid*)value;
/*!
 * <div>
 * Sets the segment filename.
 * </div>
 */
- (void) setSegmentFilename:(NSString*)value;
/*!
 * <div>
 * Sets the segment UID.
 * </div>
 */
- (void) setSegmentUid:(FMIceLinkNullableGuid*)value;
/*!
 * <div>
 * Sets the timecode scale.
 * </div>
 */
- (void) setTimecodeScale:(long long)value;
/*!
 * <div>
 * Sets the title.
 * </div>
 */
- (void) setTitle:(NSString*)value;
/*!
 * <div>
 * Sets the writing application.
 * </div>
 */
- (void) setWritingApp:(NSString*)value;
/*!
 * <div>
 * Gets the timecode scale.
 * </div>
 */
- (long long) timecodeScale;
/*!
 * <div>
 * Gets the title.
 * </div>
 */
- (NSString*) title;
/*!
 * <div>
 * Gets the writing application.
 * </div>
 */
- (NSString*) writingApp;

@end

/*!
 * <div>
 * A Matroska simple block element.
 * </div>
 */
@interface FMIceLinkMatroskaSimpleBlock : FMIceLinkMatroskaBlock

/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSimpleBlock class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSimpleBlock class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSimpleBlock class.
 * </div>
 */
+ (FMIceLinkMatroskaSimpleBlock*) simpleBlock;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaSimpleBlock class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaSimpleBlock*) simpleBlockWithBytes:(NSMutableData*)bytes;

@end

/*!
 * <div>
 * Valid Matroska simple block element flags.
 * </div>
 */
@interface FMIceLinkMatroskaSimpleBlockFlags : FMIceLinkMatroskaBlockFlags

/*!
 * <div>
 * Gets a value indicating discardable.
 * </div>
 */
+ (uint8_t) discardable;
- (instancetype) init;
/*!
 * <div>
 * Gets a value indicating keyframe.
 * </div>
 */
+ (uint8_t) keyframe;
+ (FMIceLinkMatroskaSimpleBlockFlags*) simpleBlockFlags;

@end

/*!
 * <div>
 * A Matroska track element.
 * </div>
 */
@interface FMIceLinkMatroskaTrack : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaTrack class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaTrack class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Merges another FMIceLinkMatroskaTrack into this one.
 * </div>
 * @param track The FMIceLinkMatroskaTrack.
 */
- (void) mergeWithTrack:(FMIceLinkMatroskaTrack*)track;
/*!
 * <div>
 * Sets the track entry elements.
 * </div>
 */
- (void) setTrackEntries:(NSMutableArray*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaTrack class.
 * </div>
 */
+ (FMIceLinkMatroskaTrack*) track;
/*!
 * <div>
 * Gets the track entry elements.
 * </div>
 */
- (NSMutableArray*) trackEntries;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaTrack class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaTrack*) trackWithBytes:(NSMutableData*)bytes;

@end

/*!
 * <div>
 * A Matroska track entry element.
 * </div>
 */
@interface FMIceLinkMatroskaTrackEntry : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the attachment links.
 * </div>
 */
- (NSMutableArray*) attachmentLinks;
/*!
 * <div>
 * Gets the audio element.
 * </div>
 */
- (FMIceLinkMatroskaAudio*) audio;
/*!
 * <div>
 * Gets the codec delay.
 * </div>
 */
- (FMIceLinkNullableLong*) codecDelay;
/*!
 * <div>
 * Gets the codec identifier.
 * </div>
 */
- (NSString*) codecId;
/*!
 * <div>
 * Gets the codec name.
 * </div>
 */
- (NSString*) codecName;
/*!
 * <div>
 * Gets the codec private.
 * </div>
 */
- (NSMutableData*) codecPrivate;
/*!
 * <div>
 * Gets the content encoding elements.
 * </div>
 */
- (FMIceLinkMatroskaContentEncodings*) contentEncodings;
/*!
 * <div>
 * Gets the default duration.
 * </div>
 */
- (FMIceLinkNullableLong*) defaultDuration;
/*!
 * <div>
 * Gets the default default flag.
 * </div>
 */
+ (bool) defaultFlagDefault;
/*!
 * <div>
 * Gets the default enabled flag.
 * </div>
 */
+ (bool) defaultFlagEnabled;
/*!
 * <div>
 * Gets the default forced flag.
 * </div>
 */
+ (bool) defaultFlagForced;
/*!
 * <div>
 * Gets the default lacing flag.
 * </div>
 */
+ (bool) defaultFlagLacing;
/*!
 * <div>
 * Gets the default language.
 * </div>
 */
+ (NSString*) defaultLanguage;
/*!
 * <div>
 * Gets the default minimum cache.
 * </div>
 */
+ (long long) defaultMinCache;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the default flag.
 * </div>
 */
- (bool) flagDefault;
/*!
 * <div>
 * Gets the enabled flag.
 * </div>
 */
- (bool) flagEnabled;
/*!
 * <div>
 * Gets the forced flag.
 * </div>
 */
- (bool) flagForced;
/*!
 * <div>
 * Gets the lacing flag.
 * </div>
 */
- (bool) flagLacing;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the H.264 codec ID.
 * </div>
 */
+ (NSString*) h264CodecId;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaTrackEntry class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaTrackEntry class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the language.
 * </div>
 */
- (NSString*) language;
/*!
 * <div>
 * Gets the maximum cache.
 * </div>
 */
- (FMIceLinkNullableLong*) maxCache;
/*!
 * <div>
 * Gets the minimum cache.
 * </div>
 */
- (long long) minCache;
/*!
 * <div>
 * Gets the name.
 * </div>
 */
- (NSString*) name;
/*!
 * <div>
 * Gets the Opus codec ID.
 * </div>
 */
+ (NSString*) opusCodecId;
/*!
 * <div>
 * Gets the PCMA format tag.
 * </div>
 */
+ (int) pcmaFormatTag;
/*!
 * <div>
 * Gets the PCM codec ID.
 * </div>
 */
+ (NSString*) pcmCodecId;
/*!
 * <div>
 * Gets the PCMU format tag.
 * </div>
 */
+ (int) pcmuFormatTag;
/*!
 * <div>
 * Gets the seek pre-roll.
 * </div>
 */
- (FMIceLinkNullableLong*) seekPreRoll;
/*!
 * <div>
 * Sets the attachment links.
 * </div>
 */
- (void) setAttachmentLinks:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the audio element.
 * </div>
 */
- (void) setAudio:(FMIceLinkMatroskaAudio*)value;
/*!
 * <div>
 * Sets the codec delay.
 * </div>
 */
- (void) setCodecDelay:(FMIceLinkNullableLong*)value;
/*!
 * <div>
 * Sets the codec identifier.
 * </div>
 */
- (void) setCodecId:(NSString*)value;
/*!
 * <div>
 * Sets the codec name.
 * </div>
 */
- (void) setCodecName:(NSString*)value;
/*!
 * <div>
 * Sets the codec private.
 * </div>
 */
- (void) setCodecPrivate:(NSMutableData*)value;
/*!
 * <div>
 * Sets the content encoding elements.
 * </div>
 */
- (void) setContentEncodings:(FMIceLinkMatroskaContentEncodings*)value;
/*!
 * <div>
 * Sets the default duration.
 * </div>
 */
- (void) setDefaultDuration:(FMIceLinkNullableLong*)value;
/*!
 * <div>
 * Sets the default flag.
 * </div>
 */
- (void) setFlagDefault:(bool)value;
/*!
 * <div>
 * Sets the enabled flag.
 * </div>
 */
- (void) setFlagEnabled:(bool)value;
/*!
 * <div>
 * Sets the forced flag.
 * </div>
 */
- (void) setFlagForced:(bool)value;
/*!
 * <div>
 * Sets the lacing flag.
 * </div>
 */
- (void) setFlagLacing:(bool)value;
/*!
 * <div>
 * Sets the language.
 * </div>
 */
- (void) setLanguage:(NSString*)value;
/*!
 * <div>
 * Sets the maximum cache.
 * </div>
 */
- (void) setMaxCache:(FMIceLinkNullableLong*)value;
/*!
 * <div>
 * Sets the minimum cache.
 * </div>
 */
- (void) setMinCache:(long long)value;
/*!
 * <div>
 * Sets the name.
 * </div>
 */
- (void) setName:(NSString*)value;
/*!
 * <div>
 * Sets the seek pre-roll.
 * </div>
 */
- (void) setSeekPreRoll:(FMIceLinkNullableLong*)value;
/*!
 * <div>
 * Sets the track number.
 * </div>
 */
- (void) setTrackNumber:(long long)value;
/*!
 * <div>
 * Sets the track timecode scale.
 * </div>
 */
- (void) setTrackTimecodeScale:(FMIceLinkNullableFloat*)value;
/*!
 * <div>
 * Sets the track type.
 * </div>
 */
- (void) setTrackType:(long long)value;
/*!
 * <div>
 * Sets the track UID.
 * </div>
 */
- (void) setTrackUid:(long long)value;
/*!
 * <div>
 * Sets the video element.
 * </div>
 */
- (void) setVideo:(FMIceLinkMatroskaVideo*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaTrackEntry class.
 * </div>
 */
+ (FMIceLinkMatroskaTrackEntry*) trackEntry;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaTrackEntry class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaTrackEntry*) trackEntryWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the track number.
 * </div>
 */
- (long long) trackNumber;
/*!
 * <div>
 * Gets the track timecode scale.
 * </div>
 */
- (FMIceLinkNullableFloat*) trackTimecodeScale;
/*!
 * <div>
 * Gets the track type.
 * </div>
 */
- (long long) trackType;
/*!
 * <div>
 * Gets the track UID.
 * </div>
 */
- (long long) trackUid;
/*!
 * <div>
 * Gets the video element.
 * </div>
 */
- (FMIceLinkMatroskaVideo*) video;
/*!
 * <div>
 * Gets the VP8 codec ID.
 * </div>
 */
+ (NSString*) vp8CodecId;
/*!
 * <div>
 * Gets the VP8 codec ID.
 * </div>
 */
+ (NSString*) vp9CodecId;

@end

/*!
 * <div>
 * Valid Matroska track entry element types.
 * </div>
 */
@interface FMIceLinkMatroskaTrackType : NSObject

/*!
 * <div>
 * Gets a value indicating audio.
 * </div>
 */
+ (long long) audio;
/*!
 * <div>
 * Gets a value indicating button.
 * </div>
 */
+ (long long) button;
/*!
 * <div>
 * Gets a value indicating complex.
 * </div>
 */
+ (long long) complex;
/*!
 * <div>
 * Gets a value indicating control.
 * </div>
 */
+ (long long) control;
- (instancetype) init;
/*!
 * <div>
 * Gets a value indicating logo.
 * </div>
 */
+ (long long) logo;
/*!
 * <div>
 * Gets a value indicating subtitle.
 * </div>
 */
+ (long long) subtitle;
+ (FMIceLinkMatroskaTrackType*) trackType;
/*!
 * <div>
 * Gets a value indicating video.
 * </div>
 */
+ (long long) video;

@end

/*!
 * <div>
 * A Matroska video element.
 * </div>
 */
@interface FMIceLinkMatroskaVideo : FMIceLinkMatroskaElement

/*!
 * <div>
 * Gets the default display unit.
 * </div>
 */
+ (long long) defaultDisplayUnit;
/*!
 * <div>
 * Gets the default pixel crop bottom.
 * </div>
 */
+ (long long) defaultPixelCropBottom;
/*!
 * <div>
 * Gets the default pixel crop left.
 * </div>
 */
+ (long long) defaultPixelCropLeft;
/*!
 * <div>
 * Gets the default pixel crop right.
 * </div>
 */
+ (long long) defaultPixelCropRight;
/*!
 * <div>
 * Gets the default pixel crop top.
 * </div>
 */
+ (long long) defaultPixelCropTop;
/*!
 * <div>
 * Gets the display height.
 * </div>
 */
- (FMIceLinkNullableLong*) displayHeight;
/*!
 * <div>
 * Gets the display unit.
 * </div>
 */
- (long long) displayUnit;
/*!
 * <div>
 * Gets the display width.
 * </div>
 */
- (FMIceLinkNullableLong*) displayWidth;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
+ (NSMutableData*) ebmlId;
/*!
 * <div>
 * Gets the inner bytes.
 * </div>
 */
- (NSMutableData*) getInnerBytes;
/*!
 * <div>
 * Gets the EBML ID.
 * </div>
 */
- (NSMutableData*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideo class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideo class.
 * </div>
 * @param bytes The bytes.
 */
- (instancetype) initWithBytes:(NSMutableData*)bytes;
/*!
 * <div>
 * Gets the pixel crop bottom.
 * </div>
 */
- (long long) pixelCropBottom;
/*!
 * <div>
 * Gets the pixel crop left.
 * </div>
 */
- (long long) pixelCropLeft;
/*!
 * <div>
 * Gets the pixel crop right.
 * </div>
 */
- (long long) pixelCropRight;
/*!
 * <div>
 * Gets the pixel crop top.
 * </div>
 */
- (long long) pixelCropTop;
/*!
 * <div>
 * Gets the pixel height.
 * </div>
 */
- (long long) pixelHeight;
/*!
 * <div>
 * Gets the pixel width.
 * </div>
 */
- (long long) pixelWidth;
/*!
 * <div>
 * Sets the display height.
 * </div>
 */
- (void) setDisplayHeight:(FMIceLinkNullableLong*)value;
/*!
 * <div>
 * Sets the display unit.
 * </div>
 */
- (void) setDisplayUnit:(long long)value;
/*!
 * <div>
 * Sets the display width.
 * </div>
 */
- (void) setDisplayWidth:(FMIceLinkNullableLong*)value;
/*!
 * <div>
 * Sets the pixel crop bottom.
 * </div>
 */
- (void) setPixelCropBottom:(long long)value;
/*!
 * <div>
 * Sets the pixel crop left.
 * </div>
 */
- (void) setPixelCropLeft:(long long)value;
/*!
 * <div>
 * Sets the pixel crop right.
 * </div>
 */
- (void) setPixelCropRight:(long long)value;
/*!
 * <div>
 * Sets the pixel crop top.
 * </div>
 */
- (void) setPixelCropTop:(long long)value;
/*!
 * <div>
 * Sets the pixel height.
 * </div>
 */
- (void) setPixelHeight:(long long)value;
/*!
 * <div>
 * Sets the pixel width.
 * </div>
 */
- (void) setPixelWidth:(long long)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideo class.
 * </div>
 */
+ (FMIceLinkMatroskaVideo*) video;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideo class.
 * </div>
 * @param bytes The bytes.
 */
+ (FMIceLinkMatroskaVideo*) videoWithBytes:(NSMutableData*)bytes;

@end

/*!
 * <div>
 * Valid Matroska video element display units.
 * </div>
 */
@interface FMIceLinkMatroskaVideoDisplayUnit : NSObject

/*!
 * <div>
 * Gets a value indicating centimeters.
 * </div>
 */
+ (long long) centimeters;
/*!
 * <div>
 * Gets a value indicating display aspect ratio.
 * </div>
 */
+ (long long) displayAspectRatio;
/*!
 * <div>
 * Gets a value indicating inches.
 * </div>
 */
+ (long long) inches;
- (instancetype) init;
/*!
 * <div>
 * Gets a value indicating pixels.
 * </div>
 */
+ (long long) pixels;
+ (FMIceLinkMatroskaVideoDisplayUnit*) videoDisplayUnit;

@end

/*!
 * <div>
 * A Matroska video recorder.
 * </div>
 */
@interface FMIceLinkMatroskaVideoRecorder : FMIceLinkVideoRecorder

/*!
 * <div>
 * Updates the file header.
 * </div>
 */
- (void) doUpdateHeader;
/*!
 * <div>
 * Writes the file header.
 * </div>
 */
- (void) doWriteHeader;
/*!
 * <div>
 * Write an encoded video frame.
 * </div>
 * @param buffer The encoded buffer.
 * @param presentationTimestamp The presentation timestamp.
 * @return true if the encoded frame was written successfully; otherwise, false
 */
- (bool) doWriteWithBuffer:(FMIceLinkVideoBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideoRecorder class.
 * </div>
 * @param path The path.
 * @param inputFormat The input format.
 */
- (instancetype) initWithPath:(NSString*)path inputFormat:(FMIceLinkVideoFormat*)inputFormat;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideoRecorder class.
 * </div>
 * @param path The path.
 * @param inputFormat The input format.
 */
+ (FMIceLinkMatroskaVideoRecorder*) videoRecorderWithPath:(NSString*)path inputFormat:(FMIceLinkVideoFormat*)inputFormat;

@end

/*!
 * <div>
 * A Matroska-file-based video sink.
 * </div>
 */
@interface FMIceLinkMatroskaVideoSink : FMIceLinkVideoSink

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideoSink class.
 * </div>
 * @param path The path.
 */
- (instancetype) initWithPath:(NSString*)path;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideoSink class.
 * </div>
 * @param path The path.
 * @param format The format.
 */
- (instancetype) initWithPath:(NSString*)path format:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideoSink class.
 * </div>
 * @param path The path.
 * @param input The input.
 */
- (instancetype) initWithPath:(NSString*)path input:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the path.
 * </div>
 */
- (NSString*) path;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideoSink class.
 * </div>
 * @param path The path.
 */
+ (FMIceLinkMatroskaVideoSink*) videoSinkWithPath:(NSString*)path;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideoSink class.
 * </div>
 * @param path The path.
 * @param format The format.
 */
+ (FMIceLinkMatroskaVideoSink*) videoSinkWithPath:(NSString*)path format:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkMatroskaVideoSink class.
 * </div>
 * @param path The path.
 * @param input The input.
 */
+ (FMIceLinkMatroskaVideoSink*) videoSinkWithPath:(NSString*)path input:(NSObject<FMIceLinkIVideoOutput>*)input;

@end

/*!
 * <div>
 * An audio source that raises nothing.
 * </div>
 */
@interface FMIceLinkNullAudioSource : FMIceLinkAudioSource

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Starts the source.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) doStart;
/*!
 * <div>
 * Stops the source.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) doStop;
/*!
 * <div>
 * Initializes a new FMIceLinkNullAudioSource.
 * </div>
 * @param outputFormat The output format.
 */
- (instancetype) initWithOutputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Initializes a new FMIceLinkNullAudioSource.
 * </div>
 * @param outputFormat The output format.
 */
+ (FMIceLinkNullAudioSource*) nullAudioSourceWithOutputFormat:(FMIceLinkAudioFormat*)outputFormat;
/*!
 * <div>
 * Processes a frame by raising it.
 * </div>
 * @param frame
 */
- (void) processFrame:(FMIceLinkAudioFrame*)frame;

@end

/*!
 * <div>
 * A video source that raises nothing.
 * </div>
 */
@interface FMIceLinkNullVideoSource : FMIceLinkVideoSource

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Starts the source.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) doStart;
/*!
 * <div>
 * Stops the source.
 * </div>
 * @return
 */
- (FMIceLinkFuture*) doStop;
/*!
 * <div>
 * Initializes a new FMIceLinkNullVideoSource.
 * </div>
 * @param outputFormat The output format.
 */
- (instancetype) initWithOutputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Initializes a new FMIceLinkNullVideoSource.
 * </div>
 * @param outputFormat The output format.
 */
+ (FMIceLinkNullVideoSource*) nullVideoSourceWithOutputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Processes a frame by raising it.
 * </div>
 * @param frame
 */
- (void) processFrame:(FMIceLinkVideoFrame*)frame;

@end

/*!
 * <div>
 * A video sink that discards frames.
 * </div>
 */
@interface FMIceLinkNullVideoSink : FMIceLinkVideoSink

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new FMIceLinkNullVideoSink.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new FMIceLinkNullVideoSink.
 * </div>
 * @param inputFormat The input format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkVideoFormat*)inputFormat;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Initializes a new FMIceLinkNullVideoSink.
 * </div>
 */
+ (FMIceLinkNullVideoSink*) nullVideoSink;
/*!
 * <div>
 * Initializes a new FMIceLinkNullVideoSink.
 * </div>
 * @param inputFormat The input format.
 */
+ (FMIceLinkNullVideoSink*) nullVideoSinkWithInputFormat:(FMIceLinkVideoFormat*)inputFormat;
/*!
 * <div>
 * Processes a control frame by raising it.
 * </div>
 * @param controlFrame The control frame.
 */
- (void) processControlFrame:(FMIceLinkMediaControlFrame*)controlFrame;
/*!
 * <div>
 * Processes control frames by raising them.
 * </div>
 * @param controlFrames The control frames.
 */
- (void) processControlFrames:(NSMutableArray*)controlFrames;

@end

/*!
 * <div>
 * An audio sink that discards frames.
 * </div>
 */
@interface FMIceLinkNullAudioSink : FMIceLinkAudioSink

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new FMIceLinkNullAudioSink.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new FMIceLinkNullAudioSink.
 * </div>
 * @param inputFormat The input format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkAudioFormat*)inputFormat;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Initializes a new FMIceLinkNullAudioSink.
 * </div>
 */
+ (FMIceLinkNullAudioSink*) nullAudioSink;
/*!
 * <div>
 * Initializes a new FMIceLinkNullAudioSink.
 * </div>
 * @param inputFormat The input format.
 */
+ (FMIceLinkNullAudioSink*) nullAudioSinkWithInputFormat:(FMIceLinkAudioFormat*)inputFormat;
/*!
 * <div>
 * Processes a control frame by raising it.
 * </div>
 * @param controlFrame The control frame.
 */
- (void) processControlFrame:(FMIceLinkMediaControlFrame*)controlFrame;
/*!
 * <div>
 * Processes control frames by raising them.
 * </div>
 * @param controlFrames The control frames.
 */
- (void) processControlFrames:(NSMutableArray*)controlFrames;

@end

/*!
 * <div>
 * A AudioBuffer containing an RtpHeader.
 * </div>
 */
@interface FMIceLinkPacketizedAudioBuffer : FMIceLinkAudioBuffer

/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (FMIceLinkAudioBuffer*) createInstance;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioBuffer class.
 * </div>
 * @param dataBuffer The data buffer.
 * @param format The format.
 * @param rtpHeader The RTP header.
 */
- (instancetype) initWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer format:(FMIceLinkAudioFormat*)format rtpHeader:(FMIceLinkRtpPacketHeader*)rtpHeader;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioBuffer class.
 * </div>
 * @param dataBuffers The data buffers.
 * @param format The format.
 * @param rtpHeaders The RTP headers.
 */
- (instancetype) initWithDataBuffers:(NSMutableArray*)dataBuffers format:(FMIceLinkAudioFormat*)format rtpHeaders:(NSMutableArray*)rtpHeaders;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioBuffer class.
 * </div>
 * @param dataBuffer The data buffer.
 * @param format The format.
 * @param rtpHeader The RTP header.
 */
+ (FMIceLinkPacketizedAudioBuffer*) packetizedAudioBufferWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer format:(FMIceLinkAudioFormat*)format rtpHeader:(FMIceLinkRtpPacketHeader*)rtpHeader;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioBuffer class.
 * </div>
 * @param dataBuffers The data buffers.
 * @param format The format.
 * @param rtpHeaders The RTP headers.
 */
+ (FMIceLinkPacketizedAudioBuffer*) packetizedAudioBufferWithDataBuffers:(NSMutableArray*)dataBuffers format:(FMIceLinkAudioFormat*)format rtpHeaders:(NSMutableArray*)rtpHeaders;

@end

/*!
 * <div>
 * A video buffer.
 * </div>
 */
@interface FMIceLinkVideoBuffer : FMIceLinkMediaBuffer

/*!
 * <div>
 * Clones this instance.
 * </div>
 */
- (FMIceLinkVideoBuffer*) clone;
/*!
 * <div>
 * Creates a new video buffer using the specified format.
 * </div>
 * @param format The format.
 * @return
 */
- (FMIceLinkVideoBuffer*) convertWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Creates a new video buffer using the specified format.
 * </div>
 * @param format The format.
 * @param dataBuffer The data buffer.
 * @return
 */
- (FMIceLinkVideoBuffer*) convertWithFormat:(FMIceLinkVideoFormat*)format dataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Creates a black (0, 0, 0) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createBlackWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a blue (0, 0, 255) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createBlueWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a custom video buffer with the specified width/height and red/green/blue values
 * for the specified format name. If the format is not supported, returns null.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param red The red value.
 * @param green The green value.
 * @param blue The blue value.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createCustomWithWidth:(int)width height:(int)height red:(int)red green:(int)green blue:(int)blue formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a custom video buffer with the specified width/height and red/green/blue values
 * for the specified format name. If the format is not supported, returns null.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param red The red value.
 * @param green The green value.
 * @param blue The blue value.
 * @param formatName Name of the format.
 * @param buffer The output data buffer.
 */
+ (FMIceLinkVideoBuffer*) createCustomWithWidth:(int)width height:(int)height red:(int)red green:(int)green blue:(int)blue formatName:(NSString*)formatName buffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Creates a cyan (0, 255, 255) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createCyanWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a dark blue (0, 0, 128) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createDarkBlueWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a dark green (0, 128, 0) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createDarkGreenWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a dark red (128, 0, 0) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createDarkRedWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a gray (255, 255, 255) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createGrayWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a green (0, 255, 0) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createGreenWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (FMIceLinkVideoBuffer*) createInstance;
/*!
 * <div>
 * Creates a magenta (255, 0, 255) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createMagentaWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates an olive (128, 128, 0) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createOliveWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a purple (128, 0, 128) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createPurpleWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a red (255, 0, 0) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createRedWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a teal (0, 128, 128) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createTealWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a white (255, 255, 255) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createWhiteWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Creates a yellow (255, 255, 0) video buffer with the specified width/height.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (FMIceLinkVideoBuffer*) createYellowWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Deserializes an array of instances from JSON.
 * </div>
 * @param videoBuffersJson The video buffers JSON.
 * @return
 */
+ (NSMutableArray*) fromJsonArrayWithVideoBuffersJson:(NSString*)videoBuffersJson;
/*!
 * <div>
 * Deserializes an instance from JSON.
 * </div>
 * @param videoBufferJson The video buffer JSON.
 * @return
 */
+ (FMIceLinkVideoBuffer*) fromJsonWithVideoBufferJson:(NSString*)videoBufferJson;
/*!
 * <div>
 * Gets the A value at a given index.
 * If the video buffer is not RGBA-type, then this will return 255.
 * </div>
 * @param index The index.
 * @return The A value.
 */
- (int) getAValueWithIndex:(int)index;
/*!
 * <div>
 * Gets the B value at a given index.
 * </div>
 * @param index The index.
 * @return The B value, or -1 if the video buffer is not RGB/RGBA-type.
 */
- (int) getBValueWithIndex:(int)index;
/*!
 * <div>
 * Gets the G value at a given index.
 * </div>
 * @param index The index.
 * @return The G value, or -1 if the video buffer is not RGB/RGBA-type.
 */
- (int) getGValueWithIndex:(int)index;
/*!
 * <div>
 * Gets the minimum data buffer length for a given width, height, and format.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param formatName Name of the format.
 */
+ (int) getMinimumBufferLengthWithWidth:(int)width height:(int)height formatName:(NSString*)formatName;
/*!
 * <div>
 * Gets the R value at a given index.
 * </div>
 * @param index The index.
 * @return The R value, or -1 if the video buffer is not RGB/RGBA-type.
 */
- (int) getRValueWithIndex:(int)index;
/*!
 * <div>
 * Gets the U value at a given index.
 * </div>
 * @param index The index.
 * @return The U value, or -1 if the video buffer is not YUV-type.
 */
- (int) getUValueWithIndex:(int)index;
/*!
 * <div>
 * Gets the V value at a given index.
 * </div>
 * @param index The index.
 * @return The V value, or -1 if the video buffer is not YUV-type.
 */
- (int) getVValueWithIndex:(int)index;
/*!
 * <div>
 * Gets the Y value at a given index.
 * </div>
 * @param index The index.
 * @return The Y value, or -1 if the video buffer is not YUV-type.
 */
- (int) getYValueWithIndex:(int)index;
/*!
 * <div>
 * Gets the height.
 * </div>
 */
- (int) height;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoBuffer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoBuffer class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param dataBuffer The data buffer.
 * @param format The format.
 */
- (instancetype) initWithWidth:(int)width height:(int)height dataBuffer:(FMIceLinkDataBuffer*)dataBuffer format:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoBuffer class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param dataBuffers The data buffers.
 * @param format The format.
 */
- (instancetype) initWithWidth:(int)width height:(int)height dataBuffers:(NSMutableArray*)dataBuffers format:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoBuffer class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param stride The stride.
 * @param dataBuffer The data buffer.
 * @param format The format.
 */
- (instancetype) initWithWidth:(int)width height:(int)height stride:(int)stride dataBuffer:(FMIceLinkDataBuffer*)dataBuffer format:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoBuffer class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param strides The strides.
 * @param dataBuffers The data buffers.
 * @param format The format.
 */
- (instancetype) initWithWidth:(int)width height:(int)height strides:(NSMutableArray*)strides dataBuffers:(NSMutableArray*)dataBuffers format:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Gets a value indicating whether this buffer has ABGR video.
 * </div>
 */
- (bool) isAbgr;
/*!
 * <div>
 * Gets a value indicating whether this buffer has ARGB video.
 * </div>
 */
- (bool) isArgb;
/*!
 * <div>
 * Gets a value indicating whether this buffer has BGR video.
 * </div>
 */
- (bool) isBgr;
/*!
 * <div>
 * Gets a value indicating whether this buffer has BGRA video.
 * </div>
 */
- (bool) isBgra;
/*!
 * <div>
 * Gets a value indicating whether this buffer has H.264 video.
 * </div>
 */
- (bool) isH264;
/*!
 * <div>
 * Gets a value indicating whether this buffer has I420 video.
 * </div>
 */
- (bool) isI420;
/*!
 * <div>
 * Gets a value indicating whether this buffer contains a keyframe.
 * </div>
 */
- (bool) isKeyFrame;
/*!
 * <div>
 * Gets a value indicating whether this instance has been muted.
 * </div>
 */
- (bool) isMuted;
/*!
 * <div>
 * Gets a value indicating whether this buffer has NV12 video.
 * </div>
 */
- (bool) isNv12;
/*!
 * <div>
 * Gets a value indicating whether this buffer has NV21 video.
 * </div>
 */
- (bool) isNv21;
/*!
 * <div>
 * Gets a value indicating whether the data is packed into a single data buffer.
 * </div>
 */
- (bool) isPacked;
/*!
 * <div>
 * Gets a value indicating whether the data is spread across multiple data buffers (planes).
 * </div>
 */
- (bool) isPlanar;
/*!
 * <div>
 * Gets a value indicating whether this buffer has raw video.
 * </div>
 */
- (bool) isRaw;
/*!
 * <div>
 * Gets a value indicating whether this buffer has RGB video.
 * </div>
 */
- (bool) isRgb;
/*!
 * <div>
 * Gets a value indicating whether this buffer has RGBA video.
 * </div>
 */
- (bool) isRgba;
/*!
 * <div>
 * Gets a value indicating whether this buffer has raw RGBA, BGRA, ARGB, or ABGR video.
 * </div>
 */
- (bool) isRgbaType;
/*!
 * <div>
 * Gets a value indicating whether this buffer has raw RGB or BGR video.
 * </div>
 */
- (bool) isRgbType;
/*!
 * <div>
 * Gets a value indicating whether this buffer has VP8 video.
 * </div>
 */
- (bool) isVp8;
/*!
 * <div>
 * Gets a value indicating whether this buffer has VP9 video.
 * </div>
 */
- (bool) isVp9;
/*!
 * <div>
 * Gets a value indicating whether this buffer has raw I420, YV12, NV12, or NV21 video.
 * </div>
 */
- (bool) isYuvType;
/*!
 * <div>
 * Gets a value indicating whether this buffer has YV12 video.
 * </div>
 */
- (bool) isYv12;
/*!
 * <div>
 * Mutes this instance. This is a one-way operation that clears
 * the underlying data buffer.
 * </div>
 */
- (bool) mute;
/*!
 * <div>
 * Gets the orientation.
 * </div>
 */
- (int) orientation;
/*!
 * <div>
 * Gets the A value at a given index.
 * If the video buffer is not RGBA-type, then this will return false.
 * </div>
 * @param aValue The A value.
 * @param index The index.
 * @return true if the video buffer is RGBA-type.
 */
- (bool) setAValue:(int)aValue index:(int)index;
/*!
 * <div>
 * Gets the B value at a given index.
 * </div>
 * @param bValue The B value.
 * @param index The index.
 * @return true if the video buffer is RGB/RGBA-type.
 */
- (bool) setBValue:(int)bValue index:(int)index;
/*!
 * <div>
 * Sets the G value at a given index.
 * </div>
 * @param gValue The G value.
 * @param index The index.
 * @return true if the video buffer is RGB/RGBA-type.
 */
- (bool) setGValue:(int)gValue index:(int)index;
/*!
 * <div>
 * Sets the height.
 * </div>
 */
- (void) setHeight:(int)value;
/*!
 * <div>
 * Sets the orientation.
 * </div>
 */
- (void) setOrientation:(int)value;
/*!
 * <div>
 * Sets the R value at a given index.
 * </div>
 * @param rValue The R value.
 * @param index The index.
 * @return true if the video buffer is RGB/RGBA-type.
 */
- (bool) setRValue:(int)rValue index:(int)index;
/*!
 * <div>
 * Sets the stride.
 * </div>
 */
- (void) setStride:(int)value;
/*!
 * <div>
 * Sets the strides.
 * </div>
 */
- (void) setStrides:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the U value at a given index.
 * </div>
 * @param uValue The U value.
 * @param index The index.
 * @return true if the video buffer is YUV-type.
 */
- (bool) setUValue:(int)uValue index:(int)index;
/*!
 * <div>
 * Sets the V value at a given index.
 * </div>
 * @param vValue The V value.
 * @param index The index.
 * @return true if the video buffer is YUV-type.
 */
- (bool) setVValue:(int)vValue index:(int)index;
/*!
 * <div>
 * Sets the width.
 * </div>
 */
- (void) setWidth:(int)value;
/*!
 * <div>
 * Sets the Y value at a given index.
 * </div>
 * @param yValue The Y value.
 * @param index The index.
 * @return true if the video buffer is YUV-type.
 */
- (bool) setYValue:(int)yValue index:(int)index;
/*!
 * <div>
 * Gets the stride.
 * </div>
 */
- (int) stride;
/*!
 * <div>
 * Gets the strides.
 * </div>
 */
- (NSMutableArray*) strides;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an array of instances to JSON.
 * </div>
 * @param videoBuffers The video buffers.
 * @return
 */
+ (NSString*) toJsonArrayWithVideoBuffers:(NSMutableArray*)videoBuffers;
/*!
 * <div>
 * Serializes an instance to JSON.
 * </div>
 * @param videoBuffer The video buffer.
 * @return
 */
+ (NSString*) toJsonWithVideoBuffer:(FMIceLinkVideoBuffer*)videoBuffer;
/*!
 * <div>
 * Creates a packed representation of this
 * planar buffer, if in YUV-planar format.
 * Otherwise, returns the current buffer.
 * If the planar data is not contiguous in
 * memory, new memory will be allocated for
 * the packed representation.
 * </div>
 * @return
 */
- (FMIceLinkVideoBuffer*) toPacked;
/*!
 * <div>
 * Creates a packed representation of this
 * planar buffer, if in YUV-planar format.
 * Otherwise, returns the current buffer.
 * If the planar data is not contiguous in
 * memory, new memory will be allocated or
 * taken from the data buffer pool for
 * the packed representation.
 * </div>
 * @param usePool Whether to use the data buffer pool for any required memory allocations.
 * @return
 */
- (FMIceLinkVideoBuffer*) toPackedWithUsePool:(bool)usePool;
/*!
 * <div>
 * Creates a planar representation of this
 * packed buffer, if in YUV-packed format.
 * Otherwise, returns the current buffer.
 * </div>
 * @return
 */
- (FMIceLinkVideoBuffer*) toPlanar;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoBuffer class.
 * </div>
 */
+ (FMIceLinkVideoBuffer*) videoBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoBuffer class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param dataBuffer The data buffer.
 * @param format The format.
 */
+ (FMIceLinkVideoBuffer*) videoBufferWithWidth:(int)width height:(int)height dataBuffer:(FMIceLinkDataBuffer*)dataBuffer format:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoBuffer class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param dataBuffers The data buffers.
 * @param format The format.
 */
+ (FMIceLinkVideoBuffer*) videoBufferWithWidth:(int)width height:(int)height dataBuffers:(NSMutableArray*)dataBuffers format:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoBuffer class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param stride The stride.
 * @param dataBuffer The data buffer.
 * @param format The format.
 */
+ (FMIceLinkVideoBuffer*) videoBufferWithWidth:(int)width height:(int)height stride:(int)stride dataBuffer:(FMIceLinkDataBuffer*)dataBuffer format:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoBuffer class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param strides The strides.
 * @param dataBuffers The data buffers.
 * @param format The format.
 */
+ (FMIceLinkVideoBuffer*) videoBufferWithWidth:(int)width height:(int)height strides:(NSMutableArray*)strides dataBuffers:(NSMutableArray*)dataBuffers format:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Gets the width.
 * </div>
 */
- (int) width;

@end

/*!
 * <div>
 * A VideoBuffer containing an RtpHeader.
 * </div>
 */
@interface FMIceLinkPacketizedVideoBuffer : FMIceLinkVideoBuffer

/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (FMIceLinkVideoBuffer*) createInstance;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPacketizedVideoBuffer class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param dataBuffer The data buffer.
 * @param format The format.
 * @param rtpHeader The RTP header.
 */
- (instancetype) initWithWidth:(int)width height:(int)height dataBuffer:(FMIceLinkDataBuffer*)dataBuffer format:(FMIceLinkVideoFormat*)format rtpHeader:(FMIceLinkRtpPacketHeader*)rtpHeader;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPacketizedVideoBuffer class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param dataBuffers The data buffers.
 * @param format The format.
 * @param rtpHeaders The RTP headers.
 */
- (instancetype) initWithWidth:(int)width height:(int)height dataBuffers:(NSMutableArray*)dataBuffers format:(FMIceLinkVideoFormat*)format rtpHeaders:(NSMutableArray*)rtpHeaders;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPacketizedVideoBuffer class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param dataBuffer The data buffer.
 * @param format The format.
 * @param rtpHeader The RTP header.
 */
+ (FMIceLinkPacketizedVideoBuffer*) packetizedVideoBufferWithWidth:(int)width height:(int)height dataBuffer:(FMIceLinkDataBuffer*)dataBuffer format:(FMIceLinkVideoFormat*)format rtpHeader:(FMIceLinkRtpPacketHeader*)rtpHeader;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPacketizedVideoBuffer class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param dataBuffers The data buffers.
 * @param format The format.
 * @param rtpHeaders The RTP headers.
 */
+ (FMIceLinkPacketizedVideoBuffer*) packetizedVideoBufferWithWidth:(int)width height:(int)height dataBuffers:(NSMutableArray*)dataBuffers format:(FMIceLinkVideoFormat*)format rtpHeaders:(NSMutableArray*)rtpHeaders;

@end

@interface FMIceLinkProcessFramePolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkProcessFramePolicy)value;

@end

/*!
 * <div>
 * A collection of remote medias.
 * </div>
 */
@interface FMIceLinkRemoteMediaCollection : FMIceLinkCollection

/*!
 * <div>
 * Invoked when an element is added to the collection.
 * </div>
 * @param value The value.
 */
- (void) addSuccess:(FMIceLinkRemoteMedia*)value;
/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkRemoteMediaCollection*) createCollection;
/*!
 * <div>
 * Gets a media by ID.
 * </div>
 * @param idValue The identifier.
 */
- (FMIceLinkRemoteMedia*) getById:(NSString*)idValue;
- (instancetype) init;
+ (FMIceLinkRemoteMediaCollection*) remoteMediaCollection;
/*!
 * <div>
 * Invoked when an element is removed from the collection.
 * </div>
 * @param value The value.
 */
- (void) removeSuccess:(FMIceLinkRemoteMedia*)value;

@end

/*!
 * <div>
 * A collection of remote medias.
 * </div>
 */
@interface FMIceLinkMediaCollection : FMIceLinkRemoteMediaCollection

- (instancetype) init;
+ (FMIceLinkMediaCollection*) mediaCollection;

@end

@interface FMIceLinkMediaPipeStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkMediaPipeState)value;

@end

@interface FMIceLinkMediaSinkStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkMediaSinkState)value;

@end

@interface FMIceLinkMediaSourceStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkMediaSourceState)value;

@end

@interface FMIceLinkMultiplexPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkMultiplexPolicy)value;

@end

/*!
 * <div>
 * A NACK Config.
 * 
 * NackConfig is for enabling/configuring negative acknowledgement.
 * Negative acknowledgements are used by media receivers to request that a media sender retransmit a packet.
 * It is highly effective for video in low-latency networks since video is stateful and the cost of losing a packet is high.
 * It is far less effective for audio, where any delay is especially harmful and the cost of losing a packet is not significant. Because of this,
 * it is enabled by default for video and disabled by default for audio. You can modify the buffer size using NackConfig, but generally,
 * it should be left with default values. The option to set these values will most likely be removed in a future release as our adaptive algorithms improve.
 * </div>
 */
@interface FMIceLinkNackConfig : NSObject

/*!
 * <div>
 * Gets a value indicating whether to disable support for Generic NACKs.
 * </div><value>
 * <code>true</code> if disable; otherwise, <code>false</code>.
 * </value>
 */
- (bool) disableBuffering;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkNackConfig class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkNackConfig class.
 * </div>
 * @param sendBufferLength Length of the send buffer.
 * @param receiveBufferLength Length of the receive buffer.
 */
- (instancetype) initWithSendBufferLength:(int)sendBufferLength receiveBufferLength:(int)receiveBufferLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkNackConfig class.
 * </div>
 */
+ (FMIceLinkNackConfig*) nackConfig;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkNackConfig class.
 * </div>
 * @param sendBufferLength Length of the send buffer.
 * @param receiveBufferLength Length of the receive buffer.
 */
+ (FMIceLinkNackConfig*) nackConfigWithSendBufferLength:(int)sendBufferLength receiveBufferLength:(int)receiveBufferLength;
/*!
 * <div>
 * Gets the number of packets to hold in the generic
 * NACK buffer awaiting an earlier packet before releasing them.
 * Defaults to 128.
 * </div>
 */
- (int) receiveBufferLength;
/*!
 * <div>
 * Gets the length of the send buffer.
 * </div>
 */
- (int) sendBufferLength;
/*!
 * <div>
 * Sets the number of packets to hold in the generic
 * NACK buffer awaiting an earlier packet before releasing them.
 * Defaults to 128.
 * </div>
 */
- (void) setReceiveBufferLength:(int)value;
/*!
 * <div>
 * Sets the length of the send buffer.
 * </div>
 */
- (void) setSendBufferLength:(int)value;

@end

@interface FMIceLinkNackPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkNackPolicy)value;

@end

/*!
 * <div>
 * An Ogg audio recorder.
 * </div>
 */
@interface FMIceLinkOggAudioRecorder : FMIceLinkAudioRecorder

/*!
 * <div>
 * Gets the file artist.
 * </div>
 */
- (NSString*) artist;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOggAudioRecorder class.
 * </div>
 * @param path The path.
 * @param inputFormat The input format.
 */
+ (FMIceLinkOggAudioRecorder*) audioRecorderWithPath:(NSString*)path inputFormat:(FMIceLinkAudioFormat*)inputFormat;
/*!
 * <div>
 * Updates the file header.
 * </div>
 */
- (void) doUpdateHeader;
/*!
 * <div>
 * Writes the file header.
 * </div>
 */
- (void) doWriteHeader;
/*!
 * <div>
 * Write an encoded video frame.
 * </div>
 * @param buffer The encoded buffer.
 * @param presentationTimestamp The presentation timestamp.
 * @return true if the encoded frame was written successfully; otherwise, false
 */
- (bool) doWriteWithBuffer:(FMIceLinkAudioBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOggAudioRecorder class.
 * </div>
 * @param path The path.
 * @param inputFormat The input format.
 */
- (instancetype) initWithPath:(NSString*)path inputFormat:(FMIceLinkAudioFormat*)inputFormat;
/*!
 * <div>
 * Sets the file artist.
 * </div>
 */
- (void) setArtist:(NSString*)value;
/*!
 * <div>
 * Sets the file title.
 * </div>
 */
- (void) setTitle:(NSString*)value;
/*!
 * <div>
 * Sets the file vendor.
 * </div>
 */
- (void) setVendor:(NSString*)value;
/*!
 * <div>
 * Gets the file title.
 * </div>
 */
- (NSString*) title;
/*!
 * <div>
 * Gets the file vendor.
 * </div>
 */
- (NSString*) vendor;

@end

/*!
 * <div>
 * An Ogg-file-based audio sink.
 * </div>
 */
@interface FMIceLinkOggAudioSink : FMIceLinkAudioSink

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOggAudioSink class.
 * </div>
 * @param path The path.
 * @param format The format.
 */
+ (FMIceLinkOggAudioSink*) audioSinkWithPath:(NSString*)path format:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOggAudioSink class.
 * </div>
 * @param path The path.
 * @param input The input.
 */
+ (FMIceLinkOggAudioSink*) audioSinkWithPath:(NSString*)path input:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOggAudioSink class.
 * </div>
 * @param path The path.
 * @param format The format.
 */
- (instancetype) initWithPath:(NSString*)path format:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOggAudioSink class.
 * </div>
 * @param path The path.
 * @param input The input.
 */
- (instancetype) initWithPath:(NSString*)path input:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the path.
 * </div>
 */
- (NSString*) path;

@end

/*!
 * <div>
 * An Ogg page.
 * </div>
 */
@interface FMIceLinkOggPage : NSObject

/*!
 * <div>
 * Gets the absolute granule position.
 * </div>
 */
- (int) absoluteGranulePosition;
/*!
 * <div>
 * Gets whether this page is the first page of the bitstream.
 * </div>
 */
- (bool) beginningOfStream;
/*!
 * <div>
 * Gets whether this page is a continued (not fresh) packet.
 * </div>
 */
- (bool) continuedPacket;
/*!
 * <div>
 * Gets whether this page is the last page of the bitstream.
 * </div>
 */
- (bool) endOfStream;
/*!
 * <div>
 * Gets the page as a byte array.
 * </div>
 */
- (NSMutableData*) getBytes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOggPage class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOggPage class.
 * </div>
 */
+ (FMIceLinkOggPage*) page;
/*!
 * <div>
 * Gets the data payload.
 * </div>
 */
- (NSMutableData*) payload;
/*!
 * <div>
 * Gets the page sequence number.
 * </div>
 */
- (int) sequenceNumber;
/*!
 * <div>
 * Sets the absolute granule position.
 * </div>
 */
- (void) setAbsoluteGranulePosition:(int)value;
/*!
 * <div>
 * Sets whether this page is the first page of the bitstream.
 * </div>
 */
- (void) setBeginningOfStream:(bool)value;
/*!
 * <div>
 * Sets whether this page is a continued (not fresh) packet.
 * </div>
 */
- (void) setContinuedPacket:(bool)value;
/*!
 * <div>
 * Sets whether this page is the last page of the bitstream.
 * </div>
 */
- (void) setEndOfStream:(bool)value;
/*!
 * <div>
 * Sets the data payload.
 * </div>
 */
- (void) setPayload:(NSMutableData*)value;
/*!
 * <div>
 * Sets the page sequence number.
 * </div>
 */
- (void) setSequenceNumber:(int)value;
/*!
 * <div>
 * Sets the stream serial number.
 * </div>
 */
- (void) setStreamSerialNumber:(int)value;
/*!
 * <div>
 * Gets the stream serial number.
 * </div>
 */
- (int) streamSerialNumber;

@end

/*!
 * <div>
 * Header type flags for an FMIceLinkOggPage. Can be set in the 5th byte of each page.
 * </div>
 */
@interface FMIceLinkOggPageHeaderType : NSObject

/*!
 * <div>
 * Gets a value indicating that all values are set.
 * </div>
 */
+ (uint8_t) all;
/*!
 * <div>
 * Gets a value indicating whether or not this is the first page in the bitstream.
 * </div>
 */
+ (uint8_t) firstPage;
- (instancetype) init;
/*!
 * <div>
 * Gets a value indicating whether or not the page is a continuation of a previous page.
 * </div>
 */
+ (uint8_t) isContinued;
/*!
 * <div>
 * Gets a value indicating whether or not this is the last page in the bitstream.
 * </div>
 */
+ (uint8_t) lastPage;
/*!
 * <div>
 * Gets a value indicating an empty value.
 * </div>
 */
+ (uint8_t) none;
+ (FMIceLinkOggPageHeaderType*) pageHeaderType;

@end

/*!
 * <div>
 * An Opus depacketizer.
 * </div>
 */
@interface FMIceLinkOpusDepacketizer : FMIceLinkBasicAudioDepacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusDepacketizer class.
 * </div>
 */
+ (FMIceLinkOpusDepacketizer*) depacketizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusDepacketizer class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkOpusDepacketizer*) depacketizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusDepacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkOpusDepacketizer*) depacketizerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusDepacketizer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusDepacketizer class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusDepacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * An Opus format.
 * </div>
 */
@interface FMIceLinkOpusFormat : FMIceLinkAudioFormat

/*!
 * <div>
 * Gets the default clock rate (2).
 * </div>
 */
+ (int) defaultChannelCount;
/*!
 * <div>
 * Gets the default clock rate (48000).
 * </div>
 */
+ (int) defaultClockRate;
/*!
 * <div>
 * Gets the default configuration (48000/2).
 * </div>
 */
+ (FMIceLinkAudioConfig*) defaultConfig;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusFormat class.
 * </div>
 */
+ (FMIceLinkOpusFormat*) format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusFormat class.
 * </div>
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (FMIceLinkOpusFormat*) formatWithClockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusFormat class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkOpusFormat*) formatWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusFormat class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusFormat class.
 * </div>
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusFormat class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;

@end

/*!
 * <div>
 * An Opus packetizer.
 * </div>
 */
@interface FMIceLinkOpusPacketizer : FMIceLinkBasicAudioPacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusPacketizer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusPacketizer class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusPacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusPacketizer class.
 * </div>
 */
+ (FMIceLinkOpusPacketizer*) packetizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusPacketizer class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkOpusPacketizer*) packetizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkOpusPacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkOpusPacketizer*) packetizerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;

@end

/*!
 * <div>
 * A PCMA (G.711a) decoder.
 * </div>
 */
@interface FMIceLinkPcmaDecoder : FMIceLinkAudioDecoder

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaDecoder class.
 * </div>
 */
+ (FMIceLinkPcmaDecoder*) decoder;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaDecoder class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmaDecoder*) decoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaDecoder class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkPcmaDecoder*) decoderWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaDecoder class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaDecoder class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaDecoder class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A PCMA (G.711a) depacketizer.
 * </div>
 */
@interface FMIceLinkPcmaDepacketizer : FMIceLinkBasicAudioDepacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaDepacketizer class.
 * </div>
 */
+ (FMIceLinkPcmaDepacketizer*) depacketizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaDepacketizer class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmaDepacketizer*) depacketizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaDepacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkPcmaDepacketizer*) depacketizerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaDepacketizer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaDepacketizer class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaDepacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A PCMA (G.711a) encoder.
 * </div>
 */
@interface FMIceLinkPcmaEncoder : FMIceLinkAudioEncoder

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaEncoder class.
 * </div>
 */
+ (FMIceLinkPcmaEncoder*) encoder;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaEncoder class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmaEncoder*) encoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaEncoder class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkPcmaEncoder*) encoderWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaEncoder class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaEncoder class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaEncoder class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A PCMA (G.711a) format.
 * </div>
 */
@interface FMIceLinkPcmaFormat : FMIceLinkG711Format

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaFormat class.
 * </div>
 */
+ (FMIceLinkPcmaFormat*) format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaFormat class.
 * </div>
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (FMIceLinkPcmaFormat*) formatWithClockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaFormat class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmaFormat*) formatWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaFormat class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaFormat class.
 * </div>
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaFormat class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;

@end

/*!
 * <div>
 * A PCMA (G.711a) packetizer.
 * </div>
 */
@interface FMIceLinkPcmaPacketizer : FMIceLinkBasicAudioPacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaPacketizer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaPacketizer class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaPacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaPacketizer class.
 * </div>
 */
+ (FMIceLinkPcmaPacketizer*) packetizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaPacketizer class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmaPacketizer*) packetizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmaPacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkPcmaPacketizer*) packetizerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;

@end

/*!
 * <div>
 * A PCMU (G.711u) decoder.
 * </div>
 */
@interface FMIceLinkPcmuDecoder : FMIceLinkAudioDecoder

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuDecoder class.
 * </div>
 */
+ (FMIceLinkPcmuDecoder*) decoder;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuDecoder class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmuDecoder*) decoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuDecoder class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkPcmuDecoder*) decoderWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuDecoder class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuDecoder class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuDecoder class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A PCMA (G.711u) depacketizer.
 * </div>
 */
@interface FMIceLinkPcmuDepacketizer : FMIceLinkBasicAudioDepacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuDepacketizer class.
 * </div>
 */
+ (FMIceLinkPcmuDepacketizer*) depacketizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuDepacketizer class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmuDepacketizer*) depacketizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuDepacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkPcmuDepacketizer*) depacketizerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuDepacketizer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuDepacketizer class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuDepacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A PCMU (G.711u) encoder.
 * </div>
 */
@interface FMIceLinkPcmuEncoder : FMIceLinkAudioEncoder

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuEncoder class.
 * </div>
 */
+ (FMIceLinkPcmuEncoder*) encoder;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuEncoder class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmuEncoder*) encoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuEncoder class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkPcmuEncoder*) encoderWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuEncoder class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuEncoder class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuEncoder class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A PCMU (G.711u) format.
 * </div>
 */
@interface FMIceLinkPcmuFormat : FMIceLinkG711Format

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuFormat class.
 * </div>
 */
+ (FMIceLinkPcmuFormat*) format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuFormat class.
 * </div>
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (FMIceLinkPcmuFormat*) formatWithClockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuFormat class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmuFormat*) formatWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuFormat class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuFormat class.
 * </div>
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuFormat class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;

@end

/*!
 * <div>
 * A PCMU (G.711u) packetizer.
 * </div>
 */
@interface FMIceLinkPcmuPacketizer : FMIceLinkBasicAudioPacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuPacketizer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuPacketizer class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuPacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuPacketizer class.
 * </div>
 */
+ (FMIceLinkPcmuPacketizer*) packetizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuPacketizer class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmuPacketizer*) packetizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmuPacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkPcmuPacketizer*) packetizerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;

@end

/*!
 * <div>
 * A PCM depacketizer.
 * </div>
 */
@interface FMIceLinkPcmDepacketizer : FMIceLinkBasicAudioDepacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmDepacketizer class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmDepacketizer*) depacketizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmDepacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkPcmDepacketizer*) depacketizerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmDepacketizer class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmDepacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;

@end

/*!
 * <div>
 * A PCM format.
 * </div>
 */
@interface FMIceLinkPcmFormat : FMIceLinkAudioFormat

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmFormat class.
 * </div>
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (FMIceLinkPcmFormat*) formatWithClockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmFormat class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmFormat*) formatWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmFormat class.
 * </div>
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
- (instancetype) initWithClockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmFormat class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;

@end

/*!
 * <div>
 * A PCM packetizer.
 * </div>
 */
@interface FMIceLinkPcmPacketizer : FMIceLinkBasicAudioPacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmPacketizer class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmPacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmPacketizer class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkPcmPacketizer*) packetizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPcmPacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkPcmPacketizer*) packetizerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input;

@end

/*!
 * <div>
 * An RTCP Feedback PS-PLI packet.
 * </div>
 */
@interface FMIceLinkPliControlFrame : FMIceLinkPayloadSpecificControlFrame

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPliControlFrame class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPliControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPliControlFrame class.
 * </div>
 */
+ (FMIceLinkPliControlFrame*) pliControlFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkPliControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkPliControlFrame*) pliControlFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Gets the type of the registered feedback message.
 * </div>
 */
+ (int) registeredFeedbackMessageType;

@end

@interface FMIceLinkProtocolTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkProtocolType)value;

@end

/*!
 * <div>
 * RED Forward error correction (FEC) config.
 * RedFecConfig is for enabling/configuring forward error correction.
 * Forward error correction adds redundancy to the media stream (increased bandwidth)
 * with the intention that media receivers can recover from packet loss without requiring the media server to retransmit anything.
 * It is a last resort for high latency networks.
 * It is disabled by default and not currently supported as it does not have sufficient test coverage.
 * </div>
 */
@interface FMIceLinkRedFecConfig : NSObject

/*!
 * <div>
 * Gets the Red FEC activation threshold. Red FEC is activated when the Rtcp receiver reports indicate that more than this threshold value of packets were lost (but only if supported by the remote peer);
 * when this value diminishes blow the threshold, Red FEC is deactivated.
 * The value is denoted in percentage points (between 0 and 100). Affects encoded data only.
 * Defaults to 5.
 * </div>
 */
- (int) activationThreshold;
/*!
 * <div>
 * Gets a value indicating whether RED Forward Error Correction (FEC) is disabled.
 * </div>
 */
- (bool) disabled;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRedFecConfig class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRedFecConfig class.
 * </div>
 */
+ (FMIceLinkRedFecConfig*) redFecConfig;
/*!
 * <div>
 * Sets the Red FEC activation threshold. Red FEC is activated when the Rtcp receiver reports indicate that more than this threshold value of packets were lost (but only if supported by the remote peer);
 * when this value diminishes blow the threshold, Red FEC is deactivated.
 * The value is denoted in percentage points (between 0 and 100). Affects encoded data only.
 * Defaults to 5.
 * </div>
 */
- (void) setActivationThreshold:(int)value;

@end

@interface FMIceLinkRedFecPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkRedFecPolicy)value;

@end

/*!
 * <div>
 * An RTCP receiver estimated maximum bitrate (REMB) packet.
 * </div>
 */
@interface FMIceLinkRembControlFrame : FMIceLinkPayloadSpecificControlFrame

/*!
 * <div>
 * Gets the bitrate exponent.
 * </div>
 */
- (int) bitrateExponent;
/*!
 * <div>
 * Gets the bitrate mantissa, in bits per second (bps).
 * </div>
 */
- (int) bitrateMantissa;
/*!
 * <div>
 * Returns a string representation of this REMB Control Frame
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRembControlFrame class.
 * </div>
 * @param bitrate Bitrate in bps.
 * @param ssrcEntries SSRC entries, for which this feedback is applicable.
 */
- (instancetype) initWithBitrate:(long long)bitrate ssrcEntries:(NSMutableArray*)ssrcEntries;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRembControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Gets the type of the receiver estimated maximum bitrate message.
 * </div>
 */
+ (int) registeredFeedbackMessageType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRembControlFrame class.
 * </div>
 * @param bitrate Bitrate in bps.
 * @param ssrcEntries SSRC entries, for which this feedback is applicable.
 */
+ (FMIceLinkRembControlFrame*) rembControlFrameWithBitrate:(long long)bitrate ssrcEntries:(NSMutableArray*)ssrcEntries;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRembControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkRembControlFrame*) rembControlFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Sets the bitrate exponent.
 * </div>
 */
- (void) setBitrateExponent:(int)value;
/*!
 * <div>
 * Sets the bitrate mantissa, in bits per second (bps).
 * </div>
 */
- (void) setBitrateMantissa:(int)value;
/*!
 * <div>
 * Sets the SSRC entries that this message applies to.
 * </div>
 */
- (void) setSsrcEntries:(NSMutableArray*)value;
/*!
 * <div>
 * Gets the SSRC entries that this message applies to.
 * </div>
 */
- (NSMutableArray*) ssrcEntries;

@end

@interface FMIceLinkRembPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkRembPolicy)value;

@end

/*!
 * <div>
 * A collection of remote audio/video tracks.
 * </div>
 */
@interface FMIceLinkRemoteMedia : FMIceLinkMedia

/*!
 * <div>
 * Creates an array of tracks from a list of audio tracks.
 * </div>
 * @param tracks The list of tracks.
 */
- (NSMutableArray*) arrayFromAudioTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Creates an array of tracks from a list of video tracks.
 * </div>
 * @param tracks The list of tracks.
 */
- (NSMutableArray*) arrayFromVideoTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Gets the current audio sink output
 * of the first audio track.
 * </div>
 */
- (FMIceLinkSinkOutput*) audioSinkOutput;
/*!
 * <div>
 * Changes the audio sink output of the first
 * audio track while the media is active.
 * </div>
 * @param audioSinkOutput The audio sink output.
 * @return
 */
- (FMIceLinkFuture*) changeAudioSinkOutput:(FMIceLinkSinkOutput*)audioSinkOutput;
/*!
 * <div>
 * Changes the video sink output of the first
 * video track while the media is active.
 * </div>
 * @param videoSinkOutput The video sink output.
 * @return
 */
- (FMIceLinkFuture*) changeVideoSinkOutput:(FMIceLinkSinkOutput*)videoSinkOutput;
/*!
 * <div>
 * Creates an audio track collection.
 * </div>
 * @return
 */
- (NSMutableArray*) createAudioTrackCollection;
/*!
 * <div>
 * Creates a video track collection.
 * </div>
 * @return
 */
- (NSMutableArray*) createVideoTrackCollection;
/*!
 * <div>
 * Gets the available audio sink outputs
 * of the first audio track.
 * </div>
 * @return
 * A future with an array of audio sink outputs.
 * 
 */
- (FMIceLinkFuture*) getAudioSinkOutputs;
/*!
 * <div>
 * Gets the available video sink outputs
 * of the first video track.
 * </div>
 * @return
 * A future with an array of video sink outputs.
 * 
 */
- (FMIceLinkFuture*) getVideoSinkOutputs;
- (instancetype) init;
+ (FMIceLinkRemoteMedia*) remoteMedia;
/*!
 * <div>
 * Sets the current audio sink output
 * of the first audio track.
 * </div>
 */
- (void) setAudioSinkOutput:(FMIceLinkSinkOutput*)value;
/*!
 * <div>
 * Sets the current video sink output
 * of the first video track.
 * </div>
 */
- (void) setVideoSinkOutput:(FMIceLinkSinkOutput*)value;
/*!
 * <div>
 * Gets the current video sink output
 * of the first video track.
 * </div>
 */
- (FMIceLinkSinkOutput*) videoSinkOutput;

@end

/*!
 * <div>
 * An RTCP report block.
 * </div>
 */
@interface FMIceLinkReportBlock : NSObject

/*!
 * <div>
 * Gets the cumulative number of packets lost.
 * </div>
 */
- (int) cumulativeNumberOfPacketsLost;
/*!
 * <div>
 * Gets the backing data buffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) dataBuffer;
/*!
 * <div>
 * Gets the delay since last sender report.
 * </div>
 */
- (long long) delaySinceLastSenderReport;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the extended highest sequence number received.
 * </div>
 */
- (long long) extendedHighestSequenceNumberReceived;
/*!
 * <div>
 * Gets the fixed length of a report block.
 * </div>
 */
+ (int) fixedPayloadLength;
/*!
 * <div>
 * Gets the fraction lost according to RFC 1889.
 * The value has a range of 0 (no packet loss) to 255 (all packets lost).
 * </div>
 */
- (int) fractionLost;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportBlock class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportBlock class.
 * </div>
 * @param dataBuffer The data buffer.
 */
- (instancetype) initWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportBlock class.
 * </div>
 * @param fractionLost The fraction lost.
 * @param cumulativeNumberOfPacketsLost The cumulative number of packets lost.
 * @param extendedHighestSequenceNumberReceived The extended highest sequence number received.
 * @param interarrivalJitter The interarrival jitter.
 * @param lastSenderReportTimestamp The last sender report timestamp.
 * @param delaySinceLastSenderReport The delay since last sender report.
 */
- (instancetype) initWithFractionLost:(int)fractionLost cumulativeNumberOfPacketsLost:(int)cumulativeNumberOfPacketsLost extendedHighestSequenceNumberReceived:(long long)extendedHighestSequenceNumberReceived interarrivalJitter:(long long)interarrivalJitter lastSenderReportTimestamp:(long long)lastSenderReportTimestamp delaySinceLastSenderReport:(long long)delaySinceLastSenderReport;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportBlock class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param fractionLost The fraction lost.
 * @param cumulativeNumberOfPacketsLost The cumulative number of packets lost.
 * @param extendedHighestSequenceNumberReceived The extended highest sequence number received.
 * @param interarrivalJitter The interarrival jitter.
 * @param lastSenderReportTimestamp The last sender report timestamp.
 * @param delaySinceLastSenderReport The delay since last sender report.
 */
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource fractionLost:(int)fractionLost cumulativeNumberOfPacketsLost:(int)cumulativeNumberOfPacketsLost extendedHighestSequenceNumberReceived:(long long)extendedHighestSequenceNumberReceived interarrivalJitter:(long long)interarrivalJitter lastSenderReportTimestamp:(long long)lastSenderReportTimestamp delaySinceLastSenderReport:(long long)delaySinceLastSenderReport;
/*!
 * <div>
 * Gets the interarrival jitter.
 * </div>
 */
- (long long) interarrivalJitter;
/*!
 * <div>
 * Gets the last sender report timestamp.
 * </div>
 */
- (long long) lastSenderReportTimestamp;
/*!
 * <div>
 * Gets the percentage of lost packets.
 * The value has a range of 0.0 (no packet loss) to 100.0 (all packets lost).
 * </div>
 */
- (double) percentLost;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportBlock class.
 * </div>
 */
+ (FMIceLinkReportBlock*) reportBlock;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportBlock class.
 * </div>
 * @param dataBuffer The data buffer.
 */
+ (FMIceLinkReportBlock*) reportBlockWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportBlock class.
 * </div>
 * @param fractionLost The fraction lost.
 * @param cumulativeNumberOfPacketsLost The cumulative number of packets lost.
 * @param extendedHighestSequenceNumberReceived The extended highest sequence number received.
 * @param interarrivalJitter The interarrival jitter.
 * @param lastSenderReportTimestamp The last sender report timestamp.
 * @param delaySinceLastSenderReport The delay since last sender report.
 */
+ (FMIceLinkReportBlock*) reportBlockWithFractionLost:(int)fractionLost cumulativeNumberOfPacketsLost:(int)cumulativeNumberOfPacketsLost extendedHighestSequenceNumberReceived:(long long)extendedHighestSequenceNumberReceived interarrivalJitter:(long long)interarrivalJitter lastSenderReportTimestamp:(long long)lastSenderReportTimestamp delaySinceLastSenderReport:(long long)delaySinceLastSenderReport;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportBlock class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param fractionLost The fraction lost.
 * @param cumulativeNumberOfPacketsLost The cumulative number of packets lost.
 * @param extendedHighestSequenceNumberReceived The extended highest sequence number received.
 * @param interarrivalJitter The interarrival jitter.
 * @param lastSenderReportTimestamp The last sender report timestamp.
 * @param delaySinceLastSenderReport The delay since last sender report.
 */
+ (FMIceLinkReportBlock*) reportBlockWithSynchronizationSource:(long long)synchronizationSource fractionLost:(int)fractionLost cumulativeNumberOfPacketsLost:(int)cumulativeNumberOfPacketsLost extendedHighestSequenceNumberReceived:(long long)extendedHighestSequenceNumberReceived interarrivalJitter:(long long)interarrivalJitter lastSenderReportTimestamp:(long long)lastSenderReportTimestamp delaySinceLastSenderReport:(long long)delaySinceLastSenderReport;
/*!
 * <div>
 * Sets the cumulative number of packets lost.
 * </div>
 */
- (void) setCumulativeNumberOfPacketsLost:(int)value;
/*!
 * <div>
 * Sets the backing data buffer.
 * </div>
 */
- (void) setDataBuffer:(FMIceLinkDataBuffer*)value;
/*!
 * <div>
 * Sets the delay since last sender report.
 * </div>
 */
- (void) setDelaySinceLastSenderReport:(long long)value;
/*!
 * <div>
 * Sets the extended highest sequence number received.
 * </div>
 */
- (void) setExtendedHighestSequenceNumberReceived:(long long)value;
/*!
 * <div>
 * Sets the fraction lost according to RFC 1889.
 * The value has a range of 0 (no packet loss) to 255 (all packets lost).
 * </div>
 */
- (void) setFractionLost:(int)value;
/*!
 * <div>
 * Sets the interarrival jitter.
 * </div>
 */
- (void) setInterarrivalJitter:(long long)value;
/*!
 * <div>
 * Sets the last sender report timestamp.
 * </div>
 */
- (void) setLastSenderReportTimestamp:(long long)value;
/*!
 * <div>
 * Sets the synchronization source.
 * </div>
 */
- (void) setSynchronizationSource:(long long)value;
/*!
 * <div>
 * Gets the synchronization source.
 * </div>
 */
- (long long) synchronizationSource;

@end

/*!
 * <div>
 * An RTCP Sender or Receiver Report control frame.
 * </div>
 */
@interface FMIceLinkReportControlFrame : FMIceLinkMediaControlFrame

/*!
 * <div>
 * Gets the report control frame fixed payload header length.
 * </div>
 */
+ (int) fixedPayloadHeaderLength;
/*!
 * <div>
 * Gets the report block.
 * </div>
 * @param synchronizationSource The synchronization source.
 */
- (FMIceLinkReportBlock*) getReportBlockWithSynchronizationSource:(long long)synchronizationSource;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportControlFrame class.
 * </div>
 * @param payloadType The payload type.
 * @param reportBlockOffset The offset of the report block.
 * @param buffer The backing data buffer.
 */
- (instancetype) initWithPayloadType:(int)payloadType reportBlockOffset:(int)reportBlockOffset buffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportControlFrame class.
 * </div>
 * @param payloadType Type of the payload.
 * @param synchronizationSource The synchronization source.
 * @param reportBlock The report block.
 */
- (instancetype) initWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlock:(FMIceLinkReportBlock*)reportBlock;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportControlFrame class.
 * </div>
 * @param payloadType Type of the payload.
 * @param synchronizationSource The synchronization source.
 * @param reportBlock The report block.
 * @param reportBlockOffset The report block offset.
 */
- (instancetype) initWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlock:(FMIceLinkReportBlock*)reportBlock reportBlockOffset:(int)reportBlockOffset;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportControlFrame class.
 * </div>
 * @param payloadType Type of the payload.
 * @param synchronizationSource The synchronization source.
 * @param reportBlocks The report blocks.
 */
- (instancetype) initWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlocks:(NSMutableArray*)reportBlocks;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportControlFrame class.
 * </div>
 * @param payloadType Type of the payload.
 * @param synchronizationSource The synchronization source.
 * @param reportBlocks The report blocks.
 * @param reportBlockOffset The report block offset.
 */
- (instancetype) initWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlocks:(NSMutableArray*)reportBlocks reportBlockOffset:(int)reportBlockOffset;
/*!
 * <div>
 * Gets the feedback message type.
 * </div>
 */
- (int) receptionReportCount;
/*!
 * <div>
 * Gets the report block.
 * </div>
 */
- (FMIceLinkReportBlock*) reportBlock;
/*!
 * <div>
 * Gets the report blocks.
 * </div>
 */
- (NSMutableArray*) reportBlocks;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportControlFrame class.
 * </div>
 * @param payloadType The payload type.
 * @param reportBlockOffset The offset of the report block.
 * @param buffer The backing data buffer.
 */
+ (FMIceLinkReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType reportBlockOffset:(int)reportBlockOffset buffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportControlFrame class.
 * </div>
 * @param payloadType Type of the payload.
 * @param synchronizationSource The synchronization source.
 * @param reportBlock The report block.
 */
+ (FMIceLinkReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlock:(FMIceLinkReportBlock*)reportBlock;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportControlFrame class.
 * </div>
 * @param payloadType Type of the payload.
 * @param synchronizationSource The synchronization source.
 * @param reportBlock The report block.
 * @param reportBlockOffset The report block offset.
 */
+ (FMIceLinkReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlock:(FMIceLinkReportBlock*)reportBlock reportBlockOffset:(int)reportBlockOffset;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportControlFrame class.
 * </div>
 * @param payloadType Type of the payload.
 * @param synchronizationSource The synchronization source.
 * @param reportBlocks The report blocks.
 */
+ (FMIceLinkReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlocks:(NSMutableArray*)reportBlocks;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkReportControlFrame class.
 * </div>
 * @param payloadType Type of the payload.
 * @param synchronizationSource The synchronization source.
 * @param reportBlocks The report blocks.
 * @param reportBlockOffset The report block offset.
 */
+ (FMIceLinkReportControlFrame*) reportControlFrameWithPayloadType:(int)payloadType synchronizationSource:(long long)synchronizationSource reportBlocks:(NSMutableArray*)reportBlocks reportBlockOffset:(int)reportBlockOffset;
/*!
 * <div>
 * Sets the report block.
 * </div>
 */
- (void) setReportBlock:(FMIceLinkReportBlock*)value;
/*!
 * <div>
 * Sets the report blocks.
 * </div>
 */
- (void) setReportBlocks:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the synchronization source.
 * </div>
 */
- (void) setSynchronizationSource:(long long)value;
/*!
 * <div>
 * Gets the synchronization source.
 * </div>
 */
- (long long) synchronizationSource;

@end

/*!
 * <div>
 * Utility class for resampling audio data.
 * </div>
 */
@interface FMIceLinkResampler : NSObject

/*!
 * <div>
 * Gets the default low pass order.
 * </div>
 */
+ (int) defaultLowPassOrder;
/*!
 * <div>
 * Gets the resampling factor.
 * </div>
 */
- (double) factor;
/*!
 * <div>
 * Gets the length of the output given an input set.
 * </div>
 * @param input The input.
 * @return
 */
- (int) getOutputLengthWithInput:(FMIceLinkDataBuffer*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkResampler class.
 * </div>
 * @param factor The resampling factor.
 */
- (instancetype) initWithFactor:(double)factor;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkResampler class.
 * </div>
 * @param sourceClockRate The source clock rate.
 * @param targetClockRate The target clock rate.
 */
- (instancetype) initWithSourceClockRate:(int)sourceClockRate targetClockRate:(int)targetClockRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkResampler class.
 * </div>
 * @param factor The resampling factor.
 */
+ (FMIceLinkResampler*) resamplerWithFactor:(double)factor;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkResampler class.
 * </div>
 * @param sourceClockRate The source clock rate.
 * @param targetClockRate The target clock rate.
 */
+ (FMIceLinkResampler*) resamplerWithSourceClockRate:(int)sourceClockRate targetClockRate:(int)targetClockRate;
/*!
 * <div>
 * Resamples the given audio buffer.
 * </div>
 * @param input The input to resample.
 * @param output The output to target.
 */
- (bool) resampleWithInput:(FMIceLinkDataBuffer*)input output:(FMIceLinkDataBuffer*)output;
/*!
 * <div>
 * Resamples the given audio buffer.
 * </div>
 * @param input The input to resample.
 * @param output The output to target.
 * @param lastBatch Whether or not this is the last batch. If true, input will be read to the end.
 * @return true if the resampling operation was successful; otherwise, false.
 */
- (bool) resampleWithInput:(FMIceLinkDataBuffer*)input output:(FMIceLinkDataBuffer*)output lastBatch:(bool)lastBatch;
/*!
 * <div>
 * Sets the default low pass order.
 * </div>
 */
+ (void) setDefaultLowPassOrder:(int)value;

@end

/*!
 * <div>
 * An RTCP reference picture selection indication.
 * </div>
 */
@interface FMIceLinkRpsi : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRpsi class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRpsi class.
 * </div>
 */
+ (FMIceLinkRpsi*) rpsi;

@end

/*!
 * <div>
 * An RTCP Feedback PS-RPSI Control Frame.
 * </div>
 */
@interface FMIceLinkRpsiControlFrame : FMIceLinkPayloadSpecificControlFrame

/*!
 * <div>
 * Gets the feedback message type byte.
 * </div>
 */
+ (uint8_t) feedbackMessageTypeByte;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRpsiControlFrame class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets the reference picture selection indication.
 * </div>
 */
- (FMIceLinkRpsi*) referencePictureSelectionIndication;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRpsiControlFrame class.
 * </div>
 */
+ (FMIceLinkRpsiControlFrame*) rpsiControlFrame;
/*!
 * <div>
 * Sets the reference picture selection indication.
 * </div>
 */
- (void) setReferencePictureSelectionIndication:(FMIceLinkRpsi*)value;

@end

/*!
 * <div>
 * A receiver report control frame.
 * </div>
 */
@interface FMIceLinkRRControlFrame : FMIceLinkReportControlFrame

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRRControlFrame class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRRControlFrame class.
 * </div>
 * @param buffer An data buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRRControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param reportBlock The report block.
 */
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource reportBlock:(FMIceLinkReportBlock*)reportBlock;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRRControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param reportBlocks The report blocks.
 */
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource reportBlocks:(NSMutableArray*)reportBlocks;
/*!
 * <div>
 * Gets the receiver report payload type.
 * </div>
 */
+ (int) registeredPayloadType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRRControlFrame class.
 * </div>
 */
+ (FMIceLinkRRControlFrame*) rrControlFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRRControlFrame class.
 * </div>
 * @param buffer An data buffer.
 */
+ (FMIceLinkRRControlFrame*) rrControlFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRRControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param reportBlock The report block.
 */
+ (FMIceLinkRRControlFrame*) rrControlFrameWithSynchronizationSource:(long long)synchronizationSource reportBlock:(FMIceLinkReportBlock*)reportBlock;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRRControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param reportBlocks The report blocks.
 */
+ (FMIceLinkRRControlFrame*) rrControlFrameWithSynchronizationSource:(long long)synchronizationSource reportBlocks:(NSMutableArray*)reportBlocks;

@end

/*!
 * <div>
 * A WebRTC/ORTC-compatible collection of local audio/video tracks.
 * </div>
 */
@interface FMIceLinkRtcLocalMedia : FMIceLinkLocalMedia

/*!
 * <div>
 * Gets the active audio converter.
 * </div>
 */
- (FMIceLinkAudioPipe*) activeAudioConverter;
/*!
 * <div>
 * Gets the active audio encoder.
 * </div>
 */
- (FMIceLinkAudioEncoder*) activeAudioEncoder;
/*!
 * <div>
 * Gets the active audio packetizer.
 * </div>
 */
- (FMIceLinkAudioPipe*) activeAudioPacketizer;
/*!
 * <div>
 * Gets the active video converter.
 * </div>
 */
- (FMIceLinkVideoPipe*) activeVideoConverter;
/*!
 * <div>
 * Gets the active video encoder.
 * </div>
 */
- (FMIceLinkVideoEncoder*) activeVideoEncoder;
/*!
 * <div>
 * Gets the active video packetizer.
 * </div>
 */
- (FMIceLinkVideoPipe*) activeVideoPacketizer;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeAudioConverter changes.
 * </div>
 */
- (void) addOnActiveAudioConverterChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeAudioConverter changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkAudioPipe*))) addOnActiveAudioConverterChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeAudioConverter changes.
 * </div>
 */
- (void) addOnActiveAudioConverterChangeWithBlock:(void(^)(FMIceLinkAudioPipe*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeAudioEncoder changes.
 * </div>
 */
- (void) addOnActiveAudioEncoderChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeAudioEncoder changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkAudioEncoder*))) addOnActiveAudioEncoderChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeAudioEncoder changes.
 * </div>
 */
- (void) addOnActiveAudioEncoderChangeWithBlock:(void(^)(FMIceLinkAudioEncoder*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeAudioPacketizer changes.
 * </div>
 */
- (void) addOnActiveAudioPacketizerChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeAudioPacketizer changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkAudioPipe*))) addOnActiveAudioPacketizerChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeAudioPacketizer changes.
 * </div>
 */
- (void) addOnActiveAudioPacketizerChangeWithBlock:(void(^)(FMIceLinkAudioPipe*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeVideoConverter changes.
 * </div>
 */
- (void) addOnActiveVideoConverterChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeVideoConverter changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkVideoPipe*))) addOnActiveVideoConverterChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeVideoConverter changes.
 * </div>
 */
- (void) addOnActiveVideoConverterChangeWithBlock:(void(^)(FMIceLinkVideoPipe*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeVideoEncoder changes.
 * </div>
 */
- (void) addOnActiveVideoEncoderChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeVideoEncoder changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkVideoEncoder*))) addOnActiveVideoEncoderChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeVideoEncoder changes.
 * </div>
 */
- (void) addOnActiveVideoEncoderChangeWithBlock:(void(^)(FMIceLinkVideoEncoder*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeVideoPacketizer changes.
 * </div>
 */
- (void) addOnActiveVideoPacketizerChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeVideoPacketizer changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkVideoPipe*))) addOnActiveVideoPacketizerChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeVideoPacketizer changes.
 * </div>
 */
- (void) addOnActiveVideoPacketizerChangeWithBlock:(void(^)(FMIceLinkVideoPipe*))valueBlock;
/*!
 * <div>
 * Gets the acoustic echo cancellation context.
 * </div>
 */
- (FMIceLinkAecContext*) aecContext;
/*!
 * <div>
 * Gets a value indicating whether acoustic echo cancellation is disabled.
 * </div>
 */
- (bool) aecDisabled;
/*!
 * <div>
 * Gets a value indicating whether audio is disabled.
 * </div>
 */
- (bool) audioDisabled;
/*!
 * <div>
 * Gets the audio outputs.
 * </div>
 */
- (NSMutableArray*) audioOutputs;
/*!
 * <div>
 * Creates an audio recorder.
 * </div>
 * @param inputFormat The input format.
 */
- (FMIceLinkAudioSink*) createAudioRecorderWithInputFormat:(FMIceLinkAudioFormat*)inputFormat;
/*!
 * <div>
 * Creates an audio source.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioSource*) createAudioSourceWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates an H.264 encoder.
 * </div>
 */
- (FMIceLinkVideoEncoder*) createH264Encoder;
/*!
 * <div>
 * Creates an H.264 packetizer.
 * </div>
 * @return
 */
- (FMIceLinkVideoPipe*) createH264Packetizer;
/*!
 * <div>
 * Creates an image converter.
 * </div>
 * @param outputFormat The video output format.
 */
- (FMIceLinkVideoPipe*) createImageConverterWithOutputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Creates an Opus encoder.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioEncoder*) createOpusEncoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates an Opus packetizer.
 * </div>
 * @param config The configuration.
 * @return
 */
- (FMIceLinkAudioPipe*) createOpusPacketizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a PCMA encoder.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioEncoder*) createPcmaEncoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a PCMA packetizer.
 * </div>
 * @param config The configuration.
 * @return
 */
- (FMIceLinkAudioPipe*) createPcmaPacketizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a PCMU encoder.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioEncoder*) createPcmuEncoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a PCMU packetizer.
 * </div>
 * @param config The configuration.
 * @return
 */
- (FMIceLinkAudioPipe*) createPcmuPacketizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a sound converter.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioPipe*) createSoundConverterWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a video recorder.
 * </div>
 * @param inputFormat The output format.
 */
- (FMIceLinkVideoSink*) createVideoRecorderWithInputFormat:(FMIceLinkVideoFormat*)inputFormat;
/*!
 * <div>
 * Creates a video source.
 * </div>
 */
- (FMIceLinkVideoSource*) createVideoSource;
/*!
 * <div>
 * Creates a view sink.
 * </div>
 */
- (FMIceLinkViewSink*) createViewSink;
/*!
 * <div>
 * Creates a VP8 encoder.
 * </div>
 */
- (FMIceLinkVideoEncoder*) createVp8Encoder;
/*!
 * <div>
 * Creates a VP8 packetizer.
 * </div>
 * @return
 */
- (FMIceLinkVideoPipe*) createVp8Packetizer;
/*!
 * <div>
 * Creates a VP9 encoder.
 * </div>
 */
- (FMIceLinkVideoEncoder*) createVp9Encoder;
/*!
 * <div>
 * Creates a VP9 packetizer.
 * </div>
 * @return
 */
- (FMIceLinkVideoPipe*) createVp9Packetizer;
/*!
 * <div>
 * Destroys all media tracks.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Gets the H.264 converter.
 * </div>
 */
- (FMIceLinkVideoPipe*) h264Converter;
/*!
 * <div>
 * Gets whether the H.264 codec is disabled.
 * </div>
 */
- (bool) h264Disabled;
/*!
 * <div>
 * Gets the H.264 encoder.
 * </div>
 */
- (FMIceLinkVideoEncoder*) h264Encoder;
/*!
 * <div>
 * Gets the H.264 packetizer.
 * </div>
 */
- (FMIceLinkVideoPipe*) h264Packetizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtcLocalMedia`1 class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes this instance. Must be called before being used.
 * </div>
 */
- (bool) initialize;
/*!
 * <div>
 * Initializes this instance. Must be called before being used.
 * </div>
 */
- (bool) initializeWithAudioTrackConfig:(FMIceLinkRtcAudioTrackConfig*)audioTrackConfig videoTrackConfig:(FMIceLinkRtcVideoTrackConfig*)videoTrackConfig;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtcLocalMedia`1 class.
 * </div>
 * @param disableAudio Whether to disable audio.
 * @param disableVideo Whether to disable video.
 */
- (instancetype) initWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtcLocalMedia`1 class.
 * </div>
 * @param disableAudio Whether to disable audio.
 * @param disableVideo Whether to disable video.
 * @param aecContext The acoustic echo cancellation context.
 */
- (instancetype) initWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo aecContext:(FMIceLinkAecContext*)aecContext;
/*!
 * <div>
 * Gets the Opus converter.
 * </div>
 */
- (FMIceLinkAudioPipe*) opusConverter;
/*!
 * <div>
 * Gets whether the Opus codec is disabled.
 * </div>
 */
- (bool) opusDisabled;
/*!
 * <div>
 * Gets the Opus encoder.
 * </div>
 */
- (FMIceLinkAudioEncoder*) opusEncoder;
/*!
 * <div>
 * Gets the Opus packetizer.
 * </div>
 */
- (FMIceLinkAudioPipe*) opusPacketizer;
/*!
 * <div>
 * Gets the PCMA converter.
 * </div>
 */
- (FMIceLinkAudioPipe*) pcmaConverter;
/*!
 * <div>
 * Gets whether the PCMA codec is disabled.
 * </div>
 */
- (bool) pcmaDisabled;
/*!
 * <div>
 * Gets the PCMA encoder.
 * </div>
 */
- (FMIceLinkAudioEncoder*) pcmaEncoder;
/*!
 * <div>
 * Gets the PCMA packetizer.
 * </div>
 */
- (FMIceLinkAudioPipe*) pcmaPacketizer;
/*!
 * <div>
 * Gets the PCMU converter.
 * </div>
 */
- (FMIceLinkAudioPipe*) pcmuConverter;
/*!
 * <div>
 * Gets whether the PCMU codec is disabled.
 * </div>
 */
- (bool) pcmuDisabled;
/*!
 * <div>
 * Gets the PCMU encoder.
 * </div>
 */
- (FMIceLinkAudioEncoder*) pcmuEncoder;
/*!
 * <div>
 * Gets the PCMU packetizer.
 * </div>
 */
- (FMIceLinkAudioPipe*) pcmuPacketizer;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeAudioConverter changes.
 * </div>
 */
- (void) removeOnActiveAudioConverterChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeAudioEncoder changes.
 * </div>
 */
- (void) removeOnActiveAudioEncoderChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeAudioPacketizer changes.
 * </div>
 */
- (void) removeOnActiveAudioPacketizerChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeVideoConverter changes.
 * </div>
 */
- (void) removeOnActiveVideoConverterChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeVideoEncoder changes.
 * </div>
 */
- (void) removeOnActiveVideoEncoderChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcLocalMedia`1#activeVideoPacketizer changes.
 * </div>
 */
- (void) removeOnActiveVideoPacketizerChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtcLocalMedia`1 class.
 * </div>
 */
+ (FMIceLinkRtcLocalMedia*) rtcLocalMedia;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtcLocalMedia`1 class.
 * </div>
 * @param disableAudio Whether to disable audio.
 * @param disableVideo Whether to disable video.
 */
+ (FMIceLinkRtcLocalMedia*) rtcLocalMediaWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtcLocalMedia`1 class.
 * </div>
 * @param disableAudio Whether to disable audio.
 * @param disableVideo Whether to disable video.
 * @param aecContext The acoustic echo cancellation context.
 */
+ (FMIceLinkRtcLocalMedia*) rtcLocalMediaWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo aecContext:(FMIceLinkAecContext*)aecContext;
/*!
 * <div>
 * Toggles audio recording.
 * </div>
 */
- (bool) toggleAudioRecording;
/*!
 * <div>
 * Toggles video recording.
 * </div>
 */
- (bool) toggleVideoRecording;
/*!
 * <div>
 * Gets a value indicating whether video is disabled.
 * </div>
 */
- (bool) videoDisabled;
/*!
 * <div>
 * Gets the video outputs.
 * </div>
 */
- (NSMutableArray*) videoOutputs;
/*!
 * <div>
 * Gets the video view, if video is not disabled.
 * </div>
 */
- (id) view;
/*!
 * <div>
 * Gets the video view sink, if video is not disabled.
 * </div>
 */
- (FMIceLinkViewSink*) viewSink;
/*!
 * <div>
 * Gets the VP8 converter.
 * </div>
 */
- (FMIceLinkVideoPipe*) vp8Converter;
/*!
 * <div>
 * Gets whether the VP8 codec is disabled.
 * </div>
 */
- (bool) vp8Disabled;
/*!
 * <div>
 * Gets the VP8 encoder.
 * </div>
 */
- (FMIceLinkVideoEncoder*) vp8Encoder;
/*!
 * <div>
 * Gets the VP8 packetizer.
 * </div>
 */
- (FMIceLinkVideoPipe*) vp8Packetizer;
/*!
 * <div>
 * Gets the VP9 converter.
 * </div>
 */
- (FMIceLinkVideoPipe*) vp9Converter;
/*!
 * <div>
 * Gets whether the VP9 codec is disabled.
 * </div>
 */
- (bool) vp9Disabled;
/*!
 * <div>
 * Gets the VP9 encoder.
 * </div>
 */
- (FMIceLinkVideoEncoder*) vp9Encoder;
/*!
 * <div>
 * Gets the VP9 packetizer.
 * </div>
 */
- (FMIceLinkVideoPipe*) vp9Packetizer;

@end

/*!
 * <div>
 * A WebRTC/ORTC-compatible collection of remote audio/video tracks.
 * </div>
 */
@interface FMIceLinkRtcRemoteMedia : FMIceLinkRemoteMedia

/*!
 * <div>
 * Gets the active audio converter.
 * </div>
 */
- (FMIceLinkAudioPipe*) activeAudioConverter;
/*!
 * <div>
 * Gets the active audio decoder.
 * </div>
 */
- (FMIceLinkAudioDecoder*) activeAudioDecoder;
/*!
 * <div>
 * Gets the active audio depacketizer.
 * </div>
 */
- (FMIceLinkAudioPipe*) activeAudioDepacketizer;
/*!
 * <div>
 * Gets the active audio sink.
 * </div>
 */
- (FMIceLinkAudioSink*) activeAudioSink;
/*!
 * <div>
 * Gets the active audio synchronizer.
 * </div>
 */
- (FMIceLinkAudioSynchronizer*) activeAudioSynchronizer;
/*!
 * <div>
 * Gets the active video converter.
 * </div>
 */
- (FMIceLinkVideoPipe*) activeVideoConverter;
/*!
 * <div>
 * Gets the active video decoder.
 * </div>
 */
- (FMIceLinkVideoDecoder*) activeVideoDecoder;
/*!
 * <div>
 * Gets the active video depacketizer.
 * </div>
 */
- (FMIceLinkVideoPipe*) activeVideoDepacketizer;
/*!
 * <div>
 * Gets the active video synchronizer.
 * </div>
 */
- (FMIceLinkVideoSynchronizer*) activeVideoSynchronizer;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioConverter changes.
 * </div>
 */
- (void) addOnActiveAudioConverterChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioConverter changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkAudioPipe*))) addOnActiveAudioConverterChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioConverter changes.
 * </div>
 */
- (void) addOnActiveAudioConverterChangeWithBlock:(void(^)(FMIceLinkAudioPipe*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioDecoder changes.
 * </div>
 */
- (void) addOnActiveAudioDecoderChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioDecoder changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkAudioDecoder*))) addOnActiveAudioDecoderChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioDecoder changes.
 * </div>
 */
- (void) addOnActiveAudioDecoderChangeWithBlock:(void(^)(FMIceLinkAudioDecoder*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioDepacketizer changes.
 * </div>
 */
- (void) addOnActiveAudioDepacketizerChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioDepacketizer changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkAudioPipe*))) addOnActiveAudioDepacketizerChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioDepacketizer changes.
 * </div>
 */
- (void) addOnActiveAudioDepacketizerChangeWithBlock:(void(^)(FMIceLinkAudioPipe*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioSink changes.
 * </div>
 */
- (void) addOnActiveAudioSinkChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioSink changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkAudioSink*))) addOnActiveAudioSinkChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioSink changes.
 * </div>
 */
- (void) addOnActiveAudioSinkChangeWithBlock:(void(^)(FMIceLinkAudioSink*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioSynchronizer changes.
 * </div>
 */
- (void) addOnActiveAudioSynchronizerChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioSynchronizer changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkAudioSynchronizer*))) addOnActiveAudioSynchronizerChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioSynchronizer changes.
 * </div>
 */
- (void) addOnActiveAudioSynchronizerChangeWithBlock:(void(^)(FMIceLinkAudioSynchronizer*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoConverter changes.
 * </div>
 */
- (void) addOnActiveVideoConverterChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoConverter changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkVideoPipe*))) addOnActiveVideoConverterChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoConverter changes.
 * </div>
 */
- (void) addOnActiveVideoConverterChangeWithBlock:(void(^)(FMIceLinkVideoPipe*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoDecoder changes.
 * </div>
 */
- (void) addOnActiveVideoDecoderChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoDecoder changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkVideoDecoder*))) addOnActiveVideoDecoderChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoDecoder changes.
 * </div>
 */
- (void) addOnActiveVideoDecoderChangeWithBlock:(void(^)(FMIceLinkVideoDecoder*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoDepacketizer changes.
 * </div>
 */
- (void) addOnActiveVideoDepacketizerChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoDepacketizer changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkVideoPipe*))) addOnActiveVideoDepacketizerChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoDepacketizer changes.
 * </div>
 */
- (void) addOnActiveVideoDepacketizerChangeWithBlock:(void(^)(FMIceLinkVideoPipe*))valueBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoSynchronizer changes.
 * </div>
 */
- (void) addOnActiveVideoSynchronizerChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoSynchronizer changes.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkVideoSynchronizer*))) addOnActiveVideoSynchronizerChangeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoSynchronizer changes.
 * </div>
 */
- (void) addOnActiveVideoSynchronizerChangeWithBlock:(void(^)(FMIceLinkVideoSynchronizer*))valueBlock;
/*!
 * <div>
 * Gets the acoustic echo cancellation context.
 * </div>
 */
- (FMIceLinkAecContext*) aecContext;
/*!
 * <div>
 * Gets a value indicating whether acoustic echo cancellation is disabled.
 * </div>
 */
- (bool) aecDisabled;
/*!
 * <div>
 * Gets a value indicating whether audio is disabled.
 * </div>
 */
- (bool) audioDisabled;
/*!
 * <div>
 * Gets the audio inputs.
 * </div>
 */
- (NSMutableArray*) audioInputs;
/*!
 * <div>
 * Creates an audio recorder.
 * </div>
 * @param inputFormat The input format.
 */
- (FMIceLinkAudioSink*) createAudioRecorderWithInputFormat:(FMIceLinkAudioFormat*)inputFormat;
/*!
 * <div>
 * Creates an audio sink.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioSink*) createAudioSinkWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates an audio synchronizer.
 * </div>
 * @param format The format.
 */
- (FMIceLinkAudioSynchronizer*) createAudioSynchronizerWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Creates an H.264 decoder.
 * </div>
 */
- (FMIceLinkVideoDecoder*) createH264Decoder;
/*!
 * <div>
 * Creates an H.264 depacketizer.
 * </div>
 */
- (FMIceLinkVideoPipe*) createH264Depacketizer;
/*!
 * <div>
 * Creates an image converter.
 * </div>
 * @param outputFormat The output format.
 */
- (FMIceLinkVideoPipe*) createImageConverterWithOutputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Creates an Opus decoder.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioDecoder*) createOpusDecoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates an Opus depacketizer.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioPipe*) createOpusDepacketizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a PCMA decoder.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioDecoder*) createPcmaDecoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a PCMA depacketizer.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioPipe*) createPcmaDepacketizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a PCMU decoder.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioDecoder*) createPcmuDecoderWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a PCMU depacketizer.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioPipe*) createPcmuDepacketizerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a sound converter.
 * </div>
 * @param config The configuration.
 */
- (FMIceLinkAudioPipe*) createSoundConverterWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Creates a video recorder.
 * </div>
 * @param inputFormat The output format.
 */
- (FMIceLinkVideoSink*) createVideoRecorderWithInputFormat:(FMIceLinkVideoFormat*)inputFormat;
/*!
 * <div>
 * Creates a video synchronizer.
 * </div>
 * @param format The format.
 */
- (FMIceLinkVideoSynchronizer*) createVideoSynchronizerWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Creates a view sink.
 * </div>
 */
- (FMIceLinkViewSink*) createViewSink;
/*!
 * <div>
 * Creates a VP8 decoder.
 * </div>
 */
- (FMIceLinkVideoDecoder*) createVp8Decoder;
/*!
 * <div>
 * Creates a VP8 depacketizer.
 * </div>
 */
- (FMIceLinkVideoPipe*) createVp8Depacketizer;
/*!
 * <div>
 * Creates a VP9 decoder.
 * </div>
 */
- (FMIceLinkVideoDecoder*) createVp9Decoder;
/*!
 * <div>
 * Creates a VP9 depacketizer.
 * </div>
 */
- (FMIceLinkVideoPipe*) createVp9Depacketizer;
/*!
 * <div>
 * Destroys all media tracks.
 * </div>
 */
- (void) destroy;
/*!
 * <div>
 * Gets the H.264 converter.
 * </div>
 */
- (FMIceLinkVideoPipe*) h264Converter;
/*!
 * <div>
 * Gets the H.264 decoder.
 * </div>
 */
- (FMIceLinkVideoDecoder*) h264Decoder;
/*!
 * <div>
 * Gets the H.264 depacketizer.
 * </div>
 */
- (FMIceLinkVideoPipe*) h264Depacketizer;
/*!
 * <div>
 * Gets whether the H.264 codec is disabled.
 * </div>
 */
- (bool) h264Disabled;
/*!
 * <div>
 * Gets the H.264 synchronizer.
 * </div>
 */
- (FMIceLinkVideoSynchronizer*) h264Synchronizer;
/*!
 * <div>
 * Initializes this instance. Must be called before being used.
 * </div>
 */
- (bool) initialize;
/*!
 * <div>
 * Initializes this instance. Must be called before being used.
 * </div>
 */
- (bool) initializeWithAudioTrackConfig:(FMIceLinkRtcAudioTrackConfig*)audioTrackConfig videoTrackConfig:(FMIceLinkRtcVideoTrackConfig*)videoTrackConfig;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtcRemoteMedia`1 class.
 * </div>
 * @param disableAudio Whether to disable audio.
 * @param disableVideo Whether to disable video.
 */
- (instancetype) initWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtcRemoteMedia`1 class.
 * </div>
 * @param disableAudio Whether to disable audio.
 * @param disableVideo Whether to disable video.
 * @param aecContext The acoustic echo cancellation context.
 */
- (instancetype) initWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo aecContext:(FMIceLinkAecContext*)aecContext;
/*!
 * <div>
 * Gets the Opus converter.
 * </div>
 */
- (FMIceLinkAudioPipe*) opusConverter;
/*!
 * <div>
 * Gets the Opus decoder.
 * </div>
 */
- (FMIceLinkAudioDecoder*) opusDecoder;
/*!
 * <div>
 * Gets the Opus depacketizer.
 * </div>
 */
- (FMIceLinkAudioPipe*) opusDepacketizer;
/*!
 * <div>
 * Gets whether the Opus codec is disabled.
 * </div>
 */
- (bool) opusDisabled;
/*!
 * <div>
 * Gets the Opus sink.
 * </div>
 */
- (FMIceLinkAudioSink*) opusSink;
/*!
 * <div>
 * Gets the Opus synchronizer.
 * </div>
 */
- (FMIceLinkAudioSynchronizer*) opusSynchronizer;
/*!
 * <div>
 * Gets the PCMA converter.
 * </div>
 */
- (FMIceLinkAudioPipe*) pcmaConverter;
/*!
 * <div>
 * Gets the PCMA decoder.
 * </div>
 */
- (FMIceLinkAudioDecoder*) pcmaDecoder;
/*!
 * <div>
 * Gets the PCMA depacketizer.
 * </div>
 */
- (FMIceLinkAudioPipe*) pcmaDepacketizer;
/*!
 * <div>
 * Gets whether the PCMA codec is disabled.
 * </div>
 */
- (bool) pcmaDisabled;
/*!
 * <div>
 * Gets the PCMA sink.
 * </div>
 */
- (FMIceLinkAudioSink*) pcmaSink;
/*!
 * <div>
 * Gets the PCMA synchronizer.
 * </div>
 */
- (FMIceLinkAudioSynchronizer*) pcmaSynchronizer;
/*!
 * <div>
 * Gets the PCMU converter.
 * </div>
 */
- (FMIceLinkAudioPipe*) pcmuConverter;
/*!
 * <div>
 * Gets the PCMU decoder.
 * </div>
 */
- (FMIceLinkAudioDecoder*) pcmuDecoder;
/*!
 * <div>
 * Gets the PCMU depacketizer.
 * </div>
 */
- (FMIceLinkAudioPipe*) pcmuDepacketizer;
/*!
 * <div>
 * Gets whether the PCMU codec is disabled.
 * </div>
 */
- (bool) pcmuDisabled;
/*!
 * <div>
 * Gets the PCMU sink.
 * </div>
 */
- (FMIceLinkAudioSink*) pcmuSink;
/*!
 * <div>
 * Gets the PCMU synchronizer.
 * </div>
 */
- (FMIceLinkAudioSynchronizer*) pcmuSynchronizer;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioConverter changes.
 * </div>
 */
- (void) removeOnActiveAudioConverterChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioDecoder changes.
 * </div>
 */
- (void) removeOnActiveAudioDecoderChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioDepacketizer changes.
 * </div>
 */
- (void) removeOnActiveAudioDepacketizerChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioSink changes.
 * </div>
 */
- (void) removeOnActiveAudioSinkChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeAudioSynchronizer changes.
 * </div>
 */
- (void) removeOnActiveAudioSynchronizerChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoConverter changes.
 * </div>
 */
- (void) removeOnActiveVideoConverterChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoDecoder changes.
 * </div>
 */
- (void) removeOnActiveVideoDecoderChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoDepacketizer changes.
 * </div>
 */
- (void) removeOnActiveVideoDepacketizerChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Removes a handler that is raised when the FMIceLinkRtcRemoteMedia`1#activeVideoSynchronizer changes.
 * </div>
 */
- (void) removeOnActiveVideoSynchronizerChange:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtcRemoteMedia`1 class.
 * </div>
 * @param disableAudio Whether to disable audio.
 * @param disableVideo Whether to disable video.
 */
+ (FMIceLinkRtcRemoteMedia*) rtcRemoteMediaWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtcRemoteMedia`1 class.
 * </div>
 * @param disableAudio Whether to disable audio.
 * @param disableVideo Whether to disable video.
 * @param aecContext The acoustic echo cancellation context.
 */
+ (FMIceLinkRtcRemoteMedia*) rtcRemoteMediaWithDisableAudio:(bool)disableAudio disableVideo:(bool)disableVideo aecContext:(FMIceLinkAecContext*)aecContext;
/*!
 * <div>
 * Toggles audio recording.
 * </div>
 */
- (bool) toggleAudioRecording;
/*!
 * <div>
 * Toggles video recording.
 * </div>
 */
- (bool) toggleVideoRecording;
/*!
 * <div>
 * Gets a value indicating whether video is disabled.
 * </div>
 */
- (bool) videoDisabled;
/*!
 * <div>
 * Gets the video inputs.
 * </div>
 */
- (NSMutableArray*) videoInputs;
/*!
 * <div>
 * Gets the video view, if video is not disabled.
 * </div>
 */
- (id) view;
/*!
 * <div>
 * Gets the video view sink, if video is not disabled.
 * </div>
 */
- (FMIceLinkViewSink*) viewSink;
/*!
 * <div>
 * Gets the VP8 converter.
 * </div>
 */
- (FMIceLinkVideoPipe*) vp8Converter;
/*!
 * <div>
 * Gets the VP8 decoder.
 * </div>
 */
- (FMIceLinkVideoDecoder*) vp8Decoder;
/*!
 * <div>
 * Gets the VP8 depacketizer.
 * </div>
 */
- (FMIceLinkVideoPipe*) vp8Depacketizer;
/*!
 * <div>
 * Gets whether the VP8 codec is disabled.
 * </div>
 */
- (bool) vp8Disabled;
/*!
 * <div>
 * Gets the VP8 synchronizer.
 * </div>
 */
- (FMIceLinkVideoSynchronizer*) vp8Synchronizer;
/*!
 * <div>
 * Gets the VP9 converter.
 * </div>
 */
- (FMIceLinkVideoPipe*) vp9Converter;
/*!
 * <div>
 * Gets the VP9 decoder.
 * </div>
 */
- (FMIceLinkVideoDecoder*) vp9Decoder;
/*!
 * <div>
 * Gets the VP9 depacketizer.
 * </div>
 */
- (FMIceLinkVideoPipe*) vp9Depacketizer;
/*!
 * <div>
 * Gets whether the VP9 codec is disabled.
 * </div>
 */
- (bool) vp9Disabled;
/*!
 * <div>
 * Gets the VP9 synchronizer.
 * </div>
 */
- (FMIceLinkVideoSynchronizer*) vp9Synchronizer;

@end

/*!
 * <div>
 * An RTP packet.
 * </div>
 */
@interface FMIceLinkRtpPacket : NSObject

/*!
 * <div>
 * Gets the buffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) buffer;
/*!
 * <div>
 * Gets the number of FMIceLinkRtpPacket#contributingSources.
 * </div>
 */
- (int) contributingSourceCount;
/*!
 * <div>
 * Gets the contributing sources.
 * </div>
 */
- (NSMutableArray*) contributingSources;
/*!
 * <div>
 * Gets the length of the FMIceLinkRtpPacket#contributingSources in bytes.
 * </div>
 */
- (int) contributingSourcesLength;
/*!
 * <div>
 * Gets the offset of the FMIceLinkRtpPacket#contributingSources array.
 * </div>
 */
- (int) contributingSourcesOffset;
/*!
 * <div>
 * Gets a value indicating whether this FMIceLinkRtpPacket has a header extension.
 * If the extension bit is set, the fixed header MUST be followed by exactly one header extension.
 * </div>
 */
- (bool) extension;
/*!
 * <div>
 * Gets the length of the fixed header.
 * </div>
 */
+ (int) fixedHeaderLength;
/*!
 * <div>
 * Retrieves the difference between two sequence numbers
 * while accounting for overflow rollover.
 * </div>
 * @param sequenceNumber The current sequence number.
 * @param lastSequenceNumber The last (previous) sequence number.
 * @return The difference between the two sequence numbers.
 */
+ (int) getSequenceNumberDeltaWithSequenceNumber:(int)sequenceNumber lastSequenceNumber:(int)lastSequenceNumber;
/*!
 * <div>
 * Gets the header.
 * </div>
 */
- (FMIceLinkDataBuffer*) header;
/*!
 * <div>
 * Gets the header extension.
 * </div>
 */
- (FMIceLinkDataBuffer*) headerExtension;
/*!
 * <div>
 * Gets the header extension ID.
 * </div>
 */
- (int) headerExtensionId;
/*!
 * <div>
 * Gets the length of the FMIceLinkRtpPacket#headerExtension in bytes.
 * </div>
 */
- (int) headerExtensionLength;
/*!
 * <div>
 * Gets the offset of the FMIceLinkRtpPacket#headerExtensionId.
 * </div>
 */
- (int) headerExtensionOffset;
/*!
 * <div>
 * Gets the length of the fixed and variable headers.
 * </div>
 */
- (int) headerLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpPacket class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpPacket class.
 * </div>
 * @param payload The payload for the RTP packet.
 */
- (instancetype) initWithPayload:(FMIceLinkDataBuffer*)payload;
/*!
 * <div>
 * Gets a value indicating whether this FMIceLinkRtpPacket has the marker flag set.
 * </div>
 */
- (bool) marker;
/*!
 * <div>
 * Gets a value indicating whether this FMIceLinkRtpPacket is padded.
 * </div>
 */
- (bool) padding;
/*!
 * <div>
 * Gets the padding length.
 * </div>
 */
- (int) paddingLength;
/*!
 * <div>
 * Gets the packet payload.
 * </div>
 */
- (FMIceLinkDataBuffer*) payload;
/*!
 * <div>
 * Gets the length of the FMIceLinkRtpPacket#payload.
 * </div>
 */
- (int) payloadLength;
/*!
 * <div>
 * Gets the offset of the FMIceLinkRtpPacket#payload.
 * </div>
 */
- (int) payloadOffset;
/*!
 * <div>
 * Gets the payload type.
 * </div>
 */
- (int) payloadType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpPacket class.
 * </div>
 */
+ (FMIceLinkRtpPacket*) rtpPacket;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkRtpPacket class.
 * </div>
 * @param payload The payload for the RTP packet.
 */
+ (FMIceLinkRtpPacket*) rtpPacketWithPayload:(FMIceLinkDataBuffer*)payload;
/*!
 * <div>
 * Gets the sequence number.
 * </div>
 */
- (int) sequenceNumber;
/*!
 * <div>
 * Sets the contributing sources.
 * </div>
 */
- (void) setContributingSources:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the header extension.
 * </div>
 */
- (void) setHeaderExtension:(FMIceLinkDataBuffer*)value;
/*!
 * <div>
 * Sets the header extension ID.
 * </div>
 */
- (void) setHeaderExtensionId:(int)value;
/*!
 * <div>
 * Sets a value indicating whether this FMIceLinkRtpPacket has the marker flag set.
 * </div>
 */
- (void) setMarker:(bool)value;
/*!
 * <div>
 * Sets a value indicating whether this FMIceLinkRtpPacket is padded.
 * </div>
 */
- (void) setPadding:(bool)value;
/*!
 * <div>
 * Sets the packet payload.
 * </div>
 */
- (void) setPayload:(FMIceLinkDataBuffer*)value;
/*!
 * <div>
 * Sets the payload type.
 * </div>
 */
- (void) setPayloadType:(int)value;
/*!
 * <div>
 * Sets the sequence number.
 * </div>
 */
- (void) setSequenceNumber:(int)value;
/*!
 * <div>
 * Sets the synchronization source.
 * </div>
 */
- (void) setSynchronizationSource:(long long)value;
/*!
 * <div>
 * Sets the timestamp.
 * </div>
 */
- (void) setTimestamp:(long long)value;
/*!
 * <div>
 * Sets the version.
 * This field identifies the version of RTP.  The version defined by
 * this specification is two(2).  (The value 1 is used by the first
 * draft version of RTP and the value 0 is used by the protocol
 * initially implemented in the "vat" audio tool.)
 * </div>
 */
- (void) setVersion:(int)value;
/*!
 * <div>
 * Gets the synchronization source.
 * </div>
 */
- (long long) synchronizationSource;
/*!
 * <div>
 * Gets the timestamp.
 * </div>
 */
- (long long) timestamp;
/*!
 * <div>
 * Gets the length of the variable header.
 * </div>
 */
- (int) variableHeaderLength;
/*!
 * <div>
 * Gets the version.
 * This field identifies the version of RTP.  The version defined by
 * this specification is two(2).  (The value 1 is used by the first
 * draft version of RTP and the value 0 is used by the protocol
 * initially implemented in the "vat" audio tool.)
 * </div>
 */
- (int) version;
/*!
 * <div>
 * Parses the specified buffer.
 * </div>
 * @param buffer The buffer.
 * @return Rtp.Packet
 */
+ (FMIceLinkRtpPacket*) wrapWithBuffer:(FMIceLinkDataBuffer*)buffer;

@end

/*!
 * <div>
 * An RTP packet header.
 * </div>
 */
@interface FMIceLinkRtpPacketHeader : NSObject

/*!
 * <div>
 * Calculates the length of the header. At least 12 bytes.
 * </div>
 */
- (int) calculateHeaderLength;
/*!
 * <div>
 * Clones this RtpPacketHeader instance.
 * </div>
 */
- (FMIceLinkRtpPacketHeader*) clone;
/*!
 * <div>
 * Gets the number of contributing sources added to this rtp packet.
 * </div>
 */
- (int) contributingSourceCount;
/*!
 * <div>
 * Gets the contributing sources in this rtp packet.
 * </div>
 */
- (NSMutableArray*) contributingSources;
/*!
 * <div>
 * Gets if there is an extension added to this rtp packet.
 * </div>
 */
- (bool) extension;
/*!
 * <div>
 * Gets the length of the fixed header.
 * </div>
 */
+ (int) fixedHeaderLength;
/*!
 * <div>
 * Gets the header extension.
 * </div>
 */
- (NSObject<FMIceLinkIRtpHeaderExtension>*) headerExtension;
/*!
 * <div>
 * Creates a new instance of the Packet Header.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets if the marker bit is set.
 * </div>
 */
- (bool) marker;
/*!
 * <div>
 * Gets if this rtp packet has padding.
 * </div>
 */
- (bool) padding;
/*!
 * <div>
 * Gets the number of bytes of padding of the decoded rtp packet.
 * </div>
 */
- (int) paddingLength;
/*!
 * <div>
 * Gets the payload type of this rtp packet.
 * </div>
 */
- (int) payloadType;
/*!
 * <div>
 * Parses the Rtp header from a DataBuffer. If padding exists, also calculates the padding length.
 * </div>
 * @param buffer The DataBuffer containing the header and payload.
 */
+ (FMIceLinkRtpPacketHeader*) readFromWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Creates a new instance of the Packet Header.
 * </div>
 */
+ (FMIceLinkRtpPacketHeader*) rtpPacketHeader;
/*!
 * <div>
 * Gets the sequence number of the packet.
 * </div>
 */
- (int) sequenceNumber;
/*!
 * <div>
 * Sets the number of contributing sources added to this rtp packet.
 * </div>
 */
- (void) setContributingSourceCount:(int)value;
/*!
 * <div>
 * Sets the contributing sources in this rtp packet.
 * </div>
 */
- (void) setContributingSources:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the header extension.
 * </div>
 */
- (void) setHeaderExtension:(NSObject<FMIceLinkIRtpHeaderExtension>*)value;
/*!
 * <div>
 * Sets if the marker bit is set.
 * </div>
 */
- (void) setMarker:(bool)value;
/*!
 * <div>
 * Sets if this rtp packet has padding.
 * </div>
 */
- (void) setPadding:(bool)value;
/*!
 * <div>
 * Sets the payload type of this rtp packet.
 * </div>
 */
- (void) setPayloadType:(int)value;
/*!
 * <div>
 * Sets the sequence number of the packet.
 * </div>
 */
- (void) setSequenceNumber:(int)value;
/*!
 * <div>
 * Sets the synchronization source source of the packet.
 * </div>
 */
- (void) setSynchronizationSource:(long long)value;
/*!
 * <div>
 * Sets the timestamp of the packet.
 * </div>
 */
- (void) setTimestamp:(long long)value;
/*!
 * <div>
 * Sets the version of the rtp packet. Should be 2.
 * </div>
 */
- (void) setVersion:(int)value;
/*!
 * <div>
 * Gets the synchronization source source of the packet.
 * </div>
 */
- (long long) synchronizationSource;
/*!
 * <div>
 * Gets the timestamp of the packet.
 * </div>
 */
- (long long) timestamp;
/*!
 * <div>
 * Gets the version of the rtp packet. Should be 2.
 * </div>
 */
- (int) version;
/*!
 * <div>
 * Writes this Rtp packet to a DataBuffer starting at the offset.
 * </div>
 * @param buffer
 * @param offset
 */
- (void) writeToWithBuffer:(FMIceLinkDataBuffer*)buffer offset:(int)offset;

@end

/*!
 * <div>
 * An RTCP source description chunk.
 * </div>
 */
@interface FMIceLinkSdesChunk : NSObject

/*!
 * <div>
 * Gets the data buffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) dataBuffer;
/*!
 * <div>
 * Gets the fixed payload header length.
 * </div>
 */
+ (int) fixedPayloadHeaderLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesChunk class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesChunk class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param sourceDescriptionItem The source description item.
 */
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource sourceDescriptionItem:(FMIceLinkSdesItem*)sourceDescriptionItem;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesChunk class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param sourceDescriptionItems The source description items.
 */
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource sourceDescriptionItems:(NSMutableArray*)sourceDescriptionItems;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesChunk class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkSdesChunk*) sdesChunkWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesChunk class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param sourceDescriptionItem The source description item.
 */
+ (FMIceLinkSdesChunk*) sdesChunkWithSynchronizationSource:(long long)synchronizationSource sourceDescriptionItem:(FMIceLinkSdesItem*)sourceDescriptionItem;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesChunk class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param sourceDescriptionItems The source description items.
 */
+ (FMIceLinkSdesChunk*) sdesChunkWithSynchronizationSource:(long long)synchronizationSource sourceDescriptionItems:(NSMutableArray*)sourceDescriptionItems;
/*!
 * <div>
 * Sets the source description items.
 * </div>
 */
- (void) setSourceDescriptionItems:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the SSRC/CSRC identifier.
 * </div>
 */
- (void) setSynchronizationSource:(long long)value;
/*!
 * <div>
 * Gets the source description items.
 * </div>
 */
- (NSMutableArray*) sourceDescriptionItems;
/*!
 * <div>
 * Gets the SSRC/CSRC identifier.
 * </div>
 */
- (long long) synchronizationSource;

@end

/*!
 * <div>
 * An RTCP SDES packet.
 * </div>
 */
@interface FMIceLinkSdesControlFrame : FMIceLinkMediaControlFrame

/*!
 * <div>
 * Gets the source description chunks.
 * </div>
 */
- (NSMutableArray*) chunks;
/*!
 * <div>
 * Gets the length of the fixed payload header.
 * </div>
 */
+ (int) fixedPayloadHeaderLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesControlFrame class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesControlFrame class.
 * </div>
 * @param chunk The chunk.
 */
- (instancetype) initWithChunk:(FMIceLinkSdesChunk*)chunk;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesControlFrame class.
 * </div>
 * @param chunks The chunks.
 */
- (instancetype) initWithChunks:(NSMutableArray*)chunks;
/*!
 * <div>
 * Gets the session description payload type.
 * </div>
 */
+ (int) registeredPayloadType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesControlFrame class.
 * </div>
 */
+ (FMIceLinkSdesControlFrame*) sdesControlFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkSdesControlFrame*) sdesControlFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesControlFrame class.
 * </div>
 * @param chunk The chunk.
 */
+ (FMIceLinkSdesControlFrame*) sdesControlFrameWithChunk:(FMIceLinkSdesChunk*)chunk;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesControlFrame class.
 * </div>
 * @param chunks The chunks.
 */
+ (FMIceLinkSdesControlFrame*) sdesControlFrameWithChunks:(NSMutableArray*)chunks;
/*!
 * <div>
 * Gets the source count.
 * </div>
 */
- (int) sourceCount;

@end

/*!
 * <div>
 * An RTCP source description item.
 * </div>
 */
@interface FMIceLinkSdesItem : NSObject

/*!
 * <div>
 * Gets the data buffer.
 * </div>
 */
- (FMIceLinkDataBuffer*) dataBuffer;
/*!
 * <div>
 * Gets the fixed payload header length.
 * </div>
 */
+ (int) fixedPayloadHeaderLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesItem class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesItem class.
 * </div>
 * @param type The type.
 * @param text The text.
 */
- (instancetype) initWithType:(int)type text:(NSString*)text;
/*!
 * <div>
 * Gets the length.
 * </div>
 */
- (int) length;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesItem class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkSdesItem*) sdesItemWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdesItem class.
 * </div>
 * @param type The type.
 * @param text The text.
 */
+ (FMIceLinkSdesItem*) sdesItemWithType:(int)type text:(NSString*)text;
/*!
 * <div>
 * Sets the type.
 * </div>
 */
- (void) setType:(int)value;
/*!
 * <div>
 * Gets the text.
 * </div>
 */
- (NSString*) text;
/*!
 * <div>
 * Gets the type.
 * </div>
 */
- (int) type;

@end

/*!
 * <div>
 * An SDES Item Type.
 * </div>
 */
@interface FMIceLinkSdesItemType : NSObject

/*!
 * <div>
 * Gets the canonical name (CNAME) type.
 * </div>
 */
+ (uint8_t) canonicalName;
/*!
 * <div>
 * Gets the email address (EMAIL) type.
 * </div>
 */
+ (uint8_t) emailAddress;
- (instancetype) init;
/*!
 * <div>
 * Gets the location (LOC) type.
 * </div>
 */
+ (uint8_t) location;
/*!
 * <div>
 * Gets the notice/status (NOTE) type.
 * </div>
 */
+ (uint8_t) notice;
/*!
 * <div>
 * Gets the null type.
 * </div>
 */
+ (uint8_t) null;
/*!
 * <div>
 * Gets the phone number (PHONE) type.
 * </div>
 */
+ (uint8_t) phoneNumber;
/*!
 * <div>
 * Gets the private extensions (PRIV) type.
 * </div>
 */
+ (uint8_t) privateExtensions;
+ (FMIceLinkSdesItemType*) sdesItemType;
/*!
 * <div>
 * Gets the name of the tool (TOOL) type.
 * </div>
 */
+ (uint8_t) toolName;
/*!
 * <div>
 * Gets the name of the user (NAME) type.
 * </div>
 */
+ (uint8_t) userName;

@end

@interface FMIceLinkSdesPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkSdesPolicy)value;

@end

/*!
 * <div>
 * Defines valid SDP address types.
 * </div>
 */
@interface FMIceLinkSdpAddressType : NSObject

/*!
 * <div>
 * Gets the SDP address type for the specified IP address.
 * </div>
 * @param ipAddress The IP address.
 */
+ (NSString*) getAddressTypeForAddressWithIPAddress:(NSString*)ipAddress;
/*!
 * <div>
 * Gets the SDP address type meaning "IP version 4".
 * </div>
 */
+ (NSString*) ip4;
/*!
 * <div>
 * Gets the SDP address type meaning "IP version 6".
 * </div>
 */
+ (NSString*) ip6;

@end

@interface FMIceLinkSdpAttributeTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkSdpAttributeType)value;

@end

/*!
 * <div>
 * An SDP bandwidth element.
 * </div>
 */
@interface FMIceLinkSdpBandwidth : NSObject

/*!
 * <div>
 * Gets the type of bandwidth. See FMIceLinkSdpBandwidth#bandwidthType for possible values.
 * </div>
 */
- (NSString*) bandwidthType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpBandwidth class.
 * </div>
 * @param bandwidthType The type of bandwidth. See FMIceLinkSdpBandwidth#bandwidthType for possible values.
 * @param value The bandwidth, typically in kilobits per second.
 */
+ (FMIceLinkSdpBandwidth*) bandwidthWithBandwidthType:(NSString*)bandwidthType value:(long long)value;
/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpBandwidth class.
 * </div>
 * @param bandwidthType The type of bandwidth. See FMIceLinkSdpBandwidth#bandwidthType for possible values.
 * @param value The bandwidth, typically in kilobits per second.
 */
- (instancetype) initWithBandwidthType:(NSString*)bandwidthType value:(long long)value;
/*!
 * <div>
 * Creates an FMIceLinkSdpBandwidth instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpBandwidth*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Gets the bandwidth, typically in kilobits per second.
 * </div>
 */
- (long long) value;

@end

/*!
 * <div>
 * Defines valid SDP bandwidth types.
 * </div>
 */
@interface FMIceLinkSdpBandwidthType : NSObject

/*!
 * <div>
 * Gets the SDP bandwidth type meaning "Application Specific".
 * </div>
 */
+ (NSString*) applicationSpecific;
/*!
 * <div>
 * Gets the SDP bandwidth type meaning "Conference Total".
 * </div>
 */
+ (NSString*) conferenceTotal;
/*!
 * <div>
 * Gets the SDP bandwidth type meaning "RTCP Receivers".
 * </div>
 */
+ (NSString*) rtcpReceivers;
/*!
 * <div>
 * Gets the SDP bandwidth type meaning "RTCP Senders".
 * </div>
 */
+ (NSString*) rtcpSenders;
/*!
 * <div>
 * Gets the SDP bandwidth type meaning "Transport Independent Application Specific Maximum".
 * </div>
 */
+ (NSString*) transportIndependentApplicationSpecificMaximum;

@end

/*!
 * <div>
 * An SDP encryption key element.
 * </div>
 */
@interface FMIceLinkSdpEncryptionKey : NSObject

/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
+ (FMIceLinkSdpEncryptionKey*) encryptionKey;
- (instancetype) init;
/*!
 * <div>
 * Creates an FMIceLinkSdpEncryptionKey instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpEncryptionKey*) parseWithS:(NSString*)s;

@end

/*!
 * <div>
 * An SDP encryption key with a method of "base64".
 * </div>
 */
@interface FMIceLinkSdpBase64EncryptionKey : FMIceLinkSdpEncryptionKey

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpBase64EncryptionKey class.
 * </div>
 * @param encodedEncryptionKey The base64-encoded encryption key.
 */
+ (FMIceLinkSdpBase64EncryptionKey*) base64EncryptionKeyWithEncodedEncryptionKey:(NSString*)encodedEncryptionKey;
/*!
 * <div>
 * Gets the base64-encoded encryption key.
 * </div>
 */
- (NSString*) encodedEncryptionKey;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpBase64EncryptionKey class.
 * </div>
 * @param encodedEncryptionKey The base64-encoded encryption key.
 */
- (instancetype) initWithEncodedEncryptionKey:(NSString*)encodedEncryptionKey;

@end

/*!
 * <div>
 * This attribute gives the dot-separated hierarchical category of
 * the session.  This is to enable a receiver to filter unwanted
 * sessions by category.  There is no central registry of
 * categories.  It is a session-level attribute, and it is not
 * dependent on charset.
 * </div>
 */
@interface FMIceLinkSdpCategoryAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Gets the dot-separated hierarchical category of the session.
 * </div>
 */
- (NSString*) category;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpCategoryAttribute class.
 * </div>
 * @param category The dot-separated hierarchical category of the session.
 */
+ (FMIceLinkSdpCategoryAttribute*) categoryAttributeWithCategory:(NSString*)category;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpCategoryAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpCategoryAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpCategoryAttribute class.
 * </div>
 * @param category The dot-separated hierarchical category of the session.
 */
- (instancetype) initWithCategory:(NSString*)category;

@end

/*!
 * <div>
 * This specifies the character set to be used to display the
 * session name and information data.  By default, the ISO-10646
 * character set in UTF-8 encoding is used.  If a more compact
 * representation is required, other character sets may be used.
 * For example, the ISO 8859-1 is specified with the following SDP
 * attribute:
 * 
 * a=charset:ISO-8859-1
 * </div>
 */
@interface FMIceLinkSdpCharacterSetAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Gets the character set to be used to display the session name and information data.
 * </div>
 */
- (NSString*) characterSet;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpCharacterSetAttribute class.
 * </div>
 * @param characterSet The character set to be used to display the session name and information data.
 */
+ (FMIceLinkSdpCharacterSetAttribute*) characterSetAttributeWithCharacterSet:(NSString*)characterSet;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpCharacterSetAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpCharacterSetAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpCharacterSetAttribute class.
 * </div>
 * @param characterSet The character set to be used to display the session name and information data.
 */
- (instancetype) initWithCharacterSet:(NSString*)characterSet;

@end

/*!
 * <div>
 * An SDP encryption key with a method of "clear".
 * </div>
 */
@interface FMIceLinkSdpClearEncryptionKey : FMIceLinkSdpEncryptionKey

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpClearEncryptionKey class.
 * </div>
 * @param encryptionKey The untransformed encryption key.
 */
+ (FMIceLinkSdpClearEncryptionKey*) clearEncryptionKey:(NSString*)encryptionKey;
/*!
 * <div>
 * Gets the untransformed encryption key.
 * </div>
 */
- (NSString*) encryptionKey;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpClearEncryptionKey class.
 * </div>
 * @param encryptionKey The untransformed encryption key.
 */
- (instancetype) initWithEncryptionKey:(NSString*)encryptionKey;

@end

/*!
 * <div>
 * Defines valid SDP conference types.
 * </div>
 */
@interface FMIceLinkSdpConferenceType : NSObject

/*!
 * <div>
 * Gets the SDP conference type meaning "Broadcast", which should imply receive-only.
 * </div>
 */
+ (NSString*) broadcast;
/*!
 * <div>
 * Gets the SDP conference type meaning "H332", which should imply receive-only and
 * indicate that this loosely coupled session is part of an H.332 session.
 * </div>
 */
+ (NSString*) h332;
/*!
 * <div>
 * Gets the SDP conference type meaning "Meeting", which should imply send-receive.
 * </div>
 */
+ (NSString*) meeting;
/*!
 * <div>
 * Gets the SDP conference type meaning "Moderated", which should indicate the use of
 * a floor control tool and that the media tools are started so as to mute
 * new sites joining the conference.
 * </div>
 */
+ (NSString*) moderated;
/*!
 * <div>
 * Gets the SDP conference type meaning "Test", which should imply that unless
 * explicitly requested otherwise, receivers can safely avoid displaying
 * this session description to users.
 * </div>
 */
+ (NSString*) test;

@end

/*!
 * <div>
 * This specifies the type of the conference.  Suggested values
 * are "broadcast", "meeting", "moderated", "test", and "H332".
 * "recvonly" should be the default for "type:broadcast" sessions,
 * "type:meeting" should imply "sendrecv", and "type:moderated"
 * should indicate the use of a floor control tool and that the
 * media tools are started so as to mute new sites joining the
 * conference.
 * </div>
 */
@interface FMIceLinkSdpConferenceTypeAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Gets the type of the conference. See FMIceLinkSdpConferenceTypeAttribute#conferenceType for possible values.
 * </div>
 */
- (NSString*) conferenceType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpConferenceTypeAttribute class.
 * </div>
 * @param conferenceType The type of the conference. See FMIceLinkSdpConferenceTypeAttribute#conferenceType for possible values.
 */
+ (FMIceLinkSdpConferenceTypeAttribute*) conferenceTypeAttributeWithConferenceType:(NSString*)conferenceType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpConferenceTypeAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpConferenceTypeAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpConferenceTypeAttribute class.
 * </div>
 * @param conferenceType The type of the conference. See FMIceLinkSdpConferenceTypeAttribute#conferenceType for possible values.
 */
- (instancetype) initWithConferenceType:(NSString*)conferenceType;

@end

/*!
 * <div>
 * An SDP connection data element.
 * </div>
 */
@interface FMIceLinkSdpConnectionData : NSObject

/*!
 * <div>
 * Gets the type of the address. See FMIceLinkSdpConnectionData#addressType for possible values.
 * </div>
 */
- (NSString*) addressType;
/*!
 * <div>
 * Gets the connection address.
 * </div>
 */
- (NSString*) connectionAddress;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpConnectionData class.
 * </div>
 * @param connectionAddress The connection address.
 */
+ (FMIceLinkSdpConnectionData*) connectionDataWithConnectionAddress:(NSString*)connectionAddress;
/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpConnectionData class.
 * </div>
 * @param connectionAddress The connection address.
 */
- (instancetype) initWithConnectionAddress:(NSString*)connectionAddress;
/*!
 * <div>
 * Gets the type of network. See FMIceLinkSdpConnectionData#networkType for possible values.
 * </div>
 */
- (NSString*) networkType;
/*!
 * <div>
 * Creates an FMIceLinkSdpConnectionData instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpConnectionData*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Sets the type of the address. See FMIceLinkSdpConnectionData#addressType for possible values.
 * </div>
 */
- (void) setAddressType:(NSString*)value;
/*!
 * <div>
 * Sets the connection address.
 * </div>
 */
- (void) setConnectionAddress:(NSString*)value;
/*!
 * <div>
 * Sets the type of network. See FMIceLinkSdpConnectionData#networkType for possible values.
 * </div>
 */
- (void) setNetworkType:(NSString*)value;
/*!
 * <div>
 * Updates the connection address.
 * </div>
 * @param connectionAddress The connection address.
 */
- (void) updateWithConnectionAddress:(NSString*)connectionAddress;

@end

/*!
 * <div>
 * This gives the maximum amount of media that can be encapsulated
 * in each packet, expressed as time in milliseconds.  The time
 * SHALL be calculated as the sum of the time the media present in
 * the packet represents.  For frame-based codecs, the time SHOULD
 * be an integer multiple of the frame size.  This attribute is
 * probably only meaningful for audio data, but may be used with
 * other media types if it makes sense.  It is a media-level
 * attribute, and it is not dependent on charset.  Note that this
 * attribute was introduced after RFC 2327, and non-updated
 * implementations will ignore this attribute.
 * </div>
 */
@interface FMIceLinkSdpCryptoAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpCryptoAttribute class.
 * </div>
 * @param tag The tag.
 * @param cryptoSuite The crypto suite.
 */
+ (FMIceLinkSdpCryptoAttribute*) cryptoAttributeWithTag:(int)tag cryptoSuite:(NSString*)cryptoSuite;
/*!
 * <div>
 * Gets the crypto suite. See FMIceLinkSdpCryptoAttribute#cryptoSuite for possible values.
 * </div>
 */
- (NSString*) cryptoSuite;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpCryptoAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpCryptoAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Gets the key from the "inline" key parameter.
 * </div>
 */
- (FMIceLinkDataBuffer*) getKey;
/*!
 * <div>
 * Gets the salt from the "inline" key parameter.
 * </div>
 */
- (FMIceLinkDataBuffer*) getSalt;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpCryptoAttribute class.
 * </div>
 * @param tag The tag.
 * @param cryptoSuite The crypto suite.
 */
- (instancetype) initWithTag:(int)tag cryptoSuite:(NSString*)cryptoSuite;
/*!
 * <div>
 * Gets the key parameters.
 * </div>
 */
- (NSMutableDictionary*) keyParams;
/*!
 * <div>
 * Gets the session parameters.
 * </div>
 */
- (NSMutableArray*) sessionParams;
/*!
 * <div>
 * Sets the key and salt for the "inline" key parameter.
 * </div>
 * @param key The key.
 * @param salt The salt.
 */
- (FMIceLinkSdpCryptoAttribute*) setKeySaltWithKey:(NSMutableData*)key salt:(NSMutableData*)salt;
/*!
 * <div>
 * Sets the tag.
 * </div>
 */
- (void) setTag:(int)value;
/*!
 * <div>
 * Gets the tag.
 * </div>
 */
- (int) tag;

@end

/*!
 * <div>
 * Defines valid SDP crypto key methods.
 * </div>
 */
@interface FMIceLinkSdpCryptoKeyMethod : NSObject

/*!
 * <div>
 * Gets the SDP crypto key method meaning "inline".
 * </div>
 */
+ (NSString*) inline;

@end

/*!
 * <div>
 * Defines valid SDP crypto session parameters.
 * </div>
 */
@interface FMIceLinkSdpCryptoSessionParam : NSObject

/*!
 * <div>
 * Gets the SDP crypto session parameter meaning "unauthenticated SRTP".
 * </div>
 */
+ (NSString*) unauthenticatedSRTP;
/*!
 * <div>
 * Gets the SDP crypto session parameter meaning "unencrypted SRTCP".
 * </div>
 */
+ (NSString*) unencryptedSRTCP;
/*!
 * <div>
 * Gets the SDP crypto session parameter meaning "unencrypted SRTP".
 * </div>
 */
+ (NSString*) unencryptedSRTP;

@end

/*!
 * <div>
 * Defines valid SDP crypto suites.
 * </div>
 */
@interface FMIceLinkSdpCryptoSuite : NSObject

/*!
 * <div>
 * Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".
 * </div>
 */
+ (NSString*) aesCm128HmacSha132;
/*!
 * <div>
 * Gets the SDP crypto suite meaning "AES-CM 128-bit cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".
 * </div>
 */
+ (NSString*) aesCM128HmacSha180;
/*!
 * <div>
 * Converts an EncryptionMode enum to a crypto-suite string.
 * </div>
 * @param encryptionMode The EncryptionMode enum.
 * @return The crypto-suite string.
 */
+ (NSString*) getCryptoSuiteWithEncryptionMode:(FMIceLinkEncryptionMode)encryptionMode;
/*!
 * <div>
 * Converts a crypto-suite string to an EncryptionMode enum.
 * </div>
 * @param cryptoSuite The crypto-suite string.
 * @return The EncryptionMode enum.
 */
+ (FMIceLinkEncryptionMode) getEncryptionModeWithCryptoSuite:(NSString*)cryptoSuite;
/*!
 * <div>
 * Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with a 32-bit authentication tag".
 * </div>
 */
+ (NSString*) nullHmacSha132;
/*!
 * <div>
 * Gets the SDP crypto suite meaning "NULL cipher and HMAC-SHA1 message authentication with an 80-bit authentication tag".
 * </div>
 */
+ (NSString*) nullHmacSha180;

@end

/*!
 * <div>
 * This specifies the mode in which tools should be started.
 * </div>
 */
@interface FMIceLinkSdpDirectionAttribute : FMIceLinkSdpAttribute

+ (FMIceLinkSdpDirectionAttribute*) directionAttribute;
/*!
 * <div>
 * Creates a DirectionAttribute for a required direction.
 * </div>
 * @param direction Direction.
 */
+ (FMIceLinkSdpDirectionAttribute*) generateDirectionAttributeWithDirection:(FMIceLinkStreamDirection)direction;
- (instancetype) init;
/*!
 * <div>
 * Gets the stream direction.
 * </div>
 */
- (FMIceLinkStreamDirection) streamDirection;

@end

/*!
 * <div>
 * This attribute allows parameters that are specific to a
 * particular format to be conveyed in a way that SDP does not
 * have to understand them.  The format must be one of the formats
 * specified for the media.  Format-specific parameters may be any
 * set of parameters required to be conveyed by SDP and given
 * unchanged to the media tool that will use this format.  At most
 * one instance of this attribute is allowed for each format.
 * </div>
 */
@interface FMIceLinkSdpFormatParametersAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Creates a dictionary map from the format specific parameters.
 * </div>
 */
- (NSMutableDictionary*) deserializeFormatSpecificParameters;
/*!
 * <div>
 * Gets the format.
 * </div>
 */
- (int) format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpFormatParametersAttribute class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkSdpFormatParametersAttribute*) formatParametersAttributeWithFormat:(int)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpFormatParametersAttribute class.
 * </div>
 * @param format The format.
 * @param formatSpecificParameters The format-specific parameters.
 */
+ (FMIceLinkSdpFormatParametersAttribute*) formatParametersAttributeWithFormat:(int)format formatSpecificParameters:(NSString*)formatSpecificParameters;
/*!
 * <div>
 * Gets the format-specific parameters.
 * </div>
 */
- (NSString*) formatSpecificParameters;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpFormatParametersAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpFormatParametersAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Gets a format specific parameter.
 * </div>
 * @param key The key.
 */
- (NSString*) getFormatSpecificParameterWithKey:(NSString*)key;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpFormatParametersAttribute class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(int)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpFormatParametersAttribute class.
 * </div>
 * @param format The format.
 * @param formatSpecificParameters The format-specific parameters.
 */
- (instancetype) initWithFormat:(int)format formatSpecificParameters:(NSString*)formatSpecificParameters;
/*!
 * <div>
 * Updates the format specific parameters based on a dictionary map.
 * </div>
 * @param map The map.
 */
- (void) serializeFormatSpecificParametersWithMap:(NSMutableDictionary*)map;
/*!
 * <div>
 * Sets a format specific parameter.
 * </div>
 * @param key The key.
 * @param value The value.
 */
- (void) setFormatSpecificParameterWithKey:(NSString*)key value:(NSString*)value;
/*!
 * <div>
 * Tries to get a format specific parameter.
 * </div>
 * @param key The key.
 * @param value The value.
 */
- (bool) tryGetFormatSpecificParameterWithKey:(NSString*)key value:(NSString**)value;
/*!
 * <div>
 * Unsets a format specific parameter.
 * </div>
 * @param key The key.
 */
- (bool) unsetFormatSpecificParameterWithKey:(NSString*)key;

@end

/*!
 * <div>
 * This gives the maximum video frame rate in frames/sec.  It is
 * intended as a recommendation for the encoding of video data.
 * Decimal representations of fractional values using the notation
 * "integer.fraction" are allowed.  It is a media-level
 * attribute, defined only for video media, and it is not
 * dependent on charset.
 * </div>
 */
@interface FMIceLinkSdpFrameRateAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Gets the maximum video frame rate in frames/second.
 * </div>
 */
- (NSString*) frameRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpFrameRateAttribute class.
 * </div>
 * @param frameRate The maximum video frame rate in frames/second.
 */
+ (FMIceLinkSdpFrameRateAttribute*) frameRateAttributeWithFrameRate:(NSString*)frameRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpFrameRateAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpFrameRateAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpFrameRateAttribute class.
 * </div>
 * @param frameRate The maximum video frame rate in frames/second.
 */
- (instancetype) initWithFrameRate:(NSString*)frameRate;

@end

/*!
 * <div>
 * The candidate attribute is a media-level attribute only.  It contains
 * a transport address for a candidate that can be used for connectivity
 * checks.
 * </div>
 */
@interface FMIceLinkSdpIceCandidateAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceCandidateAttribute class.
 * </div>
 * @param foundation The candidate's foundation.
 * @param priority The priority of the candidate.
 * @param connectionAddress The IP address of the candidate.
 * @param port The port of the candidate.
 * @param candidateType The type of the candidate. See FMIceLinkSdpIceCandidateAttribute#candidateType for possible values.
 * @param componentId The component identifier.
 */
+ (FMIceLinkSdpIceCandidateAttribute*) candidateAttributeWithFoundation:(NSString*)foundation priority:(long long)priority connectionAddress:(NSString*)connectionAddress port:(int)port candidateType:(NSString*)candidateType componentId:(int)componentId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceCandidateAttribute class.
 * </div>
 * @param foundation The candidate's foundation.
 * @param priority The priority of the candidate.
 * @param connectionAddress The IP address of the candidate.
 * @param port The port of the candidate.
 * @param candidateType The type of the candidate. See FMIceLinkSdpIceCandidateAttribute#candidateType for possible values.
 * @param relatedAddress The IP address related to the candidate.
 * @param relatedPort The port related to the candidate.
 * @param protocol The protocol.
 * @param componentId The ID of the component for which this is a candidate.
 */
+ (FMIceLinkSdpIceCandidateAttribute*) candidateAttributeWithFoundation:(NSString*)foundation priority:(long long)priority connectionAddress:(NSString*)connectionAddress port:(int)port candidateType:(NSString*)candidateType relatedAddress:(NSString*)relatedAddress relatedPort:(int)relatedPort protocol:(NSString*)protocol componentId:(int)componentId;
/*!
 * <div>
 * Gets the type of the candidate. See FMIceLinkSdpIceCandidateAttribute#candidateType for possible values.
 * </div>
 */
- (NSString*) candidateType;
/*!
 * <div>
 * Gets the ID of the component for which this is a candidate.
 * </div>
 */
- (int) componentId;
/*!
 * <div>
 * Gets the IP address of the candidate.
 * </div>
 */
- (NSString*) connectionAddress;
/*!
 * <div>
 * Gets the extensions.
 * </div>
 */
- (NSMutableDictionary*) extensions;
/*!
 * <div>
 * Gets the candidate's foundation.
 * </div>
 */
- (NSString*) foundation;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceCandidateAttribute class.
 * </div>
 * @param value The attribute as a string.
 */
+ (FMIceLinkSdpIceCandidateAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceCandidateAttribute class.
 * </div>
 * @param foundation The candidate's foundation.
 * @param priority The priority of the candidate.
 * @param connectionAddress The IP address of the candidate.
 * @param port The port of the candidate.
 * @param candidateType The type of the candidate. See FMIceLinkSdpIceCandidateAttribute#candidateType for possible values.
 * @param componentId The component identifier.
 */
- (instancetype) initWithFoundation:(NSString*)foundation priority:(long long)priority connectionAddress:(NSString*)connectionAddress port:(int)port candidateType:(NSString*)candidateType componentId:(int)componentId;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceCandidateAttribute class.
 * </div>
 * @param foundation The candidate's foundation.
 * @param priority The priority of the candidate.
 * @param connectionAddress The IP address of the candidate.
 * @param port The port of the candidate.
 * @param candidateType The type of the candidate. See FMIceLinkSdpIceCandidateAttribute#candidateType for possible values.
 * @param relatedAddress The IP address related to the candidate.
 * @param relatedPort The port related to the candidate.
 * @param protocol The protocol.
 * @param componentId The ID of the component for which this is a candidate.
 */
- (instancetype) initWithFoundation:(NSString*)foundation priority:(long long)priority connectionAddress:(NSString*)connectionAddress port:(int)port candidateType:(NSString*)candidateType relatedAddress:(NSString*)relatedAddress relatedPort:(int)relatedPort protocol:(NSString*)protocol componentId:(int)componentId;
/*!
 * <div>
 * Gets the port of the candidate.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Gets the priority of the candidate.
 * </div>
 */
- (long long) priority;
/*!
 * <div>
 * Gets the protocol of this candidate.
 * </div>
 */
- (NSString*) protocol;
/*!
 * <div>
 * Gets the IP address related to the candidate.
 * </div>
 */
- (NSString*) relatedAddress;
/*!
 * <div>
 * Gets the port related to the candidate.
 * </div>
 */
- (int) relatedPort;
/*!
 * <div>
 * Sets the type of the candidate. See FMIceLinkSdpIceCandidateAttribute#candidateType for possible values.
 * </div>
 */
- (void) setCandidateType:(NSString*)value;
/*!
 * <div>
 * Sets the ID of the component for which this is a candidate.
 * </div>
 */
- (void) setComponentId:(int)value;
/*!
 * <div>
 * Sets the IP address of the candidate.
 * </div>
 */
- (void) setConnectionAddress:(NSString*)value;
/*!
 * <div>
 * Sets the candidate's foundation.
 * </div>
 */
- (void) setFoundation:(NSString*)value;
/*!
 * <div>
 * Sets the port of the candidate.
 * </div>
 */
- (void) setPort:(int)value;
/*!
 * <div>
 * Sets the priority of the candidate.
 * </div>
 */
- (void) setPriority:(long long)value;
/*!
 * <div>
 * Sets the protocol of this candidate.
 * </div>
 */
- (void) setProtocol:(NSString*)value;
/*!
 * <div>
 * Sets the IP address related to the candidate.
 * </div>
 */
- (void) setRelatedAddress:(NSString*)value;
/*!
 * <div>
 * Sets the port related to the candidate.
 * </div>
 */
- (void) setRelatedPort:(int)value;

@end

/*!
 * <div>
 * Defines valid SDP candidate types.
 * </div>
 */
@interface FMIceLinkSdpIceCandidateType : NSObject

/*!
 * <div>
 * Gets the SDP candidate type meaning "Host".
 * </div>
 */
+ (NSString*) host;
/*!
 * <div>
 * Gets the SDP candidate type meaning "Peer Reflexive".
 * </div>
 */
+ (NSString*) peerReflexive;
/*!
 * <div>
 * Gets the SDP candidate type meaning "Relayed".
 * </div>
 */
+ (NSString*) relayed;
/*!
 * <div>
 * Gets the SDP candidate type meaning "Server Reflexive".
 * </div>
 */
+ (NSString*) serverReflexive;

@end

/*!
 * <div>
 * The SDP session attribute "fingerprint" provides an encryption
 * certificate fingerprint to a remote peer for use with DTLS.
 * </div>
 */
@interface FMIceLinkSdpIceFingerprintAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Gets the fingerprint.
 * </div>
 */
- (NSString*) fingerprint;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceFingerprintAttribute class.
 * </div>
 * @param hashFunction The hash function.
 * @param fingerprint The fingerprint.
 */
+ (FMIceLinkSdpIceFingerprintAttribute*) fingerprintAttributeWithHashFunction:(NSString*)hashFunction fingerprint:(NSString*)fingerprint;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceFingerprintAttribute class.
 * </div>
 * @param value The attribute as a string.
 */
+ (FMIceLinkSdpIceFingerprintAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Gets the hash function (i.e. sha-256).
 * </div>
 */
- (NSString*) hashFunction;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceFingerprintAttribute class.
 * </div>
 * @param hashFunction The hash function.
 * @param fingerprint The fingerprint.
 */
- (instancetype) initWithHashFunction:(NSString*)hashFunction fingerprint:(NSString*)fingerprint;

@end

/*!
 * <div>
 * "ice-lite" is a session-level attribute only, and indicates that an
 * agent is a lite implementation.
 * </div>
 */
@interface FMIceLinkSdpIceLiteAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceLiteAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpIceLiteAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceLiteAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceLiteAttribute class.
 * </div>
 */
+ (FMIceLinkSdpIceLiteAttribute*) liteAttribute;

@end

/*!
 * <div>
 * "ice-mismatch" is a media-level
 * attribute only, and when present in an answer, indicates that the
 * offer arrived with a default destination for a media component that
 * didn't have a corresponding candidate attribute.
 * </div>
 */
@interface FMIceLinkSdpIceMismatchAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceMismatchAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpIceMismatchAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceMismatchAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceMismatchAttribute class.
 * </div>
 */
+ (FMIceLinkSdpIceMismatchAttribute*) mismatchAttribute;

@end

@interface FMIceLinkSdpIceOptionTagTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkSdpIceOptionTagType)value;

@end

/*!
 * <div>
 * A tag for an FMIceLinkSdpIceOptionsAttribute.
 * </div>
 */
@interface FMIceLinkSdpIceOptionTag : NSObject

/*!
 * <div>
 * Gets the string representation of this tag.
 * </div>
 */
- (NSString*) description;
- (instancetype) init;
+ (FMIceLinkSdpIceOptionTag*) optionTag;
/*!
 * <div>
 * Generates a tag object from a string.
 * </div>
 * @param tagString The tag string.
 * @return
 */
+ (FMIceLinkSdpIceOptionTag*) parseWithTagString:(NSString*)tagString;
/*!
 * <div>
 * Sets the type of this tag.
 * </div>
 */
- (void) setType:(FMIceLinkSdpIceOptionTagType)value;
/*!
 * <div>
 * Gets the "trickle" option string.
 * </div>
 */
+ (NSString*) trickle;
/*!
 * <div>
 * Gets the type of this tag.
 * </div>
 */
- (FMIceLinkSdpIceOptionTagType) type;

@end

/*!
 * <div>
 * An unknown tag for an FMIceLinkSdpIceOptionsAttribute</div>
 */
@interface FMIceLinkSdpIceUnknownIceOptionTag : FMIceLinkSdpIceOptionTag

/*!
 * <div>
 * Gets the string representation of this tag.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceUnknownIceOptionTag class.
 * </div>
 */
- (instancetype) initWithTagString:(NSString*)tagString;
/*!
 * <div>
 * Gets the tag string.
 * </div>
 */
- (NSString*) tagString;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceUnknownIceOptionTag class.
 * </div>
 */
+ (FMIceLinkSdpIceUnknownIceOptionTag*) unknownIceOptionTagWithTagString:(NSString*)tagString;

@end

/*!
 * <div>
 * A trickle-ice tag for an FMIceLinkSdpIceOptionsAttribute</div>
 */
@interface FMIceLinkSdpIceTrickleIceOptionTag : FMIceLinkSdpIceOptionTag

/*!
 * <div>
 * Gets the string representation of this tag
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceTrickleIceOptionTag class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceTrickleIceOptionTag class.
 * </div>
 */
+ (FMIceLinkSdpIceTrickleIceOptionTag*) trickleIceOptionTag;

@end

/*!
 * <div>
 * The "ice-options" attribute is a session-level attribute.  It
 * contains a series of tokens that identify the options supported by
 * the agent.
 * </div>
 */
@interface FMIceLinkSdpIceOptionsAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceOptionsAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpIceOptionsAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceOptionsAttribute class.
 * </div>
 * @param tags The tokens that identify options supported by the agent.
 */
- (instancetype) initWithTags:(NSMutableArray*)tags;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceOptionsAttribute class.
 * </div>
 * @param tags The tokens that identify options supported by the agent.
 */
+ (FMIceLinkSdpIceOptionsAttribute*) optionsAttributeWithTags:(NSMutableArray*)tags;
/*!
 * <div>
 * Sets a value indicating whether trickle-ice is supported.
 * </div>
 */
- (void) setTrickleOptionSet:(bool)value;
/*!
 * <div>
 * Gets the tokens that identify options supported by the agent.
 * </div>
 */
- (NSMutableArray*) tags;
/*!
 * <div>
 * Gets a value indicating whether trickle-ice is supported.
 * </div>
 */
- (bool) trickleOptionSet;

@end

/*!
 * <div>
 * The "ice-pwd" attribute conveys the password used by
 * ICE for message integrity.
 * </div>
 */
@interface FMIceLinkSdpIcePasswordAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIcePasswordAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpIcePasswordAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Generates a random password.
 * </div>
 */
+ (NSString*) generatePassword;
/*!
 * <div>
 * Gets the value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIcePasswordAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIcePasswordAttribute class.
 * </div>
 * @param password The password used by ICE for message integrity.
 */
- (instancetype) initWithPassword:(NSString*)password;
/*!
 * <div>
 * Gets the password used by ICE for message integrity.
 * </div>
 */
- (NSString*) password;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIcePasswordAttribute class.
 * </div>
 */
+ (FMIceLinkSdpIcePasswordAttribute*) passwordAttribute;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIcePasswordAttribute class.
 * </div>
 * @param password The password used by ICE for message integrity.
 */
+ (FMIceLinkSdpIcePasswordAttribute*) passwordAttributeWithPassword:(NSString*)password;

@end

/*!
 * <div>
 * An SDP remote candidate element.
 * </div>
 */
@interface FMIceLinkSdpIceRemoteCandidate : NSObject

/*!
 * <div>
 * Gets the ID of the component for which this is a remote candidate.
 * </div>
 */
- (int) componentId;
/*!
 * <div>
 * Gets the IP address of the remote candidate.
 * </div>
 */
- (NSString*) connectionAddress;
/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceRemoteCandidate class.
 * </div>
 * @param componentId The ID of the component for which this is a remote candidate.
 * @param connectionAddress The IP address of the remote candidate.
 * @param port The port of the remote candidate.
 */
- (instancetype) initWithComponentId:(int)componentId connectionAddress:(NSString*)connectionAddress port:(int)port;
/*!
 * <div>
 * Creates an FMIceLinkSdpIceRemoteCandidate instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpIceRemoteCandidate*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Gets the port of the remote candidate.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceRemoteCandidate class.
 * </div>
 * @param componentId The ID of the component for which this is a remote candidate.
 * @param connectionAddress The IP address of the remote candidate.
 * @param port The port of the remote candidate.
 */
+ (FMIceLinkSdpIceRemoteCandidate*) remoteCandidateWithComponentId:(int)componentId connectionAddress:(NSString*)connectionAddress port:(int)port;

@end

/*!
 * <div>
 * The attribute contains a connection-address and port for each
 * component.  The ordering of components is irrelevant.  However, a
 * value MUST be present for each component of a media stream.  This
 * attribute MUST be included in an offer by a controlling agent for a
 * media stream that is Completed, and MUST NOT be included in any other
 * case.
 * </div>
 */
@interface FMIceLinkSdpIceRemoteCandidatesAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Gets the array of remote candidates.
 * </div>
 */
- (NSMutableArray*) candidates;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceRemoteCandidatesAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpIceRemoteCandidatesAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceRemoteCandidatesAttribute class.
 * </div>
 * @param candidates The array of remote candidates.
 */
- (instancetype) initWithCandidates:(NSMutableArray*)candidates;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceRemoteCandidatesAttribute class.
 * </div>
 * @param candidates The array of remote candidates.
 */
+ (FMIceLinkSdpIceRemoteCandidatesAttribute*) remoteCandidatesAttributeWithCandidates:(NSMutableArray*)candidates;

@end

/*!
 * <div>
 * Defines valid SDP transport protocols.
 * </div>
 */
@interface FMIceLinkSdpIceTransportProtocol : NSObject

/*!
 * <div>
 * Gets the SDP transport protocol meaning "tcp".
 * </div>
 */
+ (NSString*) tcp;
/*!
 * <div>
 * Gets the SDP transport protocol meaning "udp".
 * </div>
 */
+ (NSString*) udp;

@end

/*!
 * <div>
 * The "ice-ufrag" attribute conveys the username fragment
 * used by ICE for message integrity.
 * </div>
 */
@interface FMIceLinkSdpIceUfragAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceUfragAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpIceUfragAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Generates a username fragment.
 * </div>
 */
+ (NSString*) generateUfrag;
/*!
 * <div>
 * Gets the value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceUfragAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceUfragAttribute class.
 * </div>
 * @param ufrag The username fragment used by ICE for message integrity.
 */
- (instancetype) initWithUfrag:(NSString*)ufrag;
/*!
 * <div>
 * Gets the username fragment used by ICE for message integrity.
 * </div>
 */
- (NSString*) ufrag;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceUfragAttribute class.
 * </div>
 */
+ (FMIceLinkSdpIceUfragAttribute*) ufragAttribute;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpIceUfragAttribute class.
 * </div>
 * @param ufrag The username fragment used by ICE for message integrity.
 */
+ (FMIceLinkSdpIceUfragAttribute*) ufragAttributeWithUfrag:(NSString*)ufrag;

@end

/*!
 * <div>
 * This specifies that the tools should be started in inactive
 * mode.  This is necessary for interactive conferences where
 * users can put other users on hold.  No media is sent over an
 * inactive media stream.  Note that an RTP-based system SHOULD
 * still send RTCP, even if started inactive.  It can be either a
 * session or media-level attribute, and it is not dependent on
 * charset.
 * </div>
 */
@interface FMIceLinkSdpInactiveAttribute : FMIceLinkSdpDirectionAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpInactiveAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpInactiveAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpInactiveAttribute class.
 * </div>
 */
+ (FMIceLinkSdpInactiveAttribute*) inactiveAttribute;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpInactiveAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Gets the stream direction.
 * </div>
 */
- (FMIceLinkStreamDirection) streamDirection;

@end

/*!
 * <div>
 * Like the cat attribute, this is to assist identifying wanted
 * sessions at the receiver.  This allows a receiver to select
 * interesting session based on keywords describing the purpose of
 * the session; there is no central registry of keywords.  It is a
 * session-level attribute.  It is a charset-dependent attribute,
 * meaning that its value should be interpreted in the charset
 * specified for the session description if one is specified, or
 * by default in ISO 10646/UTF-8.
 * </div>
 */
@interface FMIceLinkSdpKeywordsAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpKeywordsAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpKeywordsAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpKeywordsAttribute class.
 * </div>
 * @param keywords The keywords describing the purpose of the session.
 */
- (instancetype) initWithKeywords:(NSString*)keywords;
/*!
 * <div>
 * Gets the keywords describing the purpose of the session.
 * </div>
 */
- (NSString*) keywords;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpKeywordsAttribute class.
 * </div>
 * @param keywords The keywords describing the purpose of the session.
 */
+ (FMIceLinkSdpKeywordsAttribute*) keywordsAttributeWithKeywords:(NSString*)keywords;

@end

/*!
 * <div>
 * This can be a session-level attribute or a media-level
 * attribute.  As a session-level attribute, it specifies the
 * default language for the session being described.  As a media-
 * level attribute, it specifies the language for that media,
 * overriding any session-level language specified.  Multiple lang
 * attributes can be provided either at session or media level if
 * the session description or media use multiple languages, in
 * which case the order of the attributes indicates the order of
 * importance of the various languages in the session or media
 * from most important to least important.
 * </div>
 */
@interface FMIceLinkSdpLanguageAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpLanguageAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpLanguageAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpLanguageAttribute class.
 * </div>
 * @param languageTag The default language for the session being described
 * (if used as a session-level attribute) or the language for a media
 * stream (if used as a media-level attribute).
 */
- (instancetype) initWithLanguageTag:(NSString*)languageTag;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpLanguageAttribute class.
 * </div>
 * @param languageTag The default language for the session being described
 * (if used as a session-level attribute) or the language for a media
 * stream (if used as a media-level attribute).
 */
+ (FMIceLinkSdpLanguageAttribute*) languageAttributeWithLanguageTag:(NSString*)languageTag;
/*!
 * <div>
 * Gets the default language for the session being described
 * (if used as a session-level attribute) or the language for a media
 * stream (if used as a media-level attribute).
 * </div>
 */
- (NSString*) languageTag;

@end

/*!
 * <div>
 * This gives the maximum amount of media that can be encapsulated
 * in each packet, expressed as time in milliseconds.  The time
 * SHALL be calculated as the sum of the time the media present in
 * the packet represents.  For frame-based codecs, the time SHOULD
 * be an integer multiple of the frame size.  This attribute is
 * probably only meaningful for audio data, but may be used with
 * other media types if it makes sense.  It is a media-level
 * attribute, and it is not dependent on charset.  Note that this
 * attribute was introduced after RFC 2327, and non-updated
 * implementations will ignore this attribute.
 * </div>
 */
@interface FMIceLinkSdpMaxPacketTimeAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMaxPacketTimeAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpMaxPacketTimeAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMaxPacketTimeAttribute class.
 * </div>
 * @param maxPacketTime The maximum amount of media that can be encapsulated,
 * in each packet, expressed as time in milliseconds.
 */
- (instancetype) initWithMaxPacketTime:(int)maxPacketTime;
/*!
 * <div>
 * Gets the maximum amount of media that can be encapsulated,
 * in each packet, expressed as time in milliseconds.
 * </div>
 */
- (int) maxPacketTime;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMaxPacketTimeAttribute class.
 * </div>
 * @param maxPacketTime The maximum amount of media that can be encapsulated,
 * in each packet, expressed as time in milliseconds.
 */
+ (FMIceLinkSdpMaxPacketTimeAttribute*) maxPacketTimeAttributeWithMaxPacketTime:(int)maxPacketTime;

@end

/*!
 * <div>
 * An SDP media element.
 * </div>
 */
@interface FMIceLinkSdpMedia : NSObject

/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the format description.
 * </div>
 */
- (NSString*) formatDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMedia class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMedia class.
 * </div>
 * @param mediaType The media type. See FMIceLinkSdpMedia#mediaType for possible values.
 * @param transportPort The transport port.
 * @param transportProtocol The transport protocol.
 */
- (instancetype) initWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMedia class.
 * </div>
 * @param mediaType The media type. See FMIceLinkSdpMedia#mediaType for possible values.
 * @param transportPort The transport port.
 * @param transportProtocol The transport protocol.
 * @param formatDescription The format description.
 */
- (instancetype) initWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol formatDescription:(NSString*)formatDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMedia class.
 * </div>
 */
+ (FMIceLinkSdpMedia*) media;
/*!
 * <div>
 * Gets the media type. See FMIceLinkSdpMedia#mediaType for possible values.
 * </div>
 */
- (NSString*) mediaType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMedia class.
 * </div>
 * @param mediaType The media type. See FMIceLinkSdpMedia#mediaType for possible values.
 * @param transportPort The transport port.
 * @param transportProtocol The transport protocol.
 */
+ (FMIceLinkSdpMedia*) mediaWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMedia class.
 * </div>
 * @param mediaType The media type. See FMIceLinkSdpMedia#mediaType for possible values.
 * @param transportPort The transport port.
 * @param transportProtocol The transport protocol.
 * @param formatDescription The format description.
 */
+ (FMIceLinkSdpMedia*) mediaWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol formatDescription:(NSString*)formatDescription;
/*!
 * <div>
 * Gets the number of ports.
 * </div>
 */
- (short) numberOfPorts;
/*!
 * <div>
 * Creates an FMIceLinkSdpMedia instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpMedia*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Sets the format description.
 * </div>
 */
- (void) setFormatDescription:(NSString*)value;
/*!
 * <div>
 * Sets the media type. See FMIceLinkSdpMedia#mediaType for possible values.
 * </div>
 */
- (void) setMediaType:(NSString*)value;
/*!
 * <div>
 * Sets the number of ports.
 * </div>
 */
- (void) setNumberOfPorts:(short)value;
/*!
 * <div>
 * Sets the transport port.
 * </div>
 */
- (void) setTransportPort:(int)value;
/*!
 * <div>
 * Sets the transport protocol.
 * </div>
 */
- (void) setTransportProtocol:(NSString*)value;
/*!
 * <div>
 * Gets the transport port.
 * </div>
 */
- (int) transportPort;
/*!
 * <div>
 * Gets the transport protocol.
 * </div>
 */
- (NSString*) transportProtocol;

@end

/*!
 * <div>
 * An SDP media description element.
 * </div>
 */
@interface FMIceLinkSdpMediaDescription : NSObject

/*!
 * <div>
 * Adds a proposed bandwidth.
 * </div>
 * @param bandwidth The proposed bandwidth to add.
 */
- (void) addBandwidth:(FMIceLinkSdpBandwidth*)bandwidth;
/*!
 * <div>
 * Adds a media-level attribute.
 * </div>
 * @param attribute The session-level attribute to add.
 */
- (void) addMediaAttribute:(FMIceLinkSdpAttribute*)attribute;
/*!
 * <div>
 * Gets the array of proposed bandwidths to be used by the media.
 * </div>
 */
- (NSMutableArray*) bandwidths;
/*!
 * <div>
 * Gets media-level connection data.
 * </div>
 */
- (FMIceLinkSdpConnectionData*) connectionData;
/*!
 * <div>
 * Gets CryptoAttributes associated with this MediaDescription.
 * </div>
 */
- (NSMutableArray*) cryptoAttributes;
/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the media-level encryption key.
 * </div>
 */
- (FMIceLinkSdpEncryptionKey*) encryptionKey;
/*!
 * <div>
 * Gets the Fingerprint Attribute from this MediaDescription
 * </div>
 */
- (FMIceLinkSdpIceFingerprintAttribute*) fingerprintAttribute;
/*!
 * <div>
 * Obtains Ice Candidate attributes associated with this media description.
 * </div>
 */
- (NSMutableArray*) getCandidateAttributes;
/*!
 * <div>
 * Gets the RTCP "ccm fir" feedback attribute for the given payload type.
 * </div>
 * @param payloadType The payload type.
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getCcmFirFeedbackAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Gets the format parameters attribute for the given payload type.
 * </div>
 * @param payloadType The payload type.
 */
- (FMIceLinkSdpFormatParametersAttribute*) getFormatParametersAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Sets a format parameter value.
 * </div>
 */
- (NSString*) getFormatParameterValueWithPayloadType:(int)payloadType formatParameterName:(NSString*)formatParameterName;
/*!
 * <div>
 * Obtains Ice Options attributes associated with this media description.
 * </div>
 */
- (NSMutableArray*) getIceOptionAttributes;
/*!
 * <div>
 * Obtains the maximum packet time attribute.
 * </div>
 */
- (FMIceLinkSdpMaxPacketTimeAttribute*) getMaxPacketTimeAttribute;
/*!
 * <div>
 * Obtains the media stream identifier attribute.
 * </div>
 */
- (FMIceLinkSdpMediaStreamIdAttribute*) getMediaStreamIdentifierAttribute;
/*!
 * <div>
 * Gets the RTCP "nack" feedback attribute for the given payload type.
 * </div>
 * @param payloadType The payload type.
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getNackFeedbackAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Gets the RTCP "nack pli" feedback attribute for the given payload type.
 * </div>
 * @param payloadType The payload type.
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getNackPliFeedbackAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Gets the RTCP "nack rpsi" feedback attribute for the given payload type.
 * </div>
 * @param payloadType The payload type.
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getNackRpsiFeedbackAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Gets the RTCP "nack sli" feedback attribute for the given payload type.
 * </div>
 * @param payloadType The payload type.
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getNackSliFeedbackAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Obtains the packet time attribute.
 * </div>
 */
- (FMIceLinkSdpPacketTimeAttribute*) getPacketTimeAttribute;
/*!
 * <div>
 * Gets the RTCP feedback attribute for the given payload type.
 * </div>
 * @param payloadType The payload type.
 * @param type The type.
 * @param subType The sub-type.
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getRtcpFeedbackAttributeWithPayloadType:(int)payloadType type:(NSString*)type subType:(NSString*)subType;
/*!
 * <div>
 * Obtains the RTP ext-map attributes.
 * </div>
 */
- (NSMutableArray*) getRtpExtMapAttributes;
/*!
 * <div>
 * Obtains the RTP map attributes.
 * </div>
 */
- (NSMutableArray*) getRtpMapAttributes;
/*!
 * <div>
 * Obtains the RTP map attributes for a given format.
 * </div>
 * @param formatName Format name.
 * @param clockRate Clock rate.
 * @param formatParameters Format parameters.
 */
- (NSMutableArray*) getRtpMapAttributesWithFormatName:(NSString*)formatName clockRate:(int)clockRate formatParameters:(NSString*)formatParameters;
/*!
 * <div>
 * Obtains the RTP map attributes for a given format.
 * </div>
 * @param formatName Format name.
 * @param clockRate Clock rate.
 * @param formatParameters Format parameters.
 * @param rtpMapAttributeIndices The indeces of the FMIceLinkSdpRtpMapAttribute.
 */
- (NSMutableArray*) getRtpMapAttributesWithFormatName:(NSString*)formatName clockRate:(int)clockRate formatParameters:(NSString*)formatParameters rtpMapAttributeIndices:(NSMutableArray**)rtpMapAttributeIndices;
/*!
 * <div>
 * Obtains the RTP map attribute for a given format.
 * </div>
 * @param formatName Format name.
 * @param clockRate Clock rate.
 * @param formatParameters Format parameters.
 */
- (FMIceLinkSdpRtpMapAttribute*) getRtpMapAttributeWithFormatName:(NSString*)formatName clockRate:(int)clockRate formatParameters:(NSString*)formatParameters;
/*!
 * <div>
 * Obtains the RTP map attribute for a given format.
 * </div>
 * @param formatName Format name.
 * @param clockRate Clock rate.
 * @param formatParameters Format parameters.
 * @param rtpMapAttributeIndex The index of the FMIceLinkSdpRtpMapAttribute.
 */
- (FMIceLinkSdpRtpMapAttribute*) getRtpMapAttributeWithFormatName:(NSString*)formatName clockRate:(int)clockRate formatParameters:(NSString*)formatParameters rtpMapAttributeIndex:(int*)rtpMapAttributeIndex;
/*!
 * <div>
 * Obtains the RTP map attribute for a given payload type.
 * </div>
 * @param payloadType The payload type.
 */
- (FMIceLinkSdpRtpMapAttribute*) getRtpMapAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Obtains the RTP map attribute for a given payload type.
 * </div>
 * @param payloadType The payload type.
 * @param rtpMapAttributeIndex The index of the FMIceLinkSdpRtpMapAttribute.
 */
- (FMIceLinkSdpRtpMapAttribute*) getRtpMapAttributeWithPayloadType:(int)payloadType rtpMapAttributeIndex:(int*)rtpMapAttributeIndex;
/*!
 * <div>
 * Obtains the SSRC attributes.
 * </div>
 */
- (NSMutableArray*) getSsrcAttributes;
/*!
 * <div>
 * Obtains the SSRC attributes matching a given synchronization source.
 * </div>
 * @param ssrc The synchronization source.
 */
- (NSMutableArray*) getSsrcAttributesWithSsrc:(long long)ssrc;
/*!
 * <div>
 * Obtains the SSRC attributes matching a given synchronization source and name.
 * </div>
 * @param ssrc The synchronization source.
 * @param name The attribute name.
 */
- (NSMutableArray*) getSsrcAttributesWithSsrc:(long long)ssrc name:(NSString*)name;
/*!
 * <div>
 * Obtains the SSRC attribute matching a given synchronization source, name, and value.
 * </div>
 * @param ssrc The synchronization source.
 * @param name The attribute name.
 * @param value The attribute value.
 */
- (FMIceLinkSdpRtpSsrcAttribute*) getSsrcAttributeWithSsrc:(long long)ssrc name:(NSString*)name value:(NSString*)value;
/*!
 * <div>
 * Gets the IcePasswordAttribute associated with this MediaDescription
 * </div>
 */
- (FMIceLinkSdpIcePasswordAttribute*) icePasswordAttribute;
/*!
 * <div>
 * Gets the IceUfragAttribute associated with this MediaDescription
 * </div>
 */
- (FMIceLinkSdpIceUfragAttribute*) iceUfragAttribute;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMediaDescription class.
 * </div>
 * @param media The media name and transport address.
 */
- (instancetype) initWithMedia:(FMIceLinkSdpMedia*)media;
/*!
 * <div>
 * DEPRECATED: Use AddMediaAttribute instead.
 * Inserts a media-level attribute at the given index.
 * </div>
 * @param attribute The session-level attribute to add.
 * @param index The index.
 */
- (void) insertMediaAttribute:(FMIceLinkSdpAttribute*)attribute index:(int)index;
/*!
 * <div>
 * Gets whether this media description represents an application stream
 * (media type == "application").
 * </div>
 */
- (bool) isApplication;
/*!
 * <div>
 * Gets whether this media description represents an audio stream
 * (media type == "audio").
 * </div>
 */
- (bool) isAudio;
/*!
 * <div>
 * Gets whether this media description represents a message stream
 * (media type == "message").
 * </div>
 */
- (bool) isMessage;
/*!
 * <div>
 * Gets whether this media description represents a text stream
 * (media type == "text").
 * </div>
 */
- (bool) isText;
/*!
 * <div>
 * Gets whether this media description represents a video stream
 * (media type == "video").
 * </div>
 */
- (bool) isVideo;
/*!
 * <div>
 * Gets the media name and transport address.
 * </div>
 */
- (FMIceLinkSdpMedia*) media;
/*!
 * <div>
 * Gets the array of media-level attributes.
 * </div>
 */
- (NSMutableArray*) mediaAttributes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMediaDescription class.
 * </div>
 * @param media The media name and transport address.
 */
+ (FMIceLinkSdpMediaDescription*) mediaDescriptionWithMedia:(FMIceLinkSdpMedia*)media;
/*!
 * <div>
 * Gets the media title.
 * </div>
 */
- (NSString*) mediaTitle;
/*!
 * <div>
 * Creates an FMIceLinkSdpMediaDescription instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpMediaDescription*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Gets the QualityAttribute associated with this MediaDescription.
 * </div>
 */
- (FMIceLinkSdpQualityAttribute*) qualityAttribute;
/*!
 * <div>
 * Removes a proposed bandwidth.
 * </div>
 * @param bandwidth The proposed bandwidth to remove.
 */
- (bool) removeBandwidth:(FMIceLinkSdpBandwidth*)bandwidth;
/*!
 * <div>
 * Removes a media-level attribute.
 * </div>
 * @param attribute The session-level attribute to remove.
 */
- (bool) removeMediaAttribute:(FMIceLinkSdpAttribute*)attribute;
/*!
 * <div>
 * Gets Rtcp Attributes associated with this media description.
 * </div>
 */
- (FMIceLinkSdpRtcpAttribute*) rtcpAttribute;
/*!
 * <div>
 * Gets a value indicating support for RTCP Multiplexing.
 * </div>
 */
- (bool) rtcpMultiplexingSupported;
/*!
 * <div>
 * Gets the Sctp Map Attribute, if it is present in the Media Description.
 * </div>
 */
- (FMIceLinkSdpSctpMapAttribute*) sctpMapAttribute;
/*!
 * <div>
 * Gets the Sctp Max Message Size Attribute, if it is present in the Media Description.
 * </div>
 */
- (FMIceLinkSdpSctpMaxMessageSizeAttribute*) sctpMaxMessageSizeAttribute;
/*!
 * <div>
 * Gets the Sctp Port Attribute, if it is present in the Media Description.
 * </div>
 */
- (FMIceLinkSdpSctpPortAttribute*) sctpPortAttribute;
/*!
 * <div>
 * Sets media-level connection data.
 * </div>
 */
- (void) setConnectionData:(FMIceLinkSdpConnectionData*)value;
/*!
 * <div>
 * Sets the media-level encryption key.
 * </div>
 */
- (void) setEncryptionKey:(FMIceLinkSdpEncryptionKey*)value;
/*!
 * <div>
 * Sets a format parameter value.
 * </div>
 */
- (bool) setFormatParameterValueWithPayloadType:(int)payloadType formatParameterName:(NSString*)formatParameterName formatParameterValue:(NSString*)formatParameterValue;
/*!
 * <div>
 * Sets the media title.
 * </div>
 */
- (void) setMediaTitle:(NSString*)value;
/*!
 * <div>
 * Sets the QualityAttribute associated with this MediaDescription.
 * </div>
 */
- (void) setQualityAttribute:(FMIceLinkSdpQualityAttribute*)value;
/*!
 * <div>
 * Sets Rtcp Attributes associated with this media description.
 * </div>
 */
- (void) setRtcpAttribute:(FMIceLinkSdpRtcpAttribute*)value;
/*!
 * <div>
 * Sets the SetupAttribute associated with this MediaDescription.
 * </div>
 */
- (void) setSetupAttribute:(FMIceLinkSdpSetupAttribute*)value;
/*!
 * <div>
 * Sets the stream direction indicated in Media Description. Getter returns StreamDirection if DirectionAttribute is present; otherwise, returns StreamDirection.Unset.
 * </div>
 */
- (void) setStreamDirection:(FMIceLinkStreamDirection)value;
/*!
 * <div>
 * Gets the SetupAttribute associated with this MediaDescription.
 * </div>
 */
- (FMIceLinkSdpSetupAttribute*) setupAttribute;
/*!
 * <div>
 * Gets the stream direction indicated in Media Description. Getter returns StreamDirection if DirectionAttribute is present; otherwise, returns StreamDirection.Unset.
 * </div>
 */
- (FMIceLinkStreamDirection) streamDirection;
/*!
 * <div>
 * Gets a value indicating whether this SDP MediaDescription suggests support for ICE.
 * </div>
 * @return
 */
- (bool) supportsIce;
/*!
 * <div>
 * Gets a value stating whether this media description indicates RTCP Multiplexing support
 * </div>
 */
- (bool) supportsRtcpMultiplexing;
/*!
 * <div>
 * Updates SDP Quality Attribute associated with this media description if one is present. Otherwise,
 * creates a new one and inserts it into this media description.
 * </div>
 * @param quality
 */
- (void) updateQualityAttributeValueWithQuality:(int)quality;

@end

/*!
 * <div>
 * https://tools.ietf.org/html/rfc5888#page-4
 * "Media stream identification" media attribute, which is used for identifying media streams within a session description.
 * Its formatting in SDP [RFC4566] is described by
 * the following Augmented Backus-Naur Form(ABNF) [RFC5234]:
 * 
 * mid-attribute      = "a=mid:" identification-tag
 * identification-tag = token
 * ; token is defined in RFC 4566
 * The identification-tag MUST be unique within an SDP session description.
 * </div>
 */
@interface FMIceLinkSdpMediaStreamIdAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMediaStreamIdAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpMediaStreamIdAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Gets the identification tag.
 * </div>
 */
- (NSString*) identificationTag;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMediaStreamIdAttribute class.
 * </div>
 * @param idValue The identifier.
 */
- (instancetype) initWithId:(NSString*)idValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMediaStreamIdAttribute class.
 * </div>
 * @param idValue The identifier.
 */
+ (FMIceLinkSdpMediaStreamIdAttribute*) mediaStreamIdAttributeWithId:(NSString*)idValue;

@end

@interface FMIceLinkSdpMediaStreamIdSemanticTokenWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkSdpMediaStreamIdSemanticToken)value;

@end

/*!
 * <div>
 * https://tools.ietf.org/html/draft-ietf-mmusic-msid-08 - NB: Removed in subsequent drafts, most likely will not be used eventually.
 * Used here for compatibility with Google Chrome and Mozilla Firefox.
 * 
 * A session-level attribute is defined for signalling the semantics
 * associated with an msid grouping.This allows msid groupings with
 * different semantics to coexist.
 * 
 * This OPTIONAL attribute gives the group identifier and its group
 * semantic; it carries the same meaning as the ssrc-group-attr of RFC
 * 5576 section 4.2, but uses the identifier of the group rather than a
 * list of SSRC values.
 * 
 * This attribute MUST be present if "a=msid" is used.
 * 
 * An empty list of identifiers is an indication that the sender
 * supports the indicated semantic, but has no msid groupings of the
 * given type in the present SDP.
 * 
 * An identifier of "*" is an indication that all "a=msid" lines in the
 * SDP have this specific semantic.  If "*" is not used, each msid-id in
 * the SDP MUST appear in one and only one "msid-semantic" line.
 * The name of the attribute is "msid-semantic".
 * The value of the attribute is given by the following ABNF:
 * 
 * msid-semantic-value = msid - semantic msid-list
 * msid-semantic = token ; see RFC 4566
 * msid-list = *(" " msid-id) / " *"
 * 
 * The semantic field holds values from the IANA registriy "Semantics
 * for the msid-semantic SDP attribute" (which is defined in Section 6 of https://tools.ietf.org/html/draft-ietf-mmusic-msid-08 ).
 * 
 * An example msid-semantic might look like this, if a semantic LS was
 * registered by IANA for the same purpose as the existing LS grouping
 * semantic:
 * 
 * a= msid-semantic:LS xyzzy forolow
 * 
 * This means that the SDP description has two lip sync groups, with the
 * group identifiers xyzzy and forolow, respectively.
 * 
 * The msid-semantic attribute can occur more than once, but MUST NOT
 * occur more than once with the same msid-semantic value.
 * </div><seealso cref="FMIceLinkSdpAttribute" />
 */
@interface FMIceLinkSdpMediaStreamIdSemanticAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMediaStreamIdSemanticAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpMediaStreamIdSemanticAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMediaStreamIdSemanticAttribute class.
 * </div>
 * @param semanticToken The semantic token.
 */
- (instancetype) initWithSemanticToken:(FMIceLinkSdpMediaStreamIdSemanticToken)semanticToken;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMediaStreamIdSemanticAttribute class.
 * </div>
 * @param semanticToken The semantic token.
 * @param msidList The msid list for the given semantic token.
 */
- (instancetype) initWithSemanticToken:(FMIceLinkSdpMediaStreamIdSemanticToken)semanticToken msidList:(NSString*)msidList;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMediaStreamIdSemanticAttribute class.
 * </div>
 * @param semanticToken The semantic token.
 */
+ (FMIceLinkSdpMediaStreamIdSemanticAttribute*) mediaStreamIdSemanticAttributeWithSemanticToken:(FMIceLinkSdpMediaStreamIdSemanticToken)semanticToken;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMediaStreamIdSemanticAttribute class.
 * </div>
 * @param semanticToken The semantic token.
 * @param msidList The msid list for the given semantic token.
 */
+ (FMIceLinkSdpMediaStreamIdSemanticAttribute*) mediaStreamIdSemanticAttributeWithSemanticToken:(FMIceLinkSdpMediaStreamIdSemanticToken)semanticToken msidList:(NSString*)msidList;
/*!
 * <div>
 * Gets the space-delimited list of msids for which a given semantic is used.
 * An empty list of identifiers is an indication that the sender
 * supports the indicated semantic, but has no msid groupings of the
 * given type in the present SDP.
 * 
 * An identifier of "*" is an indication that all "a=msid" lines in the
 * SDP have this specific semantic.  If "*" is not used, each msid-id in
 * the SDP MUST appear in one and only one "msid-semantic" line.
 * </div>
 */
- (NSString*) msIdList;
/*!
 * <div>
 * Sets the space-delimited list of msids for which a given semantic is used.
 * An empty list of identifiers is an indication that the sender
 * supports the indicated semantic, but has no msid groupings of the
 * given type in the present SDP.
 * 
 * An identifier of "*" is an indication that all "a=msid" lines in the
 * SDP have this specific semantic.  If "*" is not used, each msid-id in
 * the SDP MUST appear in one and only one "msid-semantic" line.
 * </div>
 */
- (void) setMsIdList:(NSString*)value;

@end

/*!
 * <div>
 * Defines valid SDP media types.
 * </div>
 */
@interface FMIceLinkSdpMediaType : NSObject

/*!
 * <div>
 * Gets the SDP media type meaning "Application".
 * </div>
 */
+ (NSString*) application;
/*!
 * <div>
 * Gets the SDP media type meaning "Audio".
 * </div>
 */
+ (NSString*) audio;
/*!
 * <div>
 * Convert a StreamType enum to an SDP media type.
 * </div>
 * @param streamType The StreamType enum.
 */
+ (NSString*) fromStreamType:(FMIceLinkStreamType)streamType;
/*!
 * <div>
 * Gets the SDP media type meaning "Message".
 * </div>
 */
+ (NSString*) message;
/*!
 * <div>
 * Gets the SDP media type meaning "Text".
 * </div>
 */
+ (NSString*) text;
/*!
 * <div>
 * Converts an SDP media type to a StreamType enum.
 * </div>
 * @param mediaType The SDP media type.
 */
+ (FMIceLinkStreamType) toStreamTypeWithMediaType:(NSString*)mediaType;
/*!
 * <div>
 * Gets the SDP media type meaning "Video".
 * </div>
 */
+ (NSString*) video;

@end

/*!
 * <div>
 * An SDP message.
 * </div>
 */
@interface FMIceLinkSdpMessage : NSObject

/*!
 * <div>
 * Adds a proposed bandwidth.
 * </div>
 * @param bandwidth The proposed bandwidth to add.
 */
- (void) addBandwidth:(FMIceLinkSdpBandwidth*)bandwidth;
/*!
 * <div>
 * Adds a media description.
 * </div>
 * @param mediaDescription The media description to add.
 */
- (void) addMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription;
/*!
 * <div>
 * Adds a session-level attribute.
 * </div>
 * @param attribute The session-level attribute to add.
 */
- (void) addSessionAttribute:(FMIceLinkSdpAttribute*)attribute;
/*!
 * <div>
 * Adds a start, stop, and repeat time.
 * </div>
 * @param timeDescription The start, stop, and repeat time to add.
 */
- (void) addTimeDescription:(FMIceLinkSdpTimeDescription*)timeDescription;
/*!
 * <div>
 * Gets the first media description of type "application".
 * </div>
 */
- (FMIceLinkSdpMediaDescription*) applicationDescription;
/*!
 * <div>
 * Gets any media descriptions of type "application".
 * </div>
 */
- (NSMutableArray*) applicationDescriptions;
/*!
 * <div>
 * Gets the first media description of type "audio".
 * </div>
 */
- (FMIceLinkSdpMediaDescription*) audioDescription;
/*!
 * <div>
 * Gets any media descriptions of type "audio".
 * </div>
 */
- (NSMutableArray*) audioDescriptions;
/*!
 * <div>
 * Gets the array of proposed bandwidths to be used by the session.
 * </div>
 */
- (NSMutableArray*) bandwidths;
/*!
 * <div>
 * Gets session-level connection data.
 * </div>
 */
- (FMIceLinkSdpConnectionData*) connectionData;
/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the email address for the person responsible for the conference.
 * </div>
 */
- (NSString*) emailAddress;
/*!
 * <div>
 * Gets the session-level encryption key.
 * </div>
 */
- (FMIceLinkSdpEncryptionKey*) encryptionKey;
/*!
 * <div>
 * Obtains Crypto attributes from the session-level attributes in this message.
 * Crypto attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
 * </div>
 */
- (NSMutableArray*) getSessionLevelCryptoAttributes;
/*!
 * <div>
 * Obtains the stream direction indicated as a session-level attribute in this message. If none is supplied, StreamDirection.Unset is returned.
 * Stream Direction may also be (and most likely is) indicated as a media-level attribute, so individual media descriptions must also be examined.
 * </div>
 */
- (FMIceLinkStreamDirection) getSessionLevelDirection;
/*!
 * <div>
 * Obtains Fingerprint attribute from the session-level attributes in this message.
 * Fingerprint attribute may also be sent as a media-level argument, so individual media descriptions must also be examined.
 * </div>
 */
- (FMIceLinkSdpIceFingerprintAttribute*) getSessionLevelFingerprintAttribute;
/*!
 * <div>
 * Obtains session-level Ice Options attributes associated with the Sdp Message.
 * </div>
 */
- (NSMutableArray*) getSessionLevelIceOptionAttributes;
/*!
 * <div>
 * Obtains Ice Password Attribute from the session-level attributes in this message.
 * Ice Password attribute may also be sent as a media-level argument, so individual media descriptions must also be examined.
 * </div>
 */
- (FMIceLinkSdpIcePasswordAttribute*) getSessionLevelIcePasswordAttribute;
/*!
 * <div>
 * Obtains Ice Ufrag Attribute from the session-level attributes in this message.
 * Ice Ufrag Attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
 * </div>
 */
- (FMIceLinkSdpIceUfragAttribute*) getSessionLevelIceUfragAttribute;
/*!
 * <div>
 * Returns a value stating whether Rtcp Multiplexing support is indicated  as a session-level attribute in this message.
 * Rtcp Multiplexing support may also be indicated via a media-level argument, so individual media descriptions must also be examined.
 * </div>
 */
- (bool) getSessionLevelRtcpMultiplexingSupport;
/*!
 * <div>
 * Obtains session-level RTP ext-map attributes associated with the Sdp Message.
 * </div>
 */
- (NSMutableArray*) getSessionLevelRtpExtMapAttributes;
/*!
 * <div>
 * Obtains Setup Attribute from the session-level attributes in this message.
 * Setup Attributes may also be sent as a media-level argument, so individual media descriptions must also be examined.
 * </div>
 */
- (FMIceLinkSdpSetupAttribute*) getSessionLevelSetupAttribute;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMessage class.
 * </div>
 * @param origin The originator of the session plus a session identifier and version number.
 */
- (instancetype) initWithOrigin:(FMIceLinkSdpOrigin*)origin;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMessage class.
 * </div>
 * @param origin The originator of the session plus a session identifier and version number.
 * @param sessionName The textual session name.
 */
- (instancetype) initWithOrigin:(FMIceLinkSdpOrigin*)origin sessionName:(NSString*)sessionName;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMessage class.
 * </div>
 * @param origin The originator of the session plus a session identifier and version number.
 * @param sessionName The textual session name.
 * @param timeDescriptions The array of start, stop, and repeat times for the session.
 */
- (instancetype) initWithOrigin:(FMIceLinkSdpOrigin*)origin sessionName:(NSString*)sessionName timeDescriptions:(NSMutableArray*)timeDescriptions;
/*!
 * <div>
 * Gets the array of media descriptions.
 * </div>
 */
- (NSMutableArray*) mediaDescriptions;
/*!
 * <div>
 * Gets the first media description of type "message".
 * </div>
 */
- (FMIceLinkSdpMediaDescription*) messageDescription;
/*!
 * <div>
 * Gets any media descriptions of type "message".
 * </div>
 */
- (NSMutableArray*) messageDescriptions;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMessage class.
 * </div>
 * @param origin The originator of the session plus a session identifier and version number.
 */
+ (FMIceLinkSdpMessage*) messageWithOrigin:(FMIceLinkSdpOrigin*)origin;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMessage class.
 * </div>
 * @param origin The originator of the session plus a session identifier and version number.
 * @param sessionName The textual session name.
 */
+ (FMIceLinkSdpMessage*) messageWithOrigin:(FMIceLinkSdpOrigin*)origin sessionName:(NSString*)sessionName;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpMessage class.
 * </div>
 * @param origin The originator of the session plus a session identifier and version number.
 * @param sessionName The textual session name.
 * @param timeDescriptions The array of start, stop, and repeat times for the session.
 */
+ (FMIceLinkSdpMessage*) messageWithOrigin:(FMIceLinkSdpOrigin*)origin sessionName:(NSString*)sessionName timeDescriptions:(NSMutableArray*)timeDescriptions;
/*!
 * <div>
 * Gets the originator of the session plus a session identifier and version number.
 * </div>
 */
- (FMIceLinkSdpOrigin*) origin;
/*!
 * <div>
 * Creates an FMIceLinkSdpMessage instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpMessage*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Gets the phone number for the person responsible for the conference.
 * </div>
 */
- (NSString*) phoneNumber;
/*!
 * <div>
 * Gets the version of the Session Description Protocol.
 * </div>
 */
- (NSString*) protocolVersion;
/*!
 * <div>
 * Removes a proposed bandwidth.
 * </div>
 * @param bandwidth The proposed bandwidth to remove.
 */
- (bool) removeBandwidth:(FMIceLinkSdpBandwidth*)bandwidth;
/*!
 * <div>
 * Removes a media description.
 * </div>
 * @param mediaDescription The media description to remove.
 */
- (bool) removeMediaDescription:(FMIceLinkSdpMediaDescription*)mediaDescription;
/*!
 * <div>
 * Removes a session-level attribute.
 * </div>
 * @param attributeType The session-level attribute type to remove.
 */
- (bool) removeSessionAttributeWithAttributeType:(FMIceLinkSdpAttributeType)attributeType;
/*!
 * <div>
 * Removes a start, stop, and repeat time.
 * </div>
 * @param timeDescription The start, stop, and repeat time to remove.
 */
- (bool) removeTimeDescription:(FMIceLinkSdpTimeDescription*)timeDescription;
/*!
 * <div>
 * Removes all time descriptions.
 * </div>
 */
- (void) removeTimeDescriptions;
/*!
 * <div>
 * Gets the array of session-level attributes.
 * </div>
 */
- (NSMutableArray*) sessionAttributes;
/*!
 * <div>
 * Gets textual information about the session.
 * </div>
 */
- (NSString*) sessionInformation;
/*!
 * <div>
 * Gets the textual session name.
 * </div>
 */
- (NSString*) sessionName;
/*!
 * <div>
 * Sets session-level connection data.
 * </div>
 */
- (void) setConnectionData:(FMIceLinkSdpConnectionData*)value;
/*!
 * <div>
 * Sets the email address for the person responsible for the conference.
 * </div>
 */
- (void) setEmailAddress:(NSString*)value;
/*!
 * <div>
 * Sets the session-level encryption key.
 * </div>
 */
- (void) setEncryptionKey:(FMIceLinkSdpEncryptionKey*)value;
/*!
 * <div>
 * Sets the phone number for the person responsible for the conference.
 * </div>
 */
- (void) setPhoneNumber:(NSString*)value;
/*!
 * <div>
 * Sets textual information about the session.
 * </div>
 */
- (void) setSessionInformation:(NSString*)value;
/*!
 * <div>
 * Sets the time zone adjustments.
 * </div>
 */
- (void) setTimeZoneAdjustments:(FMIceLinkSdpTimeZones*)value;
/*!
 * <div>
 * Sets the pointer to additional information about the session.
 * </div>
 */
- (void) setUri:(NSURL*)value;
/*!
 * <div>
 * Gets the first media description of type "text".
 * </div>
 */
- (FMIceLinkSdpMediaDescription*) textDescription;
/*!
 * <div>
 * Gets any media descriptions of type "text".
 * </div>
 */
- (NSMutableArray*) textDescriptions;
/*!
 * <div>
 * Gets the array of start, stop, and repeat times for the session.
 * </div>
 */
- (NSMutableArray*) timeDescriptions;
/*!
 * <div>
 * Gets the time zone adjustments.
 * </div>
 */
- (FMIceLinkSdpTimeZones*) timeZoneAdjustments;
/*!
 * <div>
 * Updates SDP Setup Value associated with the session description.
 * </div>
 * @param setupValue
 */
- (void) updateSetupValue:(NSString*)setupValue;
/*!
 * <div>
 * Gets the pointer to additional information about the session.
 * </div>
 */
- (NSURL*) uri;
/*!
 * <div>
 * Gets the first media description of type "video".
 * </div>
 */
- (FMIceLinkSdpMediaDescription*) videoDescription;
/*!
 * <div>
 * Gets any media descriptions of type "video".
 * </div>
 */
- (NSMutableArray*) videoDescriptions;

@end

/*!
 * <div>
 * Defines valid SDP network types.
 * </div>
 */
@interface FMIceLinkSdpNetworkType : NSObject

/*!
 * <div>
 * Gets the SDP network type meaning "Internet".
 * </div>
 */
+ (NSString*) internet;

@end

/*!
 * <div>
 * Defines valid SDP orientations.
 * </div>
 */
@interface FMIceLinkSdpOrientation : NSObject

/*!
 * <div>
 * Gets the SDP orientation meaning "Landscape".
 * </div>
 */
+ (NSString*) landscape;
/*!
 * <div>
 * Gets the SDP orientation meaning "Portrait".
 * </div>
 */
+ (NSString*) portrait;
/*!
 * <div>
 * Gets the SDP orientation meaning "Upside-Down Landscape".
 * </div>
 */
+ (NSString*) seascape;

@end

/*!
 * <div>
 * Normally this is only used for a whiteboard or presentation
 * tool.  It specifies the orientation of a the workspace on the
 * screen.  It is a media-level attribute.  Permitted values are
 * "portrait", "landscape", and "seascape" (upside-down
 * landscape).  It is not dependent on charset.
 * </div>
 */
@interface FMIceLinkSdpOrientationAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpOrientationAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpOrientationAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpOrientationAttribute class.
 * </div>
 * @param orientation The orientation of a workspace on the screen. See FMIceLinkSdpOrientationAttribute#orientation for possible values.
 */
- (instancetype) initWithOrientation:(NSString*)orientation;
/*!
 * <div>
 * Gets the orientation of a workspace on the screen. See FMIceLinkSdpOrientationAttribute#orientation for possible values.
 * </div>
 */
- (NSString*) orientation;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpOrientationAttribute class.
 * </div>
 * @param orientation The orientation of a workspace on the screen. See FMIceLinkSdpOrientationAttribute#orientation for possible values.
 */
+ (FMIceLinkSdpOrientationAttribute*) orientationAttributeWithOrientation:(NSString*)orientation;

@end

/*!
 * <div>
 * An SDP origin element.
 * </div>
 */
@interface FMIceLinkSdpOrigin : NSObject

/*!
 * <div>
 * Gets the type of the address. See FMIceLinkSdpOrigin#addressType for possible values.
 * </div>
 */
- (NSString*) addressType;
/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpOrigin class.
 * </div>
 * @param unicastAddress The address of the machine from which the session was created.
 */
- (instancetype) initWithUnicastAddress:(NSString*)unicastAddress;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpOrigin class.
 * </div>
 * @param unicastAddress The address of the machine from which the session was created.
 * @param username The user's login on the originating host.
 */
- (instancetype) initWithUnicastAddress:(NSString*)unicastAddress username:(NSString*)username;
/*!
 * <div>
 * Gets the type of network. See FMIceLinkSdpOrigin#networkType for possible values.
 * </div>
 */
- (NSString*) networkType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpOrigin class.
 * </div>
 * @param unicastAddress The address of the machine from which the session was created.
 */
+ (FMIceLinkSdpOrigin*) originWithUnicastAddress:(NSString*)unicastAddress;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpOrigin class.
 * </div>
 * @param unicastAddress The address of the machine from which the session was created.
 * @param username The user's login on the originating host.
 */
+ (FMIceLinkSdpOrigin*) originWithUnicastAddress:(NSString*)unicastAddress username:(NSString*)username;
/*!
 * <div>
 * Creates an FMIceLinkSdpOrigin instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpOrigin*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Gets the globally unique identifier for the session.
 * </div>
 */
- (long long) sessionId;
/*!
 * <div>
 * Gets the version number for the session.
 * </div>
 */
- (long long) sessionVersion;
/*!
 * <div>
 * Sets the type of the address. See FMIceLinkSdpOrigin#addressType for possible values.
 * </div>
 */
- (void) setAddressType:(NSString*)value;
/*!
 * <div>
 * Sets the type of network. See FMIceLinkSdpOrigin#networkType for possible values.
 * </div>
 */
- (void) setNetworkType:(NSString*)value;
/*!
 * <div>
 * Sets the globally unique identifier for the session.
 * </div>
 */
- (void) setSessionId:(long long)value;
/*!
 * <div>
 * Sets the version number for the session.
 * </div>
 */
- (void) setSessionVersion:(long long)value;
/*!
 * <div>
 * Sets the address of the machine from which the session was created.
 * </div>
 */
- (void) setUnicastAddress:(NSString*)value;
/*!
 * <div>
 * Sets the user's login on the originating host.
 * </div>
 */
- (void) setUsername:(NSString*)value;
/*!
 * <div>
 * Gets the address of the machine from which the session was created.
 * </div>
 */
- (NSString*) unicastAddress;
/*!
 * <div>
 * Gets the user's login on the originating host.
 * </div>
 */
- (NSString*) username;

@end

/*!
 * <div>
 * This gives the length of time in milliseconds represented by
 * the media in a packet.  This is probably only meaningful for
 * audio data, but may be used with other media types if it makes
 * sense.  It should not be necessary to know ptime to decode RTP
 * or vat audio, and it is intended as a recommendation for the
 * encoding/packetisation of audio.  It is a media-level
 * attribute, and it is not dependent on charset.
 * </div>
 */
@interface FMIceLinkSdpPacketTimeAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpPacketTimeAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpPacketTimeAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpPacketTimeAttribute class.
 * </div>
 * @param packetTime The length of time in milliseconds represented by
 * the media in a packet.
 */
- (instancetype) initWithPacketTime:(int)packetTime;
/*!
 * <div>
 * Gets the length of time in milliseconds represented by
 * the media in a packet.
 * </div>
 */
- (int) packetTime;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpPacketTimeAttribute class.
 * </div>
 * @param packetTime The length of time in milliseconds represented by
 * the media in a packet.
 */
+ (FMIceLinkSdpPacketTimeAttribute*) packetTimeAttributeWithPacketTime:(int)packetTime;

@end

/*!
 * <div>
 * An SDP encryption key with a method of "prompt".
 * </div>
 */
@interface FMIceLinkSdpPromptEncryptionKey : FMIceLinkSdpEncryptionKey

- (instancetype) init;
+ (FMIceLinkSdpPromptEncryptionKey*) promptEncryptionKey;

@end

/*!
 * <div>
 * This gives a suggestion for the quality of the encoding as an
 * integer value.  The intention of the quality attribute for
 * video is to specify a non-default trade-off between frame-rate
 * and still-image quality.  For video, the value is in the range
 * 0 to 10, with the following suggested meaning:
 * 
 * 10 - the best still-image quality the compression scheme can
 * give.
 * 5  - the default behaviour given no quality suggestion.
 * 0  - the worst still-image quality the codec designer thinks
 * is still usable.
 * 
 * It is a media-level attribute, and it is not dependent on
 * charset.
 * </div>
 */
@interface FMIceLinkSdpQualityAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpQualityAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpQualityAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpQualityAttribute class.
 * </div>
 * @param quality The suggested quality of the encoding as an integer value from 0-10.
 */
- (instancetype) initWithQuality:(uint8_t)quality;
/*!
 * <div>
 * Gets the suggested quality of the encoding as an integer value from 0-10.
 * </div>
 */
- (uint8_t) quality;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpQualityAttribute class.
 * </div>
 * @param quality The suggested quality of the encoding as an integer value from 0-10.
 */
+ (FMIceLinkSdpQualityAttribute*) qualityAttributeWithQuality:(uint8_t)quality;

@end

/*!
 * <div>
 * This specifies that the tools should be started in receive-only
 * mode where applicable.  It can be either a session- or media-
 * level attribute, and it is not dependent on charset.  Note that
 * recvonly applies to the media only, not to any associated
 * control protocol (e.g., an RTP-based system in recvonly mode
 * SHOULD still send RTCP packets).
 * </div>
 */
@interface FMIceLinkSdpReceiveOnlyAttribute : FMIceLinkSdpDirectionAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpReceiveOnlyAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpReceiveOnlyAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpReceiveOnlyAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpReceiveOnlyAttribute class.
 * </div>
 */
+ (FMIceLinkSdpReceiveOnlyAttribute*) receiveOnlyAttribute;
/*!
 * <div>
 * Gets the stream direction.
 * </div>
 */
- (FMIceLinkStreamDirection) streamDirection;

@end

/*!
 * <div>
 * An SDP repeat time element.
 * </div>
 */
@interface FMIceLinkSdpRepeatTime : NSObject

/*!
 * <div>
 * Gets the active duration.
 * </div>
 */
- (FMIceLinkTimeSpan*) activeDuration;
/*!
 * <div>
 * Adds an offset from the start time.
 * </div>
 * @param offset The offset from the start time to add.
 */
- (void) addOffset:(FMIceLinkTimeSpan*)offset;
/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRepeatTime class.
 * </div>
 * @param repeatInterval The repeat interval.
 * @param activeDuration The active duration.
 */
- (instancetype) initWithRepeatInterval:(FMIceLinkTimeSpan*)repeatInterval activeDuration:(FMIceLinkTimeSpan*)activeDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRepeatTime class.
 * </div>
 * @param repeatInterval The repeat interval.
 * @param activeDuration The active duration.
 * @param offsets The offsets from the start time.
 */
- (instancetype) initWithRepeatInterval:(FMIceLinkTimeSpan*)repeatInterval activeDuration:(FMIceLinkTimeSpan*)activeDuration offsets:(NSMutableArray*)offsets;
/*!
 * <div>
 * Gets the array of offsets from the start time.
 * </div>
 */
- (NSMutableArray*) offsets;
/*!
 * <div>
 * Creates an FMIceLinkSdpRepeatTime instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpRepeatTime*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Removes an offset from the start time.
 * </div>
 * @param offset The offset from the start time to remove.
 */
- (bool) removeOffset:(FMIceLinkTimeSpan*)offset;
/*!
 * <div>
 * Gets the repeat interval.
 * </div>
 */
- (FMIceLinkTimeSpan*) repeatInterval;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRepeatTime class.
 * </div>
 * @param repeatInterval The repeat interval.
 * @param activeDuration The active duration.
 */
+ (FMIceLinkSdpRepeatTime*) repeatTimeWithRepeatInterval:(FMIceLinkTimeSpan*)repeatInterval activeDuration:(FMIceLinkTimeSpan*)activeDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRepeatTime class.
 * </div>
 * @param repeatInterval The repeat interval.
 * @param activeDuration The active duration.
 * @param offsets The offsets from the start time.
 */
+ (FMIceLinkSdpRepeatTime*) repeatTimeWithRepeatInterval:(FMIceLinkTimeSpan*)repeatInterval activeDuration:(FMIceLinkTimeSpan*)activeDuration offsets:(NSMutableArray*)offsets;

@end

/*!
 * <div>
 * The RTCP attribute is used to document the RTCP port used for media
 * stream, when that port is not the next higher (odd) port number
 * following the RTP port described in the media line.
 * </div>
 */
@interface FMIceLinkSdpRtcpAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Gets the type of the address. See FMIceLinkSdpRtcpAttribute#addressType for possible values.
 * </div>
 */
- (NSString*) addressType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtcpAttribute class.
 * </div>
 * @param port The RTCP port number.
 * @param connectionAddress The RTCP connection address.
 */
+ (FMIceLinkSdpRtcpAttribute*) attributeWithPort:(int)port connectionAddress:(NSString*)connectionAddress;
/*!
 * <div>
 * Gets the RTCP connection address.
 * </div>
 */
- (NSString*) connectionAddress;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtcpAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpRtcpAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtcpAttribute class.
 * </div>
 * @param port The RTCP port number.
 * @param connectionAddress The RTCP connection address.
 */
- (instancetype) initWithPort:(int)port connectionAddress:(NSString*)connectionAddress;
/*!
 * <div>
 * Gets the type of network. See FMIceLinkSdpRtcpAttribute#networkType for possible values.
 * </div>
 */
- (NSString*) networkType;
/*!
 * <div>
 * Gets the RTCP port number.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Updates the port and connection address.
 * </div>
 * @param port The port.
 * @param connectionAddress The connection address.
 */
- (void) updateWithPort:(int)port connectionAddress:(NSString*)connectionAddress;

@end

/*!
 * <div>
 * This attribute is used to indicate the capability of
 * using RTCP feedback.
 * </div>
 */
@interface FMIceLinkSdpRtcpFeedbackAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Creates a "ccm fir" feedback attribute.
 * </div>
 * @param payloadType The payload type.
 */
+ (FMIceLinkSdpRtcpFeedbackAttribute*) ccmFirAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtcpFeedbackAttribute class.
 * </div>
 * @param payloadType The payload type.
 * @param type The type.
 */
+ (FMIceLinkSdpRtcpFeedbackAttribute*) feedbackAttributeWithPayloadType:(int)payloadType type:(NSString*)type;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtcpFeedbackAttribute class.
 * </div>
 * @param payloadType The payload type.
 * @param type The type.
 * @param subtype The subtype.
 */
+ (FMIceLinkSdpRtcpFeedbackAttribute*) feedbackAttributeWithPayloadType:(int)payloadType type:(NSString*)type subtype:(NSString*)subtype;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtcpFeedbackAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpRtcpFeedbackAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtcpFeedbackAttribute class.
 * </div>
 * @param payloadType The payload type.
 * @param type The type.
 */
- (instancetype) initWithPayloadType:(int)payloadType type:(NSString*)type;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtcpFeedbackAttribute class.
 * </div>
 * @param payloadType The payload type.
 * @param type The type.
 * @param subtype The subtype.
 */
- (instancetype) initWithPayloadType:(int)payloadType type:(NSString*)type subtype:(NSString*)subtype;
/*!
 * <div>
 * Creates a "nack" feedback attribute.
 * </div>
 * @param payloadType The payload type.
 */
+ (FMIceLinkSdpRtcpFeedbackAttribute*) nackAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Creates a "nack pli" feedback attribute.
 * </div>
 * @param payloadType The payload type.
 */
+ (FMIceLinkSdpRtcpFeedbackAttribute*) nackPliAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Creates a "nack rpsi" feedback attribute.
 * </div>
 * @param payloadType The payload type.
 */
+ (FMIceLinkSdpRtcpFeedbackAttribute*) nackRpsiAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Creates a "nack sli" feedback attribute.
 * </div>
 * @param payloadType The payload type.
 */
+ (FMIceLinkSdpRtcpFeedbackAttribute*) nackSliAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Gets the payload type.
 * </div>
 */
- (int) payloadType;
/*!
 * <div>
 * Creates a "goog-remb" feedback attribute.
 * </div>
 * @param payloadType The payload type.
 */
+ (FMIceLinkSdpRtcpFeedbackAttribute*) rembAttributeWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Sets the payload type.
 * </div>
 */
- (void) setPayloadType:(int)value;
/*!
 * <div>
 * Sets the sub-type.
 * </div>
 */
- (void) setSubType:(NSString*)value;
/*!
 * <div>
 * Sets the type.
 * </div>
 */
- (void) setType:(NSString*)value;
/*!
 * <div>
 * Gets the sub-type.
 * </div>
 */
- (NSString*) subType;
/*!
 * <div>
 * Gets the type.
 * </div>
 */
- (NSString*) type;
/*!
 * <div>
 * Gets the payload type that represents
 * wildcard feedback attributes ('*').
 * </div>
 */
+ (int) wildcardPayloadType;

@end

/*!
 * <div>
 * A feedback attribute sub type.
 * </div>
 */
@interface FMIceLinkSdpRtcpFeedbackAttributeSubType : NSObject

+ (FMIceLinkSdpRtcpFeedbackAttributeSubType*) feedbackAttributeSubType;
/*!
 * <div>
 * Gets the "full intraframe refresh" sub-type.
 * </div>
 */
+ (NSString*) fir;
- (instancetype) init;
/*!
 * <div>
 * Gets the "picture loss indication" sub-type.
 * </div>
 */
+ (NSString*) pli;
/*!
 * <div>
 * Gets the "reference picture selection indication" sub-type.
 * </div>
 */
+ (NSString*) rpsi;
/*!
 * <div>
 * Gets the "slice loss indication" sub-type.
 * </div>
 */
+ (NSString*) sli;

@end

/*!
 * <div>
 * A feedback attribute type.
 * </div>
 */
@interface FMIceLinkSdpRtcpFeedbackAttributeType : NSObject

/*!
 * <div>
 * Gets the "positive acknowledgement" type.
 * </div>
 */
+ (NSString*) ack;
/*!
 * <div>
 * Gets the application-defined type.
 * </div>
 */
+ (NSString*) app;
/*!
 * <div>
 * Gets the "codec control message" type.
 * </div>
 */
+ (NSString*) ccm;
+ (FMIceLinkSdpRtcpFeedbackAttributeType*) feedbackAttributeType;
- (instancetype) init;
/*!
 * <div>
 * Gets the "negative acknowledgement" type.
 * </div>
 */
+ (NSString*) nack;
/*!
 * <div>
 * Gets the "receiver estimated maximum bitrate" type.
 * </div>
 */
+ (NSString*) remb;

@end

/*!
 * <div>
 * This attribute is used to signal that RTP and RTCP traffic should be
 * multiplexed on a single port.  It is a property attribute, which does
 * not take a value.
 * </div>
 */
@interface FMIceLinkSdpRtcpMuxAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtcpMuxAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpRtcpMuxAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtcpMuxAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtcpMuxAttribute class.
 * </div>
 */
+ (FMIceLinkSdpRtcpMuxAttribute*) muxAttribute;

@end

/*!
 * <div>
 * https://tools.ietf.org/html/rfc5285#section-5
 * Stream or media-level attribute used to indicate the presence of RTP Header Extensions, and the mapping of
 * local identifiers used in the header extension to a larger namespace.
 * 
 * A usable mapping MUST use IDs in the valid range, and each ID in this
 * range MUST be used only once for each media (or only once if the
 * mappings are session level).  Mappings that do not conform to these
 * rules MAY be presented, for instance, during offer/answer negotiation
 * as described in the next section, but remapping to conformant values
 * is necessary before they can be applied.
 * 
 * Each extension is named by a URI. Each local identifier potentially used in the stream is mapped to a
 * string using an attribute of the form:
 * a=extmap:VALUE["/"DIRECTION] URI EXTENSIONATTRIBUTES
 * Where URI is a URI, as above, VALUE is the local identifier (ID)
 * of this extension and is an integer in the valid range inclusive (0
 * is reserved for padding in both forms, and 15 is reserved in the one-byte header form),
 * and direction is one of "sendonly", "recvonly", "sendrecv", or "inactive" (without the quotes).
 * Example:
 * 
 * a=extmap:1 http://example.com/082005/ext.htm#ttime
 * a=extmap:2/sendrecv http://example.com/082005/ext.htm#xmeta short
 * </div>
 */
@interface FMIceLinkSdpRtpExtMapAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Gets the direction of this extension (optional). If not present, stream direction is assumed to be the direction of the extension.
 * </div>
 */
- (FMIceLinkStreamDirection) direction;
/*!
 * <div>
 * Gets extension attributes (optional).
 * </div>
 */
- (NSString*) extensionAttributes;
/*!
 * <div>
 * RTP Extension Map Attribute.
 * </div>
 * @param idValue Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.
 * @param uri Well known extension identifier.
 */
+ (FMIceLinkSdpRtpExtMapAttribute*) extMapAttributeWithId:(int)idValue uri:(NSString*)uri;
/*!
 * <div>
 * RTP Extension Map Attribute.
 * </div>
 * @param idValue Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.
 * @param uri Well known extension identifier.
 * @param direction Disered direction of this RTP Extension Header.
 */
+ (FMIceLinkSdpRtpExtMapAttribute*) extMapAttributeWithId:(int)idValue uri:(NSString*)uri direction:(FMIceLinkStreamDirection)direction;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpMapAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpRtpExtMapAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 * @return
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Gets the local identifier of this extension.
 * </div>
 */
- (int) id;
/*!
 * <div>
 * RTP Extension Map Attribute.
 * </div>
 * @param idValue Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.
 * @param uri Well known extension identifier.
 */
- (instancetype) initWithId:(int)idValue uri:(NSString*)uri;
/*!
 * <div>
 * RTP Extension Map Attribute.
 * </div>
 * @param idValue Local identifier of this extension and is an integer in the valid range inclusive (0 is reserved for padding in both forms, and 15 is reserved in the one-byte header form.
 * @param uri Well known extension identifier.
 * @param direction Disered direction of this RTP Extension Header.
 */
- (instancetype) initWithId:(int)idValue uri:(NSString*)uri direction:(FMIceLinkStreamDirection)direction;
/*!
 * <div>
 * Sets the direction of this extension (optional). If not present, stream direction is assumed to be the direction of the extension.
 * </div>
 */
- (void) setDirection:(FMIceLinkStreamDirection)value;
/*!
 * <div>
 * Sets extension attributes (optional).
 * </div>
 */
- (void) setExtensionAttributes:(NSString*)value;
/*!
 * <div>
 * Gets the well-known URI of this extension
 * </div>
 */
- (NSString*) uri;

@end

/*!
 * <div>
 * This attribute maps from an RTP payload type number (as used in
 * an "m=" line) to an format name denoting the payload format
 * to be used.  It also provides information on the clock rate and
 * format parameters.  It is a media-level attribute that is not
 * dependent on charset.
 * </div>
 */
@interface FMIceLinkSdpRtpMapAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Adds an Rtcp Feedback attribute associated with this Map Attribute.
 * </div>
 * @param attribute
 */
- (void) addRelatedRtcpFeedbackAttribute:(FMIceLinkSdpRtcpFeedbackAttribute*)attribute;
/*!
 * <div>
 * Gets the payload clock rate.
 * </div>
 */
- (int) clockRate;
/*!
 * <div>
 * Gets the format name denoting the payload format to be used.
 * </div>
 */
- (NSString*) formatName;
/*!
 * <div>
 * Gets format parameters for the payload.
 * </div>
 */
- (NSString*) formatParameters;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpMapAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpRtpMapAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Gets the RTCP "ccm fir" feedback attribute associated with this payload type.
 * </div>
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getRelatedCcmFirFeedbackAttribute;
/*!
 * <div>
 * Gets the RTCP "nack" feedback attribute associated with this payload type.
 * </div>
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getRelatedNackFeedbackAttribute;
/*!
 * <div>
 * Gets the RTCP "nack pli" feedback attribute associated with this payload type.
 * </div>
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getRelatedNackPliFeedbackAttribute;
/*!
 * <div>
 * Gets the RTCP "nack rpsi" feedback attribute associated with this payload type.
 * </div>
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getRelatedNackRpsiFeedbackAttribute;
/*!
 * <div>
 * Gets the RTCP "nack sli" feedback attribute associated with this payload type.
 * </div>
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getRelatedNackSliFeedbackAttribute;
/*!
 * <div>
 * Gets the RTCP "goog-remb" feedback attribute associated with this payload type.
 * </div>
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getRelatedRembFeedbackAttribute;
/*!
 * <div>
 * Gets the RTCP feedback attribute for the given payload type, type and subtype associated with this payload type.
 * </div>
 * @param payloadType The payload type.
 * @param type The type.
 * @param subType The sub-type.
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getRelatedRtcpFeedbackAttributeWithPayloadType:(int)payloadType type:(NSString*)type subType:(NSString*)subType;
/*!
 * <div>
 * Gets the RTCP feedback attribute for the given type and subtype associated with this payload type.
 * </div>
 * @param type The type.
 * @param subType The sub-type.
 */
- (FMIceLinkSdpRtcpFeedbackAttribute*) getRelatedRtcpFeedbackAttributeWithType:(NSString*)type subType:(NSString*)subType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpMapAttribute class.
 * </div>
 * @param payloadType The RTP payload type number.
 * @param formatName The format name denoting the payload format to be used.
 * @param clockRate The payload clock rate.
 */
- (instancetype) initWithPayloadType:(int)payloadType formatName:(NSString*)formatName clockRate:(int)clockRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpMapAttribute class.
 * </div>
 * @param payloadType The RTP payload type number.
 * @param formatName The format name denoting the payload format to be used.
 * @param clockRate The payload clock rate.
 * @param formatParameters The format parameters for the payload.
 */
- (instancetype) initWithPayloadType:(int)payloadType formatName:(NSString*)formatName clockRate:(int)clockRate formatParameters:(NSString*)formatParameters;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpMapAttribute class.
 * </div>
 * @param payloadType The RTP payload type number.
 * @param formatName The format name denoting the payload format to be used.
 * @param clockRate The payload clock rate.
 */
+ (FMIceLinkSdpRtpMapAttribute*) mapAttributeWithPayloadType:(int)payloadType formatName:(NSString*)formatName clockRate:(int)clockRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpMapAttribute class.
 * </div>
 * @param payloadType The RTP payload type number.
 * @param formatName The format name denoting the payload format to be used.
 * @param clockRate The payload clock rate.
 * @param formatParameters The format parameters for the payload.
 */
+ (FMIceLinkSdpRtpMapAttribute*) mapAttributeWithPayloadType:(int)payloadType formatName:(NSString*)formatName clockRate:(int)clockRate formatParameters:(NSString*)formatParameters;
/*!
 * <div>
 * Gets the RTP payload type number.
 * </div>
 */
- (int) payloadType;
/*!
 * <div>
 * Gets Format Parameters attribute associated with this Map Attribute
 * </div>
 */
- (FMIceLinkSdpFormatParametersAttribute*) relatedFormatParametersAttribute;
/*!
 * <div>
 * Gets Rtcp Feedback attributes associated with this Map Attribute.
 * </div>
 */
- (NSMutableArray*) relatedRtcpFeedbackAttributes;
/*!
 * <div>
 * Removes an Rtcp Feedback attribute associated with this Map Attribute.
 * Returns true if the attribute was reomved; if the attribute was not present, returns false.
 * </div>
 * @param attribute
 */
- (bool) removeRelatedRtcpFeedbackAttribute:(FMIceLinkSdpRtcpFeedbackAttribute*)attribute;
/*!
 * <div>
 * Resets Rtcp Feedback attributes associated with this Map Attribute.
 * </div>
 */
- (void) resetRtcpFeedbackAttributes:(NSMutableArray*)attributes;
/*!
 * <div>
 * Sets Format Parameters attribute associated with this Map Attribute
 * </div>
 */
- (void) setRelatedFormatParametersAttribute:(FMIceLinkSdpFormatParametersAttribute*)value;

@end

/*!
 * <div>
 * An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".
 * </div>
 */
@interface FMIceLinkSdpRtpMedia : FMIceLinkSdpMedia

/*!
 * <div>
 * Generates Rtp Prfile for a given combination of stream type, whjether or not RTCP-based feedback is supported, whether (D)TLS is in use and whether encryption is in use in general.
 * </div>
 * @param type Stream type.
 * @param rtcpFeedbackSupported Indicates whether Rtcp-based feedback is supported.
 * @param useDtls Indicates whether (D)TLS is in use.
 * @param useEncryption Indicates whether encryption is in use.
 * @return
 */
+ (NSString*) generateRtpProfileWithType:(FMIceLinkStreamType)type rtcpFeedbackSupported:(bool)rtcpFeedbackSupported useDtls:(bool)useDtls useEncryption:(bool)useEncryption;
/*!
 * <div>
 * Gets the payload types.
 * </div>
 * @param formatDesciption The media format desciption.
 */
+ (NSMutableArray*) getPayloadTypesWithFormatDesciption:(NSString*)formatDesciption;
/*!
 * <div>
 * Returns the clockrate of a well-known payload type.
 * </div>
 * @param payloadType The well-known payload type to get the clockrate of.
 */
+ (int) getWellKnownPayloadClockRateWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Returns the name of a well-known payload type.
 * </div>
 * @param payloadType The well-known payload type to get the name of.
 */
+ (NSString*) getWellKnownPayloadNameWithPayloadType:(int)payloadType;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpMedia class.
 * </div>
 * @param mediaType The media type. See FMIceLinkSdpMediaType for possible values.
 * @param transportPort The transport port.
 * @param transportProtocol The transport protocol.
 * @param rtpPayloadTypeNumbers The RTP payload type numbers.
 */
- (instancetype) initWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol rtpPayloadTypeNumbers:(NSMutableArray*)rtpPayloadTypeNumbers;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpMedia class.
 * </div>
 * @param mediaType The media type. See FMIceLinkSdpMediaType for possible values.
 * @param transportPort The transport port.
 * @param transportProtocol The transport protocol.
 * @param rtpPayloadTypeNumbers The RTP payload type numbers.
 */
+ (FMIceLinkSdpRtpMedia*) mediaWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol rtpPayloadTypeNumbers:(NSMutableArray*)rtpPayloadTypeNumbers;
/*!
 * <div>
 * Gets the protocol keyword for the extended RTP audio/video profile.
 * </div>
 */
+ (NSString*) rtpAvpfTransportProtocol;
/*!
 * <div>
 * Gets the protocol keyword for the RTP audio/video profile.
 * </div>
 */
+ (NSString*) rtpAvpTransportProtocol;
/*!
 * <div>
 * Gets the protocol keyword for the extended Secure RTP audio/video profile.
 * </div>
 */
+ (NSString*) rtpSavpfTransportProtocol;
/*!
 * <div>
 * Gets the protocol keyword for the Secure RTP audio/video profile.
 * </div>
 */
+ (NSString*) rtpSavpTransportProtocol;
/*!
 * <div>
 * Returns a value indicating whther a given protocol supports encryption.
 * </div>
 * @param protocol Protocol keyword.
 * @return Value indicating whther a given protocol supports encryption.
 */
+ (bool) supportsEncryptionWithProtocol:(NSString*)protocol;
/*!
 * <div>
 * Returns a value indicating whther a given protocol supports encryption.
 * </div>
 * @param protocol Protocol keyword.
 * @return Value indicating whther a given protocol supports encryption.
 */
+ (bool) supportsRtcpBasedFeedbackWithProtocol:(NSString*)protocol;
/*!
 * <div>
 * Gets the protocol keyword for the extended Secure RTP audio/video profile with DTLS key exchange.
 * </div>
 */
+ (NSString*) udpTlsRtpSavpfTransportProtocol;
/*!
 * <div>
 * Gets the protocol keyword for the Secure RTP audio/video profile with DTLS key exchange.
 * </div>
 */
+ (NSString*) udpTlsRtpSavpTransportProtocol;

@end

/*!
 * <div>
 * The SDP media attribute "ssrc" indicates a property (known as a
 * "source-level attribute") of a media source (RTP stream) within an
 * RTP session.
 * </div>
 */
@interface FMIceLinkSdpRtpSsrcAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpSsrcAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpRtpSsrcAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpSsrcAttribute class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param attributeName Name of the attribute.
 */
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource attributeName:(NSString*)attributeName;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpSsrcAttribute class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param attributeName Name of the attribute.
 * @param attributeValue The attribute value.
 */
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource attributeName:(NSString*)attributeName attributeValue:(NSString*)attributeValue;
/*!
 * <div>
 * Gets the name of the attribute.
 * </div>
 */
- (NSString*) name;
/*!
 * <div>
 * Sets the attribute value.
 * </div>
 */
- (void) setValue:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpSsrcAttribute class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param attributeName Name of the attribute.
 */
+ (FMIceLinkSdpRtpSsrcAttribute*) ssrcAttributeWithSynchronizationSource:(long long)synchronizationSource attributeName:(NSString*)attributeName;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpRtpSsrcAttribute class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param attributeName Name of the attribute.
 * @param attributeValue The attribute value.
 */
+ (FMIceLinkSdpRtpSsrcAttribute*) ssrcAttributeWithSynchronizationSource:(long long)synchronizationSource attributeName:(NSString*)attributeName attributeValue:(NSString*)attributeValue;
/*!
 * <div>
 * Gets the synchronization source.
 * </div>
 */
- (long long) synchronizationSource;
/*!
 * <div>
 * Gets the attribute value.
 * </div>
 */
- (NSString*) value;

@end

/*!
 * <div>
 * SSRC atribute names.
 * </div>
 */
@interface FMIceLinkSdpRtpSsrcAttributeName : NSObject

/*!
 * <div>
 * Gets a value indicating canonical name.
 * </div>
 */
+ (NSString*) cName;
/*!
 * <div>
 * Gets a value indicating format parameters.
 * </div>
 */
+ (NSString*) formatParameters;
- (instancetype) init;
/*!
 * <div>
 * Gets a value indicating label.
 * </div>
 */
+ (NSString*) label;
/*!
 * <div>
 * Gets a value indicating media stream ID.
 * </div>
 */
+ (NSString*) mediaStreamId;
/*!
 * <div>
 * Gets a value indicating media stream label.
 * </div>
 */
+ (NSString*) mediaStreamLabel;
/*!
 * <div>
 * Gets a value indicating previous SSRC.
 * </div>
 */
+ (NSString*) previousSsrc;
+ (FMIceLinkSdpRtpSsrcAttributeName*) ssrcAttributeName;

@end

/*!
 * <div>
 * AB: Legacy attribute. To be removed when Firefox and Chrome stop using it.
 * The sctpmap attribute maps from a port number (as used in an "m="
 * line) to an encoding name denoting the payload format to be used on
 * top of the SCTP association or the actual protocol running on top of it.
 * Last appears in https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-06#page-6
 * Has been replaced in subsequent drafts but is used in Firefox and Chrome for now.
 * </div>
 */
@interface FMIceLinkSdpSctpMapAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSctpPortAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpSctpMapAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSctpPortAttribute class.
 * </div>
 * @param port The SCTP port.
 * @param protocol The protocol.
 * @param streams The streams.
 */
- (instancetype) initWithPort:(int)port protocol:(NSString*)protocol streams:(int)streams;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSctpPortAttribute class.
 * </div>
 * @param port The SCTP port.
 * @param protocol The protocol.
 * @param streams The streams.
 */
+ (FMIceLinkSdpSctpMapAttribute*) mapAttributeWithPort:(int)port protocol:(NSString*)protocol streams:(int)streams;
/*!
 * <div>
 * Gets the SCTP port.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Gets the SCTP sub-protocol (association usage).
 * </div>
 */
- (NSString*) sctpProtocol;
/*!
 * <div>
 * Gets the number of incoming streams.
 * </div>
 */
- (int) streams;

@end

/*!
 * <div>
 * The attribute can be associated with an m- line to indicate
 * the maximum message size (indicated in bytes) that an SCTP endpoint
 * is willing to receive on the SCTP association associated with the m-
 * line. Different attribute values can be used in each direction.
 * </div>
 */
@interface FMIceLinkSdpSctpMaxMessageSizeAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSctpMaxMessageSizeAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpSctpMaxMessageSizeAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSctpMaxMessageSizeAttribute class.
 * </div>
 * @param maxMessageSize The maximum message size in bytes.
 */
- (instancetype) initWithMaxMessageSize:(long long)maxMessageSize;
/*!
 * <div>
 * Gets the maximum message size in bytes.
 * </div>
 */
- (long long) maxMessageSize;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSctpMaxMessageSizeAttribute class.
 * </div>
 * @param maxMessageSize The maximum message size in bytes.
 */
+ (FMIceLinkSdpSctpMaxMessageSizeAttribute*) maxMessageSizeAttributeWithMaxMessageSize:(long long)maxMessageSize;

@end

/*!
 * <div>
 * An SDP media description with a transport protocol of "RTP/AVP" or "RTP/SAVP".
 * </div>
 */
@interface FMIceLinkSdpSctpMedia : FMIceLinkSdpMedia

/*!
 * <div>
 * Gets the protocol keyword for the SCTP over DTLS data profile.
 * </div>
 */
+ (NSString*) dtlsSctpTransportProtocol;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSctpMedia class.
 * </div>
 * @param mediaType The media type. See FMIceLinkSdpMediaType for possible values.
 * @param transportPort The transport port.
 * @param transportProtocol The transport protocol.
 * @param associationUsage The association usage.
 */
- (instancetype) initWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol associationUsage:(NSString*)associationUsage;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSctpMedia class.
 * </div>
 * @param mediaType The media type. See FMIceLinkSdpMediaType for possible values.
 * @param transportPort The transport port.
 * @param transportProtocol The transport protocol.
 * @param associationUsage The association usage.
 */
+ (FMIceLinkSdpSctpMedia*) mediaWithMediaType:(NSString*)mediaType transportPort:(int)transportPort transportProtocol:(NSString*)transportProtocol associationUsage:(NSString*)associationUsage;
/*!
 * <div>
 * Gets the protocol keyword for the DTLS over SCTP data profile.
 * </div>
 */
+ (NSString*) sctpDtlsTransportProtocol;
/*!
 * <div>
 * Gets the protocol keyword for the SCTP data profile.
 * </div>
 */
+ (NSString*) sctpTransportProtocol;
/*!
 * <div>
 * Returns a value indicating whther a given protocol supports encryption.
 * </div>
 * @param protocol Protocol keyword.
 * @return Value indicating whther a given protocol supports encryption.
 */
+ (bool) supportsEncryptionWithProtocol:(NSString*)protocol;
/*!
 * <div>
 * Gets the protocol keyword for the SCTP over DTLS over TCP data profile.
 * </div>
 */
+ (NSString*) tcpDtlsSctpTransportProtocol;
/*!
 * <div>
 * Gets the protocol keyword for the SCTP over DTLS over UDP data profile.
 * </div>
 */
+ (NSString*) udpDtlsSctpTransportProtocol;
/*!
 * <div>
 * Gets the Association Usage name registry for WebRTC Datachannel.
 * </div>
 */
+ (NSString*) webRtcDatachannelAssociationUsage;

@end

/*!
 * <div>
 * The attribute can be associated with an SDP media description (m-
 * line) with a 'UDP/DTLS/SCTP' or a 'TCP/DTLS/SCTP' proto value, in
 * which case the m- line port value indicates the port of the
 * underlying transport-layer protocol (UDP or TCP), on which SCTP is
 * carried, and the 'sctp-port' value indicates the SCTP port.
 * </div>
 */
@interface FMIceLinkSdpSctpPortAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSctpPortAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpSctpPortAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSctpPortAttribute class.
 * </div>
 * @param port The SCTP port.
 */
- (instancetype) initWithPort:(int)port;
/*!
 * <div>
 * Gets the SCTP port.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSctpPortAttribute class.
 * </div>
 * @param port The SCTP port.
 */
+ (FMIceLinkSdpSctpPortAttribute*) portAttributeWithPort:(int)port;

@end

/*!
 * <div>
 * This can be a session-level attribute or a media-level
 * attribute.  As a session-level attribute, it specifies the
 * language for the session description.  As a media-level
 * attribute, it specifies the language for any media-level SDP
 * information field associated with that media.  Multiple sdplang
 * attributes can be provided either at session or media level if
 * multiple languages in the session description or media use
 * multiple languages, in which case the order of the attributes
 * indicates the order of importance of the various languages in
 * the session or media from most important to least important.
 * </div>
 */
@interface FMIceLinkSdpSdpLanguageAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSdpLanguageAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpSdpLanguageAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSdpLanguageAttribute class.
 * </div>
 * @param languageTag The language for either the session description
 * (if used as a session-level attribute) or any media-level SDP
 * information field associated with that media (if used as a
 * media-level attribute).
 */
- (instancetype) initWithLanguageTag:(NSString*)languageTag;
/*!
 * <div>
 * Gets the language for either the session description
 * (if used as a session-level attribute) or any media-level SDP
 * information field associated with that media (if used as a
 * media-level attribute).
 * </div>
 */
- (NSString*) languageTag;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSdpLanguageAttribute class.
 * </div>
 * @param languageTag The language for either the session description
 * (if used as a session-level attribute) or any media-level SDP
 * information field associated with that media (if used as a
 * media-level attribute).
 */
+ (FMIceLinkSdpSdpLanguageAttribute*) sdpLanguageAttributeWithLanguageTag:(NSString*)languageTag;

@end

/*!
 * <div>
 * This specifies that the tools should be started in send-only
 * mode.  An example may be where a different unicast address is
 * to be used for a traffic destination than for a traffic source.
 * In such a case, two media descriptions may be used, one
 * sendonly and one recvonly.  It can be either a session- or
 * media-level attribute, but would normally only be used as a
 * media attribute.  It is not dependent on charset.  Note that
 * sendonly applies only to the media, and any associated control
 * protocol (e.g., RTCP) SHOULD still be received and processed as
 * normal.
 * </div>
 */
@interface FMIceLinkSdpSendOnlyAttribute : FMIceLinkSdpDirectionAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSendOnlyAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpSendOnlyAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSendOnlyAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSendOnlyAttribute class.
 * </div>
 */
+ (FMIceLinkSdpSendOnlyAttribute*) sendOnlyAttribute;
/*!
 * <div>
 * Gets the stream direction.
 * </div>
 */
- (FMIceLinkStreamDirection) streamDirection;

@end

/*!
 * <div>
 * This specifies that the tools should be started in send and
 * receive mode.  This is necessary for interactive conferences
 * with tools that default to receive-only mode.  It can be either
 * a session or media-level attribute, and it is not dependent on
 * charset.
 * </div>
 */
@interface FMIceLinkSdpSendReceiveAttribute : FMIceLinkSdpDirectionAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSendReceiveAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpSendReceiveAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSendReceiveAttribute class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSendReceiveAttribute class.
 * </div>
 */
+ (FMIceLinkSdpSendReceiveAttribute*) sendReceiveAttribute;
/*!
 * <div>
 * Gets the stream direction.
 * </div>
 */
- (FMIceLinkStreamDirection) streamDirection;

@end

/*!
 * <div>
 * Defines valid SDP setups.
 * </div>
 */
@interface FMIceLinkSdpSetup : NSObject

/*!
 * <div>
 * Gets the SDP setup meaning "Active".
 * </div>
 */
+ (NSString*) active;
/*!
 * <div>
 * Gets the SDP setup meaning "Active or Passive".
 * </div>
 */
+ (NSString*) actPass;
/*!
 * <div>
 * Gets the SDP setup meaning "Passive".
 * </div>
 */
+ (NSString*) passive;

@end

/*!
 * <div>
 * The 'setup' attribute indicates which of the end points should
 * initiate the TCP connection establishment (i.e., send the initial TCP
 * SYN).  The 'setup' attribute is charset-independent and can be a
 * session-level or a media-level attribute.
 * </div>
 */
@interface FMIceLinkSdpSetupAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSetupAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpSetupAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSetupAttribute class.
 * </div>
 * @param setup Which end point should initiate the connection establishment. See FMIceLinkSdpSetupAttribute#setup for possible values.
 */
- (instancetype) initWithSetup:(NSString*)setup;
/*!
 * <div>
 * Gets which end point should initiate the connection establishment. See FMIceLinkSdpSetupAttribute#setup for possible values.
 * </div>
 */
- (NSString*) setup;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpSetupAttribute class.
 * </div>
 * @param setup Which end point should initiate the connection establishment. See FMIceLinkSdpSetupAttribute#setup for possible values.
 */
+ (FMIceLinkSdpSetupAttribute*) setupAttributeWithSetup:(NSString*)setup;

@end

/*!
 * <div>
 * An SDP time description element.
 * </div>
 */
@interface FMIceLinkSdpTimeDescription : NSObject

/*!
 * <div>
 * Adds a repeat time.
 * </div>
 * @param repeatTime The repeat time to add.
 */
- (void) addRepeatTime:(FMIceLinkSdpRepeatTime*)repeatTime;
/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpTimeDescription class.
 * </div>
 * @param timing The start and stop time.
 */
- (instancetype) initWithTiming:(FMIceLinkSdpTiming*)timing;
/*!
 * <div>
 * Creates an FMIceLinkSdpTimeDescription instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpTimeDescription*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Removes a repeat time.
 * </div>
 * @param repeatTime The repeat time to remove.
 */
- (bool) removeRepeatTime:(FMIceLinkSdpRepeatTime*)repeatTime;
/*!
 * <div>
 * Gets the array of repeat times.
 * </div>
 */
- (NSMutableArray*) repeatTimes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpTimeDescription class.
 * </div>
 * @param timing The start and stop time.
 */
+ (FMIceLinkSdpTimeDescription*) timeDescriptionWithTiming:(FMIceLinkSdpTiming*)timing;
/*!
 * <div>
 * Gets the start and stop time.
 * </div>
 */
- (FMIceLinkSdpTiming*) timing;

@end

/*!
 * <div>
 * An SDP time zone element.
 * </div>
 */
@interface FMIceLinkSdpTimeZone : NSObject

/*!
 * <div>
 * Gets the time that a time zone adjustment happens (network time protocol).
 * </div>
 */
- (double) adjustmentTime;
/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpTimeZone class.
 * </div>
 * @param adjustmentTime The time that a time zone adjustment happens (network time protocol).
 * @param offset The offset from the time when the session was first scheduled.
 */
- (instancetype) initWithAdjustmentTime:(double)adjustmentTime offset:(FMIceLinkTimeSpan*)offset;
/*!
 * <div>
 * Gets the offset from the time when the session was first scheduled.
 * </div>
 */
- (FMIceLinkTimeSpan*) offset;
/*!
 * <div>
 * Creates an FMIceLinkSdpTimeZone instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpTimeZone*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpTimeZone class.
 * </div>
 * @param adjustmentTime The time that a time zone adjustment happens (network time protocol).
 * @param offset The offset from the time when the session was first scheduled.
 */
+ (FMIceLinkSdpTimeZone*) timeZoneWithAdjustmentTime:(double)adjustmentTime offset:(FMIceLinkTimeSpan*)offset;

@end

/*!
 * <div>
 * An SDP time zones element.
 * </div>
 */
@interface FMIceLinkSdpTimeZones : NSObject

/*!
 * <div>
 * Adds a time zone adjustment.
 * </div>
 * @param value The time zone adjustment to add.
 */
- (void) addTimeZone:(FMIceLinkSdpTimeZone*)value;
/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpTimeZones class.
 * </div>
 * @param values The values.
 */
- (instancetype) initWithValues:(NSMutableArray*)values;
/*!
 * <div>
 * Creates an FMIceLinkSdpTimeZones instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpTimeZones*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Removes a time zone adjustment.
 * </div>
 * @param value The time zone adjustment to remove.
 */
- (bool) removeTimeZone:(FMIceLinkSdpTimeZone*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpTimeZones class.
 * </div>
 * @param values The values.
 */
+ (FMIceLinkSdpTimeZones*) timeZones:(NSMutableArray*)values;
/*!
 * <div>
 * Gets the array of time zone adjustments.
 * </div>
 */
- (NSMutableArray*) values;

@end

/*!
 * <div>
 * An SDP timing element.
 * </div>
 */
@interface FMIceLinkSdpTiming : NSObject

/*!
 * <div>
 * Converts this instance to a string.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpTiming class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpTiming class.
 * </div>
 * @param startTime The start time.
 * @param stopTime The stop time.
 */
- (instancetype) initWithStartTime:(double)startTime stopTime:(double)stopTime;
/*!
 * <div>
 * Creates an FMIceLinkSdpTiming instance from a string.
 * </div>
 * @param s The string to parse.
 */
+ (FMIceLinkSdpTiming*) parseWithS:(NSString*)s;
/*!
 * <div>
 * Sets the start time.
 * </div>
 */
- (void) setStartTime:(double)value;
/*!
 * <div>
 * Sets the stop time.
 * </div>
 */
- (void) setStopTime:(double)value;
/*!
 * <div>
 * Gets the start time.
 * </div>
 */
- (double) startTime;
/*!
 * <div>
 * Gets the stop time.
 * </div>
 */
- (double) stopTime;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpTiming class.
 * </div>
 */
+ (FMIceLinkSdpTiming*) timing;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpTiming class.
 * </div>
 * @param startTime The start time.
 * @param stopTime The stop time.
 */
+ (FMIceLinkSdpTiming*) timingWithStartTime:(double)startTime stopTime:(double)stopTime;

@end

/*!
 * <div>
 * This gives the name and version number of the tool used to
 * create the session description.  It is a session-level
 * attribute, and it is not dependent on charset.
 * </div>
 */
@interface FMIceLinkSdpToolAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpToolAttribute class.
 * </div>
 * @param value The attribute value.
 */
+ (FMIceLinkSdpToolAttribute*) fromAttributeValue:(NSString*)value;
/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpToolAttribute class.
 * </div>
 * @param tool The name and version number of the
 * tool used to create the session description.
 */
- (instancetype) initWithTool:(NSString*)tool;
/*!
 * <div>
 * Gets the name and version number of the
 * tool used to create the session description.
 * </div>
 */
- (NSString*) tool;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpToolAttribute class.
 * </div>
 * @param tool The name and version number of the
 * tool used to create the session description.
 */
+ (FMIceLinkSdpToolAttribute*) toolAttributeWithTool:(NSString*)tool;

@end

/*!
 * <div>
 * An SDP media description with a transport protocol of "udp".
 * </div>
 */
@interface FMIceLinkSdpUdpMedia : FMIceLinkSdpMedia

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpUdpMedia class.
 * </div>
 * @param mediaType The media type. See FMIceLinkSdpMediaType for possible values.
 * @param transportPort The transport port.
 * @param formatDescription The format description.
 */
- (instancetype) initWithMediaType:(NSString*)mediaType transportPort:(int)transportPort formatDescription:(NSString*)formatDescription;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpUdpMedia class.
 * </div>
 * @param mediaType The media type. See FMIceLinkSdpMediaType for possible values.
 * @param transportPort The transport port.
 * @param formatDescription The format description.
 */
+ (FMIceLinkSdpUdpMedia*) udpMediaWithMediaType:(NSString*)mediaType transportPort:(int)transportPort formatDescription:(NSString*)formatDescription;
/*!
 * <div>
 * Gets the protocol keyword for UDP.
 * </div>
 */
+ (NSString*) udpTransportProtocol;

@end

/*!
 * <div>
 * This attribute is used to encapsulate unrecognized SDP attributes.
 * </div>
 */
@interface FMIceLinkSdpUnknownAttribute : FMIceLinkSdpAttribute

/*!
 * <div>
 * Gets the internal value of the attribute.
 * </div>
 */
- (NSString*) getAttributeValue;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpUnknownAttribute class.
 * </div>
 * @param name The name.
 * @param value The value.
 */
- (instancetype) initWithName:(NSString*)name value:(NSString*)value;
/*!
 * <div>
 * Gets the attribute name.
 * </div>
 */
- (NSString*) name;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpUnknownAttribute class.
 * </div>
 * @param name The name.
 * @param value The value.
 */
+ (FMIceLinkSdpUnknownAttribute*) unknownAttributeWithName:(NSString*)name value:(NSString*)value;
/*!
 * <div>
 * Gets the attribute value.
 * </div>
 */
- (NSString*) value;

@end

/*!
 * <div>
 * An SDP encryption key with a method of "uri".
 * </div>
 */
@interface FMIceLinkSdpUriEncryptionKey : FMIceLinkSdpEncryptionKey

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpUriEncryptionKey class.
 * </div>
 * @param uri The URI referring to the data containing the key.
 */
- (instancetype) initWithUri:(NSURL*)uri;
/*!
 * <div>
 * Gets the URI referring to the data containing the key.
 * </div>
 */
- (NSURL*) uri;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSdpUriEncryptionKey class.
 * </div>
 * @param uri The URI referring to the data containing the key.
 */
+ (FMIceLinkSdpUriEncryptionKey*) uriEncryptionKeyWithUri:(NSURL*)uri;

@end

/*!
 * <div>
 * An IP address and port, along with an optional
 * public IP address for listening behind a 1:1 NAT.
 * </div>
 */
@interface FMIceLinkServerAddress : FMIceLinkTransportAddress

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkServerAddress class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 */
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkServerAddress class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 * @param publicIPAddress The public IP address.
 */
- (instancetype) initWithIPAddress:(NSString*)ipAddress port:(int)port publicIPAddress:(NSString*)publicIPAddress;
/*!
 * <div>
 * Gets the public IP address.
 * </div>
 */
- (NSString*) publicIPAddress;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkServerAddress class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 */
+ (FMIceLinkServerAddress*) serverAddressWithIPAddress:(NSString*)ipAddress port:(int)port;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkServerAddress class.
 * </div>
 * @param ipAddress The IP address.
 * @param port The port.
 * @param publicIPAddress The public IP address.
 */
+ (FMIceLinkServerAddress*) serverAddressWithIPAddress:(NSString*)ipAddress port:(int)port publicIPAddress:(NSString*)publicIPAddress;

@end

/*!
 * <div>
 * A session description.
 * </div>
 */
@interface FMIceLinkSessionDescription : NSObject

/*!
 * <div>
 * Deserializes an instance from JSON.
 * </div>
 * @param sessionDescriptionJson The JSON to deserialize.
 * @return The deserialized session description.
 */
+ (FMIceLinkSessionDescription*) fromJsonWithSessionDescriptionJson:(NSString*)sessionDescriptionJson;
/*!
 * <div>
 * Gets a value indicating whether an audio stream is described.
 * </div>
 */
- (bool) hasAudio;
/*!
 * <div>
 * Gets a value indicating whether a data stream is described.
 * </div>
 */
- (bool) hasData;
/*!
 * <div>
 * Gets a value indicating whether a video stream is described.
 * </div>
 */
- (bool) hasVideo;
- (instancetype) init;
/*!
 * <div>
 * Gets a value indicating whether this instance is offer.
 * </div>
 */
- (bool) isOffer;
/*!
 * <div>
 * Gets the SDP message.
 * </div>
 */
- (FMIceLinkSdpMessage*) sdpMessage;
+ (FMIceLinkSessionDescription*) sessionDescription;
/*!
 * <div>
 * Gets the session id of the remote description, if remote description is set. Returns null otherwise.
 * </div>
 */
- (long long) sessionId;
/*!
 * <div>
 * Gets the version of the remote description, if remote description is set. Returns null otherwise.
 * </div>
 */
- (long long) sessionVersion;
/*!
 * <div>
 * Sets the SDP message.
 * </div>
 */
- (void) setSdpMessage:(FMIceLinkSdpMessage*)value;
/*!
 * <div>
 * Sets the tie breaker in case of a role conflict.
 * </div>
 */
- (void) setTieBreaker:(NSString*)value;
/*!
 * <div>
 * Sets the type.
 * </div>
 */
- (void) setType:(FMIceLinkSessionDescriptionType)value;
/*!
 * <div>
 * Gets the tie breaker in case of a role conflict.
 * </div>
 */
- (NSString*) tieBreaker;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an instance to JSON.
 * </div>
 * @param sessionDescription The session description.
 * @return
 * The serialized JSON.
 * 
 */
+ (NSString*) toJsonWithSessionDescription:(FMIceLinkSessionDescription*)sessionDescription;
/*!
 * <div>
 * Gets the type.
 * </div>
 */
- (FMIceLinkSessionDescriptionType) type;

@end

@interface FMIceLinkSessionDescriptionTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkSessionDescriptionType)value;

@end

/*!
 * <div>
 * A size (width and height).
 * </div>
 */
@interface FMIceLinkSize : NSObject

/*!
 * <div>
 * Deserializes an instance from JSON.
 * </div>
 * @param sizeJson The JSON to deserialize.
 * @return The deserialized size.
 */
+ (FMIceLinkSize*) fromJsonWithSizeJson:(NSString*)sizeJson;
/*!
 * <div>
 * Gets the height.
 * </div>
 */
- (int) height;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSize class.
 * </div>
 * @param width The width.
 * @param height The height.
 */
- (instancetype) initWithWidth:(int)width height:(int)height;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSize class.
 * </div>
 * @param width The width.
 * @param height The height.
 */
+ (FMIceLinkSize*) sizeWithWidth:(int)width height:(int)height;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 * @return
 * The serialized JSON.
 * 
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an instance to JSON.
 * </div>
 * @param size The size.
 * @return
 * The serialized JSON.
 * 
 */
+ (NSString*) toJsonWithSize:(FMIceLinkSize*)size;
/*!
 * <div>
 * Gets the width.
 * </div>
 */
- (int) width;

@end

@interface FMIceLinkSignallingStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkSignallingState)value;

@end

/*!
 * <div>
 * A sink output (e.g. device, track, screen).
 * </div>
 */
@interface FMIceLinkSinkOutput : NSObject

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Deserializes an instance array from JSON.
 * </div>
 * @param sinkOutputsJson The sink outputs JSON.
 * @return
 */
+ (NSMutableArray*) fromJsonArrayWithSinkOutputsJson:(NSString*)sinkOutputsJson;
/*!
 * <div>
 * Deserializes an instance from JSON.
 * </div>
 * @param sinkOutputJson The sink output JSON.
 * @return
 */
+ (FMIceLinkSinkOutput*) fromJsonWithSinkOutputJson:(NSString*)sinkOutputJson;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSinkOutput class.
 * </div>
 * @param idValue The identifier.
 * @param name The name.
 */
- (instancetype) initWithId:(NSString*)idValue name:(NSString*)name;
/*!
 * <div>
 * Gets the name.
 * </div>
 */
- (NSString*) name;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSinkOutput class.
 * </div>
 * @param idValue The identifier.
 * @param name The name.
 */
+ (FMIceLinkSinkOutput*) sinkOutputWithId:(NSString*)idValue name:(NSString*)name;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an instance array to JSON.
 * </div>
 * @param sinkOutputs The sink outputs.
 * @return
 */
+ (NSString*) toJsonArrayWithSinkOutputs:(NSMutableArray*)sinkOutputs;
/*!
 * <div>
 * Serializes an instance to JSON.
 * </div>
 * @param sinkOutput The sink output.
 * @return
 */
+ (NSString*) toJsonWithSinkOutput:(FMIceLinkSinkOutput*)sinkOutput;

@end

/*!
 * <div>
 * An RTCP slice loss indication.
 * </div>
 */
@interface FMIceLinkSli : NSObject

/*!
 * <div>
 * Gets the backing <code>DataBuffer</code>.
 * </div>
 */
- (FMIceLinkDataBuffer*) dataBuffer;
/*!
 * <div>
 * Gets the macroblock (MB) address of the first lost macroblock.
 * </div>
 */
- (int) first;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSli class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSli class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Gets the number of lost macroblocks, in scan order.
 * </div>
 */
- (int) number;
/*!
 * <div>
 * Gets the six least significant bits of the codec-specific
 * identifier that is used to reference the picture in which the loss
 * of the macroblock(s) has occurred.
 * </div>
 */
- (int) pictureId;
/*!
 * <div>
 * Sets the macroblock (MB) address of the first lost macroblock.
 * </div>
 */
- (void) setFirst:(int)value;
/*!
 * <div>
 * Sets the number of lost macroblocks, in scan order.
 * </div>
 */
- (void) setNumber:(int)value;
/*!
 * <div>
 * Sets the six least significant bits of the codec-specific
 * identifier that is used to reference the picture in which the loss
 * of the macroblock(s) has occurred.
 * </div>
 */
- (void) setPictureId:(int)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSli class.
 * </div>
 */
+ (FMIceLinkSli*) sli;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSli class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkSli*) sliWithBuffer:(FMIceLinkDataBuffer*)buffer;

@end

/*!
 * <div>
 * An RTCP Feedback PS-SLI packet.
 * </div>
 */
@interface FMIceLinkSliControlFrame : FMIceLinkPayloadSpecificControlFrame

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSliControlFrame class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSliControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSliControlFrame class.
 * </div>
 * @param sli The sli.
 */
- (instancetype) initWithSli:(FMIceLinkSli*)sli;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSliControlFrame class.
 * </div>
 * @param slis The slis.
 */
- (instancetype) initWithSlis:(NSMutableArray*)slis;
/*!
 * <div>
 * Gets the the registered fedback message type.
 * </div>
 */
+ (int) registeredFedbackMessageType;
/*!
 * <div>
 * Gets the slice loss indications.
 * </div>
 */
- (NSMutableArray*) sliceLossIndications;
/*!
 * <div>
 * Gets the number of SLIs in the FCI field.
 * </div>
 */
- (int) sliceLossIndicationsCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSliControlFrame class.
 * </div>
 */
+ (FMIceLinkSliControlFrame*) sliControlFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSliControlFrame class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkSliControlFrame*) sliControlFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSliControlFrame class.
 * </div>
 * @param sli The sli.
 */
+ (FMIceLinkSliControlFrame*) sliControlFrameWithSli:(FMIceLinkSli*)sli;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSliControlFrame class.
 * </div>
 * @param slis The slis.
 */
+ (FMIceLinkSliControlFrame*) sliControlFrameWithSlis:(NSMutableArray*)slis;

@end

/*!
 * <div>
 * A pipe that converts sound.
 * </div>
 */
@interface FMIceLinkSoundConverter : FMIceLinkAudioPipe

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundConverter class.
 * </div>
 * @param input The input.
 * @param outputConfig The output configuration.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input outputConfig:(FMIceLinkAudioConfig*)outputConfig;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundConverter class.
 * </div>
 * @param inputConfig The input configuration.
 * @param outputConfig The output configuration.
 */
- (instancetype) initWithInputConfig:(FMIceLinkAudioConfig*)inputConfig outputConfig:(FMIceLinkAudioConfig*)outputConfig;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundConverter class.
 * </div>
 * @param inputs The inputs.
 * @param outputConfig The output configuration.
 */
- (instancetype) initWithInputs:(NSMutableArray*)inputs outputConfig:(FMIceLinkAudioConfig*)outputConfig;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundConverter class.
 * </div>
 * @param outputConfig The output configuration.
 */
- (instancetype) initWithOutputConfig:(FMIceLinkAudioConfig*)outputConfig;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundConverter class.
 * </div>
 * @param input The input.
 * @param outputConfig The output configuration.
 */
+ (FMIceLinkSoundConverter*) soundConverterWithInput:(NSObject<FMIceLinkIAudioOutput>*)input outputConfig:(FMIceLinkAudioConfig*)outputConfig;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundConverter class.
 * </div>
 * @param inputConfig The input configuration.
 * @param outputConfig The output configuration.
 */
+ (FMIceLinkSoundConverter*) soundConverterWithInputConfig:(FMIceLinkAudioConfig*)inputConfig outputConfig:(FMIceLinkAudioConfig*)outputConfig;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundConverter class.
 * </div>
 * @param inputs The inputs.
 * @param outputConfig The output configuration.
 */
+ (FMIceLinkSoundConverter*) soundConverterWithInputs:(NSMutableArray*)inputs outputConfig:(FMIceLinkAudioConfig*)outputConfig;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundConverter class.
 * </div>
 * @param outputConfig The output configuration.
 */
+ (FMIceLinkSoundConverter*) soundConverterWithOutputConfig:(FMIceLinkAudioConfig*)outputConfig;

@end

/*!
 * <div>
 * A pipe that reframes sound chunks into different durations.
 * </div>
 */
@interface FMIceLinkSoundReframer : FMIceLinkAudioPipe

/*!
 * <div>
 * Gets whether the timestamp should be reset
 * using the wall clock after FMIceLinkSoundReframer#timestampResetInterval
 * milliseconds elapse between frames.
 * </div>
 */
- (bool) disableTimestampReset;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Gets whether the timestamp should be reset
 * before the next frame is processed.
 * </div>
 */
- (bool) forceTimestampReset;
/*!
 * <div>
 * Gets the frame duration in milliseconds.
 * Defaults to 20.
 * </div>
 */
- (int) frameDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundReframer class.
 * </div>
 * @param config The configuration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundReframer class.
 * </div>
 * @param config The configuration.
 * @param frameDuration The frame duration.
 */
- (instancetype) initWithConfig:(FMIceLinkAudioConfig*)config frameDuration:(int)frameDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundReframer class.
 * </div>
 * @param input The input.
 * @param frameDuration The frame duration.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIAudioOutput>*)input frameDuration:(int)frameDuration;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Sets whether the timestamp should be reset
 * using the wall clock after FMIceLinkSoundReframer#timestampResetInterval
 * milliseconds elapse between frames.
 * </div>
 */
- (void) setDisableTimestampReset:(bool)value;
/*!
 * <div>
 * Sets whether the timestamp should be reset
 * before the next frame is processed.
 * </div>
 */
- (void) setForceTimestampReset:(bool)value;
/*!
 * <div>
 * Sets the amount of time in milliseconds
 * between audio frames that will trigger a reset of
 * the timestamp to the wall clock.
 * Defaults to 1000ms.
 * </div>
 */
- (void) setTimestampResetInterval:(int)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundReframer class.
 * </div>
 * @param config The configuration.
 */
+ (FMIceLinkSoundReframer*) soundReframerWithConfig:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundReframer class.
 * </div>
 * @param config The configuration.
 * @param frameDuration The frame duration.
 */
+ (FMIceLinkSoundReframer*) soundReframerWithConfig:(FMIceLinkAudioConfig*)config frameDuration:(int)frameDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundReframer class.
 * </div>
 * @param input The input.
 * @param frameDuration The frame duration.
 */
+ (FMIceLinkSoundReframer*) soundReframerWithInput:(NSObject<FMIceLinkIAudioOutput>*)input frameDuration:(int)frameDuration;
/*!
 * <div>
 * Gets the amount of time in milliseconds
 * between audio frames that will trigger a reset of
 * the timestamp to the wall clock.
 * Defaults to 1000ms.
 * </div>
 */
- (int) timestampResetInterval;

@end

/*!
 * <div>
 * A sound reframer context that can reframe
 * sound chunks into consistent durations.
 * </div>
 */
@interface FMIceLinkSoundReframerContext : NSObject

/*!
 * <div>
 * Adds a handler that is raised when a frame is ready.
 * </div>
 */
- (void) addOnFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised when a frame is ready.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkAudioFrame*))) addOnFrameWithBlock;
/*!
 * <div>
 * Adds a handler that is raised when a frame is ready.
 * </div>
 */
- (void) addOnFrameWithBlock:(void(^)(FMIceLinkAudioFrame*))valueBlock;
/*!
 * <div>
 * Gets the next timestamp.
 * </div>
 */
- (long long) autoTimestampWithTimestampDelta:(int)timestampDelta;
/*!
 * <div>
 * Gets the config.
 * </div>
 */
- (FMIceLinkAudioConfig*) config;
/*!
 * <div>
 * Gets whether timestamp resetting should
 * be disabled entirely. Only applies if timestamps
 * are auto-generated (i.e. not set on the frames).
 * </div>
 */
- (bool) disableTimestampReset;
/*!
 * <div>
 * Gets whether to force a timestamp reset
 * with the next raised frame. If set to <code>true</code>,
 * this value will be reset to <code>false</code> after
 * the wall-clock reset takes place. Only applies
 * if timestamps are auto-generated (i.e. not set
 * on the frames).
 * </div>
 */
- (bool) forceTimestampReset;
/*!
 * <div>
 * Gets the frame duration.
 * </div>
 */
- (int) frameDuration;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundReframer class.
 * </div>
 * @param frameDuration The frame duration.
 * @param config The configuration.
 */
- (instancetype) initWithFrameDuration:(int)frameDuration config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) processFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Removes a handler that is raised when a frame is ready.
 * </div>
 */
- (void) removeOnFrame:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Sets whether timestamp resetting should
 * be disabled entirely. Only applies if timestamps
 * are auto-generated (i.e. not set on the frames).
 * </div>
 */
- (void) setDisableTimestampReset:(bool)value;
/*!
 * <div>
 * Sets whether to force a timestamp reset
 * with the next raised frame. If set to <code>true</code>,
 * this value will be reset to <code>false</code> after
 * the wall-clock reset takes place. Only applies
 * if timestamps are auto-generated (i.e. not set
 * on the frames).
 * </div>
 */
- (void) setForceTimestampReset:(bool)value;
/*!
 * <div>
 * Sets the amount of time in milliseconds
 * between audio frames that will trigger a wall-clock
 * reset of the timestamp. Only applies if timestamps
 * are auto-generated (i.e. not set on the frames).
 * Defaults to 1000.
 * </div>
 */
- (void) setTimestampResetInterval:(int)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSoundReframer class.
 * </div>
 * @param frameDuration The frame duration.
 * @param config The configuration.
 */
+ (FMIceLinkSoundReframerContext*) soundReframerContextWithFrameDuration:(int)frameDuration config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Gets the amount of time in milliseconds
 * between audio frames that will trigger a wall-clock
 * reset of the timestamp. Only applies if timestamps
 * are auto-generated (i.e. not set on the frames).
 * Defaults to 1000.
 * </div>
 */
- (int) timestampResetInterval;

@end

/*!
 * <div>
 * Sound utility methods.
 * </div>
 */
@interface FMIceLinkSoundUtility : NSObject

/*!
 * <div>
 * Calculates the number of bytes in a given audio chunk
 * given its duration (ms), clock rate, and channel count.
 * </div>
 * @param duration The duration in ms.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (int) calculateDataLengthFloatPreciseWithDuration:(double)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Calculates the number of bytes in a given audio chunk
 * given its duration (ms), clock rate, and channel count.
 * </div>
 * @param duration The duration in ms.
 * @param config The configuration.
 */
+ (int) calculateDataLengthFloatPreciseWithDuration:(double)duration config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Calculates the number of bytes in a given audio chunk
 * given its duration (ms), clock rate, and channel count.
 * </div>
 * @param duration The duration in ms.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (int) calculateDataLengthFloatWithDuration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Calculates the number of bytes in a given audio chunk
 * given its duration (ms), clock rate, and channel count.
 * </div>
 * @param duration The duration in ms.
 * @param config The configuration.
 */
+ (int) calculateDataLengthFloatWithDuration:(int)duration config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Calculates the number of bytes in a given audio chunk
 * given its duration (ms), clock rate, and channel count.
 * </div>
 * @param duration The duration in ms.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (int) calculateDataLengthPreciseWithDuration:(double)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Calculates the number of bytes in a given audio chunk
 * given its duration (ms), clock rate, and channel count.
 * </div>
 * @param duration The duration in ms.
 * @param config The configuration.
 */
+ (int) calculateDataLengthPreciseWithDuration:(double)duration config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Calculates the number of bytes in a given audio chunk
 * given its duration (ms), clock rate, and channel count.
 * </div>
 * @param duration The duration in ms.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (int) calculateDataLengthWithDuration:(int)duration clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Calculates the number of bytes in a given audio chunk
 * given its duration (ms), clock rate, and channel count.
 * </div>
 * @param duration The duration in ms.
 * @param config The configuration.
 */
+ (int) calculateDataLengthWithDuration:(int)duration config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Calculates the duration of an audio chunk given its data
 * length (the number of bytes), clock rate, and channel count.
 * </div>
 * @param dataLength The length of the audio chunk.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (int) calculateDurationFloatWithDataLength:(int)dataLength clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Calculates the duration of an audio chunk given its data
 * length (the number of bytes), clock rate, and channel count.
 * </div>
 * @param dataLength The length of the audio chunk.
 * @param config The configuration.
 * @return
 */
+ (int) calculateDurationFloatWithDataLength:(int)dataLength config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Calculates the duration of an audio chunk given its data
 * length (the number of bytes), clock rate, and channel count.
 * </div>
 * @param dataLength The length of the audio chunk.
 * @param clockRate The clock rate.
 * @param channelCount The channel count.
 */
+ (int) calculateDurationWithDataLength:(int)dataLength clockRate:(int)clockRate channelCount:(int)channelCount;
/*!
 * <div>
 * Calculates the duration of an audio chunk given its data
 * length (the number of bytes), clock rate, and channel count.
 * </div>
 * @param dataLength The length of the audio chunk.
 * @param config The configuration.
 * @return
 */
+ (int) calculateDurationWithDataLength:(int)dataLength config:(FMIceLinkAudioConfig*)config;
/*!
 * <div>
 * Calculates the length of an output data buffer
 * after conversion from an input to an output
 * channel count.
 * </div>
 * @param inputLength The input data buffer length.
 * @param inputChannelCount The input channel count.
 * @param outputChannelCount The output channel count.
 * @return
 */
+ (int) calculateOutputLengthForChannelCountWithInputLength:(int)inputLength inputChannelCount:(int)inputChannelCount outputChannelCount:(int)outputChannelCount;
/*!
 * <div>
 * Converts a data buffer to a new channel count. The input
 * data buffer length must be a multiple of the input frame
 * size. If the input channel count is greater than the output
 * channel count, the input channel count must divide evenly
 * into the output channel count, and vice versa if the output
 * channel count is greater than the input channel count.
 * </div>
 * @param input The input data buffer.
 * @param inputChannelCount The input channel count.
 * @param output The output data buffer.
 * @param outputChannelCount The output channel count.
 */
+ (FMIceLinkDataBuffer*) convertChannelCountWithInput:(FMIceLinkDataBuffer*)input inputChannelCount:(int)inputChannelCount output:(FMIceLinkDataBuffer*)output outputChannelCount:(int)outputChannelCount;
/*!
 * <div>
 * Converts a short value to a floating-point value.
 * </div>
 * @param value The short value.
 * @return The floating-point value.
 */
+ (float) floatFromShort:(short)value;
- (instancetype) init;
/*!
 * <div>
 * Converts each sample into two identical samples.
 * </div>
 * @return A new FMIceLinkDataBufferPooled or null.
 */
+ (FMIceLinkDataBuffer*) monoToStereoWithMono:(FMIceLinkDataBuffer*)mono stereo:(FMIceLinkDataBuffer*)stereo;
/*!
 * <div>
 * Reads a PCM short value from a byte array.
 * </div>
 * @param input The source byte array.
 * @param index The source index in the byte array.
 * @return Short value.  This is an int for performance reasons but can be safely
 * cast to a short as needed.
 */
+ (short) readPcmShortWithInput:(NSMutableData*)input index:(int)index;
/*!
 * <div>
 * Converts a floating-point value to a short value.
 * </div>
 * @param value The floating-point value.
 * @return The short value.
 */
+ (short) shortFromFloat:(float)value;
+ (FMIceLinkSoundUtility*) soundUtility;
/*!
 * <div>
 * Converts each pair of samples into one mixed sample.
 * </div>
 * @return A new FMIceLinkDataBufferPooled or null.
 */
+ (FMIceLinkDataBuffer*) stereoToMonoWithStereo:(FMIceLinkDataBuffer*)stereo mono:(FMIceLinkDataBuffer*)mono;
/*!
 * <div>
 * Writes a PCM short value to a byte array.
 * </div>
 * @param input The short value to write.
 * @param output The target byte array.
 * @param index The target index in the byte array.
 */
+ (void) writePcmShortWithInput:(short)input output:(NSMutableData*)output index:(int)index;

@end

/*!
 * <div>
 * A source input (e.g. device, track, screen).
 * </div>
 */
@interface FMIceLinkSourceInput : NSObject

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 * @return
 * A string that represents this instance.
 * 
 */
- (NSString*) description;
/*!
 * <div>
 * Deserializes an instance array from JSON.
 * </div>
 * @param sourceInputsJson The source inputs JSON.
 * @return
 */
+ (NSMutableArray*) fromJsonArrayWithSourceInputsJson:(NSString*)sourceInputsJson;
/*!
 * <div>
 * Deserializes an instance from JSON.
 * </div>
 * @param sourceInputJson The source input JSON.
 * @return
 */
+ (FMIceLinkSourceInput*) fromJsonWithSourceInputJson:(NSString*)sourceInputJson;
/*!
 * <div>
 * Gets the identifier.
 * </div>
 */
- (NSString*) id;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSourceInput class.
 * </div>
 * @param idValue The identifier.
 * @param name The name.
 */
- (instancetype) initWithId:(NSString*)idValue name:(NSString*)name;
/*!
 * <div>
 * Gets the name.
 * </div>
 */
- (NSString*) name;
/*!
 * <div>
 * Sets the identifier.
 * </div>
 */
- (void) setId:(NSString*)value;
/*!
 * <div>
 * Sets the name.
 * </div>
 */
- (void) setName:(NSString*)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSourceInput class.
 * </div>
 * @param idValue The identifier.
 * @param name The name.
 */
+ (FMIceLinkSourceInput*) sourceInputWithId:(NSString*)idValue name:(NSString*)name;
/*!
 * <div>
 * Serializes this instance to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an instance array to JSON.
 * </div>
 * @param sourceInputs The source inputs.
 * @return
 */
+ (NSString*) toJsonArrayWithSourceInputs:(NSMutableArray*)sourceInputs;
/*!
 * <div>
 * Serializes an instance to JSON.
 * </div>
 * @param sourceInput The source input.
 * @return
 */
+ (NSString*) toJsonWithSourceInput:(FMIceLinkSourceInput*)sourceInput;

@end

/*!
 * <div>
 * A sender report control frame.
 * </div>
 */
@interface FMIceLinkSRControlFrame : FMIceLinkReportControlFrame

/*!
 * <div>
 * Gets the fixed payload header length of a Sender Report.
 * </div>
 */
+ (int) fixedSenderInfoPayloadLength;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSRControlFrame class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSRControlFrame class.
 * </div>
 * @param buffer The data buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSRControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param ntpTimestamp The time when this report was sent (NTP-style).
 * @param rtpTimestamp The time when this report was sent (RTP-style).
 * @param packetCount The sender's packet count.
 * @param octetCount The sender's octet count.
 */
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource ntpTimestamp:(long long)ntpTimestamp rtpTimestamp:(long long)rtpTimestamp packetCount:(long long)packetCount octetCount:(long long)octetCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSRControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param ntpTimestamp The time when this report was sent (NTP-style).
 * @param rtpTimestamp The time when this report was sent (RTP-style).
 * @param packetCount The sender's packet count.
 * @param octetCount The sender's octet count.
 * @param reportBlock The report block.
 */
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource ntpTimestamp:(long long)ntpTimestamp rtpTimestamp:(long long)rtpTimestamp packetCount:(long long)packetCount octetCount:(long long)octetCount reportBlock:(FMIceLinkReportBlock*)reportBlock;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSRControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param ntpTimestamp The time when this report was sent (NTP-style).
 * @param rtpTimestamp The time when this report was sent (RTP-style).
 * @param packetCount The sender's packet count.
 * @param octetCount The sender's octet count.
 * @param reportBlocks The report blocks.
 */
- (instancetype) initWithSynchronizationSource:(long long)synchronizationSource ntpTimestamp:(long long)ntpTimestamp rtpTimestamp:(long long)rtpTimestamp packetCount:(long long)packetCount octetCount:(long long)octetCount reportBlocks:(NSMutableArray*)reportBlocks;
/*!
 * <div>
 * Gets the time when this report was sent (NTP-style).
 * </div>
 */
- (long long) ntpTimestamp;
/*!
 * <div>
 * Gets the sender's octet count.
 * </div>
 */
- (long long) octetCount;
/*!
 * <div>
 * Gets the sender's packet count.
 * </div>
 */
- (long long) packetCount;
/*!
 * <div>
 * Gets the sender report payload type.
 * </div>
 */
+ (int) registeredPayloadType;
/*!
 * <div>
 * Gets the report block offset.
 * </div>
 */
+ (int) reportBlockOffset;
/*!
 * <div>
 * Gets the time when this report was sent (RTP-style).
 * </div>
 */
- (long long) rtpTimestamp;
/*!
 * <div>
 * Sets the time when this report was sent (NTP-style).
 * </div>
 */
- (void) setNtpTimestamp:(long long)value;
/*!
 * <div>
 * Sets the sender's octet count.
 * </div>
 */
- (void) setOctetCount:(long long)value;
/*!
 * <div>
 * Sets the sender's packet count.
 * </div>
 */
- (void) setPacketCount:(long long)value;
/*!
 * <div>
 * Sets the time when this report was sent (RTP-style).
 * </div>
 */
- (void) setRtpTimestamp:(long long)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSRControlFrame class.
 * </div>
 */
+ (FMIceLinkSRControlFrame*) srControlFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSRControlFrame class.
 * </div>
 * @param buffer The data buffer.
 */
+ (FMIceLinkSRControlFrame*) srControlFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSRControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param ntpTimestamp The time when this report was sent (NTP-style).
 * @param rtpTimestamp The time when this report was sent (RTP-style).
 * @param packetCount The sender's packet count.
 * @param octetCount The sender's octet count.
 */
+ (FMIceLinkSRControlFrame*) srControlFrameWithSynchronizationSource:(long long)synchronizationSource ntpTimestamp:(long long)ntpTimestamp rtpTimestamp:(long long)rtpTimestamp packetCount:(long long)packetCount octetCount:(long long)octetCount;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSRControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param ntpTimestamp The time when this report was sent (NTP-style).
 * @param rtpTimestamp The time when this report was sent (RTP-style).
 * @param packetCount The sender's packet count.
 * @param octetCount The sender's octet count.
 * @param reportBlock The report block.
 */
+ (FMIceLinkSRControlFrame*) srControlFrameWithSynchronizationSource:(long long)synchronizationSource ntpTimestamp:(long long)ntpTimestamp rtpTimestamp:(long long)rtpTimestamp packetCount:(long long)packetCount octetCount:(long long)octetCount reportBlock:(FMIceLinkReportBlock*)reportBlock;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSRControlFrame class.
 * </div>
 * @param synchronizationSource The synchronization source.
 * @param ntpTimestamp The time when this report was sent (NTP-style).
 * @param rtpTimestamp The time when this report was sent (RTP-style).
 * @param packetCount The sender's packet count.
 * @param octetCount The sender's octet count.
 * @param reportBlocks The report blocks.
 */
+ (FMIceLinkSRControlFrame*) srControlFrameWithSynchronizationSource:(long long)synchronizationSource ntpTimestamp:(long long)ntpTimestamp rtpTimestamp:(long long)rtpTimestamp packetCount:(long long)packetCount octetCount:(long long)octetCount reportBlocks:(NSMutableArray*)reportBlocks;

@end

/*!
 * <div>
 * Base stats.
 * </div>
 */
@interface FMIceLinkBaseStats : NSObject

+ (FMIceLinkBaseStats*) baseStats;
/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Gets the identifier of
 * the object generating these stats.
 * </div>
 */
- (NSString*) id;
- (instancetype) init;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Gets the timestamp when
 * these stats were generated.
 * </div>
 */
- (NSDate*) timestamp;

@end

/*!
 * <div>
 * Codec stats.
 * </div>
 */
@interface FMIceLinkCodecStats : FMIceLinkBaseStats

/*!
 * <div>
 * Gets the channel count.
 * </div>
 */
- (int) channelCount;
/*!
 * <div>
 * Gets the clock rate.
 * </div>
 */
- (int) clockRate;
+ (FMIceLinkCodecStats*) codecStats;
/*!
 * <div>
 * Gets the codec type, "encode" or "decode", depending on whether this object represents a media format that the implementation is prepared to encode or decode.
 * </div>
 */
- (FMIceLinkCodecType) codecType;
/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Derializes codec stats from JSON.
 * </div>
 * @param codecJson The codec's stats JSON.
 * @return
 */
+ (FMIceLinkCodecStats*) fromJsonWithCodecJson:(NSString*)codecJson;
- (instancetype) init;
/*!
 * <div>
 * Gets the name.
 * </div>
 */
- (NSString*) name;
/*!
 * <div>
 * Gets the parameters.
 * </div>
 */
- (NSString*) parameters;
/*!
 * <div>
 * Gets the payload type.
 * </div>
 */
- (int) payloadType;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes codec stats to JSON.
 * </div>
 * @param codec The codec's stats.
 * @return
 */
+ (NSString*) toJsonWithCodec:(FMIceLinkCodecStats*)codec;

@end

/*!
 * <div>
 * Stream stats.
 * </div>
 */
@interface FMIceLinkStreamStats : FMIceLinkBaseStats

/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
- (instancetype) init;
/*!
 * <div>
 * Gets whether the transport's active candidate pair has a host candidate.
 * </div>
 */
- (bool) isHost;
/*!
 * <div>
 * Gets whether the transport's active candidate pair has a reflexive candidate.
 * </div>
 */
- (bool) isReflexive;
/*!
 * <div>
 * Gets whether the transport's active candidate pair has a relayed candidate.
 * </div>
 */
- (bool) isRelayed;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
+ (FMIceLinkStreamStats*) streamStats;
/*!
 * <div>
 * Gets the transport's stats.
 * </div>
 */
- (FMIceLinkTransportStats*) transport;
/*!
 * <div>
 * Gets the type.
 * </div>
 */
- (FMIceLinkStreamType) type;

@end

/*!
 * <div>
 * Data stream stats.
 * </div>
 */
@interface FMIceLinkDataStreamStats : FMIceLinkStreamStats

/*!
 * <div>
 * Gets the first data channel's stats.
 * </div>
 */
- (FMIceLinkDataChannelStats*) dataChannel;
/*!
 * <div>
 * Gets the data channels' stats.
 * </div>
 */
- (NSMutableArray*) dataChannels;
+ (FMIceLinkDataStreamStats*) dataStreamStats;
/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Derializes data stream stats from JSON.
 * </div>
 * @param dataStreamJson The data stream's stats JSON.
 * @return
 */
+ (FMIceLinkDataStreamStats*) fromJsonWithDataStreamJson:(NSString*)dataStreamJson;
/*!
 * <div>
 * Gets a data channel by its identifier.
 * </div>
 * @param dataChannelId The data channel identifier.
 * @return
 */
- (FMIceLinkDataChannelStats*) getDataChannelWithDataChannelId:(NSString*)dataChannelId;
- (instancetype) init;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes data stream stats to JSON.
 * </div>
 * @param dataStream The data stream's stats.
 * @return
 */
+ (NSString*) toJsonWithDataStream:(FMIceLinkDataStreamStats*)dataStream;

@end

/*!
 * <div>
 * Media component stats.
 * </div>
 */
@interface FMIceLinkMediaComponentStats : FMIceLinkBaseStats

/*!
 * <div>
 * Gets the codec stats.
 * </div>
 */
- (FMIceLinkCodecStats*) codec;
/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Gets the FIR count.
 * </div>
 */
- (long long) firCount;
- (instancetype) init;
+ (FMIceLinkMediaComponentStats*) mediaComponentStats;
/*!
 * <div>
 * Gets the NACK count.
 * </div>
 */
- (long long) nackCount;
/*!
 * <div>
 * Gets the PLI count.
 * </div>
 */
- (long long) pliCount;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Sets the codec stats.
 * </div>
 */
- (void) setCodec:(FMIceLinkCodecStats*)value;
/*!
 * <div>
 * Sets the FIR count.
 * </div>
 */
- (void) setFirCount:(long long)value;
/*!
 * <div>
 * Sets the NACK count.
 * </div>
 */
- (void) setNackCount:(long long)value;
/*!
 * <div>
 * Sets the PLI count.
 * </div>
 */
- (void) setPliCount:(long long)value;
/*!
 * <div>
 * Sets the SLI count.
 * </div>
 */
- (void) setSliCount:(long long)value;
/*!
 * <div>
 * Sets the synchronization source.
 * </div>
 */
- (void) setSynchronizationSource:(long long)value;
/*!
 * <div>
 * Sets the track's stats.
 * </div>
 */
- (void) setTrack:(FMIceLinkMediaTrackStats*)value;
/*!
 * <div>
 * Gets the SLI count.
 * </div>
 */
- (long long) sliCount;
/*!
 * <div>
 * Gets the synchronization source.
 * </div>
 */
- (long long) synchronizationSource;
/*!
 * <div>
 * Gets the track's stats.
 * </div>
 */
- (FMIceLinkMediaTrackStats*) track;

@end

/*!
 * <div>
 * Media stats.
 * </div>
 */
@interface FMIceLinkMediaStats : FMIceLinkBaseStats

/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Derializes media stats from JSON.
 * </div>
 * @param mediaJson The media's stats JSON.
 * @return
 */
+ (FMIceLinkMediaStats*) fromJsonWithMediaJson:(NSString*)mediaJson;
/*!
 * <div>
 * Gets a track by its identifier.
 * </div>
 * @param trackId The track identifier.
 * @return
 */
- (FMIceLinkMediaTrackStats*) getTrackWithTrackId:(NSString*)trackId;
- (instancetype) init;
+ (FMIceLinkMediaStats*) mediaStats;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes media stats to JSON.
 * </div>
 * @param media The media's stats.
 * @return
 */
+ (NSString*) toJsonWithMedia:(FMIceLinkMediaStats*)media;
/*!
 * <div>
 * Gets the first track's stats.
 * </div>
 */
- (FMIceLinkMediaTrackStats*) track;
/*!
 * <div>
 * Gets the tracks' stats.
 * </div>
 */
- (NSMutableArray*) tracks;

@end

/*!
 * <div>
 * Media sender stats.
 * </div>
 */
@interface FMIceLinkMediaSenderStats : FMIceLinkMediaComponentStats

/*!
 * <div>
 * Gets the number of bytes sent.
 * </div>
 */
- (long long) bytesSent;
/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Derializes media sender stats from JSON.
 * </div>
 * @param mediaSenderJson The media sender's stats JSON.
 * @return
 */
+ (FMIceLinkMediaSenderStats*) fromJsonWithMediaSenderJson:(NSString*)mediaSenderJson;
- (instancetype) init;
+ (FMIceLinkMediaSenderStats*) mediaSenderStats;
/*!
 * <div>
 * Gets the number of packets sent.
 * </div>
 */
- (long long) packetsSent;
/*!
 * <div>
 * Gets the round trip time in milliseconds.
 * </div>
 */
- (int) roundTripTime;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes media sender stats to JSON.
 * </div>
 * @param mediaSender The media sender's stats.
 * @return
 */
+ (NSString*) toJsonWithMediaSender:(FMIceLinkMediaSenderStats*)mediaSender;

@end

/*!
 * <div>
 * Media receiver stats.
 * </div>
 */
@interface FMIceLinkMediaReceiverStats : FMIceLinkMediaComponentStats

/*!
 * <div>
 * Gets the number of bytes received.
 * </div>
 */
- (long long) bytesReceived;
/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Derializes media receiver stats from JSON.
 * </div>
 * @param mediaReceiverJson The media receiver's stats JSON.
 * @return
 */
+ (FMIceLinkMediaReceiverStats*) fromJsonWithMediaReceiverJson:(NSString*)mediaReceiverJson;
- (instancetype) init;
/*!
 * <div>
 * Gets the jitter in milliseconds.
 * </div>
 */
- (int) jitter;
+ (FMIceLinkMediaReceiverStats*) mediaReceiverStats;
/*!
 * <div>
 * Gets the number of packets discarded.
 * </div>
 */
- (long long) packetsDiscarded;
/*!
 * <div>
 * Gets the number of packets lost.
 * </div>
 */
- (long long) packetsLost;
/*!
 * <div>
 * Gets the number of packets received.
 * </div>
 */
- (long long) packetsReceived;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes media receiver stats to JSON.
 * </div>
 * @param mediaReceiver The media receiver's stats.
 * @return
 */
+ (NSString*) toJsonWithMediaReceiver:(FMIceLinkMediaReceiverStats*)mediaReceiver;

@end

/*!
 * <div>
 * Media track stats.
 * </div>
 */
@interface FMIceLinkMediaTrackStats : FMIceLinkBaseStats

/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Gets whether the track is detached.
 * </div>
 */
- (bool) detached;
/*!
 * <div>
 * Gets the frame height. Video-only.
 * Set by encoder or decoder.
 * </div>
 */
- (int) frameHeight;
/*!
 * <div>
 * Gets the frame rate. Video-only.
 * Set by encoder or decoder.
 * </div>
 */
- (int) frameRate;
/*!
 * <div>
 * Gets the number of corrupted frames. Video-only.
 * Set by depacketizer.
 * </div>
 */
- (long long) framesCorrupted;
/*!
 * <div>
 * Gets the number of frames decoded.
 * Set by decoder.
 * </div>
 */
- (long long) framesDecoded;
/*!
 * <div>
 * Gets the number of frames dropped. Video-only.
 * Set by depacketizer.
 * </div>
 */
- (long long) framesDropped;
/*!
 * <div>
 * Gets the number of frames encoded.
 * Set by encoded.
 * </div>
 */
- (long long) framesEncoded;
/*!
 * <div>
 * Gets the number of frames received.
 * Set by depacketizer.
 * </div>
 */
- (long long) framesReceived;
/*!
 * <div>
 * Gets the number of frames sent.
 * Set by packetizer.
 * </div>
 */
- (long long) framesSent;
/*!
 * <div>
 * Gets the frame width. Video-only.
 * Set by encoder or decoder.
 * </div>
 */
- (int) frameWidth;
/*!
 * <div>
 * Derializes an array of media track stats from JSON.
 * </div>
 * @param mediaTracksJson The media tracks' stats JSON.
 * @return
 */
+ (NSMutableArray*) fromJsonArrayWithMediaTracksJson:(NSString*)mediaTracksJson;
/*!
 * <div>
 * Derializes media track stats from JSON.
 * </div>
 * @param mediaTrackJson The media track's stats JSON.
 * @return
 */
+ (FMIceLinkMediaTrackStats*) fromJsonWithMediaTrackJson:(NSString*)mediaTrackJson;
- (instancetype) init;
+ (FMIceLinkMediaTrackStats*) mediaTrackStats;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Gets whether the track is stopped.
 * Set by source.
 * </div>
 */
- (bool) stopped;
/*!
 * <div>
 * Gets the first synchronization source.
 * </div>
 */
- (long long) synchronizationSource;
/*!
 * <div>
 * Gets the synchronization sources.
 * </div>
 */
- (NSMutableArray*) synchronizationSources;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an array of media track stats to JSON.
 * </div>
 * @param mediaTracks The media tracks' stats.
 * @return
 */
+ (NSString*) toJsonArrayWithMediaTracks:(NSMutableArray*)mediaTracks;
/*!
 * <div>
 * Serializes media track stats to JSON.
 * </div>
 * @param mediaTrack The media track's stats.
 * @return
 */
+ (NSString*) toJsonWithMediaTrack:(FMIceLinkMediaTrackStats*)mediaTrack;

@end

/*!
 * <div>
 * Candidate stats.
 * </div>
 */
@interface FMIceLinkCandidateStats : FMIceLinkBaseStats

+ (FMIceLinkCandidateStats*) candidateStats;
/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Derializes an array of candidate stats from JSON.
 * </div>
 * @param candidatesJson The candidates' stats JSON.
 * @return
 */
+ (NSMutableArray*) fromJsonArrayWithCandidatesJson:(NSString*)candidatesJson;
/*!
 * <div>
 * Derializes candidate stats from JSON.
 * </div>
 * @param candidateJson The candidate's stats JSON.
 * @return
 */
+ (FMIceLinkCandidateStats*) fromJsonWithCandidateJson:(NSString*)candidateJson;
- (instancetype) init;
/*!
 * <div>
 * Gets the IP address.
 * </div>
 */
- (NSString*) ipAddress;
/*!
 * <div>
 * Gets whether the candidate is host/local.
 * </div>
 */
- (bool) isHost;
/*!
 * <div>
 * Gets whether the candidate is reflexive.
 * </div>
 */
- (bool) isReflexive;
/*!
 * <div>
 * Gets whether the candidate is relayed.
 * </div>
 */
- (bool) isRelayed;
/*!
 * <div>
 * Gets the port.
 * </div>
 */
- (int) port;
/*!
 * <div>
 * Gets the priority.
 * </div>
 */
- (long long) priority;
/*!
 * <div>
 * Gets the protocol.
 * </div>
 */
- (FMIceLinkProtocolType) protocol;
/*!
 * <div>
 * Gets the related IP address.
 * </div>
 */
- (NSString*) relatedIPAddress;
/*!
 * <div>
 * Gets the related port.
 * </div>
 */
- (int) relatedPort;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an array of candidate stats to JSON.
 * </div>
 * @param candidates The candidates' stats.
 * @return
 */
+ (NSString*) toJsonArrayWithCandidates:(NSMutableArray*)candidates;
/*!
 * <div>
 * Serializes candidate stats to JSON.
 * </div>
 * @param candidate The candidate's stats.
 * @return
 */
+ (NSString*) toJsonWithCandidate:(FMIceLinkCandidateStats*)candidate;
/*!
 * <div>
 * Gets the protocol used by this candidate when communicating with a TURN (relay) server. If unknown or not a relayed candidate, defaults to ProtocolType.Unknown.
 * </div>
 */
- (FMIceLinkProtocolType) turnProtocol;
/*!
 * <div>
 * Gets the type.
 * </div>
 */
- (FMIceLinkCandidateType) type;

@end

/*!
 * <div>
 * Candidate pair stats.
 * </div>
 */
@interface FMIceLinkCandidatePairStats : FMIceLinkBaseStats

/*!
 * <div>
 * Gets the number of bytes received.
 * </div>
 */
- (long long) bytesReceived;
/*!
 * <div>
 * Gets the number of bytes sent.
 * </div>
 */
- (long long) bytesSent;
+ (FMIceLinkCandidatePairStats*) candidatePairStats;
/*!
 * <div>
 * Gets the number of consent requests received.
 * </div>
 */
- (long long) consentRequestsReceived;
/*!
 * <div>
 * Gets the number of consent requests sent.
 * </div>
 */
- (long long) consentRequestsSent;
/*!
 * <div>
 * Gets the number of consent responses received.
 * </div>
 */
- (long long) consentResponsesReceived;
/*!
 * <div>
 * Gets the number of consent responses sent.
 * </div>
 */
- (long long) consentResponsesSent;
/*!
 * <div>
 * Gets the current round trip time in milliseconds.
 * </div>
 */
- (double) currentRoundTripTime;
/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Derializes an array of candidate pair stats from JSON.
 * </div>
 * @param candidatePairsJson The candidate pairs' stats JSON.
 * @return
 */
+ (NSMutableArray*) fromJsonArrayWithCandidatePairsJson:(NSString*)candidatePairsJson;
/*!
 * <div>
 * Derializes candidate pair stats from JSON.
 * </div>
 * @param candidatePairJson The candidate pair's stats JSON.
 * @return
 */
+ (FMIceLinkCandidatePairStats*) fromJsonWithCandidatePairJson:(NSString*)candidatePairJson;
- (instancetype) init;
/*!
 * <div>
 * Gets the local candidate identifier.
 * </div>
 */
- (NSString*) localCandidateId;
/*!
 * <div>
 * Gets whether the candidate pair is nominated.
 * </div>
 */
- (bool) nominated;
/*!
 * <div>
 * Gets the priority.
 * </div>
 */
- (long long) priority;
/*!
 * <div>
 * Gets the remote candidate identifier.
 * </div>
 */
- (NSString*) remoteCandidateId;
/*!
 * <div>
 * Gets the number of requests sent.
 * </div>
 */
- (long long) requestsSent;
/*!
 * <div>
 * Gets the number of responses received.
 * </div>
 */
- (long long) responsesReceived;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Gets the state.
 * </div>
 */
- (FMIceLinkCandidatePairState) state;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an array of candidate pair stats to JSON.
 * </div>
 * @param candidatePairs The candidate pairs' stats.
 * @return
 */
+ (NSString*) toJsonArrayWithCandidatePairs:(NSMutableArray*)candidatePairs;
/*!
 * <div>
 * Serializes candidate pair stats to JSON.
 * </div>
 * @param candidatePair The candidate pair's stats.
 * @return
 */
+ (NSString*) toJsonWithCandidatePair:(FMIceLinkCandidatePairStats*)candidatePair;
/*!
 * <div>
 * Gets the total round trip time in milliseconds.
 * </div>
 */
- (double) totalRoundTripTime;
/*!
 * <div>
 * Gets the transport identifier.
 * </div>
 */
- (NSString*) transportId;

@end

/*!
 * <div>
 * Certificate stats.
 * </div>
 */
@interface FMIceLinkCertificateStats : FMIceLinkBaseStats

/*!
 * <div>
 * Gets the certificate in Base64 format.
 * </div>
 */
- (NSString*) certificateBase64;
+ (FMIceLinkCertificateStats*) certificateStats;
/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Gets the fingerprint.
 * </div>
 */
- (NSString*) fingerprint;
/*!
 * <div>
 * Gets the fingerprint algorithm.
 * </div>
 */
- (NSString*) fingerprintAlgorithm;
/*!
 * <div>
 * Derializes an array of certificate stats from JSON.
 * </div>
 * @param certificatesJson The certificates' stats JSON.
 * @return
 */
+ (NSMutableArray*) fromJsonArrayWithCertificatesJson:(NSString*)certificatesJson;
/*!
 * <div>
 * Derializes certificate stats from JSON.
 * </div>
 * @param certificateJson The certificate's stats JSON.
 * @return
 */
+ (FMIceLinkCertificateStats*) fromJsonWithCertificateJson:(NSString*)certificateJson;
- (instancetype) init;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an array of certificate stats to JSON.
 * </div>
 * @param certificates The certificates' stats.
 * @return
 */
+ (NSString*) toJsonArrayWithCertificates:(NSMutableArray*)certificates;
/*!
 * <div>
 * Serializes certificate stats to JSON.
 * </div>
 * @param certificate The certificate's stats.
 * @return
 */
+ (NSString*) toJsonWithCertificate:(FMIceLinkCertificateStats*)certificate;

@end

/*!
 * <div>
 * Data channel stats.
 * </div>
 */
@interface FMIceLinkDataChannelStats : FMIceLinkBaseStats

/*!
 * <div>
 * Gets the number of bytes received.
 * </div>
 */
- (long long) bytesReceived;
/*!
 * <div>
 * Gets the number of bytes sent.
 * </div>
 */
- (long long) bytesSent;
+ (FMIceLinkDataChannelStats*) dataChannelStats;
/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Derializes an array of data channel stats from JSON.
 * </div>
 * @param dataChannelsJson The data channels' stats JSON.
 * @return
 */
+ (NSMutableArray*) fromJsonArrayWithDataChannelsJson:(NSString*)dataChannelsJson;
/*!
 * <div>
 * Derializes data channel stats from JSON.
 * </div>
 * @param dataChannelJson The data channel's stats JSON.
 * @return
 */
+ (FMIceLinkDataChannelStats*) fromJsonWithDataChannelJson:(NSString*)dataChannelJson;
- (instancetype) init;
/*!
 * <div>
 * Gets the label.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the number of messages received.
 * </div>
 */
- (long long) messagesReceived;
/*!
 * <div>
 * Gets the number of messages sent.
 * </div>
 */
- (long long) messagesSent;
/*!
 * <div>
 * Gets whether the channel is ordered.
 * </div>
 */
- (bool) ordered;
/*!
 * <div>
 * Gets the protocol.
 * </div>
 */
- (NSString*) protocol;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Gets the state.
 * </div>
 */
- (FMIceLinkDataChannelState) state;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an array of data channel stats to JSON.
 * </div>
 * @param dataChannels The data channels' stats.
 * @return
 */
+ (NSString*) toJsonArrayWithDataChannels:(NSMutableArray*)dataChannels;
/*!
 * <div>
 * Serializes data channel stats to JSON.
 * </div>
 * @param dataChannel The data channel's stats.
 * @return
 */
+ (NSString*) toJsonWithDataChannel:(FMIceLinkDataChannelStats*)dataChannel;

@end

/*!
 * <div>
 * Connection stats.
 * </div>
 */
@interface FMIceLinkConnectionStats : FMIceLinkBaseStats

/*!
 * <div>
 * Gets the first audio stream's stats.
 * </div>
 */
- (FMIceLinkMediaStreamStats*) audioStream;
/*!
 * <div>
 * Gets the audio streams' stats.
 * </div>
 */
- (NSMutableArray*) audioStreams;
+ (FMIceLinkConnectionStats*) connectionStats;
/*!
 * <div>
 * Gets the data stream's stats.
 * </div>
 */
- (FMIceLinkDataStreamStats*) dataStream;
/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Derializes connection stats from JSON.
 * </div>
 * @param connectionJson The connection's stats JSON.
 * @return
 */
+ (FMIceLinkConnectionStats*) fromJsonWithConnectionJson:(NSString*)connectionJson;
/*!
 * <div>
 * Gets a media stream by its identifier.
 * </div>
 * @param mediaStreamId The media stream identifier.
 * @return
 */
- (FMIceLinkMediaStreamStats*) getMediaStreamWithMediaStreamId:(NSString*)mediaStreamId;
- (instancetype) init;
/*!
 * <div>
 * Gets whether any of the streams are using a transport
 * whose active candidate pair has a host candidate.
 * </div>
 */
- (bool) isHost;
/*!
 * <div>
 * Gets whether any of the streams are using a transport
 * whose active candidate pair has a reflexive candidate.
 * </div>
 */
- (bool) isReflexive;
/*!
 * <div>
 * Gets whether any of the streams are using a transport
 * whose active candidate pair has a relayed candidate.
 * </div>
 */
- (bool) isRelayed;
/*!
 * <div>
 * Gets the first media stream's stats.
 * </div>
 */
- (FMIceLinkMediaStreamStats*) mediaStream;
/*!
 * <div>
 * Gets the media streams' stats.
 * </div>
 */
- (NSMutableArray*) mediaStreams;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Gets the streams' stats.
 * </div>
 */
- (NSMutableArray*) streams;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes connection stats to JSON.
 * </div>
 * @param connection The connection's stats.
 * @return
 */
+ (NSString*) toJsonWithConnection:(FMIceLinkConnectionStats*)connection;
/*!
 * <div>
 * Gets the first video stream's stats.
 * </div>
 */
- (FMIceLinkMediaStreamStats*) videoStream;
/*!
 * <div>
 * Gets the video streams' stats.
 * </div>
 */
- (NSMutableArray*) videoStreams;

@end

/*!
 * <div>
 * Media stream stats.
 * </div>
 */
@interface FMIceLinkMediaStreamStats : FMIceLinkStreamStats

/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Gets the direction.
 * </div>
 */
- (FMIceLinkStreamDirection) direction;
/*!
 * <div>
 * Derializes an array of media stream stats from JSON.
 * </div>
 * @param mediaStreamsJson The media streams' stats JSON.
 * @return
 */
+ (NSMutableArray*) fromJsonArrayWithMediaStreamsJson:(NSString*)mediaStreamsJson;
/*!
 * <div>
 * Derializes media stream stats from JSON.
 * </div>
 * @param mediaStreamJson The media stream's stats JSON.
 * @return
 */
+ (FMIceLinkMediaStreamStats*) fromJsonWithMediaStreamJson:(NSString*)mediaStreamJson;
- (instancetype) init;
+ (FMIceLinkMediaStreamStats*) mediaStreamStats;
/*!
 * <div>
 * Gets the receiver's stats.
 * </div>
 */
- (FMIceLinkMediaReceiverStats*) receiver;
/*!
 * <div>
 * Gets the sender's stats.
 * </div>
 */
- (FMIceLinkMediaSenderStats*) sender;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes an array of media stream stats to JSON.
 * </div>
 * @param mediaStreams The media streams' stats.
 * @return
 */
+ (NSString*) toJsonArrayWithMediaStreams:(NSMutableArray*)mediaStreams;
/*!
 * <div>
 * Serializes media stream stats to JSON.
 * </div>
 * @param mediaStream The media stream's stats.
 * @return
 */
+ (NSString*) toJsonWithMediaStream:(FMIceLinkMediaStreamStats*)mediaStream;

@end

/*!
 * <div>
 * Class containing utility methods to manipulate FMIceLinkStreamDirection.
 * </div>
 */
@interface FMIceLinkStreamDirectionHelper : NSObject

/*!
 * <div>
 * Converts string representations of stream directions to FMIceLinkStreamDirection.
 * </div>
 * @param directionString The direction string.
 * @return The direction.
 */
+ (FMIceLinkStreamDirection) directionFromStringWithDirectionString:(NSString*)directionString;
/*!
 * <div>
 * Obtains the string representation of FMIceLinkStreamDirection.
 * </div>
 * @param direction The direction.
 * @return The direction string.
 */
+ (NSString*) directionToStringWithDirection:(FMIceLinkStreamDirection)direction;
- (instancetype) init;
/*!
 * <div>
 * Checks the receive flag.
 * </div>
 * @param direction The direction.
 * @return The receive flag.
 */
+ (bool) isReceiveDisabledWithDirection:(FMIceLinkStreamDirection)direction;
/*!
 * <div>
 * Checks the receive flag.
 * </div>
 * @param directionString The direction string.
 * @return The receive flag.
 */
+ (bool) isReceiveDisabledWithDirectionString:(NSString*)directionString;
/*!
 * <div>
 * Checks the send flag.
 * </div>
 * @param direction The direction.
 * @return The send flag.
 */
+ (bool) isSendDisabledWithDirection:(FMIceLinkStreamDirection)direction;
/*!
 * <div>
 * Checks the send flag.
 * </div>
 * @param directionString The direction string.
 * @return The send flag.
 */
+ (bool) isSendDisabledWithDirectionString:(NSString*)directionString;
/*!
 * <div>
 * Sets the receive flag.
 * </div>
 * @param direction The direction.
 * @param disabled Whether to disable the receive flag.
 * @return The new direction.
 */
+ (FMIceLinkStreamDirection) setReceiveDisabledWithDirection:(FMIceLinkStreamDirection)direction disabled:(bool)disabled;
/*!
 * <div>
 * Sets the receive flag.
 * </div>
 * @param directionString The direction string.
 * @param disabled Whether to disable the receive flag.
 * @return The new direction.
 */
+ (NSString*) setReceiveDisabledWithDirectionString:(NSString*)directionString disabled:(bool)disabled;
/*!
 * <div>
 * Sets the send flag.
 * </div>
 * @param direction The direction.
 * @param disabled Whether to disable the send flag.
 * @return The new direction.
 */
+ (FMIceLinkStreamDirection) setSendDisabledWithDirection:(FMIceLinkStreamDirection)direction disabled:(bool)disabled;
/*!
 * <div>
 * Sets the send flag.
 * </div>
 * @param directionString The direction string.
 * @param disabled Whether to disable the send flag.
 * @return The new direction.
 */
+ (NSString*) setSendDisabledWithDirectionString:(NSString*)directionString disabled:(bool)disabled;
+ (FMIceLinkStreamDirectionHelper*) streamDirectionHelper;
/*!
 * <div>
 * Toggles the receive flag.
 * </div>
 * @param direction The direction.
 * @return The new direction.
 */
+ (FMIceLinkStreamDirection) toggleReceiveWithDirection:(FMIceLinkStreamDirection)direction;
/*!
 * <div>
 * Toggles the receive flag.
 * </div>
 * @param directionString The direction string.
 * @return The new direction.
 */
+ (NSString*) toggleReceiveWithDirectionString:(NSString*)directionString;
/*!
 * <div>
 * Toggles the send flag.
 * </div>
 * @param direction The direction.
 * @return The new direction.
 */
+ (FMIceLinkStreamDirection) toggleSendWithDirection:(FMIceLinkStreamDirection)direction;
/*!
 * <div>
 * Toggles the send flag.
 * </div>
 * @param directionString The direction string.
 * @return The new direction.
 */
+ (NSString*) toggleSendWithDirectionString:(NSString*)directionString;

@end

/*!
 * <div>
 * A stream synchronization context.
 * </div>
 */
@interface FMIceLinkSynchronizeContext : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSynchronizeContext class.
 * </div>
 * @param ntpTimestampTicks The NTP timestamp ticks.
 * @param systemTimestamp The system timestamp.
 */
- (instancetype) initWithNtpTimestampTicks:(long long)ntpTimestampTicks systemTimestamp:(long long)systemTimestamp;
/*!
 * <div>
 * Gets the NTP timestamp ticks.
 * </div>
 */
- (long long) ntpTimestampTicks;
/*!
 * <div>
 * Sets the NTP timestamp ticks.
 * </div>
 */
- (void) setNtpTimestampTicks:(long long)value;
/*!
 * <div>
 * Sets the system timestamp.
 * </div>
 */
- (void) setSystemTimestamp:(long long)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkSynchronizeContext class.
 * </div>
 * @param ntpTimestampTicks The NTP timestamp ticks.
 * @param systemTimestamp The system timestamp.
 */
+ (FMIceLinkSynchronizeContext*) synchronizeContextWithNtpTimestampTicks:(long long)ntpTimestampTicks systemTimestamp:(long long)systemTimestamp;
/*!
 * <div>
 * Gets the system timestamp.
 * </div>
 */
- (long long) systemTimestamp;

@end

/*!
 * <div>
 * Transport stats.
 * </div>
 */
@interface FMIceLinkTransportStats : FMIceLinkBaseStats

/*!
 * <div>
 * Gets the active candidate pair's stats.
 * </div>
 */
- (FMIceLinkCandidatePairStats*) activeCandidatePair;
/*!
 * <div>
 * Gets the number of bytes received.
 * </div>
 */
- (long long) bytesReceived;
/*!
 * <div>
 * Gets the number of bytes sent.
 * </div>
 */
- (long long) bytesSent;
/*!
 * <div>
 * Gets the candidate pairs' stats.
 * </div>
 */
- (NSMutableArray*) candidatePairs;
/*!
 * <div>
 * Deserializes the properties.
 * </div>
 * @param key The key.
 * @param valueJson The value in JSON format.
 */
- (void) deserializePropertiesWithKey:(NSString*)key valueJson:(NSString*)valueJson;
/*!
 * <div>
 * Derializes transport stats from JSON.
 * </div>
 * @param transportJson The transport's stats JSON.
 * @return
 */
+ (FMIceLinkTransportStats*) fromJsonWithTransportJson:(NSString*)transportJson;
/*!
 * <div>
 * Gets a candidate pair by its identifier.
 * </div>
 * @param candidatePairId The candidate pair identifier.
 * @return
 */
- (FMIceLinkCandidatePairStats*) getCandidatePairWithCandidatePairId:(NSString*)candidatePairId;
/*!
 * <div>
 * Gets a local candidate by its identifier.
 * </div>
 * @param candidateId The candidate identifier.
 * @return
 */
- (FMIceLinkCandidateStats*) getLocalCandidateWithCandidateId:(NSString*)candidateId;
/*!
 * <div>
 * Gets a remote candidate by its identifier.
 * </div>
 * @param candidateId The candidate identifier.
 * @return
 */
- (FMIceLinkCandidateStats*) getRemoteCandidateWithCandidateId:(NSString*)candidateId;
- (instancetype) init;
/*!
 * <div>
 * Gets whether the active candidate pair has a host candidate.
 * </div>
 */
- (bool) isHost;
/*!
 * <div>
 * Gets whether the active candidate pair has a reflexive candidate.
 * </div>
 */
- (bool) isReflexive;
/*!
 * <div>
 * Gets whether the active candidate pair has a relayed candidate.
 * </div>
 */
- (bool) isRelayed;
/*!
 * <div>
 * Gets the local candidates' stats.
 * </div>
 */
- (NSMutableArray*) localCandidates;
/*!
 * <div>
 * Gets the local certificate's stats.
 * </div>
 */
- (FMIceLinkCertificateStats*) localCertificate;
/*!
 * <div>
 * Gets the remote candidates' stats.
 * </div>
 */
- (NSMutableArray*) remoteCandidates;
/*!
 * <div>
 * Gets the remote certificate's stats.
 * </div>
 */
- (FMIceLinkCertificateStats*) remoteCertificate;
/*!
 * <div>
 * Gets the RTCP transport's stats.
 * </div>
 */
- (FMIceLinkTransportStats*) rtcpTransport;
/*!
 * <div>
 * Serializes the properties.
 * </div>
 * @param jsonObject The JSON object.
 */
- (void) serializePropertiesWithJsonObject:(NSMutableDictionary*)jsonObject;
/*!
 * <div>
 * Sets the active candidate pair's stats.
 * </div>
 */
- (void) setActiveCandidatePair:(FMIceLinkCandidatePairStats*)value;
/*!
 * <div>
 * Sets the number of bytes received.
 * </div>
 */
- (void) setBytesReceived:(long long)value;
/*!
 * <div>
 * Sets the number of bytes sent.
 * </div>
 */
- (void) setBytesSent:(long long)value;
/*!
 * <div>
 * Sets the candidate pairs' stats.
 * </div>
 */
- (void) setCandidatePairs:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the local candidates' stats.
 * </div>
 */
- (void) setLocalCandidates:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the local certificate's stats.
 * </div>
 */
- (void) setLocalCertificate:(FMIceLinkCertificateStats*)value;
/*!
 * <div>
 * Sets the remote candidates' stats.
 * </div>
 */
- (void) setRemoteCandidates:(NSMutableArray*)value;
/*!
 * <div>
 * Sets the remote certificate's stats.
 * </div>
 */
- (void) setRemoteCertificate:(FMIceLinkCertificateStats*)value;
/*!
 * <div>
 * Sets the RTCP transport's stats.
 * </div>
 */
- (void) setRtcpTransport:(FMIceLinkTransportStats*)value;
/*!
 * <div>
 * Serializes this to JSON.
 * </div>
 * @return
 */
- (NSString*) toJson;
/*!
 * <div>
 * Serializes transport stats to JSON.
 * </div>
 * @param transport The transport's stats.
 * @return
 */
+ (NSString*) toJsonWithTransport:(FMIceLinkTransportStats*)transport;
+ (FMIceLinkTransportStats*) transportStats;

@end

/*!
 * <div>
 * A stream collection.
 * </div>
 */
@interface FMIceLinkStreamCollection : FMIceLinkCollection

/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkStreamCollection*) createCollection;
/*!
 * <div>
 * Gets a stream by its type.
 * </div><typeparam name="T"></typeparam>
 */
- (FMIceLinkStream*) getByType:(FMIceLinkStreamType)type;
/*!
 * <div>
 * Gets some streams by their type.
 * </div><typeparam name="T"></typeparam>
 */
- (NSMutableArray*) getManyByType:(FMIceLinkStreamType)type;
- (instancetype) init;
+ (FMIceLinkStreamCollection*) streamCollection;

@end

@interface FMIceLinkStreamDirectionWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkStreamDirection)value;

@end

@interface FMIceLinkStreamStateWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkStreamState)value;

@end

@interface FMIceLinkStreamTypeWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkStreamType)value;

@end

/*!
 * <div>
 * A STUN server.
 * </div>
 */
@interface FMIceLinkStunServer : FMIceLinkDynamic

/*!
 * <div>
 * Gets the create callback to create a datagram socket.
 * </div>
 */
- (FMIceLinkFunction1*) createDatagramSocket;
/*!
 * <div>
 * Creates an error response with a ganeric Stun server error.
 * </div>
 * @param request The request.
 * @param remoteAddress The remote address.
 * @param errorMessage The erro messager.
 */
- (FMIceLinkStunMessage*) createErrorResponseWithRequest:(FMIceLinkStunMessage*)request remoteAddress:(FMIceLinkTransportAddress*)remoteAddress errorMessage:(NSString*)errorMessage;
/*!
 * <div>
 * Creates an exception response.
 * </div>
 * @param request The request.
 * @param remoteAddress The remote address.
 * @param error The Stun error.
 */
- (FMIceLinkStunMessage*) createExceptionResponseWithRequest:(FMIceLinkStunMessage*)request remoteAddress:(FMIceLinkTransportAddress*)remoteAddress error:(FMIceLinkStunError*)error;
/*!
 * <div>
 * Gets the create callback to create a stream socket.
 * </div>
 */
- (FMIceLinkFunction1*) createStreamSocket;
/*!
 * <div>
 * Gets whether to prevent the server from
 * listening for TCP requests.
 * </div>
 */
- (bool) disableTcp;
/*!
 * <div>
 * Gets whether to prevent the server from
 * listening for TLS requests.
 * </div>
 */
- (bool) disableTls;
/*!
 * <div>
 * Gets whether to prevent the server from
 * listening for UDP requests.
 * </div>
 */
- (bool) disableUdp;
/*!
 * <div>
 * Gets a prefix.
 * </div>
 */
- (NSString*) getPrefixWithUdp:(bool)udp secure:(bool)secure;
- (instancetype) init;
/*!
 * <div>
 * Gets the label.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the local TCP address.
 * </div>
 */
- (FMIceLinkServerAddress*) localTcpAddress;
/*!
 * <div>
 * Gets the local TCP addresses.
 * </div>
 */
- (NSMutableArray*) localTcpAddresses;
/*!
 * <div>
 * Gets the local UDP address.
 * </div>
 */
- (FMIceLinkServerAddress*) localUdpAddress;
/*!
 * <div>
 * Gets the local UDP addresses.
 * </div>
 */
- (NSMutableArray*) localUdpAddresses;
/*!
 * <div>
 * Processes the buffer.
 * </div>
 * @param buffer The buffer.
 * @param udpServerSocket The UDP server socket.
 * @param tcpServerSocket The TCP server socket.
 * @param localAddress The local address.
 * @param remoteAddress The remote address.
 * @param readLength Length of the read.
 */
- (bool) processBuffer:(FMIceLinkDataBuffer*)buffer udpServerSocket:(FMIceLinkDatagramSocket*)udpServerSocket tcpServerSocket:(FMIceLinkStreamSocket*)tcpServerSocket localAddress:(FMIceLinkServerAddress*)localAddress remoteAddress:(FMIceLinkTransportAddress*)remoteAddress readLength:(int*)readLength;
/*!
 * <div>
 * Processes the specified request.
 * </div>
 * @param request The request.
 * @param udpServerSocket The UDP server socket.
 * @param tcpServerSocket The TCP server socket.
 * @param localAddress The local address.
 * @param remoteAddress The remote address.
 */
- (FMIceLinkStunMessage*) processWithRequest:(FMIceLinkStunMessage*)request udpServerSocket:(FMIceLinkDatagramSocket*)udpServerSocket tcpServerSocket:(FMIceLinkStreamSocket*)tcpServerSocket localAddress:(FMIceLinkServerAddress*)localAddress remoteAddress:(FMIceLinkTransportAddress*)remoteAddress;
/*!
 * <div>
 * Sets the create callback to create a datagram socket.
 * </div>
 */
- (void) setCreateDatagramSocket:(FMIceLinkFunction1*)value;
/*!
 * <div>
 * Sets the create callback to create a datagram socket.
 * </div>
 */
- (void (^)(FMIceLinkDatagramSocket*(^)(FMIceLinkDatagramSocketCreateArgs*))) setCreateDatagramSocketBlock;
/*!
 * <div>
 * Sets the create callback to create a datagram socket.
 * </div>
 */
- (void) setCreateDatagramSocketBlock:(FMIceLinkDatagramSocket*(^)(FMIceLinkDatagramSocketCreateArgs*))valueBlock;
/*!
 * <div>
 * Sets the create callback to create a stream socket.
 * </div>
 */
- (void) setCreateStreamSocket:(FMIceLinkFunction1*)value;
/*!
 * <div>
 * Sets the create callback to create a stream socket.
 * </div>
 */
- (void (^)(FMIceLinkStreamSocket*(^)(FMIceLinkStreamSocketCreateArgs*))) setCreateStreamSocketBlock;
/*!
 * <div>
 * Sets the create callback to create a stream socket.
 * </div>
 */
- (void) setCreateStreamSocketBlock:(FMIceLinkStreamSocket*(^)(FMIceLinkStreamSocketCreateArgs*))valueBlock;
/*!
 * <div>
 * Sets whether to prevent the server from
 * listening for TCP requests.
 * </div>
 */
- (void) setDisableTcp:(bool)value;
/*!
 * <div>
 * Sets whether to prevent the server from
 * listening for TLS requests.
 * </div>
 */
- (void) setDisableTls:(bool)value;
/*!
 * <div>
 * Sets whether to prevent the server from
 * listening for UDP requests.
 * </div>
 */
- (void) setDisableUdp:(bool)value;
/*!
 * <div>
 * Sets timeout for asynchronous data sending over stream sockets in ms. Defaults to unset.
 * </div>
 */
- (void) setStreamSendTimeout:(int)value;
/*!
 * <div>
 * Starts the server.
 * </div>
 */
- (bool) start;
/*!
 * <div>
 * Starts the server.
 * </div>
 * @param udpAddresses The UDP addresses to listen on.
 */
- (bool) startWithUdpAddresses:(NSMutableArray*)udpAddresses;
/*!
 * <div>
 * Starts the server.
 * </div>
 * @param udpAddresses The UDP addresses to listen on.
 * @param tcpAddresses The TCP addresses to listen on.
 */
- (bool) startWithUdpAddresses:(NSMutableArray*)udpAddresses tcpAddresses:(NSMutableArray*)tcpAddresses;
/*!
 * <div>
 * Starts the server.
 * </div>
 * @param udpAddresses The UDP addresses to listen on.
 * @param tcpAddresses The TCP addresses to listen on.
 * @param tlsAddresses The TLS addresses to listen on.
 */
- (bool) startWithUdpAddresses:(NSMutableArray*)udpAddresses tcpAddresses:(NSMutableArray*)tcpAddresses tlsAddresses:(NSMutableArray*)tlsAddresses;
/*!
 * <div>
 * Stops the server.
 * </div>
 */
- (bool) stop;
/*!
 * <div>
 * Gets timeout for asynchronous data sending over stream sockets in ms. Defaults to unset.
 * </div>
 */
- (int) streamSendTimeout;
+ (FMIceLinkStunServer*) stunServer;
/*!
 * <div>
 * Gets the TCP server addresses.
 * </div>
 */
- (NSMutableArray*) tcpAddresses;
/*!
 * <div>
 * Gets the TLS server addresses.
 * </div>
 */
- (NSMutableArray*) tlsAddresses;
/*!
 * <div>
 * Gets the UDP server addresses.
 * </div>
 */
- (NSMutableArray*) udpAddresses;

@end

@interface FMIceLinkTrickleIcePolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkTrickleIcePolicy)value;

@end

/*!
 * <div>
 * Arguments for the FMIceLinkTurnServer's authentication callback.
 * </div>
 */
@interface FMIceLinkTurnAuthArgs : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTurnAuthArgs class.
 * </div>
 * @param username The username from the request.
 * @param realm The realm from the request.
 * @param operation The operation.
 */
- (instancetype) initWithUsername:(NSString*)username realm:(NSString*)realm operation:(FMIceLinkTurnAuthOperation)operation;
/*!
 * <div>
 * Gets the operation.
 * </div>
 */
- (FMIceLinkTurnAuthOperation) operation;
/*!
 * <div>
 * Gets the realm from the request.
 * </div>
 */
- (NSString*) realm;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTurnAuthArgs class.
 * </div>
 * @param username The username from the request.
 * @param realm The realm from the request.
 * @param operation The operation.
 */
+ (FMIceLinkTurnAuthArgs*) turnAuthArgsWithUsername:(NSString*)username realm:(NSString*)realm operation:(FMIceLinkTurnAuthOperation)operation;
/*!
 * <div>
 * Gets the username from the request.
 * </div>
 */
- (NSString*) username;

@end

@interface FMIceLinkTurnAuthOperationWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkTurnAuthOperation)value;

@end

/*!
 * <div>
 * The result of attempting to authenticate a TURN request.
 * </div>
 */
@interface FMIceLinkTurnAuthResult : NSObject

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTurnAuthResult class
 * using a long-term key.
 * </div>
 * @param longTermKeyBytes The long-term key bytes, calculated as the MD5 hash
 * of the following UTF8-encoded input: "username:realm:password".
 */
+ (FMIceLinkTurnAuthResult*) fromLongTermKeyBytes:(NSMutableData*)longTermKeyBytes;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTurnAuthResult class
 * using a plaintext password.
 * </div>
 * @param password The user's password in plain text.
 */
+ (FMIceLinkTurnAuthResult*) fromPassword:(NSString*)password;
/*!
 * <div>
 * Gets the long-term key bytes, calculated as the MD5 hash of the
 * following UTF8-encoded input: "username:realm:password" (for convenience,
 * use STUN.CreateLongTermKey to calculate).
 * </div>
 */
- (NSMutableData*) longTermKeyBytes;
/*!
 * <div>
 * Gets the user's password in plain text.
 * </div>
 */
- (NSString*) password;

@end

/*!
 * <div>
 * An TURN/STUN server.
 * </div>
 */
@interface FMIceLinkTurnServer : FMIceLinkStunServer

/*!
 * <div>
 * Gets the number of active allocations.
 * </div>
 */
- (int) allocationCount;
/*!
 * <div>
 * Gets the maximum allowed port to be
 * used when allocating sockets.
 * The default value is 65535.
 * </div>
 */
- (int) allocationPortMax;
/*!
 * <div>
 * Gets the minimum allowed port to be
 * used when allocating sockets.
 * The default value is 49152.
 * </div>
 */
- (int) allocationPortMin;
/*!
 * <div>
 * Creates an exception response.
 * </div>
 * @param request The request.
 * @param remoteAddress The remote address.
 * @param error The error.
 */
- (FMIceLinkStunMessage*) createExceptionResponseWithRequest:(FMIceLinkStunMessage*)request remoteAddress:(FMIceLinkTransportAddress*)remoteAddress error:(FMIceLinkStunError*)error;
/*!
 * <div>
 * Gets the default lifetime for new allocations
 * in seconds. Defaults to 600 (10 minutes).
 * </div>
 */
- (long long) defaultAllocateLifetime;
/*!
 * <div>
 * Gets the default lifetime for refreshed allocations
 * in seconds. Defaults to 600 (10 minutes).
 * </div>
 */
- (long long) defaultRefreshLifetime;
/*!
 * <div>
 * Gets a value indicating whether to
 * disable the in-memory bypass of the network
 * when communicating between two relay candidates.
 * </div>
 */
- (bool) disableBypass;
/*!
 * <div>
 * Gets whether the server should force the
 * default lifetime for new allocations (true) or allow
 * clients to request their own lifetime within the
 * min/max range (false). Defaults to false.
 * </div>
 */
- (bool) forceDefaultAllocateLifetime;
/*!
 * <div>
 * Gets whether the server should force the
 * default lifetime for refreshed allocations (true) or allow
 * clients to request their own lifetime within the
 * min/max range (false). Defaults to false.
 * </div>
 */
- (bool) forceDefaultRefreshLifetime;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTurnServer class.
 * </div>
 * @param authCallback The authentication callback.
 */
- (instancetype) initWithAuthCallback:(FMIceLinkFunction1*)authCallback;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTurnServer class.
 * </div>
 * @param authCallbackBlock The authentication callback.
 */
- (instancetype) initWithAuthCallbackBlock:(FMIceLinkTurnAuthResult*(^)(FMIceLinkTurnAuthArgs*))authCallbackBlock;
/*!
 * <div>
 * Gets the label.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the maximum lifetime for new
 * allocations in seconds. Defaults to 3600
 * (1 hour).
 * </div>
 */
- (long long) maxAllocateLifetime;
/*!
 * <div>
 * Gets the maximum lifetime for refreshed
 * allocations in seconds. Defaults to 3600
 * (1 hour).
 * </div>
 */
- (long long) maxRefreshLifetime;
/*!
 * <div>
 * Gets the minimum lifetime for new allocations
 * in seconds. Equal to 600 (10 minutes).
 * </div>
 */
- (long long) minAllocateLifetime;
/*!
 * <div>
 * Gets the minimum lifetime for refreshed allocations
 * in seconds. Equal to 600 (10 minutes).
 * </div>
 */
- (long long) minRefreshLifetime;
/*!
 * <div>
 * Gets the current nonce.
 * </div>
 */
- (NSString*) nonce;
/*!
 * <div>
 * Processes the buffer.
 * </div>
 * @param buffer The buffer.
 * @param udpServerSocket The UDP server socket.
 * @param tcpServerSocket The TCP server socket.
 * @param localAddress The local address.
 * @param remoteAddress The remote address.
 * @param readLength Length of the read.
 */
- (bool) processBuffer:(FMIceLinkDataBuffer*)buffer udpServerSocket:(FMIceLinkDatagramSocket*)udpServerSocket tcpServerSocket:(FMIceLinkStreamSocket*)tcpServerSocket localAddress:(FMIceLinkServerAddress*)localAddress remoteAddress:(FMIceLinkTransportAddress*)remoteAddress readLength:(int*)readLength;
/*!
 * <div>
 * Processes the specified request.
 * </div>
 * @param request The request.
 * @param udpServerSocket The UDP server socket.
 * @param tcpServerSocket The TCP server socket.
 * @param localAddress The local address.
 * @param remoteAddress The remote address.
 */
- (FMIceLinkStunMessage*) processWithRequest:(FMIceLinkStunMessage*)request udpServerSocket:(FMIceLinkDatagramSocket*)udpServerSocket tcpServerSocket:(FMIceLinkStreamSocket*)tcpServerSocket localAddress:(FMIceLinkServerAddress*)localAddress remoteAddress:(FMIceLinkTransportAddress*)remoteAddress;
/*!
 * <div>
 * Gets the realm used for this server.
 * </div>
 */
- (NSString*) realm;
/*!
 * <div>
 * Sets the maximum allowed port to be
 * used when allocating sockets.
 * The default value is 65535.
 * </div>
 */
- (void) setAllocationPortMax:(int)value;
/*!
 * <div>
 * Sets the minimum allowed port to be
 * used when allocating sockets.
 * The default value is 49152.
 * </div>
 */
- (void) setAllocationPortMin:(int)value;
/*!
 * <div>
 * Sets the default lifetime for new allocations
 * in seconds. Defaults to 600 (10 minutes).
 * </div>
 */
- (void) setDefaultAllocateLifetime:(long long)value;
/*!
 * <div>
 * Sets the default lifetime for refreshed allocations
 * in seconds. Defaults to 600 (10 minutes).
 * </div>
 */
- (void) setDefaultRefreshLifetime:(long long)value;
/*!
 * <div>
 * Sets a value indicating whether to
 * disable the in-memory bypass of the network
 * when communicating between two relay candidates.
 * </div>
 */
- (void) setDisableBypass:(bool)value;
/*!
 * <div>
 * Sets whether the server should force the
 * default lifetime for new allocations (true) or allow
 * clients to request their own lifetime within the
 * min/max range (false). Defaults to false.
 * </div>
 */
- (void) setForceDefaultAllocateLifetime:(bool)value;
/*!
 * <div>
 * Sets whether the server should force the
 * default lifetime for refreshed allocations (true) or allow
 * clients to request their own lifetime within the
 * min/max range (false). Defaults to false.
 * </div>
 */
- (void) setForceDefaultRefreshLifetime:(bool)value;
/*!
 * <div>
 * Sets the maximum lifetime for new
 * allocations in seconds. Defaults to 3600
 * (1 hour).
 * </div>
 */
- (void) setMaxAllocateLifetime:(long long)value;
/*!
 * <div>
 * Sets the maximum lifetime for refreshed
 * allocations in seconds. Defaults to 3600
 * (1 hour).
 * </div>
 */
- (void) setMaxRefreshLifetime:(long long)value;
/*!
 * <div>
 * Sets the realm used for this server.
 * </div>
 */
- (void) setRealm:(NSString*)value;
/*!
 * <div>
 * Sets whether the server should enforce
 * stale-nonce security by sending a 438 Stale Nonce
 * in response to allocate requests with a stale
 * or non-existent nonce.
 * </div>
 */
- (void) setStaleNonceSecurity:(bool)value;
/*!
 * <div>
 * Gets whether the server should enforce
 * stale-nonce security by sending a 438 Stale Nonce
 * in response to allocate requests with a stale
 * or non-existent nonce.
 * </div>
 */
- (bool) staleNonceSecurity;
/*!
 * <div>
 * Starts the server.
 * </div>
 * @param udpAddresses The UDP addresses to listen on.
 * @param tcpAddresses The TCP addresses to listen on.
 * @param tlsAddresses The TLS addresses to listen on.
 */
- (bool) startWithUdpAddresses:(NSMutableArray*)udpAddresses tcpAddresses:(NSMutableArray*)tcpAddresses tlsAddresses:(NSMutableArray*)tlsAddresses;
/*!
 * <div>
 * Stops the server.
 * </div>
 */
- (bool) stop;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTurnServer class.
 * </div>
 * @param authCallback The authentication callback.
 */
+ (FMIceLinkTurnServer*) turnServerWithAuthCallback:(FMIceLinkFunction1*)authCallback;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkTurnServer class.
 * </div>
 * @param authCallbackBlock The authentication callback.
 */
+ (FMIceLinkTurnServer*) turnServerWithAuthCallbackBlock:(FMIceLinkTurnAuthResult*(^)(FMIceLinkTurnAuthArgs*))authCallbackBlock;

@end

/*!
 * <div>
 * Utility methods.
 * </div>
 */
@interface FMIceLinkUtility : NSObject

/*!
 * <div>
 * Clones the specified list.
 * </div><typeparam name="T"></typeparam>
 * @param list The list.
 */
+ (NSMutableArray*) cloneWithList:(NSMutableArray*)list;
/*!
 * <div>
 * Gets the first element in the array or the default
 * value if the array is null or empty.
 * </div><typeparam name="T"></typeparam>
 * @param array The array.
 */
+ (id) firstOrDefaultWithArray:(NSMutableArray*)array;
/*!
 * <div>
 * Gets the first element in the list or the default
 * value if the list is null or empty.
 * </div><typeparam name="T"></typeparam>
 * @param list The list.
 */
+ (id) firstOrDefaultWithList:(NSMutableArray*)list;
/*!
 * <div>
 * Formats a double as a percentage string.
 * </div>
 * @param value The value.
 * @param decimalPlaces The number of decimal places to include.
 */
+ (NSString*) formatDoubleAsPercent:(double)value decimalPlaces:(int)decimalPlaces;
/*!
 * <div>
 * Generates a synchronization source.
 * </div>
 */
+ (long long) generateSynchronizationSource;
/*!
 * <div>
 * Generates a Connection Tie-breaker.
 * </div>
 * @return
 */
+ (NSString*) generateTieBreaker;
- (instancetype) init;
/*!
 * <div>
 * Gets the last element in the array or the default
 * value if the array is null or empty.
 * </div><typeparam name="T"></typeparam>
 * @param array The array.
 */
+ (id) lastOrDefaultWithArray:(NSMutableArray*)array;
/*!
 * <div>
 * Gets the last element in the list or the default
 * value if the list is null or empty.
 * </div><typeparam name="T"></typeparam>
 * @param list The list.
 */
+ (id) lastOrDefaultWithList:(NSMutableArray*)list;
/*!
 * <div>
 * Converts an array to a list.
 * </div><typeparam name="T"></typeparam>
 * @param array The array.
 */
+ (NSMutableArray*) toListWithArray:(NSMutableArray*)array;
/*!
 * <div>
 * Enumerates over all nodes in the tree, invoking the callback for each one.
 * </div><typeparam name="T">The generic to search.</typeparam>
 * @param root The root.
 * @param childrenCallback The children callback.
 * @param nodeCallback The node callback.
 */
+ (void) treeFindLeavesWithRoot:(id)root childrenCallback:(FMIceLinkFunction1*)childrenCallback nodeCallback:(FMIceLinkAction1*)nodeCallback;
/*!
 * <div>
 * Enumerates over all nodes in the tree, invoking the callback for each one.
 * </div><typeparam name="T">The generic to search.</typeparam>
 * @param root The root.
 * @param childrenCallbackBlock The children callback.
 * @param nodeCallbackBlock The node callback.
 */
+ (void) treeFindLeavesWithRoot:(id)root childrenCallbackBlock:(NSMutableArray*(^)(id))childrenCallbackBlock nodeCallbackBlock:(void(^)(id))nodeCallbackBlock;
/*!
 * <div>
 * Enumerates over all nodes in the tree, invoking the callback for each one.
 * </div><typeparam name="T">The generic to search.</typeparam>
 * @inlineparam root The root.
 * @inlineparam childrenCallbackBlock The children callback.
 * @inlineparam nodeCallbackBlock The node callback.
 */
+ (void (^)(id, NSMutableArray*(^)(id), void(^)(id))) treeFindLeavesWithRootAndChildrenCallbackBlockAndNodeCallbackBlock;
/*!
 * <div>
 * Enumerates over all nodes in the tree, invoking the callback for each one.
 * </div><typeparam name="T">The generic to search.</typeparam>
 * @param root The root.
 * @param childrenCallback The children callback.
 * @param nodeCallback The node callback.
 */
+ (void) treeSearchWithRoot:(id)root childrenCallback:(FMIceLinkFunction1*)childrenCallback nodeCallback:(FMIceLinkAction1*)nodeCallback;
/*!
 * <div>
 * Enumerates over all nodes in the tree, invoking the callback for each one.
 * </div><typeparam name="T">The generic to search.</typeparam>
 * @param root The root.
 * @param childrenCallbackBlock The children callback.
 * @param nodeCallbackBlock The node callback.
 */
+ (void) treeSearchWithRoot:(id)root childrenCallbackBlock:(NSMutableArray*(^)(id))childrenCallbackBlock nodeCallbackBlock:(void(^)(id))nodeCallbackBlock;
/*!
 * <div>
 * Enumerates over all nodes in the tree, invoking the callback for each one.
 * </div><typeparam name="T">The generic to search.</typeparam>
 * @inlineparam root The root.
 * @inlineparam childrenCallbackBlock The children callback.
 * @inlineparam nodeCallbackBlock The node callback.
 */
+ (void (^)(id, NSMutableArray*(^)(id), void(^)(id))) treeSearchWithRootAndChildrenCallbackBlockAndNodeCallbackBlock;
+ (FMIceLinkUtility*) utility;

@end

/*!
 * <div>
 * A video branch.
 * </div>
 */
@interface FMIceLinkVideoBranch : FMIceLinkMediaBranch

/*!
 * <div>
 * Creates an array of tracks from a list of tracks.
 * </div>
 * @param tracks The list of tracks.
 */
- (NSMutableArray*) arrayFromTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoBranch class.
 * </div>
 * @param tracks The tracks.
 */
- (instancetype) initWithTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoBranch class.
 * </div>
 * @param tracks The tracks.
 */
+ (FMIceLinkVideoBranch*) videoBranchWithTracks:(NSMutableArray*)tracks;

@end

/*!
 * <div>
 * A video buffer collection.
 * </div>
 */
@interface FMIceLinkVideoBufferCollection : FMIceLinkMediaBufferCollection

/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkVideoBufferCollection*) createCollection;
- (instancetype) init;
+ (FMIceLinkVideoBufferCollection*) videoBufferCollection;

@end

/*!
 * <div>
 * A video configuration.
 * </div>
 */
@interface FMIceLinkVideoConfig : FMIceLinkMediaConfig

/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Gets the frame rate.
 * </div>
 */
- (int) frameRate;
/*!
 * <div>
 * Gets the height.
 * </div>
 */
- (int) height;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoConfig class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param frameRate The frame rate.
 */
- (instancetype) initWithWidth:(int)width height:(int)height frameRate:(int)frameRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoConfig class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param frameRate The frame rate.
 * @param clockRate The clock rate.
 */
- (instancetype) initWithWidth:(int)width height:(int)height frameRate:(int)frameRate clockRate:(int)clockRate;
/*!
 * <div>
 * Determines whether the specified configuration is equivalent.
 * </div>
 * @param config The configuration.
 */
- (bool) isEquivalentWithConfig:(FMIceLinkVideoConfig*)config;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoConfig class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param frameRate The frame rate.
 */
+ (FMIceLinkVideoConfig*) videoConfigWithWidth:(int)width height:(int)height frameRate:(int)frameRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoConfig class.
 * </div>
 * @param width The width.
 * @param height The height.
 * @param frameRate The frame rate.
 * @param clockRate The clock rate.
 */
+ (FMIceLinkVideoConfig*) videoConfigWithWidth:(int)width height:(int)height frameRate:(int)frameRate clockRate:(int)clockRate;
/*!
 * <div>
 * Gets the width.
 * </div>
 */
- (int) width;

@end

/*!
 * <div>
 * A video decoder.
 * </div>
 */
@interface FMIceLinkVideoDecoder : FMIceLinkVideoPipe

/*!
 * <div>
 * Gets a value indicating whether decoding should be delayed.
 * </div>
 */
- (bool) delayDecode;
/*!
 * <div>
 * Gets a flag indicating whether decoding should be bypassed for
 * incoming media packets when a key frame request has been made via
 * a PLI message. Default is true.
 * </div>
 */
- (bool) delayDecodeOnPendingKeyFrame;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Process stats from an input.
 * </div>
 * @param stats The stats.
 */
- (void) doProcessStatsFromInputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Gets the last frame height.
 * </div>
 */
- (int) frameHeight;
/*!
 * <div>
 * Gets the average frame rate.
 * </div>
 */
- (int) frameRate;
/*!
 * <div>
 * Gets the number of decoded frames.
 * </div>
 */
- (long long) framesDecoded;
/*!
 * <div>
 * Gets the last frame width.
 * </div>
 */
- (int) frameWidth;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoDecoder class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkVideoFormat*)inputFormat outputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Determines whether a data buffer represents a keyframe.
 * </div>
 * @param dataBuffer The data buffer.
 */
- (bool) isKeyFrameWithDataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Raises a frame.
 * </div>
 * @param frame The frame.
 */
- (void) raiseFrame:(FMIceLinkVideoFrame*)frame;
/*!
 * <div>
 * Sends a key-frame request.
 * </div>
 */
- (void) sendKeyFrameRequestWithReason:(NSString*)reason;
/*!
 * <div>
 * Sets a flag indicating whether decoding should be bypassed for
 * incoming media packets when a key frame request has been made via
 * a PLI message. Default is true.
 * </div>
 */
- (void) setDelayDecodeOnPendingKeyFrame:(bool)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoDecoder class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
+ (FMIceLinkVideoDecoder*) videoDecoderWithInputFormat:(FMIceLinkVideoFormat*)inputFormat outputFormat:(FMIceLinkVideoFormat*)outputFormat;

@end

/*!
 * <div>
 * An audio pipe for synchronizing
 * playout with other streams.
 * </div>
 */
@interface FMIceLinkAudioSynchronizer : FMIceLinkAudioPipe

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioSynchronizer class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkAudioSynchronizer*) audioSynchronizerWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkAudioSynchronizer class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets whether this is the master.
 * </div>
 */
- (bool) master;
/*!
 * <div>
 * Gets the master system timestamp.
 * </div>
 */
- (long long) masterSystemTimestamp;
/*!
 * <div>
 * Gets the maximum amount of data to allow in the queue, in bytes.
 * </div>
 */
- (long long) maxData;
/*!
 * <div>
 * Gets the maximum amount of delay to allow in the queue, in milliseconds.
 * </div>
 */
- (int) maxDelay;
/*!
 * <div>
 * Gets the number of pending frames.
 * </div>
 */
- (int) queueCount;
/*!
 * <div>
 * Sets the master system timestamp.
 * </div>
 */
- (void) setMasterSystemTimestamp:(long long)value;
/*!
 * <div>
 * Sets the maximum amount of data to allow in the queue, in bytes.
 * </div>
 */
- (void) setMaxData:(long long)value;
/*!
 * <div>
 * Sets the maximum amount of delay to allow in the queue, in milliseconds.
 * </div>
 */
- (void) setMaxDelay:(int)value;
/*!
 * <div>
 * Gets the slaves.
 * </div>
 */
- (NSMutableArray*) slaves;
/*!
 * <div>
 * Starts synchronizing with slaves. This
 * method is only called if this is the master.
 * </div>
 * @param slaves The slaves.
 */
- (void) synchronizeWithSlaves:(NSMutableArray*)slaves;

@end

/*!
 * <div>
 * An video pipe for synchronizing
 * playout with other streams.
 * </div>
 */
@interface FMIceLinkVideoSynchronizer : FMIceLinkVideoPipe

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoSynchronizer class.
 * </div>
 * @param format The format.
 */
- (instancetype) initWithFormat:(FMIceLinkVideoFormat*)format;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets whether this is the master.
 * </div>
 */
- (bool) master;
/*!
 * <div>
 * Gets the master system timestamp.
 * </div>
 */
- (long long) masterSystemTimestamp;
/*!
 * <div>
 * Gets the maximum amount of data to allow in the queue, in bytes.
 * </div>
 */
- (long long) maxData;
/*!
 * <div>
 * Gets the maximum amount of delay to allow in the queue, in milliseconds.
 * </div>
 */
- (int) maxDelay;
/*!
 * <div>
 * Gets the number of pending frames.
 * </div>
 */
- (int) queueCount;
/*!
 * <div>
 * Sets the master system timestamp.
 * </div>
 */
- (void) setMasterSystemTimestamp:(long long)value;
/*!
 * <div>
 * Sets the maximum amount of data to allow in the queue, in bytes.
 * </div>
 */
- (void) setMaxData:(long long)value;
/*!
 * <div>
 * Sets the maximum amount of delay to allow in the queue, in milliseconds.
 * </div>
 */
- (void) setMaxDelay:(int)value;
/*!
 * <div>
 * Gets the slaves.
 * </div>
 */
- (NSMutableArray*) slaves;
/*!
 * <div>
 * Starts synchronizing with slaves. This
 * method is only called if this is the master.
 * </div>
 * @param slaves The slaves.
 */
- (void) synchronizeWithSlaves:(NSMutableArray*)slaves;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoSynchronizer class.
 * </div>
 * @param format The format.
 */
+ (FMIceLinkVideoSynchronizer*) videoSynchronizerWithFormat:(FMIceLinkVideoFormat*)format;

@end

/*!
 * <div>
 * A video encoder.
 * </div>
 */
@interface FMIceLinkVideoEncoder : FMIceLinkVideoPipe

/*!
 * <div>
 * Processes the control frames.
 * </div>
 * @param controlFrames The control frames.
 */
- (void) doProcessControlFrames:(NSMutableArray*)controlFrames;
/*!
 * <div>
 * Processes stats from an output.
 * </div>
 * @param stats The stats.
 */
- (void) doProcessStatsFromOutputWithStats:(FMIceLinkMediaTrackStats*)stats;
/*!
 * <div>
 * Gets a value indicating whether a keyframe should be forced.
 * </div>
 */
- (bool) forceKeyFrame;
/*!
 * <div>
 * Gets the last frame height.
 * </div>
 */
- (int) frameHeight;
/*!
 * <div>
 * Gets the average frame rate for the lifespan of the encoder.
 * </div>
 */
- (int) frameRate;
/*!
 * <div>
 * Gets the number of encoded frames.
 * </div>
 */
- (long long) framesEncoded;
/*!
 * <div>
 * Gets the last frame width.
 * </div>
 */
- (int) frameWidth;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoEncoder class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
- (instancetype) initWithInputFormat:(FMIceLinkVideoFormat*)inputFormat outputFormat:(FMIceLinkVideoFormat*)outputFormat;
/*!
 * <div>
 * Gets -1.
 * </div>
 */
- (int) maxInputBitrate;
/*!
 * <div>
 * Processes the frame.
 * </div>
 * @param frame The frame.
 * @return
 */
- (bool) processFrame:(FMIceLinkVideoFrame*)frame;
/*!
 * <div>
 * Raises the frame.
 * </div>
 * @param frame The frame.
 */
- (void) raiseFrame:(FMIceLinkVideoFrame*)frame;
/*!
 * <div>
 * Sets a value indicating whether a keyframe should be forced.
 * </div>
 */
- (void) setForceKeyFrame:(bool)value;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoEncoder class.
 * </div>
 * @param inputFormat The input format.
 * @param outputFormat The output format.
 */
+ (FMIceLinkVideoEncoder*) videoEncoderWithInputFormat:(FMIceLinkVideoFormat*)inputFormat outputFormat:(FMIceLinkVideoFormat*)outputFormat;

@end

/*!
 * <div>
 * A collection of video formats.
 * </div>
 */
@interface FMIceLinkVideoFormatCollection : FMIceLinkMediaFormatCollection

/*!
 * <div>
 * Creates an array from a list.
 * </div>
 * @param list The list.
 */
- (NSMutableArray*) arrayFromList:(NSMutableArray*)list;
/*!
 * <div>
 * Creates a collection.
 * </div>
 */
- (FMIceLinkVideoFormatCollection*) createCollection;
- (instancetype) init;
+ (FMIceLinkVideoFormatCollection*) videoFormatCollection;

@end

/*!
 * <div>
 * A video frame.
 * </div>
 */
@interface FMIceLinkVideoFrame : FMIceLinkMediaFrame

/*!
 * <div>
 * Clones this instance.
 * </div>
 */
- (FMIceLinkVideoFrame*) clone;
/*!
 * <div>
 * Creates a new instance.
 * </div>
 */
- (FMIceLinkVideoFrame*) createInstance;
/*!
 * <div>
 * Creates a media buffer collection.
 * </div>
 */
- (FMIceLinkVideoBufferCollection*) createMediaBufferCollection;
/*!
 * <div>
 * Returns a string that represents this instance.
 * </div>
 */
- (NSString*) description;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoFrame class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoFrame class.
 * </div>
 * @param buffer The buffer.
 */
- (instancetype) initWithBuffer:(FMIceLinkVideoBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoFrame class.
 * </div>
 * @param buffers The buffers.
 */
- (instancetype) initWithBuffers:(NSMutableArray*)buffers;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoFrame class.
 * </div>
 */
+ (FMIceLinkVideoFrame*) videoFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoFrame class.
 * </div>
 * @param buffer The buffer.
 */
+ (FMIceLinkVideoFrame*) videoFrameWithBuffer:(FMIceLinkVideoBuffer*)buffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoFrame class.
 * </div>
 * @param buffers The buffers.
 */
+ (FMIceLinkVideoFrame*) videoFrameWithBuffers:(NSMutableArray*)buffers;

@end

/*!
 * <div>
 * A video stream.
 * </div>
 */
@interface FMIceLinkVideoStream : FMIceLinkMediaStream

/*!
 * <div>
 * Creates a format.
 * </div>
 * @param attribute The attribute.
 */
- (FMIceLinkVideoFormat*) createFormatWithAttribute:(FMIceLinkSdpRtpMapAttribute*)attribute;
/*!
 * <div>
 * Creates a format.
 * </div>
 * @param name The format name.
 * @param clockRate The clock rate.
 * @param parameters The parameters.
 * @param payloadType The payload type.
 */
- (FMIceLinkVideoFormat*) createFormatWithName:(NSString*)name clockRate:(int)clockRate parameters:(NSString*)parameters payloadType:(int)payloadType;
/*!
 * <div>
 * Creates an input collection.
 * </div>
 * @param output The output.
 */
- (FMIceLinkIVideoInputCollection*) createInputCollectionWithOutput:(NSObject<FMIceLinkIVideoOutput>*)output;
/*!
 * <div>
 * Creates a media format collection.
 * </div>
 */
- (FMIceLinkVideoFormatCollection*) createMediaFormatCollection;
/*!
 * <div>
 * Creates an output collection.
 * </div>
 * @param input The input.
 */
- (FMIceLinkIVideoOutputCollection*) createOutputCollectionWithInput:(NSObject<FMIceLinkIVideoInput>*)input;
/*!
 * <div>
 * Creates a format array from a format list.
 * </div>
 * @param formatList The format list.
 */
- (NSMutableArray*) formatArrayFromListWithFormatList:(NSMutableArray*)formatList;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param input The input.
 * @param output The output.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input output:(NSObject<FMIceLinkIVideoInput>*)output;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param inputs The inputs.
 */
- (instancetype) initWithInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param inputs The inputs.
 * @param outputs The outputs.
 */
- (instancetype) initWithInputs:(NSMutableArray*)inputs outputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param localMedia The local media.
 */
- (instancetype) initWithLocalMedia:(FMIceLinkLocalMedia*)localMedia;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param localMedia The local media.
 * @param remoteMedia The remote media.
 */
- (instancetype) initWithLocalMedia:(FMIceLinkLocalMedia*)localMedia remoteMedia:(FMIceLinkRemoteMedia*)remoteMedia;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param localTrack The local track.
 */
- (instancetype) initWithLocalTrack:(FMIceLinkVideoTrack*)localTrack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param localTrack The local track.
 * @param remoteTrack The remote track.
 */
- (instancetype) initWithLocalTrack:(FMIceLinkVideoTrack*)localTrack remoteTrack:(FMIceLinkVideoTrack*)remoteTrack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param output The output.
 */
- (instancetype) initWithOutput:(NSObject<FMIceLinkIVideoInput>*)output;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param outputs The outputs.
 */
- (instancetype) initWithOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param remoteMedia The remote media.
 */
- (instancetype) initWithRemoteMedia:(FMIceLinkRemoteMedia*)remoteMedia;
/*!
 * <div>
 * Contains logic updating internal policies when bandwidth adapation policy chnages.
 * </div>
 */
- (void) processBandwidthAdapatationPolicyChangeWithPolicy:(FMIceLinkBandwidthAdaptationPolicy)policy;
/*!
 * <div>
 * Processes the frame.
 * </div>
 * @param frame The frame.
 * @return
 */
- (bool) processFrame:(FMIceLinkVideoFrame*)frame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 */
+ (FMIceLinkVideoStream*) videoStream;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkVideoStream*) videoStreamWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param input The input.
 * @param output The output.
 */
+ (FMIceLinkVideoStream*) videoStreamWithInput:(NSObject<FMIceLinkIVideoOutput>*)input output:(NSObject<FMIceLinkIVideoInput>*)output;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param inputs The inputs.
 */
+ (FMIceLinkVideoStream*) videoStreamWithInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param inputs The inputs.
 * @param outputs The outputs.
 */
+ (FMIceLinkVideoStream*) videoStreamWithInputs:(NSMutableArray*)inputs outputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param localMedia The local media.
 */
+ (FMIceLinkVideoStream*) videoStreamWithLocalMedia:(FMIceLinkLocalMedia*)localMedia;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param localMedia The local media.
 * @param remoteMedia The remote media.
 */
+ (FMIceLinkVideoStream*) videoStreamWithLocalMedia:(FMIceLinkLocalMedia*)localMedia remoteMedia:(FMIceLinkRemoteMedia*)remoteMedia;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param localTrack The local track.
 */
+ (FMIceLinkVideoStream*) videoStreamWithLocalTrack:(FMIceLinkVideoTrack*)localTrack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param localTrack The local track.
 * @param remoteTrack The remote track.
 */
+ (FMIceLinkVideoStream*) videoStreamWithLocalTrack:(FMIceLinkVideoTrack*)localTrack remoteTrack:(FMIceLinkVideoTrack*)remoteTrack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param output The output.
 */
+ (FMIceLinkVideoStream*) videoStreamWithOutput:(NSObject<FMIceLinkIVideoInput>*)output;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param outputs The outputs.
 */
+ (FMIceLinkVideoStream*) videoStreamWithOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoStream class.
 * </div>
 * @param remoteMedia The remote media.
 */
+ (FMIceLinkVideoStream*) videoStreamWithRemoteMedia:(FMIceLinkRemoteMedia*)remoteMedia;

@end

/*!
 * <div>
 * A video track.
 * </div>
 */
@interface FMIceLinkVideoTrack : FMIceLinkMediaTrack

/*!
 * <div>
 * Adds an element.
 * </div>
 * @param element
 */
- (void) addElement:(NSObject<FMIceLinkIVideoElement>*)element;
/*!
 * <div>
 * Adds a handler that is raised whenever the size is calculated.
 * </div>
 */
- (void) addOnSize:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Adds a handler that is raised whenever the size is calculated.
 * </div>
 */
- (void (^)(void(^)(FMIceLinkSize*))) addOnSizeWithBlock;
/*!
 * <div>
 * Adds a handler that is raised whenever the size is calculated.
 * </div>
 */
- (void) addOnSizeWithBlock:(void(^)(FMIceLinkSize*))valueBlock;
/*!
 * <div>
 * Creates an array of inputs from a list of inputs.
 * </div>
 * @param inputs The list of inputs.
 */
- (NSMutableArray*) arrayFromInputs:(NSMutableArray*)inputs;
/*!
 * <div>
 * Creates an array of outputs from a list of outputs.
 * </div>
 * @param outputs The list of outputs.
 */
- (NSMutableArray*) arrayFromOutputs:(NSMutableArray*)outputs;
/*!
 * <div>
 * Creates an array of sinks from a list of sinks.
 * </div>
 * @param sinks The list of sinks.
 */
- (NSMutableArray*) arrayFromSinks:(NSMutableArray*)sinks;
/*!
 * <div>
 * Creates a branch from an array of tracks.
 * </div>
 * @param tracks The tracks.
 */
- (FMIceLinkVideoBranch*) branchFromTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Gets the elements.
 * </div>
 */
- (NSMutableArray*) elements;
/*!
 * <div>
 * Grabs the next frame once it's rendered.
 * </div>
 */
- (FMIceLinkFuture*) grabFrame;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoTrack class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoTrack class.
 * </div>
 * @param element The element.
 */
- (instancetype) initWithElement:(NSObject<FMIceLinkIVideoElement>*)element;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoTrack class.
 * </div>
 * @param tracks The branch of tracks.
 */
- (instancetype) initWithTracks:(NSMutableArray*)tracks;
/*!
 * <div>
 * Determines whether the specified element is a branch.
 * </div>
 * @param element The element.
 */
- (bool) isBranchWithElement:(NSObject<FMIceLinkIVideoElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is an input.
 * </div>
 * @param element The element.
 * @return
 */
- (bool) isInputWithElement:(NSObject<FMIceLinkIVideoElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is an output.
 * </div>
 * @param element The element.
 * @return
 */
- (bool) isOutputWithElement:(NSObject<FMIceLinkIVideoElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is a pipe.
 * </div>
 * @param element The element.
 */
- (bool) isPipeWithElement:(NSObject<FMIceLinkIVideoElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is a sink.
 * </div>
 * @param element The element.
 */
- (bool) isSinkWithElement:(NSObject<FMIceLinkIVideoElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is a source.
 * </div>
 * @param element The element.
 */
- (bool) isSourceWithElement:(NSObject<FMIceLinkIVideoElement>*)element;
/*!
 * <div>
 * Determines whether the specified element is a stream.
 * </div>
 * @param element The element.
 */
- (bool) isStreamWithElement:(NSObject<FMIceLinkIVideoElement>*)element;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Removes a handler that is raised whenever the size is calculated.
 * </div>
 */
- (void) removeOnSize:(FMIceLinkAction1*)value;
/*!
 * <div>
 * Gets the size of this track.
 * </div>
 */
- (FMIceLinkSize*) size;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoTrack class.
 * </div>
 */
+ (FMIceLinkVideoTrack*) videoTrack;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoTrack class.
 * </div>
 * @param element The element.
 */
+ (FMIceLinkVideoTrack*) videoTrackWithElement:(NSObject<FMIceLinkIVideoElement>*)element;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVideoTrack class.
 * </div>
 * @param tracks The branch of tracks.
 */
+ (FMIceLinkVideoTrack*) videoTrackWithTracks:(NSMutableArray*)tracks;

@end

/*!
 * <div>
 * A WebRTC/ORTC-compatible video track configuration.
 * </div>
 */
@interface FMIceLinkRtcVideoTrackConfig : NSObject

/*!
 * <div>
 * Gets whether the H.264 codec should be disabled.
 * Defaults to <code>false</code>.
 * </div>
 */
- (bool) h264Disabled;
- (instancetype) init;
+ (FMIceLinkRtcVideoTrackConfig*) rtcVideoTrackConfig;
/*!
 * <div>
 * Sets whether the H.264 codec should be disabled.
 * Defaults to <code>false</code>.
 * </div>
 */
- (void) setH264Disabled:(bool)value;
/*!
 * <div>
 * Sets whether the VP8 codec should be disabled.
 * Defaults to <code>false</code>.
 * </div>
 */
- (void) setVp8Disabled:(bool)value;
/*!
 * <div>
 * Sets whether the VP9 codec should be disabled.
 * Defaults to <code>false</code>.
 * </div>
 */
- (void) setVp9Disabled:(bool)value;
/*!
 * <div>
 * Gets whether the VP8 codec should be disabled.
 * Defaults to <code>false</code>.
 * </div>
 */
- (bool) vp8Disabled;
/*!
 * <div>
 * Gets whether the VP9 codec should be disabled.
 * Defaults to <code>false</code>.
 * </div>
 */
- (bool) vp9Disabled;

@end

/*!
 * <div>
 * A VP8 depacketizer.
 * </div>
 */
@interface FMIceLinkVp8Depacketizer : FMIceLinkVideoDepacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Depacketizer class.
 * </div>
 */
+ (FMIceLinkVp8Depacketizer*) depacketizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Depacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkVp8Depacketizer*) depacketizerWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Creates a fragment from a data buffer.
 * </div>
 * @param header The rtp header for this packet.
 * @param dataBuffer The data buffer.
 */
- (FMIceLinkVp8Fragment*) doCreateFragmentWithHeader:(FMIceLinkRtpPacketHeader*)header dataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Depacketizer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Depacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Checks if the databuffer contains a keyframe.
 * </div>
 * @param inputBuffer VideoBuffer containing video data.
 */
- (bool) isKeyFrameWithInputBuffer:(FMIceLinkDataBuffer*)inputBuffer;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;

@end

/*!
 * <div>
 * A VP8 format.
 * </div>
 */
@interface FMIceLinkVp8Format : FMIceLinkVideoFormat

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Format class.
 * </div>
 */
+ (FMIceLinkVp8Format*) format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Format class.
 * </div>
 * @param clockRate The clock rate.
 */
+ (FMIceLinkVp8Format*) formatWithClockRate:(int)clockRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Format class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Format class.
 * </div>
 * @param clockRate The clock rate.
 */
- (instancetype) initWithClockRate:(int)clockRate;

@end

/*!
 * <div>
 * A VP8 packet fragment.
 * </div>
 */
@interface FMIceLinkVp8Fragment : FMIceLinkVideoFragment

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Fragment class.
 * </div>
 * @param header The rtp packet header.
 * @param dataBuffer The data buffer.
 */
+ (FMIceLinkVp8Fragment*) fragmentWithHeader:(FMIceLinkRtpPacketHeader*)header dataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Fragment class.
 * </div>
 * @param header The rtp packet header.
 * @param dataBuffer The data buffer.
 */
- (instancetype) initWithHeader:(FMIceLinkRtpPacketHeader*)header dataBuffer:(FMIceLinkDataBuffer*)dataBuffer;

@end

/*!
 * <div>
 * A VP8 packetizer.
 * </div>
 */
@interface FMIceLinkVp8Packetizer : FMIceLinkVideoPacketizer

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Gets the header padding.
 * </div>
 */
+ (int) headerPadding;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Packetizer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Packetizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the maximum packet size (affects packetization).
 * </div>
 */
+ (int) maxPacketSize;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Packetizer class.
 * </div>
 */
+ (FMIceLinkVp8Packetizer*) packetizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp8Packetizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkVp8Packetizer*) packetizerWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;

@end

/*!
 * <div>
 * Utility methods.
 * </div>
 */
@interface FMIceLinkVp8Utility : NSObject

/*!
 * <div>
 * Derives the height.
 * </div>
 * @param buffer The buffer.
 */
+ (int) deriveHeightWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Derives the width.
 * </div>
 * @param buffer The buffer.
 */
+ (int) deriveWidthWithBuffer:(FMIceLinkDataBuffer*)buffer;
- (instancetype) init;
/*!
 * <div>
 * Determines whether the buffer holds a keyframe.
 * </div>
 * @param buffer The buffer.
 */
+ (bool) isKeyFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
+ (FMIceLinkVp8Utility*) utility;

@end

/*!
 * <div>
 * A VP9 depacketizer.
 * </div>
 */
@interface FMIceLinkVp9Depacketizer : FMIceLinkVideoDepacketizer

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Depacketizer class.
 * </div>
 */
+ (FMIceLinkVp9Depacketizer*) depacketizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Depacketizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkVp9Depacketizer*) depacketizerWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Creates a fragment from a data buffer.
 * </div>
 * @param header The rtp header for this packet.
 * @param dataBuffer The data buffer.
 */
- (FMIceLinkVp9Fragment*) doCreateFragmentWithHeader:(FMIceLinkRtpPacketHeader*)header dataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Depacketizer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Depacketizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Checks if the databuffer contains a keyframe.
 * </div>
 * @param inputBuffer VideoBuffer containing video data.
 */
- (bool) isKeyFrameWithInputBuffer:(FMIceLinkDataBuffer*)inputBuffer;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets whether RTP sequence numbering has
 * been violated.
 * </div>
 */
- (bool) sequenceNumberingViolated;

@end

/*!
 * <div>
 * A VP9 format.
 * </div>
 */
@interface FMIceLinkVp9Format : FMIceLinkVideoFormat

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Format class.
 * </div>
 */
+ (FMIceLinkVp9Format*) format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Format class.
 * </div>
 * @param clockRate The clock rate.
 */
+ (FMIceLinkVp9Format*) formatWithClockRate:(int)clockRate;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Format class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Format class.
 * </div>
 * @param clockRate The clock rate.
 */
- (instancetype) initWithClockRate:(int)clockRate;

@end

/*!
 * <div>
 * A VP9 packet fragment.
 * </div>
 */
@interface FMIceLinkVp9Fragment : FMIceLinkVideoFragment

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Fragment class.
 * </div>
 * @param header The rtp packet header.
 * @param dataBuffer The data buffer.
 */
+ (FMIceLinkVp9Fragment*) fragmentWithHeader:(FMIceLinkRtpPacketHeader*)header dataBuffer:(FMIceLinkDataBuffer*)dataBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Fragment class.
 * </div>
 * @param header The rtp packet header.
 * @param dataBuffer The data buffer.
 */
- (instancetype) initWithHeader:(FMIceLinkRtpPacketHeader*)header dataBuffer:(FMIceLinkDataBuffer*)dataBuffer;

@end

/*!
 * <div>
 * A VP8 packetizer.
 * </div>
 */
@interface FMIceLinkVp9Packetizer : FMIceLinkVideoPacketizer

/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkVideoFrame*)frame inputBuffer:(FMIceLinkVideoBuffer*)inputBuffer;
/*!
 * <div>
 * Gets the header padding.
 * </div>
 */
+ (int) headerPadding;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Packetizer class.
 * </div>
 */
- (instancetype) init;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Packetizer class.
 * </div>
 * @param input The input.
 */
- (instancetype) initWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the maximum packet size (affects packetization).
 * </div>
 */
+ (int) maxPacketSize;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Packetizer class.
 * </div>
 */
+ (FMIceLinkVp9Packetizer*) packetizer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkVp9Packetizer class.
 * </div>
 * @param input The input.
 */
+ (FMIceLinkVp9Packetizer*) packetizerWithInput:(NSObject<FMIceLinkIVideoOutput>*)input;

@end

/*!
 * <div>
 * Utility methods.
 * </div>
 */
@interface FMIceLinkVp9Utility : NSObject

/*!
 * <div>
 * Derives the height.
 * </div>
 * @param buffer The buffer.
 */
+ (int) deriveHeightWithBuffer:(FMIceLinkDataBuffer*)buffer;
/*!
 * <div>
 * Derives the width.
 * </div>
 * @param buffer The buffer.
 */
+ (int) deriveWidthWithBuffer:(FMIceLinkDataBuffer*)buffer;
- (instancetype) init;
/*!
 * <div>
 * Determines whether the buffer holds a keyframe.
 * </div>
 * @param buffer The buffer.
 */
+ (bool) isKeyFrameWithBuffer:(FMIceLinkDataBuffer*)buffer;
+ (FMIceLinkVp9Utility*) utility;

@end

/*!
 * <div>
 * A WAVE audio recorder.
 * </div>
 */
@interface FMIceLinkWaveAudioRecorder : FMIceLinkAudioRecorder

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkWaveAudioRecorder class.
 * </div>
 * @param path The path.
 * @param inputFormat The input format.
 */
+ (FMIceLinkWaveAudioRecorder*) audioRecorderWithPath:(NSString*)path inputFormat:(FMIceLinkAudioFormat*)inputFormat;
/*!
 * <div>
 * Updates the file header.
 * </div>
 */
- (void) doUpdateHeader;
/*!
 * <div>
 * Writes the file header.
 * </div>
 */
- (void) doWriteHeader;
/*!
 * <div>
 * Write an encoded video frame.
 * </div>
 * @param buffer The encoded buffer.
 * @param presentationTimestamp The presentation timestamp.
 * @return true if the encoded frame was written successfully; otherwise, false
 */
- (bool) doWriteWithBuffer:(FMIceLinkAudioBuffer*)buffer presentationTimestamp:(long long)presentationTimestamp;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkWaveAudioRecorder class.
 * </div>
 * @param path The path.
 * @param inputFormat The input format.
 */
- (instancetype) initWithPath:(NSString*)path inputFormat:(FMIceLinkAudioFormat*)inputFormat;

@end

/*!
 * <div>
 * A WAVE-file-based audio sink.
 * </div>
 */
@interface FMIceLinkWaveAudioSink : FMIceLinkAudioSink

/*!
 * <div>
 * Initializes a new instance of the FMIceLinkWaveAudioSink class.
 * </div>
 * @param path The path.
 * @param format The format.
 */
+ (FMIceLinkWaveAudioSink*) audioSinkWithPath:(NSString*)path format:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkWaveAudioSink class.
 * </div>
 * @param path The path.
 * @param input The input.
 */
+ (FMIceLinkWaveAudioSink*) audioSinkWithPath:(NSString*)path input:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Destroys this instance.
 * </div>
 */
- (void) doDestroy;
/*!
 * <div>
 * Processes a frame.
 * </div>
 * @param frame The frame.
 * @param inputBuffer The input buffer.
 */
- (void) doProcessFrame:(FMIceLinkAudioFrame*)frame inputBuffer:(FMIceLinkAudioBuffer*)inputBuffer;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkWaveAudioSink class.
 * </div>
 * @param path The path.
 * @param format The format.
 */
- (instancetype) initWithPath:(NSString*)path format:(FMIceLinkAudioFormat*)format;
/*!
 * <div>
 * Initializes a new instance of the FMIceLinkWaveAudioSink class.
 * </div>
 * @param path The path.
 * @param input The input.
 */
- (instancetype) initWithPath:(NSString*)path input:(NSObject<FMIceLinkIAudioOutput>*)input;
/*!
 * <div>
 * Gets a label that identifies this class.
 * </div>
 */
- (NSString*) label;
/*!
 * <div>
 * Gets the path.
 * </div>
 */
- (NSString*) path;

@end

@interface FMIceLinkBandwidthAdaptationPolicyWrapper : NSObject

- (NSString*) description;
- (instancetype) initWithValue:(FMIceLinkBandwidthAdaptationPolicy)value;

@end




@interface FMIceLinkHashContext : FMIceLinkHashContextBase 

/* static init */ + (instancetype)hashContextWithType:(FMIceLinkHashType)type;
- (instancetype)initWithType:(FMIceLinkHashType)type;

@end




@interface FMIceLinkMacContext : FMIceLinkMacContextBase 

/* static init */ + (instancetype)macContextWithType:(FMIceLinkMacType)type key:(FMIceLinkDataBuffer *)key;
- (instancetype)initWithType:(FMIceLinkMacType)type key:(FMIceLinkDataBuffer *)key;

@end




@interface FMIceLinkFileStream : NSObject 

/* static init */ + (instancetype)fileStreamWithPath:(NSString *)path;
- (instancetype)initWithPath:(NSString *)path;

@end


@interface FMIceLinkHttpRequest : NSObject 

- (NSURL*) url;

@end



@interface FMIceLinkHttpWebRequest : NSObject 

/* static init */ + (instancetype)httpWebRequestWithSession:(NSURLSession *)session;
- (instancetype)initWithSession:(NSURLSession *)session;
- (FMIceLinkHttpResponseArgs*)sendBinaryWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs;
- (void)sendBinaryAsyncWithRequestArgs:(FMIceLinkHttpRequestArgs*)requestArgs callback:(FMIceLinkAction1*)callback;

@end




@interface FMIceLinkHttpWebRequestTransfer : FMIceLinkHttpTransfer 

+ (NSString*)getPlatformCode;

@end

//  
//  FMIceLinkAsyncSocket.h
//  
//  This class is in the public domain.
//  Originally created by Robbie Hanson in Q3 2010.
//  Updated and maintained by Deusty LLC and the Apple development community.
//  
//  https://github.com/robbiehanson/CocoaAsyncSocket
//
//  Obtained from CocoaAsyncSocket project git on 2016-11-16


#include <sys/socket.h> // AF_INET, AF_INET6

@class FMIceLinkAsyncReadPacket;
@class FMIceLinkAsyncWritePacket;
@class FMIceLinkAsyncSocketPreBuffer;
@protocol FMIceLinkAsyncSocketDelegate;

NS_ASSUME_NONNULL_BEGIN

extern NSString *const FMIceLinkAsyncSocketException;
extern NSString *const FMIceLinkAsyncSocketErrorDomain;

extern NSString *const FMIceLinkAsyncSocketQueueName;
extern NSString *const FMIceLinkAsyncSocketThreadName;

extern NSString *const FMIceLinkAsyncSocketManuallyEvaluateTrust;
#if TARGET_OS_IPHONE
extern NSString *const FMIceLinkAsyncSocketUseCFStreamForTLS;
#endif
#define FMIceLinkAsyncSocketSSLPeerName     (NSString *)kCFStreamSSLPeerName
#define FMIceLinkAsyncSocketSSLCertificates (NSString *)kCFStreamSSLCertificates
#define FMIceLinkAsyncSocketSSLIsServer     (NSString *)kCFStreamSSLIsServer
extern NSString *const FMIceLinkAsyncSocketSSLPeerID;
extern NSString *const FMIceLinkAsyncSocketSSLProtocolVersionMin;
extern NSString *const FMIceLinkAsyncSocketSSLProtocolVersionMax;
extern NSString *const FMIceLinkAsyncSocketSSLSessionOptionFalseStart;
extern NSString *const FMIceLinkAsyncSocketSSLSessionOptionSendOneByteRecord;
extern NSString *const FMIceLinkAsyncSocketSSLCipherSuites;
#if !TARGET_OS_IPHONE
extern NSString *const FMIceLinkAsyncSocketSSLDiffieHellmanParameters;
#endif

#define FMIceLinkAsyncSocketLoggingContext 65535


typedef NS_ENUM(NSInteger, FMIceLinkAsyncSocketError) {
	FMIceLinkAsyncSocketNoError = 0,           // Never used
	FMIceLinkAsyncSocketBadConfigError,        // Invalid configuration
	FMIceLinkAsyncSocketBadParamError,         // Invalid parameter was passed
	FMIceLinkAsyncSocketConnectTimeoutError,   // A connect operation timed out
	FMIceLinkAsyncSocketReadTimeoutError,      // A read operation timed out
	FMIceLinkAsyncSocketWriteTimeoutError,     // A write operation timed out
	FMIceLinkAsyncSocketReadMaxedOutError,     // Reached set maxLength without completing
	FMIceLinkAsyncSocketClosedError,           // The remote peer closed the connection
	FMIceLinkAsyncSocketOtherError,            // Description provided in userInfo
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


@interface FMIceLinkAsyncSocket : NSObject

/**
 * FMIceLinkAsyncSocket uses the standard delegate paradigm,
 * but executes all delegate callbacks on a given delegate dispatch queue.
 * This allows for maximum concurrency, while at the same time providing easy thread safety.
 * 
 * You MUST set a delegate AND delegate dispatch queue before attempting to
 * use the socket, or you will get an error.
 * 
 * The socket queue is optional.
 * If you pass NULL, FMIceLinkAsyncSocket will automatically create it's own socket queue.
 * If you choose to provide a socket queue, the socket queue must not be a concurrent queue.
 * If you choose to provide a socket queue, and the socket queue has a configured target queue,
 * then please see the discussion for the method markSocketQueueTargetQueue.
 * 
 * The delegate queue and socket queue can optionally be the same.
**/
- (instancetype)init;
- (instancetype)initWithSocketQueue:(nullable dispatch_queue_t)sq;
- (instancetype)initWithDelegate:(nullable id)aDelegate delegateQueue:(nullable dispatch_queue_t)dq;
- (instancetype)initWithDelegate:(nullable id)aDelegate delegateQueue:(nullable dispatch_queue_t)dq socketQueue:(nullable dispatch_queue_t)sq;

#pragma mark Configuration

@property (atomic, weak, readwrite, nullable) id delegate;
#if OS_OBJECT_USE_OBJC
@property (atomic, strong, readwrite, nullable) dispatch_queue_t delegateQueue;
#else
@property (atomic, assign, readwrite, nullable) dispatch_queue_t delegateQueue;
#endif

- (void)getDelegate:(id __nullable * __nullable)delegatePtr delegateQueue:(dispatch_queue_t __nullable * __nullable)delegateQueuePtr;
- (void)setDelegate:(nullable id)delegate delegateQueue:(nullable dispatch_queue_t)delegateQueue;

/**
 * If you are setting the delegate to nil within the delegate's dealloc method,
 * you may need to use the synchronous versions below.
**/
- (void)synchronouslySetDelegate:(nullable id)delegate;
- (void)synchronouslySetDelegateQueue:(nullable dispatch_queue_t)delegateQueue;
- (void)synchronouslySetDelegate:(nullable id)delegate delegateQueue:(nullable dispatch_queue_t)delegateQueue;

/**
 * By default, both IPv4 and IPv6 are enabled.
 * 
 * For accepting incoming connections, this means FMIceLinkAsyncSocket automatically supports both protocols,
 * and can simulataneously accept incoming connections on either protocol.
 * 
 * For outgoing connections, this means FMIceLinkAsyncSocket can connect to remote hosts running either protocol.
 * If a DNS lookup returns only IPv4 results, FMIceLinkAsyncSocket will automatically use IPv4.
 * If a DNS lookup returns only IPv6 results, FMIceLinkAsyncSocket will automatically use IPv6.
 * If a DNS lookup returns both IPv4 and IPv6 results, the preferred protocol will be chosen.
 * By default, the preferred protocol is IPv4, but may be configured as desired.
**/

@property (atomic, assign, readwrite, getter=isIPv4Enabled) BOOL IPv4Enabled;
@property (atomic, assign, readwrite, getter=isIPv6Enabled) BOOL IPv6Enabled;

@property (atomic, assign, readwrite, getter=isIPv4PreferredOverIPv6) BOOL IPv4PreferredOverIPv6;

/** 
 * When connecting to both IPv4 and IPv6 using Happy Eyeballs (RFC 6555) https://tools.ietf.org/html/rfc6555
 * this is the delay between connecting to the preferred protocol and the fallback protocol.
 *
 * Defaults to 300ms.
**/
@property (atomic, assign, readwrite) NSTimeInterval alternateAddressDelay;

/**
 * User data allows you to associate arbitrary information with the socket.
 * This data is not used internally by socket in any way.
**/
@property (atomic, strong, readwrite, nullable) id userData;

/**
 * Class level getter/setter for static _attemptDscp member.
 */
+ (bool)attemptDscp;
+ (void)setAttemptDscp:(bool)attemptDscp;

#pragma mark Accepting

/**
 * Tells the socket to begin listening and accepting connections on the given port.
 * When a connection is accepted, a new instance of FMIceLinkAsyncSocket will be spawned to handle it,
 * and the socket:didAcceptNewSocket: delegate method will be invoked.
 * 
 * The socket will listen on all available interfaces (e.g. wifi, ethernet, etc)
**/
- (BOOL)acceptOnPort:(uint16_t)port error:(NSError **)errPtr;

/**
 * This method is the same as acceptOnPort:error: with the
 * additional option of specifying which interface to listen on.
 * 
 * For example, you could specify that the socket should only accept connections over ethernet,
 * and not other interfaces such as wifi.
 * 
 * The interface may be specified by name (e.g. "en1" or "lo0") or by IP address (e.g. "192.168.4.34").
 * You may also use the special strings "localhost" or "loopback" to specify that
 * the socket only accept connections from the local machine.
 * 
 * You can see the list of interfaces via the command line utility "ifconfig",
 * or programmatically via the getifaddrs() function.
 * 
 * To accept connections on any interface pass nil, or simply use the acceptOnPort:error: method.
**/
- (BOOL)acceptOnInterface:(nullable NSString *)interface port:(uint16_t)port error:(NSError **)errPtr;

/**
 * Tells the socket to begin listening and accepting connections on the unix domain at the given url.
 * When a connection is accepted, a new instance of FMIceLinkAsyncSocket will be spawned to handle it,
 * and the socket:didAcceptNewSocket: delegate method will be invoked.
 *
 * The socket will listen on all available interfaces (e.g. wifi, ethernet, etc)
 **/
- (BOOL)acceptOnUrl:(NSURL *)url error:(NSError **)errPtr;

#pragma mark Connecting

/**
 * Connects to the given host and port.
 * 
 * This method invokes connectToHost:onPort:viaInterface:withTimeout:error:
 * and uses the default interface, and no timeout.
**/
- (BOOL)connectToHost:(NSString *)host onPort:(uint16_t)port error:(NSError **)errPtr;

/**
 * Connects to the given host and port with an optional timeout.
 * 
 * This method invokes connectToHost:onPort:viaInterface:withTimeout:error: and uses the default interface.
**/
- (BOOL)connectToHost:(NSString *)host
               onPort:(uint16_t)port
          withTimeout:(NSTimeInterval)timeout
                error:(NSError **)errPtr;

/**
 * Connects to the given host & port, via the optional interface, with an optional timeout.
 * 
 * The host may be a domain name (e.g. "deusty.com") or an IP address string (e.g. "192.168.0.2").
 * The host may also be the special strings "localhost" or "loopback" to specify connecting
 * to a service on the local machine.
 * 
 * The interface may be a name (e.g. "en1" or "lo0") or the corresponding IP address (e.g. "192.168.4.35").
 * The interface may also be used to specify the local port (see below).
 * 
 * To not time out use a negative time interval.
 * 
 * This method will return NO if an error is detected, and set the error pointer (if one was given).
 * Possible errors would be a nil host, invalid interface, or socket is already connected.
 * 
 * If no errors are detected, this method will start a background connect operation and immediately return YES.
 * The delegate callbacks are used to notify you when the socket connects, or if the host was unreachable.
 * 
 * Since this class supports queued reads and writes, you can immediately start reading and/or writing.
 * All read/write operations will be queued, and upon socket connection,
 * the operations will be dequeued and processed in order.
 * 
 * The interface may optionally contain a port number at the end of the string, separated by a colon.
 * This allows you to specify the local port that should be used for the outgoing connection. (read paragraph to end)
 * To specify both interface and local port: "en1:8082" or "192.168.4.35:2424".
 * To specify only local port: ":8082".
 * Please note this is an advanced feature, and is somewhat hidden on purpose.
 * You should understand that 99.999% of the time you should NOT specify the local port for an outgoing connection.
 * If you think you need to, there is a very good chance you have a fundamental misunderstanding somewhere.
 * Local ports do NOT need to match remote ports. In fact, they almost never do.
 * This feature is here for networking professionals using very advanced techniques.
**/
- (BOOL)connectToHost:(NSString *)host
               onPort:(uint16_t)port
         viaInterface:(nullable NSString *)interface
          withTimeout:(NSTimeInterval)timeout
                error:(NSError **)errPtr;

/**
 * Connects to the given address, specified as a sockaddr structure wrapped in a NSData object.
 * For example, a NSData object returned from NSNetService's addresses method.
 * 
 * If you have an existing struct sockaddr you can convert it to a NSData object like so:
 * struct sockaddr sa  -> NSData *dsa = [NSData dataWithBytes:&remoteAddr length:remoteAddr.sa_len];
 * struct sockaddr *sa -> NSData *dsa = [NSData dataWithBytes:remoteAddr length:remoteAddr->sa_len];
 * 
 * This method invokes connectToAdd
**/
- (BOOL)connectToAddress:(NSData *)remoteAddr error:(NSError **)errPtr;

/**
 * This method is the same as connectToAddress:error: with an additional timeout option.
 * To not time out use a negative time interval, or simply use the connectToAddress:error: method.
**/
- (BOOL)connectToAddress:(NSData *)remoteAddr withTimeout:(NSTimeInterval)timeout error:(NSError **)errPtr;

/**
 * Connects to the given address, using the specified interface and timeout.
 * 
 * The address is specified as a sockaddr structure wrapped in a NSData object.
 * For example, a NSData object returned from NSNetService's addresses method.
 * 
 * If you have an existing struct sockaddr you can convert it to a NSData object like so:
 * struct sockaddr sa  -> NSData *dsa = [NSData dataWithBytes:&remoteAddr length:remoteAddr.sa_len];
 * struct sockaddr *sa -> NSData *dsa = [NSData dataWithBytes:remoteAddr length:remoteAddr->sa_len];
 * 
 * The interface may be a name (e.g. "en1" or "lo0") or the corresponding IP address (e.g. "192.168.4.35").
 * The interface may also be used to specify the local port (see below).
 * 
 * The timeout is optional. To not time out use a negative time interval.
 * 
 * This method will return NO if an error is detected, and set the error pointer (if one was given).
 * Possible errors would be a nil host, invalid interface, or socket is already connected.
 * 
 * If no errors are detected, this method will start a background connect operation and immediately return YES.
 * The delegate callbacks are used to notify you when the socket connects, or if the host was unreachable.
 * 
 * Since this class supports queued reads and writes, you can immediately start reading and/or writing.
 * All read/write operations will be queued, and upon socket connection,
 * the operations will be dequeued and processed in order.
 * 
 * The interface may optionally contain a port number at the end of the string, separated by a colon.
 * This allows you to specify the local port that should be used for the outgoing connection. (read paragraph to end)
 * To specify both interface and local port: "en1:8082" or "192.168.4.35:2424".
 * To specify only local port: ":8082".
 * Please note this is an advanced feature, and is somewhat hidden on purpose.
 * You should understand that 99.999% of the time you should NOT specify the local port for an outgoing connection.
 * If you think you need to, there is a very good chance you have a fundamental misunderstanding somewhere.
 * Local ports do NOT need to match remote ports. In fact, they almost never do.
 * This feature is here for networking professionals using very advanced techniques.
**/
- (BOOL)connectToAddress:(NSData *)remoteAddr
            viaInterface:(nullable NSString *)interface
             withTimeout:(NSTimeInterval)timeout
                   error:(NSError **)errPtr;
/**
 * Connects to the unix domain socket at the given url, using the specified timeout.
 */
- (BOOL)connectToUrl:(NSURL *)url withTimeout:(NSTimeInterval)timeout error:(NSError **)errPtr;

#pragma mark Disconnecting

/**
 * Disconnects immediately (synchronously). Any pending reads or writes are dropped.
 * 
 * If the socket is not already disconnected, an invocation to the socketDidDisconnect:withError: delegate method
 * will be queued onto the delegateQueue asynchronously (behind any previously queued delegate methods).
 * In other words, the disconnected delegate method will be invoked sometime shortly after this method returns.
 * 
 * Please note the recommended way of releasing a FMIceLinkAsyncSocket instance (e.g. in a dealloc method)
 * [asyncSocket setDelegate:nil];
 * [asyncSocket disconnect];
 * [asyncSocket release];
 * 
 * If you plan on disconnecting the socket, and then immediately asking it to connect again,
 * you'll likely want to do so like this:
 * [asyncSocket setDelegate:nil];
 * [asyncSocket disconnect];
 * [asyncSocket setDelegate:self];
 * [asyncSocket connect...];
**/
- (void)disconnect;

/**
 * Disconnects after all pending reads have completed.
 * After calling this, the read and write methods will do nothing.
 * The socket will disconnect even if there are still pending writes.
**/
- (void)disconnectAfterReading;

/**
 * Disconnects after all pending writes have completed.
 * After calling this, the read and write methods will do nothing.
 * The socket will disconnect even if there are still pending reads.
**/
- (void)disconnectAfterWriting;

/**
 * Disconnects after all pending reads and writes have completed.
 * After calling this, the read and write methods will do nothing.
**/
- (void)disconnectAfterReadingAndWriting;

#pragma mark Diagnostics

/**
 * Returns whether the socket is disconnected or connected.
 * 
 * A disconnected socket may be recycled.
 * That is, it can be used again for connecting or listening.
 * 
 * If a socket is in the process of connecting, it may be neither disconnected nor connected.
**/
@property (atomic, readonly) BOOL isDisconnected;
@property (atomic, readonly) BOOL isConnected;

/**
 * Returns the local or remote host and port to which this socket is connected, or nil and 0 if not connected.
 * The host will be an IP address.
**/
@property (atomic, readonly, nullable) NSString *connectedHost;
@property (atomic, readonly) uint16_t  connectedPort;
@property (atomic, readonly, nullable) NSURL    *connectedUrl;

@property (atomic, readonly, nullable) NSString *localHost;
@property (atomic, readonly) uint16_t  localPort;

/**
 * Returns the local or remote address to which this socket is connected,
 * specified as a sockaddr structure wrapped in a NSData object.
 * 
 * @seealso connectedHost
 * @seealso connectedPort
 * @seealso localHost
 * @seealso localPort
**/
@property (atomic, readonly, nullable) NSData *connectedAddress;
@property (atomic, readonly, nullable) NSData *localAddress;

/**
 * Returns whether the socket is IPv4 or IPv6.
 * An accepting socket may be both.
**/
@property (atomic, readonly) BOOL isIPv4;
@property (atomic, readonly) BOOL isIPv6;

/**
 * Returns whether or not the socket has been secured via SSL/TLS.
 * 
 * See also the startTLS method.
**/
@property (atomic, readonly) BOOL isSecure;

#pragma mark Reading

// The readData and writeData methods won't block (they are asynchronous).
// 
// When a read is complete the socket:didReadData:withTag: delegate method is dispatched on the delegateQueue.
// When a write is complete the socket:didWriteDataWithTag: delegate method is dispatched on the delegateQueue.
// 
// You may optionally set a timeout for any read/write operation. (To not timeout, use a negative time interval.)
// If a read/write opertion times out, the corresponding "socket:shouldTimeout..." delegate method
// is called to optionally allow you to extend the timeout.
// Upon a timeout, the "socket:didDisconnectWithError:" method is called
// 
// The tag is for your convenience.
// You can use it as an array index, step number, state id, pointer, etc.

/**
 * Reads the first available bytes that become available on the socket.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
**/
- (void)readDataWithTimeout:(NSTimeInterval)timeout tag:(long)tag;

/**
 * Reads the first available bytes that become available on the socket.
 * The bytes will be appended to the given byte buffer starting at the given offset.
 * The given buffer will automatically be increased in size if needed.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * If the buffer if nil, the socket will create a buffer for you.
 * 
 * If the bufferOffset is greater than the length of the given buffer,
 * the method will do nothing, and the delegate will not be called.
 * 
 * If you pass a buffer, you must not alter it in any way while the socket is using it.
 * After completion, the data returned in socket:didReadData:withTag: will be a subset of the given buffer.
 * That is, it will reference the bytes that were appended to the given buffer via
 * the method [NSData dataWithBytesNoCopy:length:freeWhenDone:NO].
**/
- (void)readDataWithTimeout:(NSTimeInterval)timeout
					 buffer:(nullable NSMutableData *)buffer
			   bufferOffset:(NSUInteger)offset
						tag:(long)tag;

/**
 * Reads the first available bytes that become available on the socket.
 * The bytes will be appended to the given byte buffer starting at the given offset.
 * The given buffer will automatically be increased in size if needed.
 * A maximum of length bytes will be read.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * If the buffer if nil, a buffer will automatically be created for you.
 * If maxLength is zero, no length restriction is enforced.
 * 
 * If the bufferOffset is greater than the length of the given buffer,
 * the method will do nothing, and the delegate will not be called.
 * 
 * If you pass a buffer, you must not alter it in any way while the socket is using it.
 * After completion, the data returned in socket:didReadData:withTag: will be a subset of the given buffer.
 * That is, it will reference the bytes that were appended to the given buffer  via
 * the method [NSData dataWithBytesNoCopy:length:freeWhenDone:NO].
**/
- (void)readDataWithTimeout:(NSTimeInterval)timeout
                     buffer:(nullable NSMutableData *)buffer
               bufferOffset:(NSUInteger)offset
                  maxLength:(NSUInteger)length
                        tag:(long)tag;

/**
 * Reads the given number of bytes.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * 
 * If the length is 0, this method does nothing and the delegate is not called.
**/
- (void)readDataToLength:(NSUInteger)length withTimeout:(NSTimeInterval)timeout tag:(long)tag;

/**
 * Reads the given number of bytes.
 * The bytes will be appended to the given byte buffer starting at the given offset.
 * The given buffer will automatically be increased in size if needed.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * If the buffer if nil, a buffer will automatically be created for you.
 * 
 * If the length is 0, this method does nothing and the delegate is not called.
 * If the bufferOffset is greater than the length of the given buffer,
 * the method will do nothing, and the delegate will not be called.
 * 
 * If you pass a buffer, you must not alter it in any way while AsyncSocket is using it.
 * After completion, the data returned in socket:didReadData:withTag: will be a subset of the given buffer.
 * That is, it will reference the bytes that were appended to the given buffer via
 * the method [NSData dataWithBytesNoCopy:length:freeWhenDone:NO].
**/
- (void)readDataToLength:(NSUInteger)length
             withTimeout:(NSTimeInterval)timeout
                  buffer:(nullable NSMutableData *)buffer
            bufferOffset:(NSUInteger)offset
                     tag:(long)tag;

/**
 * Reads bytes until (and including) the passed "data" parameter, which acts as a separator.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * 
 * If you pass nil or zero-length data as the "data" parameter,
 * the method will do nothing (except maybe print a warning), and the delegate will not be called.
 * 
 * To read a line from the socket, use the line separator (e.g. CRLF for HTTP, see below) as the "data" parameter.
 * If you're developing your own custom protocol, be sure your separator can not occur naturally as
 * part of the data between separators.
 * For example, imagine you want to send several small documents over a socket.
 * Using CRLF as a separator is likely unwise, as a CRLF could easily exist within the documents.
 * In this particular example, it would be better to use a protocol similar to HTTP with
 * a header that includes the length of the document.
 * Also be careful that your separator cannot occur naturally as part of the encoding for a character.
 * 
 * The given data (separator) parameter should be immutable.
 * For performance reasons, the socket will retain it, not copy it.
 * So if it is immutable, don't modify it while the socket is using it.
**/
- (void)readDataToData:(NSData *)data withTimeout:(NSTimeInterval)timeout tag:(long)tag;

/**
 * Reads bytes until (and including) the passed "data" parameter, which acts as a separator.
 * The bytes will be appended to the given byte buffer starting at the given offset.
 * The given buffer will automatically be increased in size if needed.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * If the buffer if nil, a buffer will automatically be created for you.
 * 
 * If the bufferOffset is greater than the length of the given buffer,
 * the method will do nothing (except maybe print a warning), and the delegate will not be called.
 * 
 * If you pass a buffer, you must not alter it in any way while the socket is using it.
 * After completion, the data returned in socket:didReadData:withTag: will be a subset of the given buffer.
 * That is, it will reference the bytes that were appended to the given buffer via
 * the method [NSData dataWithBytesNoCopy:length:freeWhenDone:NO].
 * 
 * To read a line from the socket, use the line separator (e.g. CRLF for HTTP, see below) as the "data" parameter.
 * If you're developing your own custom protocol, be sure your separator can not occur naturally as
 * part of the data between separators.
 * For example, imagine you want to send several small documents over a socket.
 * Using CRLF as a separator is likely unwise, as a CRLF could easily exist within the documents.
 * In this particular example, it would be better to use a protocol similar to HTTP with
 * a header that includes the length of the document.
 * Also be careful that your separator cannot occur naturally as part of the encoding for a character.
 * 
 * The given data (separator) parameter should be immutable.
 * For performance reasons, the socket will retain it, not copy it.
 * So if it is immutable, don't modify it while the socket is using it.
**/
- (void)readDataToData:(NSData *)data
           withTimeout:(NSTimeInterval)timeout
                buffer:(nullable NSMutableData *)buffer
          bufferOffset:(NSUInteger)offset
                   tag:(long)tag;

/**
 * Reads bytes until (and including) the passed "data" parameter, which acts as a separator.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * 
 * If maxLength is zero, no length restriction is enforced.
 * Otherwise if maxLength bytes are read without completing the read,
 * it is treated similarly to a timeout - the socket is closed with a FMIceLinkAsyncSocketReadMaxedOutError.
 * The read will complete successfully if exactly maxLength bytes are read and the given data is found at the end.
 * 
 * If you pass nil or zero-length data as the "data" parameter,
 * the method will do nothing (except maybe print a warning), and the delegate will not be called.
 * If you pass a maxLength parameter that is less than the length of the data parameter,
 * the method will do nothing (except maybe print a warning), and the delegate will not be called.
 * 
 * To read a line from the socket, use the line separator (e.g. CRLF for HTTP, see below) as the "data" parameter.
 * If you're developing your own custom protocol, be sure your separator can not occur naturally as
 * part of the data between separators.
 * For example, imagine you want to send several small documents over a socket.
 * Using CRLF as a separator is likely unwise, as a CRLF could easily exist within the documents.
 * In this particular example, it would be better to use a protocol similar to HTTP with
 * a header that includes the length of the document.
 * Also be careful that your separator cannot occur naturally as part of the encoding for a character.
 * 
 * The given data (separator) parameter should be immutable.
 * For performance reasons, the socket will retain it, not copy it.
 * So if it is immutable, don't modify it while the socket is using it.
**/
- (void)readDataToData:(NSData *)data withTimeout:(NSTimeInterval)timeout maxLength:(NSUInteger)length tag:(long)tag;

/**
 * Reads bytes until (and including) the passed "data" parameter, which acts as a separator.
 * The bytes will be appended to the given byte buffer starting at the given offset.
 * The given buffer will automatically be increased in size if needed.
 * 
 * If the timeout value is negative, the read operation will not use a timeout.
 * If the buffer if nil, a buffer will automatically be created for you.
 * 
 * If maxLength is zero, no length restriction is enforced.
 * Otherwise if maxLength bytes are read without completing the read,
 * it is treated similarly to a timeout - the socket is closed with a FMIceLinkAsyncSocketReadMaxedOutError.
 * The read will complete successfully if exactly maxLength bytes are read and the given data is found at the end.
 * 
 * If you pass a maxLength parameter that is less than the length of the data (separator) parameter,
 * the method will do nothing (except maybe print a warning), and the delegate will not be called.
 * If the bufferOffset is greater than the length of the given buffer,
 * the method will do nothing (except maybe print a warning), and the delegate will not be called.
 * 
 * If you pass a buffer, you must not alter it in any way while the socket is using it.
 * After completion, the data returned in socket:didReadData:withTag: will be a subset of the given buffer.
 * That is, it will reference the bytes that were appended to the given buffer via
 * the method [NSData dataWithBytesNoCopy:length:freeWhenDone:NO].
 * 
 * To read a line from the socket, use the line separator (e.g. CRLF for HTTP, see below) as the "data" parameter.
 * If you're developing your own custom protocol, be sure your separator can not occur naturally as
 * part of the data between separators.
 * For example, imagine you want to send several small documents over a socket.
 * Using CRLF as a separator is likely unwise, as a CRLF could easily exist within the documents.
 * In this particular example, it would be better to use a protocol similar to HTTP with
 * a header that includes the length of the document.
 * Also be careful that your separator cannot occur naturally as part of the encoding for a character.
 * 
 * The given data (separator) parameter should be immutable.
 * For performance reasons, the socket will retain it, not copy it.
 * So if it is immutable, don't modify it while the socket is using it.
**/
- (void)readDataToData:(NSData *)data
           withTimeout:(NSTimeInterval)timeout
                buffer:(nullable NSMutableData *)buffer
          bufferOffset:(NSUInteger)offset
             maxLength:(NSUInteger)length
                   tag:(long)tag;

/**
 * Returns progress of the current read, from 0.0 to 1.0, or NaN if no current read (use isnan() to check).
 * The parameters "tag", "done" and "total" will be filled in if they aren't NULL.
**/
- (float)progressOfReadReturningTag:(nullable long *)tagPtr bytesDone:(nullable NSUInteger *)donePtr total:(nullable NSUInteger *)totalPtr;

#pragma mark Writing

/**
 * Writes data to the socket, and calls the delegate when finished.
 * 
 * If you pass in nil or zero-length data, this method does nothing and the delegate will not be called.
 * If the timeout value is negative, the write operation will not use a timeout.
 * 
 * Thread-Safety Note:
 * If the given data parameter is mutable (NSMutableData) then you MUST NOT alter the data while
 * the socket is writing it. In other words, it's not safe to alter the data until after the delegate method
 * socket:didWriteDataWithTag: is invoked signifying that this particular write operation has completed.
 * This is due to the fact that FMIceLinkAsyncSocket does NOT copy the data. It simply retains it.
 * This is for performance reasons. Often times, if NSMutableData is passed, it is because
 * a request/response was built up in memory. Copying this data adds an unwanted/unneeded overhead.
 * If you need to write data from an immutable buffer, and you need to alter the buffer before the socket
 * completes writing the bytes (which is NOT immediately after this method returns, but rather at a later time
 * when the delegate method notifies you), then you should first copy the bytes, and pass the copy to this method.
**/
- (void)writeData:(NSData *)data withTimeout:(NSTimeInterval)timeout tag:(long)tag;

/**
 * Returns progress of the current write, from 0.0 to 1.0, or NaN if no current write (use isnan() to check).
 * The parameters "tag", "done" and "total" will be filled in if they aren't NULL.
**/
- (float)progressOfWriteReturningTag:(nullable long *)tagPtr bytesDone:(nullable NSUInteger *)donePtr total:(nullable NSUInteger *)totalPtr;

#pragma mark Security

/**
 * Secures the connection using SSL/TLS.
 * 
 * This method may be called at any time, and the TLS handshake will occur after all pending reads and writes
 * are finished. This allows one the option of sending a protocol dependent StartTLS message, and queuing
 * the upgrade to TLS at the same time, without having to wait for the write to finish.
 * Any reads or writes scheduled after this method is called will occur over the secured connection.
 *
 * ==== The available TOP-LEVEL KEYS are:
 * 
 * - FMIceLinkAsyncSocketManuallyEvaluateTrust
 *     The value must be of type NSNumber, encapsulating a BOOL value.
 *     If you set this to YES, then the underlying SecureTransport system will not evaluate the SecTrustRef of the peer.
 *     Instead it will pause at the moment evaulation would typically occur,
 *     and allow us to handle the security evaluation however we see fit.
 *     So FMIceLinkAsyncSocket will invoke the delegate method socket:shouldTrustPeer: passing the SecTrustRef.
 *
 *     Note that if you set this option, then all other configuration keys are ignored.
 *     Evaluation will be completely up to you during the socket:didReceiveTrust:completionHandler: delegate method.
 *
 *     For more information on trust evaluation see:
 *     Apple's Technical Note TN2232 - HTTPS Server Trust Evaluation
 *     https://developer.apple.com/library/ios/technotes/tn2232/_index.html
 *     
 *     If unspecified, the default value is NO.
 *
 * - FMIceLinkAsyncSocketUseCFStreamForTLS (iOS only)
 *     The value must be of type NSNumber, encapsulating a BOOL value.
 *     By default FMIceLinkAsyncSocket will use the SecureTransport layer to perform encryption.
 *     This gives us more control over the security protocol (many more configuration options),
 *     plus it allows us to optimize things like sys calls and buffer allocation.
 *     
 *     However, if you absolutely must, you can instruct FMIceLinkAsyncSocket to use the old-fashioned encryption
 *     technique by going through the CFStream instead. So instead of using SecureTransport, FMIceLinkAsyncSocket
 *     will instead setup a CFRead/CFWriteStream. And then set the kCFStreamPropertySSLSettings property
 *     (via CFReadStreamSetProperty / CFWriteStreamSetProperty) and will pass the given options to this method.
 *     
 *     Thus all the other keys in the given dictionary will be ignored by FMIceLinkAsyncSocket,
 *     and will passed directly CFReadStreamSetProperty / CFWriteStreamSetProperty.
 *     For more infomation on these keys, please see the documentation for kCFStreamPropertySSLSettings.
 *
 *     If unspecified, the default value is NO.
 *
 * ==== The available CONFIGURATION KEYS are:
 *
 * - kCFStreamSSLPeerName
 *     The value must be of type NSString.
 *     It should match the name in the X.509 certificate given by the remote party.
 *     See Apple's documentation for SSLSetPeerDomainName.
 *
 * - kCFStreamSSLCertificates
 *     The value must be of type NSArray.
 *     See Apple's documentation for SSLSetCertificate.
 *
 * - kCFStreamSSLIsServer
 *     The value must be of type NSNumber, encapsulationg a BOOL value.
 *     See Apple's documentation for SSLCreateContext for iOS.
 *     This is optional for iOS. If not supplied, a NO value is the default.
 *     This is not needed for Mac OS X, and the value is ignored.
 *
 * - FMIceLinkAsyncSocketSSLPeerID
 *     The value must be of type NSData.
 *     You must set this value if you want to use TLS session resumption.
 *     See Apple's documentation for SSLSetPeerID.
 *
 * - FMIceLinkAsyncSocketSSLProtocolVersionMin
 * - FMIceLinkAsyncSocketSSLProtocolVersionMax
 *     The value(s) must be of type NSNumber, encapsulting a SSLProtocol value.
 *     See Apple's documentation for SSLSetProtocolVersionMin & SSLSetProtocolVersionMax.
 *     See also the SSLProtocol typedef.
 * 
 * - FMIceLinkAsyncSocketSSLSessionOptionFalseStart
 *     The value must be of type NSNumber, encapsulating a BOOL value.
 *     See Apple's documentation for kSSLSessionOptionFalseStart.
 * 
 * - FMIceLinkAsyncSocketSSLSessionOptionSendOneByteRecord
 *     The value must be of type NSNumber, encapsulating a BOOL value.
 *     See Apple's documentation for kSSLSessionOptionSendOneByteRecord.
 * 
 * - FMIceLinkAsyncSocketSSLCipherSuites
 *     The values must be of type NSArray.
 *     Each item within the array must be a NSNumber, encapsulating
 *     See Apple's documentation for SSLSetEnabledCiphers.
 *     See also the SSLCipherSuite typedef.
 *
 * - FMIceLinkAsyncSocketSSLDiffieHellmanParameters (Mac OS X only)
 *     The value must be of type NSData.
 *     See Apple's documentation for SSLSetDiffieHellmanParams.
 * 
 * ==== The following UNAVAILABLE KEYS are: (with throw an exception)
 * 
 * - kCFStreamSSLAllowsAnyRoot (UNAVAILABLE)
 *     You MUST use manual trust evaluation instead (see FMIceLinkAsyncSocketManuallyEvaluateTrust).
 *     Corresponding deprecated method: SSLSetAllowsAnyRoot
 * 
 * - kCFStreamSSLAllowsExpiredRoots (UNAVAILABLE)
 *     You MUST use manual trust evaluation instead (see FMIceLinkAsyncSocketManuallyEvaluateTrust).
 *     Corresponding deprecated method: SSLSetAllowsExpiredRoots
 *
 * - kCFStreamSSLAllowsExpiredCertificates (UNAVAILABLE)
 *     You MUST use manual trust evaluation instead (see FMIceLinkAsyncSocketManuallyEvaluateTrust).
 *     Corresponding deprecated method: SSLSetAllowsExpiredCerts
 *
 * - kCFStreamSSLValidatesCertificateChain (UNAVAILABLE)
 *     You MUST use manual trust evaluation instead (see FMIceLinkAsyncSocketManuallyEvaluateTrust).
 *     Corresponding deprecated method: SSLSetEnableCertVerify
 *
 * - kCFStreamSSLLevel (UNAVAILABLE)
 *     You MUST use FMIceLinkAsyncSocketSSLProtocolVersionMin & FMIceLinkAsyncSocketSSLProtocolVersionMin instead.
 *     Corresponding deprecated method: SSLSetProtocolVersionEnabled
 *
 * 
 * Please refer to Apple's documentation for corresponding SSLFunctions.
 *
 * If you pass in nil or an empty dictionary, the default settings will be used.
 * 
 * IMPORTANT SECURITY NOTE:
 * The default settings will check to make sure the remote party's certificate is signed by a
 * trusted 3rd party certificate agency (e.g. verisign) and that the certificate is not expired.
 * However it will not verify the name on the certificate unless you
 * give it a name to verify against via the kCFStreamSSLPeerName key.
 * The security implications of this are important to understand.
 * Imagine you are attempting to create a secure connection to MySecureServer.com,
 * but your socket gets directed to MaliciousServer.com because of a hacked DNS server.
 * If you simply use the default settings, and MaliciousServer.com has a valid certificate,
 * the default settings will not detect any problems since the certificate is valid.
 * To properly secure your connection in this particular scenario you
 * should set the kCFStreamSSLPeerName property to "MySecureServer.com".
 * 
 * You can also perform additional validation in socketDidSecure.
**/
- (void)startTLS:(nullable NSDictionary *)tlsSettings;

#pragma mark Advanced

/**
 * Traditionally sockets are not closed until the conversation is over.
 * However, it is technically possible for the remote enpoint to close its write stream.
 * Our socket would then be notified that there is no more data to be read,
 * but our socket would still be writeable and the remote endpoint could continue to receive our data.
 * 
 * The argument for this confusing functionality stems from the idea that a client could shut down its
 * write stream after sending a request to the server, thus notifying the server there are to be no further requests.
 * In practice, however, this technique did little to help server developers.
 * 
 * To make matters worse, from a TCP perspective there is no way to tell the difference from a read stream close
 * and a full socket close. They both result in the TCP stack receiving a FIN packet. The only way to tell
 * is by continuing to write to the socket. If it was only a read stream close, then writes will continue to work.
 * Otherwise an error will be occur shortly (when the remote end sends us a RST packet).
 * 
 * In addition to the technical challenges and confusion, many high level socket/stream API's provide
 * no support for dealing with the problem. If the read stream is closed, the API immediately declares the
 * socket to be closed, and shuts down the write stream as well. In fact, this is what Apple's CFStream API does.
 * It might sound like poor design at first, but in fact it simplifies development.
 * 
 * The vast majority of the time if the read stream is closed it's because the remote endpoint closed its socket.
 * Thus it actually makes sense to close the socket at this point.
 * And in fact this is what most networking developers want and expect to happen.
 * However, if you are writing a server that interacts with a plethora of clients,
 * you might encounter a client that uses the discouraged technique of shutting down its write stream.
 * If this is the case, you can set this property to NO,
 * and make use of the socketDidCloseReadStream delegate method.
 * 
 * The default value is YES.
**/
@property (atomic, assign, readwrite) BOOL autoDisconnectOnClosedReadStream;

/**
 * FMIceLinkAsyncSocket maintains thread safety by using an internal serial dispatch_queue.
 * In most cases, the instance creates this queue itself.
 * However, to allow for maximum flexibility, the internal queue may be passed in the init method.
 * This allows for some advanced options such as controlling socket priority via target queues.
 * However, when one begins to use target queues like this, they open the door to some specific deadlock issues.
 * 
 * For example, imagine there are 2 queues:
 * dispatch_queue_t socketQueue;
 * dispatch_queue_t socketTargetQueue;
 * 
 * If you do this (pseudo-code):
 * socketQueue.targetQueue = socketTargetQueue;
 * 
 * Then all socketQueue operations will actually get run on the given socketTargetQueue.
 * This is fine and works great in most situations.
 * But if you run code directly from within the socketTargetQueue that accesses the socket,
 * you could potentially get deadlock. Imagine the following code:
 * 
 * - (BOOL)socketHasSomething
 * {
 *     __block BOOL result = NO;
 *     dispatch_block_t block = ^{
 *         result = [self someInternalMethodToBeRunOnlyOnSocketQueue];
 *     }
 *     if (is_executing_on_queue(socketQueue))
 *         block();
 *     else
 *         dispatch_sync(socketQueue, block);
 *     
 *     return result;
 * }
 * 
 * What happens if you call this method from the socketTargetQueue? The result is deadlock.
 * This is because the FMIceLink API offers no mechanism to discover a queue's targetQueue.
 * Thus we have no idea if our socketQueue is configured with a targetQueue.
 * If we had this information, we could easily avoid deadlock.
 * But, since these API's are missing or unfeasible, you'll have to explicitly set it.
 * 
 * IF you pass a socketQueue via the init method,
 * AND you've configured the passed socketQueue with a targetQueue,
 * THEN you should pass the end queue in the target hierarchy.
 * 
 * For example, consider the following queue hierarchy:
 * socketQueue -> ipQueue -> moduleQueue
 *
 * This example demonstrates priority shaping within some server.
 * All incoming client connections from the same IP address are executed on the same target queue.
 * And all connections for a particular module are executed on the same target queue.
 * Thus, the priority of all networking for the entire module can be changed on the fly.
 * Additionally, networking traffic from a single IP cannot monopolize the module.
 * 
 * Here's how you would accomplish something like that:
 * - (dispatch_queue_t)newSocketQueueForConnectionFromAddress:(NSData *)address onSocket:(FMIceLinkAsyncSocket *)sock
 * {
 *     dispatch_queue_t socketQueue = dispatch_queue_create("", NULL);
 *     dispatch_queue_t ipQueue = [self ipQueueForAddress:address];
 *     
 *     dispatch_set_target_queue(socketQueue, ipQueue);
 *     dispatch_set_target_queue(iqQueue, moduleQueue);
 *     
 *     return socketQueue;
 * }
 * - (void)socket:(FMIceLinkAsyncSocket *)sock didAcceptNewSocket:(FMIceLinkAsyncSocket *)newSocket
 * {
 *     [clientConnections addObject:newSocket];
 *     [newSocket markSocketQueueTargetQueue:moduleQueue];
 * }
 * 
 * Note: This workaround is ONLY needed if you intend to execute code directly on the ipQueue or moduleQueue.
 * This is often NOT the case, as such queues are used solely for execution shaping.
**/
- (void)markSocketQueueTargetQueue:(dispatch_queue_t)socketQueuesPreConfiguredTargetQueue;
- (void)unmarkSocketQueueTargetQueue:(dispatch_queue_t)socketQueuesPreviouslyConfiguredTargetQueue;

/**
 * It's not thread-safe to access certain variables from outside the socket's internal queue.
 * 
 * For example, the socket file descriptor.
 * File descriptors are simply integers which reference an index in the per-process file table.
 * However, when one requests a new file descriptor (by opening a file or socket),
 * the file descriptor returned is guaranteed to be the lowest numbered unused descriptor.
 * So if we're not careful, the following could be possible:
 * 
 * - Thread A invokes a method which returns the socket's file descriptor.
 * - The socket is closed via the socket's internal queue on thread B.
 * - Thread C opens a file, and subsequently receives the file descriptor that was previously the socket's FD.
 * - Thread A is now accessing/altering the file instead of the socket.
 * 
 * In addition to this, other variables are not actually objects,
 * and thus cannot be retained/released or even autoreleased.
 * An example is the sslContext, of type SSLContextRef, which is actually a malloc'd struct.
 * 
 * Although there are internal variables that make it difficult to maintain thread-safety,
 * it is important to provide access to these variables
 * to ensure this class can be used in a wide array of environments.
 * This method helps to accomplish this by invoking the current block on the socket's internal queue.
 * The methods below can be invoked from within the block to access
 * those generally thread-unsafe internal variables in a thread-safe manner.
 * The given block will be invoked synchronously on the socket's internal queue.
 * 
 * If you save references to any protected variables and use them outside the block, you do so at your own peril.
**/
- (void)performBlock:(dispatch_block_t)block;

/**
 * These methods are only available from within the context of a performBlock: invocation.
 * See the documentation for the performBlock: method above.
 * 
 * Provides access to the socket's file descriptor(s).
 * If the socket is a server socket (is accepting incoming connections),
 * it might actually have multiple internal socket file descriptors - one for IPv4 and one for IPv6.
**/
- (int)socketFD;
- (int)socket4FD;
- (int)socket6FD;

#if TARGET_OS_IPHONE

/**
 * These methods are only available from within the context of a performBlock: invocation.
 * See the documentation for the performBlock: method above.
 * 
 * Provides access to the socket's internal CFReadStream/CFWriteStream.
 * 
 * These streams are only used as workarounds for specific iOS shortcomings:
 * 
 * - Apple has decided to keep the SecureTransport framework private is iOS.
 *   This means the only supplied way to do SSL/TLS is via CFStream or some other API layered on top of it.
 *   Thus, in order to provide SSL/TLS support on iOS we are forced to rely on CFStream,
 *   instead of the preferred and faster and more powerful SecureTransport.
 * 
 * - If a socket doesn't have backgrounding enabled, and that socket is closed while the app is backgrounded,
 *   Apple only bothers to notify us via the CFStream API.
 *   The faster and more powerful FMIceLink API isn't notified properly in this case.
 * 
**/
- (nullable CFReadStreamRef)readStream;
- (nullable CFWriteStreamRef)writeStream;

#endif

/**
 * This method is only available from within the context of a performBlock: invocation.
 * See the documentation for the performBlock: method above.
 * 
 * Provides access to the socket's SSLContext, if SSL/TLS has been started on the socket.
**/
- (nullable SSLContextRef)sslContext;

#pragma mark Utilities

/**
 * The address lookup utility used by the class.
 * This method is synchronous, so it's recommended you use it on a background thread/queue.
 * 
 * The special strings "localhost" and "loopback" return the loopback address for IPv4 and IPv6.
 * 
 * @returns
 *   A mutable array with all IPv4 and IPv6 addresses returned by getaddrinfo.
 *   The addresses are specifically for TCP connections.
 *   You can filter the addresses, if needed, using the other utility methods provided by the class.
**/
+ (nullable NSMutableArray *)lookupHost:(NSString *)host port:(uint16_t)port error:(NSError **)errPtr;

/**
 * Extracting host and port information from raw address data.
**/

+ (nullable NSString *)hostFromAddress:(NSData *)address;
+ (uint16_t)portFromAddress:(NSData *)address;

+ (BOOL)isIPv4Address:(NSData *)address;
+ (BOOL)isIPv6Address:(NSData *)address;

+ (BOOL)getHost:( NSString * __nullable * __nullable)hostPtr port:(nullable uint16_t *)portPtr fromAddress:(NSData *)address;

+ (BOOL)getHost:(NSString * __nullable * __nullable)hostPtr port:(nullable uint16_t *)portPtr family:(nullable sa_family_t *)afPtr fromAddress:(NSData *)address;

/**
 * A few common line separators, for use with the readDataToData:... methods.
**/
+ (NSData *)CRLFData;   // 0x0D0A
+ (NSData *)CRData;     // 0x0D
+ (NSData *)LFData;     // 0x0A
+ (NSData *)ZeroData;   // 0x00

@end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@protocol FMIceLinkAsyncSocketDelegate 
@optional

/**
 * This method is called immediately prior to socket:didAcceptNewSocket:.
 * It optionally allows a listening socket to specify the socketQueue for a new accepted socket.
 * If this method is not implemented, or returns NULL, the new accepted socket will create its own default queue.
 * 
 * Since you cannot autorelease a dispatch_queue,
 * this method uses the "new" prefix in its name to specify that the returned queue has been retained.
 * 
 * Thus you could do something like this in the implementation:
 * return dispatch_queue_create("MyQueue", NULL);
 * 
 * If you are placing multiple sockets on the same queue,
 * then care should be taken to increment the retain count each time this method is invoked.
 * 
 * For example, your implementation might look something like this:
 * dispatch_retain(myExistingQueue);
 * return myExistingQueue;
**/
- (nullable dispatch_queue_t)newSocketQueueForConnectionFromAddress:(NSData *)address onSocket:(FMIceLinkAsyncSocket *)sock;

/**
 * Called when a socket accepts a connection.
 * Another socket is automatically spawned to handle it.
 * 
 * You must retain the newSocket if you wish to handle the connection.
 * Otherwise the newSocket instance will be released and the spawned connection will be closed.
 * 
 * By default the new socket will have the same delegate and delegateQueue.
 * You may, of course, change this at any time.
**/
- (void)socket:(FMIceLinkAsyncSocket *)sock didAcceptNewSocket:(FMIceLinkAsyncSocket *)newSocket;

/**
 * Called when a socket connects and is ready for reading and writing.
 * The host parameter will be an IP address, not a DNS name.
**/
- (void)socket:(FMIceLinkAsyncSocket *)sock didConnectToHost:(NSString *)host port:(uint16_t)port;

/**
 * Called when a socket connects and is ready for reading and writing.
 * The host parameter will be an IP address, not a DNS name.
 **/
- (void)socket:(FMIceLinkAsyncSocket *)sock didConnectToUrl:(NSURL *)url;

/**
 * Called when a socket has completed reading the requested data into memory.
 * Not called if there is an error.
**/
- (void)socket:(FMIceLinkAsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag;

/**
 * Called when a socket has read in data, but has not yet completed the read.
 * This would occur if using readToData: or readToLength: methods.
 * It may be used to for things such as updating progress bars.
**/
- (void)socket:(FMIceLinkAsyncSocket *)sock didReadPartialDataOfLength:(NSUInteger)partialLength tag:(long)tag;

/**
 * Called when a socket has completed writing the requested data. Not called if there is an error.
**/
- (void)socket:(FMIceLinkAsyncSocket *)sock didWriteDataWithTag:(long)tag;

/**
 * Called when a socket has written some data, but has not yet completed the entire write.
 * It may be used to for things such as updating progress bars.
**/
- (void)socket:(FMIceLinkAsyncSocket *)sock didWritePartialDataOfLength:(NSUInteger)partialLength tag:(long)tag;

/**
 * Called if a read operation has reached its timeout without completing.
 * This method allows you to optionally extend the timeout.
 * If you return a positive time interval (> 0) the read's timeout will be extended by the given amount.
 * If you don't implement this method, or return a non-positive time interval ( 0) the write's timeout will be extended by the given amount.
 * If you don't implement this method, or return a non-positive time interval (<= 0) the write will timeout as usual.
 * 
 * The elapsed parameter is the sum of the original timeout, plus any additions previously added via this method.
 * The length parameter is the number of bytes that have been written so far for the write operation.
 * 
 * Note that this method may be called multiple times for a single write if you return positive numbers.
**/
- (NSTimeInterval)socket:(FMIceLinkAsyncSocket *)sock shouldTimeoutWriteWithTag:(long)tag
                                                                  elapsed:(NSTimeInterval)elapsed
                                                                bytesDone:(NSUInteger)length;

/**
 * Conditionally called if the read stream closes, but the write stream may still be writeable.
 * 
 * This delegate method is only called if autoDisconnectOnClosedReadStream has been set to NO.
 * See the discussion on the autoDisconnectOnClosedReadStream method for more information.
**/
- (void)socketDidCloseReadStream:(FMIceLinkAsyncSocket *)sock;

/**
 * Called when a socket disconnects with or without error.
 * 
 * If you call the disconnect method, and the socket wasn't already disconnected,
 * then an invocation of this delegate method will be enqueued on the delegateQueue
 * before the disconnect method returns.
 * 
 * Note: If the FMIceLinkAsyncSocket instance is deallocated while it is still connected,
 * and the delegate is not also deallocated, then this method will be invoked,
 * but the sock parameter will be nil. (It must necessarily be nil since it is no longer available.)
 * This is a generally rare, but is possible if one writes code like this:
 * 
 * asyncSocket = nil; // I'm implicitly disconnecting the socket
 * 
 * In this case it may preferrable to nil the delegate beforehand, like this:
 * 
 * asyncSocket.delegate = nil; // Don't invoke my delegate method
 * asyncSocket = nil; // I'm implicitly disconnecting the socket
 * 
 * Of course, this depends on how your state machine is configured.
**/
- (void)socketDidDisconnect:(FMIceLinkAsyncSocket *)sock withError:(nullable NSError *)err;

/**
 * Called after the socket has successfully completed SSL/TLS negotiation.
 * This method is not called unless you use the provided startTLS method.
 * 
 * If a SSL/TLS negotiation fails (invalid certificate, etc) then the socket will immediately close,
 * and the socketDidDisconnect:withError: delegate method will be called with the specific SSL error code.
**/
- (void)socketDidSecure:(FMIceLinkAsyncSocket *)sock;

/**
 * Allows a socket delegate to hook into the TLS handshake and manually validate the peer it's connecting to.
 *
 * This is only called if startTLS is invoked with options that include:
 * - FMIceLinkAsyncSocketManuallyEvaluateTrust == YES
 *
 * Typically the delegate will use SecTrustEvaluate (and related functions) to properly validate the peer.
 * 
 * Note from Apple's documentation:
 *   Because [SecTrustEvaluate] might look on the network for certificates in the certificate chain,
 *   [it] might block while attempting network access. You should never call it from your main thread;
 *   call it only from within a function running on a dispatch queue or on a separate thread.
 * 
 * Thus this method uses a completionHandler block rather than a normal return value.
 * The completionHandler block is thread-safe, and may be invoked from a background queue/thread.
 * It is safe to invoke the completionHandler block even if the socket has been closed.
**/
- (void)socket:(FMIceLinkAsyncSocket *)sock didReceiveTrust:(SecTrustRef)trust
                                    completionHandler:(void (^)(BOOL shouldTrustPeer))completionHandler;

@end
NS_ASSUME_NONNULL_END




@interface FMIceLinkPlatform : NSObject 

+ (NSObject *)instance;

@end




@interface FMIceLinkTcpSocket : FMIceLinkStreamSocket

/* static init */ + (instancetype)tcpSocketWithServer:(bool)server ipv6:(bool)ipv6 secure:(bool)secure;
- (instancetype)initWithServer:(bool)server ipv6:(bool)ipv6 secure:(bool)secure;

@end



@interface FMIceLinkUdpSocket : FMIceLinkDatagramSocket 

+ (bool)attemptDscp;
+ (void)setAttemptDscp:(bool)attemptDscp;
/* static init */ + (instancetype)udpSocketWithIPv6:(bool)ipv6;
- (instancetype)initWithIPv6:(bool)ipv6;
- (bool)ipv6;
- (bool)isClosed;
- (NSString *)localIPAddress;
- (int)localPort;
- (int)maxQueuedPackets;
- (void)setMaxQueuedPackets:(int)maxQueuedPackets;
- (bool)bindWithIPAddress:(NSString*)ipAddress port:(int)port addressInUse:(bool*)addressInUse;
- (int)sendWithBuffer:(FMIceLinkDataBuffer*)buffer ipAddress:(NSString*)ipAddress port:(int)port;
- (void)receiveAsyncWithOnSuccess:(FMIceLinkAction3 *)onSuccess onFailure:(FMIceLinkAction1 *)onFailure;
- (void)close;

@end


//
//  FMIceLinkNSLogProvider.h
//  FMIceLinkIceLinkExample-iOS
//
//  Created by Anton Venema on 2012-09-24.
//  Copyright (c) 2012 Frozen Mountain Software. All rights reserved.
//



@interface FMIceLinkNSLogProvider : FMIceLinkLogProvider

/* static init */ + (instancetype)nsLogProvider;
- (instancetype)init;
/* static init */ + (instancetype)nsLogProviderWithLogLevel:(FMIceLinkLogLevel)logLevel;
- (instancetype)initWithLogLevel:(FMIceLinkLogLevel)logLevel;

@end




@interface FMIceLinkLocalNetwork : NSObject 

+ (NSMutableArray*)getIPAddressesWithAddressTypes:(NSArray *)addressTypes;
+ (NSMutableArray*)getIPAddressesWithAddressTypes:(NSArray *)addressTypes allowPrivate:(bool)allowPrivate;
+ (NSMutableArray*)getLocalAddressesWithAddressTypes:(NSArray *)addressTypes;
+ (FMIceLinkAddressType)getAddressTypeWithIPAddress:(NSString*)ipAddress;
+ (NSMutableData*)getAddressBytesWithIPAddress:(NSString*)ipAddress;
+ (NSString*)getAddressWithAddressBytes:(NSData*)addressBytes;

@end



@interface FMIceLinkDtlsPeer : NSObject

- (int)selectedSrtpProtectionProfile;

- (NSMutableArray *)supportedSrtpProtectionProfiles;

- (NSMutableData *)getKeyingMaterial;

/* static init */ + (instancetype)dtlsPeerWithCertificate:(FMIceLinkDtlsCertificate *)certificate cipherSuites:(NSArray *)cipherSuites remoteFingerprint:(FMIceLinkDtlsFingerprint *)remoteFingerprint isServer:(bool)isServer protectionProfiles:(NSArray *)protectionProfiles onRemoteCertificate:(FMIceLinkAction1 *) onRemoteCertificate;
- (instancetype)initWithCertificate:(FMIceLinkDtlsCertificate *)certificate cipherSuites:(NSArray *)cipherSuites remoteFingerprint:(FMIceLinkDtlsFingerprint *)remoteFingerprint isServer:(bool)isServer protectionProfiles:(NSArray *)protectionProfiles onRemoteCertificate:(FMIceLinkAction1 *) onRemoteCertificate;

- (FMIceLinkError *)openWithSendCallback:(FMIceLinkAction1 *)sendCallback;
- (void)setOnDataDecrypted:(FMIceLinkAction1 *)onDataDecrypted;
- (void)setOnError:(FMIceLinkAction1 *)onError;
- (void)receiveWithPacket:(FMIceLinkDataBuffer *)packet;
- (void)sendWithPacket:(FMIceLinkDataBuffer *)packet;
- (void)close;

@end




@interface FMIceLinkDtlsClient : FMIceLinkDtlsPeer

/* static init */ + (instancetype)dtlsClientWithCertificate:(FMIceLinkDtlsCertificate *)certificate cipherSuites:(NSArray *)cipherSuites version:(FMIceLinkDtlsProtocolVersion)version remoteFingerprint:(FMIceLinkDtlsFingerprint *)remoteFingerprint protectionProfiles:(NSArray *) protectionProfiles onRemoteCertificate:(FMIceLinkAction1 *) onRemoteCertificate;
- (instancetype)initWithCertificate:(FMIceLinkDtlsCertificate *)certificate cipherSuites:(NSArray *)cipherSuites version:(FMIceLinkDtlsProtocolVersion)version remoteFingerprint:(FMIceLinkDtlsFingerprint *)remoteFingerprint protectionProfiles:(NSArray *) protectionProfiles onRemoteCertificate:(FMIceLinkAction1 *) onRemoteCertificate;

@end




@interface FMIceLinkDtlsServer : FMIceLinkDtlsPeer

/* static init */ + (instancetype)dtlsServerWithCertificate:(FMIceLinkDtlsCertificate *)certificate cipherSuites:(NSArray *)cipherSuites minVersion:(FMIceLinkDtlsProtocolVersion)minVersion maxVersion:(FMIceLinkDtlsProtocolVersion)maxVersion remoteFingerprint:(FMIceLinkDtlsFingerprint *)remoteFingerprint protectionProfiles:(NSArray *) protectionProfiles onRemoteCertificate:(FMIceLinkAction1 *) onRemoteCertificate;
- (instancetype)initWithCertificate:(FMIceLinkDtlsCertificate *)certificate cipherSuites:(NSArray *)cipherSuites minVersion:(FMIceLinkDtlsProtocolVersion)minVersion maxVersion:(FMIceLinkDtlsProtocolVersion)maxVersion remoteFingerprint:(FMIceLinkDtlsFingerprint *)remoteFingerprint protectionProfiles:(NSArray *) protectionProfiles onRemoteCertificate:(FMIceLinkAction1 *) onRemoteCertificate;

@end



@interface FMIceLinkPcmuCodec : NSObject

+ (int)decompress:(int)value;
+ (int)compress:(int)value;

@end


@interface FMIceLinkPcmaCodec : NSObject

+ (int)decompress:(int)value;
+ (int)compress:(int)value;

@end

